/*
 * array of commands (for the compilers)
 */
const pc = require('./pc');

const newParameter = (name, type, byref = false, length = 1) =>
  ({
    name,
    type,
    byref,
    length
  });

const newCommand = properties =>
  ({
    names: {
      BASIC: properties.names[0],
      Pascal: properties.names[1],
      Python: properties.names[2],
    },
    code: properties.code,
    parameters: properties.parameters || [],
    returns: properties.returns,
    type: properties.returns ? 'function' : 'procedure',
    group: properties.group,
    level: properties.level,
    description: properties.description
  });

module.exports = ([
    // 0. Turtle: relative movement
    newCommand({
        names: ['FORWARD', 'forward', 'forward'],
        code: pc.fwrd,
        parameters: [
            newParameter('n', 'integer'),
        ],
        group: 0,
        level: 0,
        description: 'Moves the Turtle forward <code>n</code> units, drawing as it goes (unless the pen is up).',
    }),
    newCommand({
        names: ['BACK', 'back', 'back'],
        code: pc.back,
        parameters: [
            newParameter('n', 'integer'),
        ],
        group: 0,
        level: 0,
        description: 'Moves the Turtle back <code>n</code> units, drawing as it goes (unless the pen is up).',
    }),
    newCommand({
        names: ['LEFT', 'left', 'left'],
        code: pc.left,
        parameters: [
            newParameter('n', 'integer'),
        ],
        group: 0,
        level: 0,
        description: 'Rotates the Turtle left by <code>n</code> degrees.',
    }),
    newCommand({
        names: ['RIGHT', 'right', 'right'],
        code: pc.rght,
        parameters: [
            newParameter('n', 'integer'),
        ],
        group: 0,
        level: 0,
        description: 'Rotates the Turtle right by <code>n</code> degrees.',
    }),
    newCommand({
        names: ['DRAWXY', 'drawxy', 'drawxy'],
        code: pc.drxy,
        parameters: [
            newParameter('x', 'integer'),
            newParameter('y', 'integer'),
        ],
        group: 0,
        level: 1,
        description: 'Moves the Turtle in a straight line to a point <code>x</code> units away along the x-axis and <code>y</code> units away along the y-axis, drawing as it goes (unless the pen is up).',
    }),
    newCommand({
        names: ['MOVEXY', 'movexy', 'movexy'],
        code: pc.mvxy,
        parameters: [
            newParameter('x', 'integer'),
            newParameter('y', 'integer'),
        ],
        group: 0,
        level: 1,
        description: 'Moves the Turtle in a straight line to a point <code>x</code> units away along the x-axis and <code>y</code> units away along the y-axis, <em>without</em> drawing (regardless of the current pen status).',
    }),
    // 1. Turtle: absolute movement
    newCommand({
        names: ['HOME', 'home', 'home'],
        code: pc.home,
        group: 1,
        level: 0,
        description: 'Moves the Turtle back to its starting position in the centre of the canvas, facing north, drawing as it goes (unless the pen is up).',
    }),
    newCommand({
        names: ['SETX', 'setx', 'setx'],
        code: pc.setx,
        parameters: [
            newParameter('x', 'integer'),
        ],
        group: 1,
        level: 0,
        description: 'Sets the Turtle&rsquo;s <code>x</code> coordinate directly (without movement or drawing on the canvas). This can also be achieved by direct assignment of the global variable <code>turtx</code>.',
    }),
    newCommand({
        names: ['SETY', 'sety', 'sety'],
        code: pc.sety,
        parameters: [
            newParameter('y', 'integer'),
        ],
        group: 1,
        level: 0,
        description: 'Sets the Turtle&rsquo;s <code>y</code> coordinate directly (without movement or drawing on the canvas). This can also be achieved by direct assignment of the global variable <code>turty</code>.',
    }),
    newCommand({
        names: ['SETXY', 'setxy', 'setxy'],
        code: pc.toxy,
        parameters: [
            newParameter('x', 'integer'),
            newParameter('y', 'integer'),
        ],
        group: 1,
        level: 0,
        description: 'Sets the Turtle&rsquo;s <code>x</code> and <code>y</code> coordinates directly (without movement or drawing on the canvas). This can also be achieved by direct assingment of the global variables <code>turtx</code> and <code>turty</code>.',
    }),
    newCommand({
        names: ['DIRECTION', 'direction', 'direction'],
        code: pc.setd,
        parameters: [
            newParameter('n', 'integer'),
        ],
        group: 1,
        level: 0,
        description: 'Sets the Turtle&rsquo;s direction to <code>n</code> degrees (0 for north, 90 for east, 180 for south, 270 for west). This can also be achieved by direct assignment of the global variable <code>turtd</code>. Note that the number of degrees in a circle (360 by default) can be changed with the <code>angles</code> command.',
    }),
    newCommand({
        names: ['TURNXY', 'turnxy', 'turnxy'],
        code: pc.turn,
        parameters: [
            newParameter('x', 'integer'),
            newParameter('y', 'integer'),
        ],
        group: 1,
        level: 1,
        description: 'Turns the Turtle to face the point <code>x</code> units away alongthe x-axis and <code>y</code> units away along the y-axis.',
    }),
    // 2. Turtle: shape drawing
    newCommand({
        names: ['CIRCLE', 'circle', 'circle'],
        code: pc.circ,
        parameters: [
            newParameter('radius', 'integer'),
        ],
        group: 2,
        level: 0,
        description: 'Draws a circle outline in the Turtle&rsquo;s current colour and thickness, of the given <code>radius</code>, centred on the Turtle&rsquo;s current location.',
    }),
    newCommand({
        names: ['BLOT', 'blot', 'blot'],
        code: pc.blot,
        parameters: [
            newParameter('radius', 'integer'),
        ],
        group: 2,
        level: 0,
        description: 'Draws a filled circle in the Turtle&rsquo;s current colour, of the given <code>radius</code>, centred on the Turtle&rsquo;s current location.',
    }),
    newCommand({
        names: ['ELLIPSE', 'ellipse', 'ellipse'],
        code: pc.elps,
        parameters: [
            newParameter('Xradius', 'integer'),
            newParameter('Yradius', 'integer'),
        ],
        group: 2,
        level: 0,
        description: 'Draws an ellipse outline in the Turtle&rsquo;s current colour and thickness, of the given <code>Xradius</code> and <code>Yradius</code>, centred on the Turtle&rsquo;s current location.',
    }),
    newCommand({
        names: ['ELLBLOT', 'ellblot', 'ellblot'],
        code: pc.eblt,
        parameters: [
            newParameter('Xradius', 'integer'),
            newParameter('Yradius', 'integer'),
        ],
        group: 2,
        level: 0,
        description: 'Draws a filled ellipse in the Turtle&rsquo;s current colour, of the given <code>Xradius</code> and <code>Yradius</code>, centred on the Turtle&rsquo;s current location.',
    }),
    newCommand({
        names: ['POLYLINE', 'polyline', 'polyline'],
        code: pc.poly,
        parameters: [
            newParameter('n', 'integer'),
        ],
        group: 2,
        level: 1,
        description: 'Draws a polygon outline in the Turtle&rsquo;s current colour and thickness, connecting the last <code>n</code> locations that the Turtle has visited.',
    }),
    newCommand({
        names: ['POLYGON', 'polygon', 'polygon'],
        code: pc.pfil,
        parameters: [
            newParameter('n', 'integer'),
        ],
        group: 2,
        level: 1,
        description: 'Draws a filled polygon in the Turtle&rsquo;s current colour and thickness, connecting the last <code>n</code> locations that the Turtle has visited.',
    }),
    newCommand({
        names: ['FORGET', 'forget', 'forget'],
        code: pc.frgt,
        parameters: [
            newParameter('n', 'integer'),
        ],
        group: 2,
        level: 1,
        description: 'Makes the Turtle &ldquo;forget&rdquo; the last <code>n</code> points it has visited. Used in conjunction with <code>polyline</code> and <code>polygon</code>.',
    }),
    newCommand({
        names: ['REMEMBER', 'remember', 'remember'],
        code: pc.rmbr,
        group: 2,
        level: 1,
        description: 'Makes the Turtle &ldquo;remember&rdquo; its current location. This is only necessary if its current location was set by a direct assignment of the global variables <code>turtx</code> and <code>turty</code>; when using the standard moving commands, the Turtle automatically remembers where it has been.',
    }),
    newCommand({
        names: ['BOX', 'box', 'box'],
        code: pc.box,
        parameters: [
            newParameter('x', 'integer'),
            newParameter('y', 'integer'),
            newParameter('colour', 'integer'),
            newParameter('border', 'boolean'),
        ],
        group: 2,
        level: 1,
        description: 'Draws a box of width <code>x</code> and height <code>y</code>, with the top left corner in the Turtle&rsquo;s current location, filled with the specified <code>colour</code>. If <code>border</code> is <code>true</code>, a border is drawn around the box in the Turtle&rsquo;s current colour and and thickness. This is intended to be used with the <code>print</code> command, to provide a box for framing text.',
    }),
    // 3. Other Turtle commands
    newCommand({
        names: ['COLOUR', 'colour', 'colour'],
        code: pc.colr,
        parameters: [
            newParameter('colour', 'integer'),
        ],
        group: 3,
        level: 0,
        description: 'Sets the <code>colour</code> of the Turtle&rsquo;s pen. Takes as an argument either an RGB value, or one of the Turtle System&rsquo;s fifty predefined colour constants (see the <b>Colours</b> tab). This can also be achieved by direct assignment of the global variable <code>turtc</code>.',
    }),
    newCommand({
        names: ['RNDCOL', 'randcol', 'randcol'],
        code: pc.rndc,
        parameters: [
            newParameter('n', 'integer'),
        ],
        group: 3,
        level: 0,
        description: 'Assigns a random colour to the Turte&rsquo;s pen, between 1 and <code>n</code> (maximum 50). The colours are taken from the Turtle System&rsquo;s fifty predefined colours, which are each assigned a number between 1 and 50 (see the <b>Colours</b> tab).',
    }),
    newCommand({
        names: ['THICKNESS', 'thickness', 'thickness'],
        code: pc.thik,
        parameters: [
            newParameter('thickness', 'integer'),
        ],
        group: 3,
        level: 0,
        description: 'Sets the <code>thickness</code> of the Turtle&rsquo;s pen (for line drawing, and outlines of circles, ellipses, boxes, and polygons). This can also be achieved by direct assignment of the global variable <code>turtt</code>.',
    }),
    newCommand({
        names: ['PENUP', 'penup', 'penup'],
        code: pc.pnup,
        group: 3,
        level: 0,
        description: 'Lifts the Turtle&rsquo;s pen, so that subsequent movement will not draw a line on the Canvas.',
    }),
    newCommand({
        names: ['PENDOWN', 'pendown', 'pendown'],
        code: pc.pndn,
        group: 3,
        level: 0,
        description: 'Lowers the Turtle&rsquo;s pen, so that subsequent movement will draw a line on the Canvas.',
    }),
    newCommand({
        names: ['OUTPUT', 'output', 'output'],
        code: pc.outp,
        parameters: [
            newParameter('clear', 'boolean'),
            newParameter('colour', 'integer'),
            newParameter('tofront', 'boolean'),
        ],
        group: 3,
        level: 1,
        description: 'Modifies the textual output. If the first argument is <code>true</code>, it clears any existing text. The second argument specifies the background colour, and the third argument is for switching the display. If the third argument is <code>true</code>, it switches to the <b>Output</b> tab, while if it is <code>false</code>, it switches to the <b>Canvas and Console</b> tab.',
    }),
    newCommand({
        names: ['CONSOLE', 'console', 'console'],
        code: pc.cons,
        parameters: [
            newParameter('clear', 'boolean'),
            newParameter('colour', 'integer'),
        ],
        group: 3,
        level: 1,
        description: 'Modifies the Console; if the first argument is <code>true</code>, it clears any existing text, while the second argument specifies the background colour.',
    }),
    newCommand({
        names: ['RGB', 'rgb', 'rgb'],
        code: pc.rgb,
        parameters: [
            newParameter('colour', 'integer'),
        ],
        returns: 'integer',
        group: 3,
        level: 2,
        description: 'Returns the RGB value of the input <code>colour</code> (an integer between 1 and 50). For example, <code>rgb(red)=255</code>.',
    }),
    newCommand({
        names: ['MIXCOLS', 'mixcols', 'mixcols'],
        code: pc.mixc,
        parameters: [
            newParameter('colour1', 'integer'),
            newParameter('colour1', 'integer'),
            newParameter('proportion1', 'integer'),
            newParameter('proportion2', 'integer'),
        ],
        returns: 'integer',
        group: 3,
        level: 2,
        description: 'Mixes the given colours in the given proportions.',
    }),
    newCommand({
        names: ['NEWTURTLE', 'newturtle', 'newturtle'],
        code: pc.newt,
        parameters: [
            newParameter('array', 'integer', true, 5),
        ],
        group: 3,
        level: 2,
        description: 'Points the Turtle to a custom array in memory (this must be an array of five integers, corresponding to the Turtle&rsquo;s five properties, <code>turtx</code>, <code>turty</code>, <code>turtd</code>, <code>turtt</code>, and <code>turtc</code>). Use repeatedly to simulate multiple Turtles.',
    }),
    newCommand({
        names: ['OLDTURTLE', 'oldturtle', 'oldturtle'],
        code: pc.oldt,
        group: 3,
        level: 2,
        description: 'Points the Turtle back to the default (built-in) array in memory. Use in conjunction with <code>newturtle</code>.',
    }),
    // 4. Canvas operations
    newCommand({
        names: ['UPDATE', 'update', 'update'],
        code: pc.udat,
        group: 4,
        level: 0,
        description: 'Makes the Machine update the Canvas, and continue updating with all subsequent drawing commands. Used in conjunction with <em>noupdate</em>.',
    }),
    newCommand({
        names: ['NOUPDATE', 'noupdate', 'noupdate'],
        code: pc.ndat,
        group: 4,
        level: 0,
        description: 'Makes the Machine refrain from updating the Canvas when executing all subsequent drawing commands, until <em>update</em> is called. Use this to create smooth animations, by queueing up several drawing commands to execute simultaneously.',
    }),
    newCommand({
        names: ['BLANK', 'blank', 'blank'],
        code: pc.blnk,
        parameters: [
            newParameter('colour', 'integer'),
        ],
        group: 4,
        level: 0,
        description: 'Blanks the entire Canvas with the specified <code>colour</code>.',
    }),
    newCommand({
        names: ['CANVAS', 'canvas', 'canvas'],
        code: pc.canv,
        parameters: [
            newParameter('x1', 'integer'),
            newParameter('y1', 'integer'),
            newParameter('x2', 'integer'),
            newParameter('y2', 'integer'),
        ],
        group: 4,
        level: 1,
        description: 'Sets the top left Canvas coordinate to <code>(x1,y1)</code>, and the Canvas width and height to <code>x2</code> and <code>y2</code> respectively. Note that the width and height fix the number of virtual points on the Canvas, not the number of actual pixels.',
    }),
    newCommand({
        names: ['RESOLUTION', 'resolution', 'resolution'],
        code: pc.reso,
        parameters: [
            newParameter('x', 'integer'),
            newParameter('y', 'integer'),
        ],
        group: 4,
        level: 1,
        description: 'Sets the Canvas resolution, i.e. the number of actual pixels in the <code>x</code> and <code>y</code> dimensions. To be used in conjunction with the <code>canvas</code> command, typically to set the number of actual pixels equal to the number of virtual points on the Canvas.',
    }),
    newCommand({
        names: ['ANGLES', 'angles', 'angles'],
        code: pc.angl,
        parameters: [
            newParameter('degrees', 'integer'),
        ],
        group: 4,
        level: 1,
        description: 'Sets the number of <code>degrees</code> in a circle (360 by default).',
    }),
    newCommand({
        names: ['PIXSET', 'pixset', 'pixset'],
        code: pc.pixs,
        parameters: [
            newParameter('x', 'integer'),
            newParameter('y', 'integer'),
            newParameter('colour', 'integer'),
        ],
        group: 4,
        level: 2,
        description: 'Sets the <code>colour</code> at point <code>(x,y)</code>.',
    }),
    newCommand({
        names: ['PIXCOL', 'pixcol', 'pixcol'],
        code: pc.pixc,
        parameters: [
            newParameter('x', 'integer'),
            newParameter('y', 'integer'),
        ],
        returns: 'integer',
        group: 4,
        level: 2,
        description: 'Returns the RGB value of the colour at point <code>(x,y)</code>.',
    }),
    newCommand({
        names: ['RECOLOUR', 'recolour', 'recolour'],
        code: pc.rcol,
        parameters: [
            newParameter('x', 'integer'),
            newParameter('y', 'integer'),
            newParameter('colour', 'integer'),
        ],
        group: 4,
        level: 2,
        description: 'Floods the Canvas with the specified <code>colour</code>, starting at point <code>(x,y)</code>, until reaching any different colour.',
    }),
    newCommand({
        names: ['FILL', 'fill', 'fill'],
        code: pc.fill,
        parameters: [
            newParameter('x', 'integer'),
            newParameter('y', 'integer'),
            newParameter('colour', 'integer'),
            newParameter('boundary', 'integer'),
        ],
        group: 4,
        level: 2,
        description: 'Floods the Canvas with the specified <code>colour</code>, starting at point <code>(x,y)</code>, until reaching the <code>boundary</code> colour.',
    }),
    // 5. General arithmetic functions
    newCommand({
        names: ['INC', 'inc', 'inc'],
        code: pc.incr,
        parameters: [
            newParameter('variable', 'integer', true),
        ],
        group: 5,
        level: 0,
        description: 'Increments the specified <code>variable</code> by 1.',
    }),
    newCommand({
        names: ['DEC', 'dec', 'dec'],
        code: pc.decr,
        parameters: [
            newParameter('variable', 'integer', true),
        ],
        group: 5,
        level: 0,
        description: 'Decrements the specified <code>variable</code> by 1.',
    }),
    newCommand({
        names: ['ABS', 'abs', 'abs'],
        code: pc.abs,
        parameters: [
            newParameter('n', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 0,
        description: 'Returns the absolute value of <code>n</code>, i.e. <code>n</code> if positive, <code>-n</code> if negative.',
    }),
    newCommand({
        names: ['SIGN', 'sign', 'sign'],
        code: pc.sign,
        parameters: [
            newParameter('a', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 1,
        description: 'Returns <code>+1</code> if <code>a</code> is positive, <code>-1</code> if <code>a</code> is negative, and <code>0</code> otherwise.',
    }),
    newCommand({
        names: ['MAX', 'max', 'max'],
        code: pc.maxi,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 1,
        description: 'Returns the maximum of <code>a</code> and <code>b</code>.',
    }),
    newCommand({
        names: ['MIN', 'min', 'min'],
        code: pc.mini,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 1,
        description: 'Returns the minimum of <code>a</code> and <code>b</code>.',
    }),
    newCommand({
        names: ['SQR', 'sqrt', 'sqrt'],
        code: pc.sqrt,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 1,
        description: 'Returns <code>&radic;a</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['HYPOT', 'hypot', 'hypot'],
        code: pc.hyp,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 1,
        description: 'Returns <code>&radic;(a<sup>2</sup>+b<sup>2</sup>)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['RND', null, null],
        code: pc.rand,
        parameters: [
            newParameter('n', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 1,
        description: 'Returns a random integer between 1 and <code>n</code>.',
    }),
    newCommand({
        names: [null, 'random', null],
        code: pc.rand,
        parameters: [
            newParameter('n', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 1,
        description: 'Returns a random non-negative integer less than <code>n</code>.',
    }),
    newCommand({
        names: [null, null, 'randint'],
        code: pc.rand,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 1,
        description: 'Returns a random integer between <code>a</code> and <code>b</code>.',
    }),
    newCommand({
        names: ['POWER', 'power', 'power'],
        code: pc.powr,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('c', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 2,
        description: 'Returns <code>(a/b)<sup>c</sup></code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['ROOT', 'root', 'root'],
        code: pc.root,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('c', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 2,
        description: 'Returns <code><sup>c</sup>&radic;(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['DIVMULT', 'divmult', 'divmult'],
        code: pc.divm,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 5,
        level: 2,
        description: 'Returns <code>a/b</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['MAXINT', 'maxint', 'maxint'],
        code: pc.mxin,
        returns: 'integer',
        group: 5,
        level: 2,
        description: 'Returns the maximum integer that the Machine can deal with (2<sup>31</sup>-1).',
    }),
    // 6. Trig / exp / log functions
    newCommand({
        names: ['SIN', 'sin', 'sin'],
        code: pc.sin,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 1,
        description: 'Returns <code>sin(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['COS', 'cos', 'cos'],
        code: pc.cos,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 1,
        description: 'Returns <code>cos(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['TAN', 'tan', 'tan'],
        code: pc.tan,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 1,
        description: 'Returns <code>tan(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['PI', 'pi', 'pi'],
        code: pc.pi,
        parameters: [
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 1,
        description: 'Returns the value of Pi, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['EXP', 'exp', 'exp'],
        code: pc.exp,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 1,
        description: 'Returns <code>a<sup>b</sup></code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['LN', 'ln', 'ln'],
        code: pc.ln,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 1,
        description: 'Returns <code>ln(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['ANTILOG', 'antilog', 'antilog'],
        code: pc.alog,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 2,
        description: 'Returns <code>antilog<sub>10</sub>(a/b)</code> - i.e. <code>10<sup>a/b</sub></code> - multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['LOG10', 'log10', 'log10'],
        code: pc.log,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 2,
        description: 'Returns <code>log<sub>10</sub>(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['ASN', 'arcsin', 'asin'],
        code: pc.asin,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 2,
        description: 'Returns <code>arcsin(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['ACS', 'arccos', 'acos'],
        code: pc.acos,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 2,
        description: 'Returns <code>arccos(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    newCommand({
        names: ['ATN', 'arctan', 'atan'],
        code: pc.atan,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('mult', 'integer'),
        ],
        returns: 'integer',
        group: 6,
        level: 2,
        description: 'Returns <code>arctan(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers.',
    }),
    // 7. String operations
    newCommand({
        names: ['WRITE', 'write', 'write'],
        code: pc.text,
        parameters: [
            newParameter('string', 'string'),
        ],
        group: 7,
        level: 0,
        description: 'Writes the input <code>string</code> to the console and textual output area of the System.',
    }),
    newCommand({
        names: ['WRITELN', 'writeln', 'writeline'],
        code: pc.texl,
        parameters: [
            newParameter('string', 'string'),
        ],
        group: 7,
        level: 0,
        description: 'Writes the input <code>string</code> to the console and textual output area of the System, followed by a line break.',
    }),
    newCommand({
        names: ['PRINT', 'print', 'print'],
        code: pc.prnt,
        parameters: [
            newParameter('string', 'string'),
            newParameter('font', 'integer'),
            newParameter('size', 'integer'),
        ],
        group: 7,
        level: 0,
        description: 'Prints the input <code>string</code> in the Turtle&rsquo;s current colour and at the Turtle&rsquo;s current location, in the specified <code>font</code> and <code>size</code>. Can be used in conjunction with the <code>box</code> drawing command. For a list of available fonts, see the <b>Constants</b> tab.',
    }),
    newCommand({
        names: ['UCASE$', 'uppercase', 'upper'],
        code: pc.uppc,
        parameters: [
            newParameter('string', 'string'),
        ],
        returns: 'string',
        group: 7,
        level: 1,
        description: 'Returns the input <code>string</code> as all uppercase.',
    }),
    newCommand({
        names: ['LCASE$', 'lowercase', 'lower'],
        code: pc.lowc,
        parameters: [
            newParameter('string', 'string'),
        ],
        returns: 'string',
        group: 7,
        level: 1,
        description: 'Returns the input <code>string</code> as all lowercase.',
    }),
    newCommand({
        names: ['LEN', 'length', 'len'],
        code: pc.slen,
        parameters: [
            newParameter('string', 'string'),
        ],
        returns: 'integer',
        group: 7,
        level: 1,
        description: 'Returns the length of the input <code>string</code> (i.e. the number of characters).',
    }),
    newCommand({
        names: ['DEL$', 'delete', null],
        code: pc.dels,
        parameters: [
            newParameter('string', 'string'),
            newParameter('index', 'integer'),
            newParameter('length', 'integer'),
        ],
        returns: 'string',
        group: 7,
        level: 2,
        description: 'Returns the input <code>string</code> with some characters removed, starting at the given <code>index</code> and of the specified <code>length</code>.',
    }),
    newCommand({
        names: ['LEFT$', null, null],
        code: pc.lefs,
        parameters: [
            newParameter('string', 'string'),
            newParameter('length', 'integer'),
        ],
        returns: 'string',
        group: 7,
        level: 2,
        description: 'Returns a copy of the characters in the input <code>string</code>, starting on the left and of the specified <code>length</code>.',
    }),
    newCommand({
        names: ['MID$', 'copy', 'copy'],
        code: pc.copy,
        parameters: [
            newParameter('string', 'string'),
            newParameter('index', 'integer'),
            newParameter('length', 'integer'),
        ],
        returns: 'string',
        group: 7,
        level: 2,
        description: 'Returns a copy of the characters in the input <code>string</code>, starting at the given <code>index</code> and of the specified <code>length</code>.',
    }),
    newCommand({
        names: ['RIGHT$', null, null],
        code: pc.rgts,
        parameters: [
            newParameter('string', 'string'),
            newParameter('length', 'integer'),
        ],
        returns: 'string',
        group: 7,
        level: 2,
        description: 'Returns a copy of the characters in the input <code>string</code>, starting on the right and of the specified <code>length</code>.',
    }),
    newCommand({
        names: ['INS$', null, 'insert'],
        code: pc.inss,
        parameters: [
            newParameter('string', 'string'),
            newParameter('index', 'integer'),
            newParameter('substr', 'string'),
        ],
        returns: 'string',
        group: 7,
        level: 2,
        description: 'Returns the input <code>string</code> with the specified <code>substring</code> inserted at the given <code>index</code>.',
    }),
    newCommand({
        names: [null, 'insert', null],
        code: pc.inss,
        parameters: [
            newParameter('substr', 'string'),
            newParameter('string', 'string'),
            newParameter('index', 'integer'),
        ],
        returns: 'string',
        group: 7,
        level: 2,
        description: 'Returns the input <code>string</code> with the specified <code>substring</code> inserted at the given <code>index</code>.',
    }),
    newCommand({
        names: ['REPLACE', 'replace', 'replace'],
        code: pc.repl,
        parameters: [
            newParameter('string', 'string'),
            newParameter('substr', 'string'),
            newParameter('replace', 'string'),
            newParameter('n', 'integer'),
        ],
        returns: 'string',
        group: 7,
        level: 2,
        description: 'Returns the input <code>string</code> with up to <code>n</code> occurences of <code>substring</code> replaced by <code>replace</code>. Set <code>n</code> equal to <code>0</code> to replace every occurence.',
    }),
    newCommand({
        names: ['INSTR', null, 'find'],
        code: pc.poss,
        parameters: [
            newParameter('string', 'string'),
            newParameter('substr', 'string'),
        ],
        returns: 'integer',
        group: 7,
        level: 2,
        description: 'Searches for the input <code>substring</code> within the given <code>string</code>; returns the index of the first character if found, 0 otherwise.',
    }),
    newCommand({
        names: [null, 'pos', null],
        code: pc.poss,
        parameters: [
            newParameter('substr', 'string'),
            newParameter('string', 'string'),
        ],
        returns: 'integer',
        group: 7,
        level: 2,
        description: 'Searches for the input <code>substring</code> within the given <code>string</code>; returns the index of the first character if found, 0 otherwise.',
    }),
    // 8. Type conversion routines
    newCommand({
        names: ['STR$', 'string', 'string'],
        code: pc.itos,
        parameters: [
            newParameter('n', 'integer'),
        ],
        returns: 'string',
        group: 8,
        level: 0,
        description: 'Returns the integer <code>n</code> as a string, e.g. <code>str(12)=\'12\'</code>.',
    }),
    newCommand({
        names: ['VAL', 'val', 'integer'],
        code: pc.svd0,
        parameters: [
            newParameter('string', 'string'),
        ],
        returns: 'integer',
        group: 8,
        level: 0,
        description: 'Returns the input <code>string</code> as an integer, e.g. <code>val(\'12\')=12</code>. Returns <code>0</code> if the string cannot be converted (i.e. if it is not an integer string).',
    }),
    newCommand({
        names: ['VALDEF', 'valdef', 'intdef'],
        code: pc.sval,
        parameters: [
            newParameter('string', 'string'),
            newParameter('default', 'string'),
        ],
        returns: 'integer',
        group: 8,
        level: 0,
        description: 'Returns the input <code>string</code> as an integer, e.g. <code>val(\'12\')=12</code>. Returns the specified <code>default</code> value if the string cannot be converted (i.e. if it is not an integer string).',
    }),
    newCommand({
        names: ['QSTR$', 'qstr', 'qstr'],
        code: pc.qtos,
        parameters: [
            newParameter('a', 'integer'),
            newParameter('b', 'integer'),
            newParameter('decplaces', 'integer'),
        ],
        returns: 'string',
        group: 8,
        level: 1,
        description: 'Returns the value of <code>a/b</code> to the specified number of decimal places, as a decimal string, e.g. <code>qstr(2,3,4)=\'0.6667\'</code>.',
    }),
    newCommand({
        names: ['QVAL', 'qval', 'qval'],
        code: pc.qval,
        parameters: [
            newParameter('string', 'string'),
            newParameter('mult', 'integer'),
            newParameter('default', 'integer'),
        ],
        returns: 'integer',
        group: 8,
        level: 1,
        description: 'Returns the input decimal <code>string</code> as an integer, multiplied by <code>mult</code> and rounded to the nearest integer, e.g. <code>qval(\'1.5\',10)=15</code>. Returns the specified <code>default</code> value if the string cannot be converted (i.e. if it is not a decimal string).',
    }),
    newCommand({
        names: ['CHR$', 'chr', 'chr'],
        code: pc.null,
        parameters: [
            newParameter('n', 'integer'),
        ],
        returns: 'char',
        group: 8,
        level: 2,
        description: 'Returns the character with ASCII character code <code>n</code>, e.g. <code>chr(65)=\'A\'</code>.',
    }),
    newCommand({
        names: ['ASC', 'ord', 'ord'],
        code: pc.null,
        parameters: [
            newParameter('char', 'char'),
        ],
        returns: 'integer',
        group: 8,
        level: 2,
        description: 'Returns the ASCII code of the input character <code>char</code> (which must be a string of length 1), e.g. <code>ord(\'A\')=65</code>.',
    }),
    newCommand({
        names: ['BOOLINT', 'boolint', null],
        code: pc.null,
        parameters: [
            newParameter('boolean', 'boolean'),
        ],
        returns: 'integer',
        group: 8,
        level: 2,
        description: 'Returns the input <code>boolean</code> as an integer (-1 for <code>true</code>, 0 for <code>false</code>).',
    }),
    newCommand({
        names: [null, null, 'boolint'],
        code: pc.bool,
        parameters: [
            newParameter('boolean', 'boolean'),
        ],
        returns: 'integer',
        group: 8,
        level: 2,
        description: 'Returns the input <code>boolean</code> as an integer (1 for <code>true</code>, 0 for <code>false</code>).',
    }),
    newCommand({
        names: ['HEX$', 'hexstr', 'hex'],
        code: pc.hexs,
        parameters: [
            newParameter('n', 'integer'),
            newParameter('minlength', 'integer'),
        ],
        group: 8,
        level: 2,
        description: 'Returns a string representation of integer <code>n</code> in hexadecimal format, padded with leading zeros as up to <code>minlength</code>, e.g. <code>hexstr(255,6)=\'0000FF\'</code>.',
    }),
    // 9. Input and timing routines
    newCommand({
        names: ['PAUSE', 'pause', 'pause'],
        code: pc.wait,
        parameters: [
            newParameter('m', 'integer'),
        ],
        group: 9,
        level: 0,
        description: 'Makes the Turtle Machine wait <code>m</code> milliseconds before performing the next operation. This is useful for controlling the speed of animations.',
    }),
    newCommand({
        names: ['GETLINE$', 'readln', 'readline'],
        code: pc.rdln,
        returns: 'string',
        group: 9,
        level: 0,
        description: 'Waits for the RETURN key to be pressed, then returns everything in the keybuffer up to (and not including) the new line character.',
    }),
    newCommand({
        names: ['INPUT$', null, 'input'],
        code: pc.ilin,
        parameters: [
            newParameter('prompt', 'string'),
        ],
        returns: 'string',
        group: 9,
        level: 0,
        description: 'Gives an input prompt, then returns the input when the RETURN key is pressed (using the keybuffer).',
    }),
    newCommand({
        names: ['CURSOR', 'cursor', 'cursor'],
        code: pc.curs,
        parameters: [
            newParameter('cursorcode', 'integer'),
        ],
        group: 9,
        level: 1,
        description: 'Sets which cursor to display (1-15) when the mouse pointer is over the canvas. 0 hides the cursor; any value outside the range 0-15 resets the default cursor. For a list of available cursors, see the <b>Cursors</b> tab.',
    }),
    newCommand({
        names: ['KEYECHO', 'keyecho', 'keyecho'],
        code: pc.kech,
        parameters: [
            newParameter('on', 'boolean'),
        ],
        group: 9,
        level: 1,
        description: 'Turns the keyboard echo to the console on (<code>true</code>) or off (<code>false</code>).',
    }),
    newCommand({
        names: ['DETECT', 'detect', 'detect'],
        code: pc.tdet,
        parameters: [
            newParameter('keycode', 'integer'),
            newParameter('m', 'integer'),
        ],
        returns: 'boolean',
        group: 9,
        level: 1,
        description: 'Waits a maximum of <code>m</code> milliseconds for the key with the specified <code>keycode</code> to be pressed; returns <code>true</code> if pressed (and stops waiting), <code>false</code> otherwise.',
    }),
    newCommand({
        names: ['GET$', 'read', 'read'],
        code: pc.read,
        parameters: [
            newParameter('n', 'integer'),
        ],
        returns: 'string',
        group: 9,
        level: 1,
        description: 'Returns the first <code>n</code> characters from the keybuffer as a string.',
    }),
    newCommand({
        names: ['TIME', 'time', 'time'],
        code: pc.time,
        returns: 'integer',
        group: 9,
        level: 1,
        description: 'Returns the time (in milliseconds) since the program began.',
    }),
    newCommand({
        names: ['TIMESET', 'timeset', 'timeset'],
        code: pc.tset,
        parameters: [
            newParameter('m', 'integer'),
        ],
        group: 9,
        level: 1,
        description: 'Artificially sets the time since the program began to <code>m</code> milliseconds.',
    }),
    newCommand({
        names: ['RESET', 'reset', 'reset'],
        code: pc.iclr,
        parameters: [
            newParameter('?input', 'integer'),
        ],
        group: 9,
        level: 2,
        description: 'Resets the specified <code>?input</code> (<code>?mousex</code>, <code>?mousey</code>, <code>?click</code>, etc.) to its initial value (i.e. -1).',
    }),
    newCommand({
        names: ['KEYSTATUS', 'keystatus', 'keystatus'],
        code: pc.inpt,
        parameters: [
            newParameter('keycode', 'integer'),
        ],
        returns: 'integer',
        group: 9,
        level: 2,
        description: 'Returns the <code>?kshift</code> value for the most recent press of the key with the specified <code>keycode</code>.',
    }),
    newCommand({
        names: ['KEYBUFFER', 'keybuffer', 'keybuffer'],
        code: pc.bufr,
        parameters: [
            newParameter('n', 'integer'),
        ],
        group: 9,
        level: 2,
        description: 'Creates a new custom keybuffer of length <code>n</code>. A keybuffer of length 32 is available by default; use this command if you need a larger buffer.',
    }),
    // 10. Turtle Machine monitoring
    newCommand({
        names: ['HALT', 'halt', 'halt'],
        code: pc.halt,
        group: 10,
        level: 0,
        description: 'Halts the program.',
    }),
    newCommand({
        names: ['TRACE', 'trace', 'trace'],
        code: pc.trac,
        parameters: [
            newParameter('on', 'boolean'),
        ],
        group: 10,
        level: 2,
        description: 'Turns the PCode trace facility on (<code>true</code>) or off (<code>false</code>).',
    }),
    newCommand({
        names: ['WATCH', 'watch', 'watch'],
        code: pc.memw,
        parameters: [
            newParameter('address', 'integer'),
        ],
        group: 10,
        level: 2,
        description: 'Sets an <code>address</code> in memory for the trace facility to watch.',
    }),
    newCommand({
        names: ['DUMP', 'dump', 'dump'],
        code: pc.dump,
        group: 10,
        level: 2,
        description: '&ldquo;Dumps&rdquo; the current memory state into the display in the memory tab.',
    }),
    newCommand({
        names: ['HEAPRESET', 'heapreset', 'heapreset'],
        code: pc.hrst,
        group: 10,
        level: 2,
        description: 'Resets the memory heap to the initial global value.',
    })
]);
