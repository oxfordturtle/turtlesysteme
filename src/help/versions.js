/*
Text for the versions tab.
*/
import { element } from '../tools.js'

export default element('div', { content: [
  element('h3', { content: 'The HTML5 Canvas API' }),
  element('p', { content: 'The <em>Online Turtle System</em> uses the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">HTML5 Canvas API</a> for rendering the <em>Turtle Graphics</em> output of your programs. Because of the inherent nature of this API, it has not been possible to maintain complete consistency in the visual output of your programs between the downloadable and online systems. The following unavoidable differences remain:' }),
  element('ul', {
    content: [
      element('li', { content: `<b>Anti-aliasing</b> The HTML5 Canvas API makes its images appear smoother at the edges using a technique called "anti-aliasing". This means, for example, that when you draw a red blot on the Canvas, the pixels immediately surrounding that blot will be filled in using a semi-transparent red of the same shade. The downloadable <i>Turtle System</i> does not do this, giving your shapes sharper and more visibly "pixelated" edges. The most likely practical effect this difference will make to your programs concerns animations. To give the appearance of a red ball moving against a white background, for example, you need to draw a red blot, pause for a moment, then draw a white blot on top of it (to "blot it out"), immediately drawing another red blot in a slightly different position. To achieve this effect in the <i>Online Turtle System</i>, the white blot needs to be slightly <em>larger</em> than the red blot. If it is not, the semi-transparent red pixels around the edges of your red ball will not be blotted out, and you will see a kind of "vapour trail" as the ball moves across the screen.` }),
      element('li', { content: `<b>Line drawing</b> A Canvas coordinate corresponds to the top left corner of a square pixel. A horizontal or vertical line from one coordinate to another is thus conceptually centered <em>in between</em> two pixels. If the thickness of the line is even, this causes no difficulty, as the same number of pixels can be filled in on either side. If the thickness of the line is odd, however, it is less obvious what should be done. The downloadable <i>Turtle System</i> fills in an extra pixel either to the right of or below the coordinate line, meaning that horizontal and vertical lines of odd-numbered thickness are centred half a pixel to the right or below their even-numbered counterparts. The HTML5 Canvas API, however, keeps lines of odd-numbered thickness exactly centred, giving the appearance of "half" pixels on either side using anti-aliasing (i.e. an extra pixel is filled in on <em>both</em> sides, but using a semi-transparent colour). At the default (very high) resolution, this will not make any noticeable difference to your programs. At lower resolutions, however, where each pixel is a visible square on the Canvas, the difference can be quite striking. To mitigate this, the <i>Online Turtle System</i> artificially doubles the resolution of the Canvas when it is set to anything below 60 in either dimension (this setting can be changed or turned off entirely in the options tab). The effect of this is to eliminate any lines of odd-numbered thickness, since the actual output thickness will always be multiplied by 2. For an illustration of the problem this is designed to solve, you may like to disable this option, and then run the <i>Snake (classic game)</i> example program.` }),
      element('li', { content: '<b>Text underlining</b> The HTML5 Canvas API does not support underlined text. Consequently attempts to print underlined text to the Canvas in the <i>Online Turtle System</i> will result in normal text being printed instead.' })
    ]
  })
] })
