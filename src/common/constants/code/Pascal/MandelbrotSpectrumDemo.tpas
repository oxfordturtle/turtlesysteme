PROGRAM MandelbrotSpectrumDemo;
CONST maxcol = 40;
      spectrum = 7;
VAR xcentre, ycentre: integer;
    xstart, xfinish, ystart, yfinish: integer;
    a, b, x, y: integer;
    iterations, temp: integer;
    scale, pixels: integer;
    spectcol: array[0..spectrum] of integer;
    boundary: array[0..spectrum] of integer;

  Procedure startprompt;
  Begin
    output(true, cream, true);
    keyecho(false);
    writeln('MANDELBROT SET DISPLAY PROGRAM');
    writeln('');
    write('Select Whole set, or Zoom on mini "lake" at -0.1592,-1.0330 (W/Z)');
    repeat
    until (abs(?key) = \w) or (abs(?key) = \z);
    writeln(chr(abs(?key)));
    if abs(?key) = \w then
      begin
        xcentre := -500000;
        ycentre := 0
      end
    else
      begin
        xcentre := -159200;
        ycentre := -1033000
      end;
    writeln('');
    if ycentre = 0 then
      write('Select Fast/Medium/Slow, giving resolution 300/750/1500: (F/M/S) ')
    else
      write('Select Fast/Medium/Slow, giving resolution 300/600/1200: (F/M/S) ');
    repeat
    until (abs(?key) = \f) or (abs(?key) = \m) or (abs(?key) = \s);
    writeln(chr(abs(?key)));
    if ycentre = 0 then
      begin
        if abs(?key) = \f then
          scale := 100
        else
        if abs(?key) = \m then
          scale := 250
        else
          scale := 500;
        pixels := scale * 3
      end
    else
      begin
        if abs(?key) = \f then
          scale := 10000
        else
        if abs(?key) = \m then
          scale := 20000
        else
          scale := 40000;
        pixels := scale / 100 * 3
      end;
    output(false, white, false)
  End;

  Procedure colsetup;
  Var n: integer;
  Begin
    spectcol[0] := violet;
    spectcol[1] := blue;
    spectcol[2] := cyan;
    spectcol[3] := lime;
    spectcol[4] := yellow;
    spectcol[5] := orange;
    spectcol[6] := red;
    spectcol[7] := violet;
    for n := 0 to spectrum do
      boundary[n] := divmult(maxcol, spectrum, n)
  End;

  Function mixcolour(n: integer): integer;
  Var col1, col2: integer;
      mix1, mix2: integer;
  Begin
    col2 := 0;
    repeat
      inc(col2)
    until (boundary[col2] >= n) or (col2 = spectrum);
    col1 := col2 - 1;
    result := mixcols(spectcol[col1], spectcol[col2], boundary[col2] - n, n - boundary[col1])
  End;

BEGIN
  startprompt;
  colsetup;
  xstart := divmult(xcentre, 1000000, scale) - pixels / 2;
  ystart := divmult(ycentre, 1000000, scale) - pixels / 2;
  xfinish := xstart + pixels - 1;
  yfinish := ystart + pixels - 1;
  writeln('Mandelbrot will be plotted over the following real range:');
  write(qstr(xstart, scale, 4) + ' < x < ' + qstr(xfinish, scale, 4) + '    ');
  writeln(qstr(ystart, scale, 4) + ' < y < ' + qstr(yfinish, scale, 4));
  writeln('Scaling factor: ' + str(scale) + '    Image resolution: ' + str(pixels) + 'x' + str(pixels));
  canvas(xstart, ystart, pixels, pixels);
  resolution(pixels, pixels);
  timeset(0);
  for a := xstart to xfinish do
    begin
      noupdate;
      for b := ystart to yfinish do
        begin
          x := a;
          y := b;
          iterations := 0;
          while (hypot(x, y, 1) < 2 * scale) and (iterations <= maxcol) do
            begin
              temp := divmult(x + y, scale, x - y);
              y := divmult(2 * x, scale, y) + b;
              x := temp + a;
              inc(iterations)
            end;
          if iterations > maxcol then
            pixset(a, b, black)
          else
            pixset(a, b, mixcolour(iterations))
        end;
      update
    end;
  writeln('Time taken: ' + qstr(time, 1000, 1) + ' seconds.')
END.
