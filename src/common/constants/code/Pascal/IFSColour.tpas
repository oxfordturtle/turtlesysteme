PROGRAM IFSColour;
CONST maxmappings = 4;
VAR xleft, xright, ytop, ybottom: integer;
    scaledown, mappings: integer;
    gridscale, gridthick: integer;
    xl, xr, yt, yb, gt: integer;
    coeffdiv: integer;
    mapxx, mapxy, mapxc: array[1..maxmappings] of integer;
    mapyx, mapyy, mapyc: array[1..maxmappings] of integer;
    count: integer;

  Procedure setsierpinski;
  Begin
    xleft := 0;
    xright := 999;
    ytop := 0;
    ybottom := 999;
    scaledown := 2;
    mappings := 3;
    gridscale := 5;
    gridthick := 64;
    coeffdiv := 100;
    mapxx[1] := 50;
    mapyx[1] := 0;
    mapxy[1] := 0;
    mapyy[1] := 50;
    mapxc[1] := 250;
    mapyc[1] := 0;
    mapxx[2] := 50;
    mapyx[2] := 0;
    mapxy[2] := 0;
    mapyy[2] := 50;
    mapxc[2] := 0;
    mapyc[2] := 500;
    mapxx[3] := 50;
    mapyx[3] := 0;
    mapxy[3] := 0;
    mapyy[3] := 50;
    mapxc[3] := 500;
    mapyc[3] := 500
  End;

  Procedure setbarnsley;
  Begin
    xleft := -236;
    xright := 263;
    ytop := 1;
    ybottom := 1000;
    scaledown := 2;
    mappings := 4;
    gridscale := 5;
    gridthick := 32;
    coeffdiv := 100;
    mapxx[1] := 0;
    mapyx[1] := 0;
    mapxy[1] := 0;
    mapyy[1] := 16;
    mapxc[1] := 0;
    mapyc[1] := 0;
    mapxx[2] := 85;
    mapyx[2] := -4;
    mapxy[2] := 4;
    mapyy[2] := 85;
    mapxc[2] := 0;
    mapyc[2] := 160;
    mapxx[3] := 20;
    mapyx[3] := 23;
    mapxy[3] := -26;
    mapyy[3] := 22;
    mapxc[3] := 0;
    mapyc[3] := 160;
    mapxx[4] := -15;
    mapyx[4] := 26;
    mapxy[4] := 28;
    mapyy[4] := 24;
    mapxc[4] := 0;
    mapyc[4] := 44
  End;

  Procedure setdragon;
  Begin
    xleft := 0;
    xright := 999;
    ytop := 0;
    ybottom := 999;
    scaledown := 4;
    mappings := 3;
    gridscale := 5;
    gridthick := 64;
    coeffdiv := 1000;
    mapxx[1] := 0;
    mapyx[1] := -577;
    mapxy[1] := 577;
    mapyy[1] := 0;
    mapxc[1] := 95;
    mapyc[1] := 589;
    mapxx[2] := 0;
    mapyx[2] := -577;
    mapxy[2] := 577;
    mapyy[2] := 0;
    mapxc[2] := 441;
    mapyc[2] := 789;
    mapxx[3] := 0;
    mapyx[3] := -577;
    mapxy[3] := 577;
    mapyy[3] := 0;
    mapxc[3] := 95;
    mapyc[3] := 989
  End;

  Procedure startprompt;
  Begin
    output(true, cream, true);
    keyecho(false);
    writeln('ITERATED FUNCTIONS ON COLOURED BACKGROUND');
    writeln('');
    write('Select Sierpinski, Barnsley fern, or Dragon curve? (S/B/D) ');
    keyecho(false);
    repeat
    until (abs(?key) = \s) or (abs(?key) = \b) or (abs(?key) = \d);
    writeln(chr(abs(?key)));
    if abs(?key) = \s then
      begin
        writeln('Sierpinski mappings will be used');
        setsierpinski
      end
    else
    if abs(?key) = \b then
      begin
        writeln('Barnsley fern mappings will be used');
        setbarnsley
      end
    else
      begin
        writeln('Dragon curve mappings will be used');
        setdragon
      end;
    output(false, white, false)
  End;

  Procedure setscale;
  Var i: integer;
  Begin
    xl := xleft / scaledown;
    xr := xright / scaledown;
    yt := ytop / scaledown;
    yb := ybottom / scaledown;
    for i := 1 to mappings do
      begin
        mapxc[i] := mapxc[i] / scaledown;
        mapyc[i] := mapyc[i] / scaledown
      end;
    gt := gridthick / scaledown
  End;

  Procedure background;
  Var x, y: integer;
      cx, cy, r, g, b: integer;
  Begin
    thickness(gt);
    colour(darkgrey);
    for x := 1 to gridscale - 1 do
      begin
        setxy(xl + divmult(xr - xl, gridscale, x), yt);
        drawxy(0, yb - yt)
      end;
    for y := 1 to gridscale - 1 do
      begin
        setxy(xl + gt / 2, yt + divmult(yb - yt, gridscale, y));
        drawxy(xr - xl - gt, 0)
      end;
    colour(black);
    setxy(xl, yt);
    drawxy(xr - xl, 0);
    drawxy(0, yb - yt);
    drawxy(xl - xr, 0);
    drawxy(0, yt - yb);
    for x := 0 to gridscale - 1 do
      for y := 0 to gridscale - 1 do
        begin
          cx := xl + divmult(xr - xl, gridscale, x) + gt;
          cy := yt + divmult(yb - yt, gridscale, y) + gt;
          r := divmult(255, gridscale - 1, x);
          g := divmult(255, gridscale - 1, y);
          b := divmult(255, 2 * gridscale - 2, 2 * gridscale - 2 - x - y);
          recolour(cx, cy, (r * #10000) + (g * #100) + (b * #1))
        end
  End;

  Procedure map(a, x, y: integer; var newx, newy: integer);
  Begin
    newx := divmult(x, coeffdiv, mapxx[a]) + divmult(y, coeffdiv, mapxy[a]) + mapxc[a];
    newy := divmult(x, coeffdiv, mapyx[a]) + divmult(y, coeffdiv, mapyy[a]) + mapyc[a]
  End;

  Procedure domap(mapnum: integer);
  Var x, y, newx, newy: integer;
  Begin
    noupdate;
    for y := yt to yb do
       for x := xl to xr do
         begin
           map(mapnum, x, y, newx, newy);
           pixset(newx, newy, pixcol(x, y))
         end;
    update
  End;

BEGIN
  startprompt;
  setscale;
  canvas(xl, yt, xr - xl + 1, yb - yt + 1);
  resolution(xr - xl + 1, yb - yt + 1);
  background;
  for count := 1 to mappings do
    domap(count)
END.
