PROGRAM NoughtsAndCrosses;
CONST cross = 33;
      nought = 2;
VAR board: array[0..11] of integer;
    numgames: integer;
    randfirst: boolean;
    i, column, row: integer;

  Procedure doblot(x, y, col: integer);
  Begin
    setxy(x * 250 + 250, y * 250 + 175);
    colour(rgb(col));
    blot(70)
  End;

  Procedure copy(var fromarray, toarray: array of integer);
  Var i: integer;
  Begin
    for i := 0 to fromarray.length - 1 do
      toarray[i] := fromarray[i]
  End;

  Procedure evaluate(var b1: array of integer; jm, depth: integer);
  Var mover: integer;
      replyscore: integer;
      b2: array[0..11] of integer;
      m: integer;
  Begin
    mover := cross + nought - jm;
    replyscore := -2;
    b1[9] := 0;
    b1[10] := -1;
    b1[11] := depth;
    if (((b1[0] = jm) and (b1[1] = jm) and (b1[2] = jm))
        or ((b1[3] = jm) and (b1[4] = jm) and (b1[5] = jm))
        or ((b1[6] = jm) and (b1[7] = jm) and (b1[8] = jm))
        or ((b1[0] = jm) and (b1[3] = jm) and (b1[6] = jm))
        or ((b1[1] = jm) and (b1[4] = jm) and (b1[7] = jm))
        or ((b1[2] = jm) and (b1[5] = jm) and (b1[8] = jm))
        or ((b1[0] = jm) and (b1[4] = jm) and (b1[8] = jm))
        or ((b1[2] = jm) and (b1[4] = jm) and (b1[6] = jm))) then
      b1[9] := 1
    else
      begin
        m := 0;
        repeat
          if (b1[m] = 0) then
            begin
              copy(b1, b2);
              b2[m] := mover;
              evaluate(b2, mover, depth + 1);
              if (b2[9] > replyscore) then
                begin
                  replyscore := b2[9];
                  b1[10] := m;
                  b1[11] := b2[11]
                end
            end;
          m := m + 1
        until (m > 8) or (replyscore > 0);
        if (replyscore <> -2) then
         b1[9] := -replyscore
      end
  End;

BEGIN
  numgames := 0;
  repeat
    numgames := numgames + 1;
    randfirst := (numgames mod 2 = 1);
    blank(lightgreen);
    thickness(10);
    colour(black);
    setxy(375, 50);
    drawxy(0, 750);
    setxy(625, 50);
    drawxy(0, 750);
    setxy(125, 300);
    drawxy(750, 0);
    setxy(125, 550);
    drawxy(750, 0);
    for i := 0 to 10 do
      board[i] := 0;
    board[11] := 8;
    repeat
      if (randfirst) then
        begin
          board[10] := random(9);
          randfirst := false
        end
      else
        begin
          cursor(2);
          repeat
            repeat
              repeat
              until ?lmouse > 0;
              pause(200)
            until ((?clickx >= 125) and (?clickx <= 875) and (?clicky >= 50) and (?clicky <= 800));
            column := (?clickx - 125) div 250;
            row := (?clicky - 50) div 250
          until board[column + row * 3] = 0;
          doblot(column, row, cross);
          board[column + row * 3] := cross;
          cursor(11);
          evaluate(board, cross, 0)
        end;
      if (board[10] <> -1) then
        begin
          doblot(board[10] mod 3, board[10] div 3, nought);
          board[board[10]] := nought
        end
    until (board[11] <= 1);
    setxy(350, 850);
    colour(black);
    if (board[9] = 0) then
      print('  Draw!  ', 4, 60)
    else
      print('  I win!  ', 4, 60);
    pause(2500)
  until (1 <> 1)
END.
