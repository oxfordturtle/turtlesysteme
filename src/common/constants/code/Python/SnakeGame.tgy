# SnakeGame

snakecolour: int = purple
applecolour: int = green
boardsize: int = 30
snakelength: int = 2
crash: bool = False

def newapple():
  x: int = randint(0, boardsize - 1)
  y: int = randint(0, boardsize - 1)
  while pixcol(x, y) == snakecolour:
    x = randint(0, boardsize - 1)
    y = randint(0, boardsize - 1)
  pixset(x, y, applecolour)

canvas(0,0,boardsize, boardsize)
resolution(boardsize, boardsize)
angles(4)
blank(lightblue)
cursor(0)
colour(snakecolour)
thickness(1)
penup()
forward(1)
newapple()
while not crash:
  noupdate()
  if (abs(?key) == \up) and (turtd != 2):
    direction(0)
  if (abs(?key) == \right) and (turtd != 3):
    direction(1)
  if (abs(?key) == \down) and (turtd != 0):
    direction(2)
  if (abs(?key) == \left) and (turtd != 1):
    direction(3)
  forward(1)
  if (turtx < 0) or (turtx >= boardsize) or (turty < 0) or (turty >= boardsize):
    crash=True
  if pixcol(turtx, turty) == snakecolour:
    crash=True
  if pixcol(turtx, turty) == applecolour:
    snakelength = snakelength + 1
    pixset(turtx, turty, snakecolour)
    newapple()
  colour(lightblue)
  polyline(snakelength + 2)
  colour(snakecolour)
  polyline(snakelength)
  update()
  pause(250 - (snakelength * 3))
resolution(1000, 1000)
blank(lilac)
setxy(boardsize // 4, 2 * boardsize // 5)
print('Score ' + str(snakelength - 2), 20, 100)
