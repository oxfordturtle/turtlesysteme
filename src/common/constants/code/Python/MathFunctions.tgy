# MathFunctions

decimals: int = 4
denominator: int = 1000000
a: int
b: int

def show(s: str, n: int):
  writeline(s + '(' + str(a) + ' / ' + str(b) + ') = ' + qstr(n, denominator, decimals))

def selectab():
  global a, b
  a = randint(100, 999)
  b = randint(100, 999)

output(-1, white, -1)
writeline('This program selects two random numbers a and b, in the')
writeline('range 100-999, and then outputs various mathematical')
writeline('functions of the fraction a/b. The results are expressed')
writeline('to ' + str(decimals) + ' decimal places, and a denominator of ' + str(denominator) + ' is')
writeline('used in the calculations to provide precision, even')
writeline('though the Turtle functions strictly operate only on')
writeline('integers and produce integer results.')
writeline('')
selectab()
writeline('a = ' + str(a) + '; b = ' + str(b))
writeline('a / b = ' + str(a) + ' / ' + str(b) + ' = ' + qstr(a, b, decimals))
writeline('')
show('square', power(a, b, 2, denominator))
show('square root', root(a, b, 2, denominator))
show('cube', power(a, b, 3, denominator))
show('cube root', root(a, b, 3, denominator))
writeline('')
show('hypot', hypot(a, b, denominator))
show('calculated hypot', sqrt(a * a + b * b, denominator))
writeline('')
show('sin', sin(a, b, denominator))
show('cos', cos(a, b, denominator))
show('tan', tan(a, b, denominator))
writeline('')
show('ln', ln(a, b, denominator))
if divmult(a, b, 1000) + ln(denominator, 1, 1000) > ln(maxint(), 1, 1000):
  writeline('EXP(' + str(a) + ' / ' + str(b) + ') would give numerical overflow, because')
  writeline('the result * ' + str(denominator) + ' would be greater than ' + str(maxint()))
else:
  show('exp', exp(a, b, denominator))
show('log10', log10(a, b, denominator))
if divmult(a, b, 1000) + log10(denominator, 1, 1000) > log10(maxint(), 1, 1000):
  writeline('ANTILOG(' + str(a) + ' / ' + str(b) + ') would give numerical overflow, because')
  writeline('the result * ' + str(denominator) + ' would be greater than ' + str(maxint()))
else:
  show('antilog', antilog(a, b, denominator))
writeline('')
if a > b:
  writeline('ARCCOS and ARCSIN are not defined for ' + str(a) + ' / ' + str(b) + ' = ' + qstr(a, b, decimals))
else:
  show('arccos', acos(a, b, denominator))
  show('arcsin', asin(a, b, denominator))
show('arctan', atan(a, b, denominator))
