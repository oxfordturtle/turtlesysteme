# Launch

earthradius: int = 6371000 # m
earthGM: int = 398600442 # km3 / s2 * 1000
initdirection: int = 2000 # seconds of arc
initthrust: int = 20000 # milliN per kg
thrusttime: int = 500
angleprecision: int = 1296000 # seconds of arc
x: int
y: int
d: int
xvel: int
yvel: int
thrust: int
xthrust: int
ythrust: int
gravity: int
xgravity: int
ygravity: int
xacc: int
yacc: int
dist: int
prevdist: int
prevdiff: int
t: int

def drawrocket():
  noupdate()
  blank(black)
  colour(teal)
  setxy(0, 0)
  blot(earthradius / 1000)
  setxy(x / 1000, y / 1000)
  direction(d)
  thickness(4)
  colour(silver)
  forward(200)
  back(200)
  if (thrust > 0):
    thickness(8)
    colour(yellow)
    back(200)
    forward(200)
  update()

def report():
  writeln('')
  writeln('TIME = ' + str(t))
  writeln(' Xposition = ' + str(x) + ' metres')
  writeln(' Yposition = ' + str(y) + ' metres')
  writeln(' Height = ' + qstr(dist - earthradius, 1000, 2) + ' km')
  writeln(' Direction = ' + qstr(d, 3600, 1) + ' degrees')
  writeln(' Thrust = ' + qstr(thrust, 1000, 1) + ' newtons per kg')
  writeln('  Xthrust = ' + qstr(xthrust, 1000, 1) + ' newtons per kg')
  writeln('  Ythrust = ' + qstr(ythrust, 1000, 1) + ' newtons per kg')
  writeln(' Gravity = ' + qstr(gravity, 1000, 1) + ' newtons per kg')
  writeln('  Xgravity = ' + qstr(xgravity, 1000, 1) + ' newtons per kg')
  writeln('  Ygravity = ' + qstr(ygravity, 1000, 1) + ' newtons per kg')
  writeln(' Xvelocity = ' + qstr(xvel, 1000, 1) + ' metres per s')
  writeln(' Yvelocity = ' + qstr(yvel, 1000, 1) + ' metres per s')

canvas(-10000, -10000, 20000, 20000)
angles(angleprecision)
x = 0
y = -earthradius # metres
xvel = 0
yvel = 0
d = initdirection
t = 0
prevdiff = 1 # so first apogee will report
thrust = initthrust
while (earthradius < dist) and (dist < 40000000):
  drawrocket()
  prevdist = dist
  dist = hypot(x, y ,1)
  if ((dist - prevdist) * prevdiff <= 0):
    report()
  prevdiff = dist - prevdist
  gravity = divmult(earthGM, divmult(dist, 1000000, dist), 1000)
  xgravity = divmult(gravity, dist, -x)
  ygravity = divmult(gravity, dist, -y)
  xthrust = sin(d, 1, thrust)
  ythrust = -cos(d, 1, thrust)
  xvel = xvel + xgravity + xthrust
  yvel = yvel + ygravity + ythrust
  x = x + xvel / 1000
  y = y + yvel / 1000
  # report()
  if (yvel > 0):
    d = angleprecision / 2 - arctan(xvel, yvel, 1)
  else:
    d = arctan(xvel, -yvel, 1)
  t = t + 1
  if (t == thrusttime):
    thrust = 0
if (dist < earthradius):
  colour(yellow)
  for explosion in range(100, 200, 1):
    blot(explosion)
    pause(3)
  colour(black)
  blot(200)
