!function(e){var t={};function o(n){if(t[n])return t[n].exports;var c=t[n]={i:n,l:!1,exports:{}};return e[n].call(c.exports,c,c.exports,o),c.l=!0,c.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var c in e)o.d(n,c,function(t){return e[t]}.bind(null,c));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=31)}([function(e,t,o){"use strict";o.d(t,"i",function(){return c}),o.d(t,"c",function(){return a}),o.d(t,"a",function(){return r}),o.d(t,"e",function(){return i}),o.d(t,"b",function(){return s}),o.d(t,"d",function(){return l}),o.d(t,"f",function(){return d}),o.d(t,"h",function(){return h}),o.d(t,"g",function(){return u}),o.d(t,"j",function(){return b});var n=o(2);const c=(e,t,o=!1,n=1)=>({name:e,type:t,byref:o,length:n}),a=e=>({names:{BASIC:e.names[0],Pascal:e.names[1],Python:e.names[2]},code:e.code,parameters:e.parameters||[],returns:e.returns,type:e.returns?"function":"procedure",category:e.category,level:e.level,description:e.description}),r=(e,t,o)=>({index:e,title:t,expressions:o}),i=(e,t)=>({names:{BASIC:e[0],Pascal:e[1],Python:e[2]},level:t}),s=(e,t,o,c)=>({index:e,names:{BASIC:t.toUpperCase(),Pascal:t,Python:t},type:"integer",value:o,hex:{BASIC:`&${Object(n.d)(o.toString(16))}`,Pascal:`$${Object(n.d)(o.toString(16))}`,Python:`0x${Object(n.d)(o.toString(16))}`},css:`#${Object(n.d)(o.toString(16))}`,dark:c}),l=(e,t,o)=>({index:e,name:t,css:o}),d=(e,t,o)=>({index:e,name:t,css:o}),h=(e,t)=>({names:{BASIC:e.toUpperCase(),Pascal:e,Python:e},value:t}),u=(e,t,o)=>({index:e,title:t,examples:o}),b=(e,t,o)=>({code:e,args:t,str:o})},function(e,t,o){"use strict";o.r(t),o.d(t,"pcodes",function(){return c}),o.d(t,"pc",function(){return a});var n=o(0);const c=[Object(n.j)(0,0,"NULL"),Object(n.j)(1,0,"DUPL"),Object(n.j)(2,0,"SWAP"),Object(n.j)(3,0,"ROTA"),Object(n.j)(4,0,"INCR"),Object(n.j)(5,0,"DECR"),void 0,void 0,Object(n.j)(8,0,"NOT"),Object(n.j)(9,0,"AND"),Object(n.j)(10,0,"OR"),Object(n.j)(11,0,"XOR"),void 0,void 0,void 0,void 0,Object(n.j)(16,0,"NEG"),Object(n.j)(17,0,"ABS"),Object(n.j)(18,0,"SIGN"),Object(n.j)(19,0,"RAND"),void 0,void 0,void 0,void 0,Object(n.j)(24,0,"PLUS"),Object(n.j)(25,0,"SUBT"),Object(n.j)(26,0,"MULT"),Object(n.j)(27,0,"DIVR"),Object(n.j)(28,0,"DIV"),Object(n.j)(29,0,"MOD"),void 0,void 0,Object(n.j)(32,0,"DIVM"),Object(n.j)(33,0,"SQRT"),Object(n.j)(34,0,"HYP"),Object(n.j)(35,0,"ROOT"),Object(n.j)(36,0,"POWR"),Object(n.j)(37,0,"LOG"),Object(n.j)(38,0,"ALOG"),Object(n.j)(39,0,"LN"),Object(n.j)(40,0,"EXP"),Object(n.j)(41,0,"SIN"),Object(n.j)(42,0,"COS"),Object(n.j)(43,0,"TAN"),Object(n.j)(44,0,"ASIN"),Object(n.j)(45,0,"ACOS"),Object(n.j)(46,0,"ATAN"),Object(n.j)(47,0,"PI"),Object(n.j)(48,0,"CTOS"),Object(n.j)(49,0,"ITOS"),Object(n.j)(50,0,"HEXS"),Object(n.j)(51,0,"SVAL"),Object(n.j)(52,0,"QTOS"),Object(n.j)(53,0,"QVAL"),Object(n.j)(54,0,"SCAT"),Object(n.j)(55,0,"SLEN"),Object(n.j)(56,0,"CASE"),Object(n.j)(57,0,"COPY"),Object(n.j)(58,0,"DELS"),Object(n.j)(59,0,"INSS"),Object(n.j)(60,0,"POSS"),Object(n.j)(61,0,"REPL"),void 0,void 0,Object(n.j)(64,0,"EQAL"),Object(n.j)(65,0,"NOEQ"),Object(n.j)(66,0,"LESS"),Object(n.j)(67,0,"MORE"),Object(n.j)(68,0,"LSEQ"),Object(n.j)(69,0,"MREQ"),Object(n.j)(70,0,"MAXI"),Object(n.j)(71,0,"MINI"),Object(n.j)(72,0,"SEQL"),Object(n.j)(73,0,"SNEQ"),Object(n.j)(74,0,"SLES"),Object(n.j)(75,0,"SMOR"),Object(n.j)(76,0,"SLEQ"),Object(n.j)(77,0,"SMEQ"),Object(n.j)(78,0,"SMAX"),Object(n.j)(79,0,"SMIN"),Object(n.j)(80,1,"LDIN"),Object(n.j)(81,1,"LDVG"),Object(n.j)(82,2,"LDVV"),Object(n.j)(83,2,"LDVR"),Object(n.j)(84,1,"LDAG"),Object(n.j)(85,2,"LDAV"),void 0,Object(n.j)(87,-1,"LSTR"),Object(n.j)(88,0,"LDMT"),void 0,void 0,void 0,void 0,void 0,void 0,void 0,Object(n.j)(96,2,"ZERO"),Object(n.j)(97,1,"STVG"),Object(n.j)(98,2,"STVV"),Object(n.j)(99,2,"STVR"),void 0,void 0,void 0,void 0,Object(n.j)(104,0,"STMT"),void 0,void 0,void 0,void 0,void 0,void 0,void 0,Object(n.j)(112,0,"LPTR"),Object(n.j)(113,0,"SPTR"),Object(n.j)(114,0,"CPTR"),Object(n.j)(115,0,"ZPTR"),void 0,void 0,void 0,void 0,Object(n.j)(120,0,"TEST"),Object(n.j)(121,0,"CSTR"),void 0,void 0,void 0,void 0,void 0,void 0,Object(n.j)(128,1,"JUMP"),Object(n.j)(129,1,"IFNO"),Object(n.j)(130,0,"HALT"),void 0,void 0,void 0,void 0,void 0,Object(n.j)(136,1,"SUBR"),Object(n.j)(137,0,"RETN"),void 0,void 0,Object(n.j)(140,1,"PSSR"),Object(n.j)(141,0,"PLSR"),Object(n.j)(142,0,"PSRJ"),Object(n.j)(143,0,"PLRJ"),Object(n.j)(144,2,"MEMC"),Object(n.j)(145,1,"MEMR"),Object(n.j)(146,0,"HFIX"),Object(n.j)(147,0,"HCLR"),Object(n.j)(148,0,"HRST"),void 0,void 0,void 0,Object(n.j)(152,-2,"NEWT"),Object(n.j)(153,-2,"OLDT"),Object(n.j)(154,-2,"RNDC"),Object(n.j)(155,-2,"TEXL"),Object(n.j)(156,-2,"UPPC"),Object(n.j)(157,-2,"LOWC"),Object(n.j)(158,-2,"LEFS"),Object(n.j)(159,-2,"RGTS"),Object(n.j)(160,0,"PNUP"),Object(n.j)(161,0,"PNDN"),Object(n.j)(162,0,"UDAT"),Object(n.j)(163,0,"NDAT"),Object(n.j)(164,0,"KECH"),void 0,Object(n.j)(166,0,"OUTP"),Object(n.j)(167,0,"CONS"),Object(n.j)(168,0,"TRAC"),Object(n.j)(169,0,"MEMW"),Object(n.j)(170,0,"DUMP"),Object(n.j)(171,-2,"SVD0"),Object(n.j)(172,-2,"BOOL"),Object(n.j)(173,-2,"ILIN"),void 0,void 0,Object(n.j)(176,0,"TIME"),Object(n.j)(177,0,"TSET"),Object(n.j)(178,0,"WAIT"),Object(n.j)(179,0,"TDET"),void 0,void 0,void 0,void 0,Object(n.j)(184,0,"INPT"),Object(n.j)(185,0,"ICLR"),Object(n.j)(186,0,"BUFR"),Object(n.j)(187,0,"READ"),Object(n.j)(188,0,"RDLN"),Object(n.j)(189,0,"PRNT"),Object(n.j)(190,0,"TEXT"),Object(n.j)(191,0,"NEWL"),Object(n.j)(192,0,"FDIR"),Object(n.j)(193,0,"OPEN"),Object(n.j)(194,0,"CLOS"),Object(n.j)(195,0,"FPTR"),Object(n.j)(196,0,"FBEG"),Object(n.j)(197,0,"EOF"),Object(n.j)(198,0,"FRDS"),Object(n.j)(199,0,"FRLN"),Object(n.j)(200,0,"FWRS"),Object(n.j)(201,0,"FWNL"),void 0,void 0,void 0,void 0,void 0,void 0,Object(n.j)(208,0,"CANV"),Object(n.j)(209,0,"RESO"),Object(n.j)(210,0,"PIXC"),Object(n.j)(211,0,"PIXS"),Object(n.j)(212,0,"ANGL"),Object(n.j)(213,0,"CURS"),void 0,void 0,Object(n.j)(216,0,"HOME"),Object(n.j)(217,0,"SETX"),Object(n.j)(218,0,"SETY"),Object(n.j)(219,0,"SETD"),Object(n.j)(220,0,"THIK"),Object(n.j)(221,0,"COLR"),Object(n.j)(222,0,"RGB"),Object(n.j)(223,0,"MIXC"),Object(n.j)(224,0,"TOXY"),Object(n.j)(225,0,"MVXY"),Object(n.j)(226,0,"DRXY"),Object(n.j)(227,0,"FWRD"),Object(n.j)(228,0,"BACK"),Object(n.j)(229,0,"LEFT"),Object(n.j)(230,0,"RGHT"),Object(n.j)(231,0,"TURN"),void 0,void 0,void 0,void 0,Object(n.j)(236,0,"RMBR"),Object(n.j)(237,0,"FRGT"),void 0,void 0,Object(n.j)(240,0,"POLY"),Object(n.j)(241,0,"PFIL"),Object(n.j)(242,0,"CIRC"),Object(n.j)(243,0,"BLOT"),Object(n.j)(244,0,"ELPS"),Object(n.j)(245,0,"EBLT"),Object(n.j)(246,0,"BOX"),void 0,Object(n.j)(248,0,"BLNK"),void 0,void 0,void 0,Object(n.j)(252,0,"RCOL"),Object(n.j)(253,0,"FILL"),void 0,Object(n.j)(255,0,"MXIN")],a=c.filter(e=>void 0!==e).reduce((e,t)=>(e[t.str.toLowerCase()]=t.code,e),{})},function(e,t,o){"use strict";o.d(t,"a",function(){return n}),o.d(t,"c",function(){return c}),o.d(t,"d",function(){return a}),o.d(t,"f",function(){return r}),o.d(t,"e",function(){return i}),o.d(t,"b",function(){return s});const n=(e,t={})=>{const o=document.createElement(e);return Object.keys(t).forEach(e=>{switch(e){case"classes":t.classes.forEach(e=>o.classList.add(e));break;case"content":"string"==typeof t.content?o.innerHTML=t.content:t.content.forEach(e=>{"string"==typeof e?o.appendChild(document.createTextNode(e)):o.appendChild(e)});break;case"value":o.value=t.value;break;case"on":t.on.forEach(e=>{o.addEventListener(e.type,e.callback)});break;default:o.setAttribute(e,t[e])}}),o},c=e=>`#${a(e.toString(16))}`,a=e=>e.length<6?a(`0${e}`):e,r=(e,t)=>n("div",{classes:["tsx-tabs",e],content:[h(t),b(t)]}),i=e=>{l(document.querySelector(`[data-target="${e}"]`)),l(document.getElementById(e))},s=({url:e,success:t,error:o})=>{const n=new window.XMLHttpRequest;n.onreadystatechange=(()=>{4===n.readyState&&(200===n.status?t(n.responseText):o(n.status))}),n.open("GET",e),n.send()},l=e=>{if(e){Array.from(e.parentElement.children).forEach(e=>e.classList.remove("active")),e.classList.add("active")}},d=e=>n("a",{classes:e.active?["tsx-tab","active"]:["tsx-tab"],content:e.label,"data-target":e.label.replace(/ /g,""),on:[{type:"click",callback:e=>{l(e.currentTarget),l(document.getElementById(e.currentTarget.getAttribute("data-target")))}}]}),h=e=>n("nav",{classes:["tsx-tab-list"],content:e.map(d)}),u=e=>n("div",{classes:e.active?["tsx-tab-pane","active"]:["tsx-tab-pane"],content:e.content,id:e.label.replace(/ /g,"")}),b=e=>n("div",{classes:["tsx-tab-panes"],content:e.map(u)})},function(e,t,o){e.exports.highlight=((e,t)=>i(e,t).map(s).join("")),e.exports.compile=((e,t)=>{const o=c(e,t),i=a(o,t);console.log(i);const s=r(i,t);return console.log(s),{usage:n(o,i.slice(1),t),pcode:s}});const n=o(15),c=o(16),a=o(23),r=o(27),i=o(14),s=e=>`<span class="tsx-${e.type}">${e.content}</span>`},function(e,t,o){"use strict";var n=o(2),c=o(5),a=o(8),r=o(3),i=o(1);const s=(e,t)=>{P.addEventListener(e,t)},l=(e,t)=>{P.removeEventListener(e,t)},d=()=>P.getBoundingClientRect(),h=(e,t)=>{P.width=e,P.height=t},u=e=>{const t=e<0||e>15?1:e;P.style.cursor=c.cursors[t].css},b=(e,t,o,a)=>{S.textBaseline="top",S.fillStyle=Object(n.c)(e.c),S.font=`${a}pt ${c.fonts[15&o].css}`,(16&o)>0&&(S.font=`bold ${S.font}`),(32&o)>0&&(S.font=`italic ${S.font}`),S.fillText(t,e.x,e.y)},p=(e,t,o)=>{S.beginPath(),S.moveTo(e.x,e.y),S.lineTo(t,o),S.lineCap="round",S.lineWidth=e.t,S.strokeStyle=Object(n.c)(e.c),S.stroke()},g=(e,t,o)=>{S.beginPath(),t.forEach((e,t)=>{0===t?S.moveTo(e[0],e[1]):S.lineTo(e[0],e[1])}),o?(S.closePath(),S.fillStyle=Object(n.c)(e.c),S.fill()):(S.lineCap="round",S.lineWidth=e.t,S.strokeStyle=Object(n.c)(e.c),S.stroke())},m=(e,t,o,c)=>{S.beginPath(),t===o?S.arc(e.x,e.y,t,0,2*Math.PI,!1):(S.save(),S.translate(e.x-t,e.y-o),S.scale(t,o),S.arc(1,1,1,0,2*Math.PI,!1),S.restore()),c?(S.fillStyle=Object(n.c)(e.c),S.fill()):(S.lineWidth=e.t,S.strokeStyle=Object(n.c)(e.c),S.stroke())},f=(e,t,o,c,a)=>{S.beginPath(),S.moveTo(e.x,e.y),S.lineTo(t,e.y),S.lineTo(t,o),S.lineTo(e.x,o),S.closePath(),S.fillStyle=Object(n.c)(c),S.fill(),a&&(S.lineCap="round",S.lineWidth=e.t,S.strokeStyle=Object(n.c)(e.c),S.stroke())},O=(e,t)=>{const o=S.getImageData(e,t,1,1);return 65536*o.data[0]+256*o.data[1]+o.data[2]},j=(e,t,o,n)=>{const c=S.createImageData(1,1);c.data[0]=o>>16&255,c.data[1]=o>>8&255,c.data[2]=255&o,c.data[3]=255,S.putImageData(c,e,t),n&&(S.putImageData(c,e-1,t),S.putImageData(c,e,t-1),S.putImageData(c,e-1,t-1))},y=e=>{S.fillStyle=Object(n.c)(e),S.fillRect(0,0,P.width,P.height)},w=(e,t,o,n,c)=>{const a=S.getImageData(0,0,P.width,P.height),r=[],i=[0,-1,1,0],s=[-1,0,0,1];let l=0,d=4*(t*P.width+e);const h=65536*a.data[d]+256*a.data[d+1]+a.data[d+2];let u,b,p,g,m,f,O=e,j=t;for(r.push(O),r.push(j);r.length>0;)for(j=r.pop(),O=r.pop(),l=0;l<4;l+=1)b=j+s[l],g=(u=O+i[l])>0&&u<=P.width,m=b>0&&b<=P.height,g&&m&&(d=4*(b*P.width+u),p=65536*a.data[d],p+=256*a.data[d+1],g=(p+=a.data[d+2])!==o,m=p!==n||!c,g&&m&&(f=p===h||c)&&(d=4*(b*P.width+u),a.data[d]=(16711680&o)>>16,a.data[d+1]=(65280&o)>>8,a.data[d+2]=255&o,r.push(u),r.push(b)));S.putImageData(a,0,0)},v=e=>{$.innerHTML+=e,T.innerHTML+=e},x=(e,t)=>{e&&($.innerHTML=""),$.style.background=Object(n.c)(t)},k=(e,t)=>{e&&(T.innerHTML=""),T.style.background=Object(n.c)(t)};let P,S,T,$,C;const A=(e,t)=>{B[e]=t},I=()=>L.running,E=(e,t)=>{P=document.querySelector(".tsx-canvas"),S=P.getContext("2d"),T=document.querySelector(".tsx-console"),$=document.querySelector(".tsx-output"),C=document.querySelector(".tsx-memory"),h(1e3,1e3),k(!0,16777215),x(!0,16777215),t.showCanvas,N.length=2097152,q.length=256,M.length=16,N.fill(0),q.fill(-1),M.fill(-1),D.length=0,F.length=0,U.length=0,G.length=0,H.length=0,z.global=-1,z.base=t.stackSize-1,z.temp=z.base,z.perm=z.temp,z.max=z.temp,V.startx=0,V.starty=0,V.sizex=1e3,V.sizey=1e3,V.width=1e3,V.height=1e3,V.degrees=360,V.doubled=!1,W.startTime=Date.now(),W.pendown=!0,W.update=!0,W.keyecho=!0,W.input="",W.detect=null,W.readline=null,L.running=!0,L.paused=!1,window.addEventListener("keydown",Y),window.addEventListener("keyup",K),window.addEventListener("keypress",X),s("contextmenu",J),s("mousemove",Q),s("touchmove",J),s("touchmove",Q),s("mousedown",J),s("mousedown",_),s("touchstart",_),s("mouseup",Z),s("touchend",Z),B.run(),ee(e,0,0,t)},R=()=>{window.removeEventListener("keydown",Y),window.removeEventListener("keyup",K),window.removeEventListener("keypress",X),l("contextmenu",J),l("mousemove",Q),l("touchmove",J),l("touchmove",Q),l("mousedown",J),l("mousedown",_),l("touchstart",_),l("mouseup",Z),l("touchend",Z),u(1),L.running=!1,L.paused=!1,B.halt()},B={},L={running:!1,paused:!1},N=[],q=[],M=[],D=[],F=[],U=[],G=[],H=[],z={},V={},W={},Y=e=>{const t=e.keyCode||e.charCode;if(8===t){e.preventDefault();const t=N[1],o=N[t+1],n=N[t+2];o<n&&(N[n]=0,N[t+2]-=1),W.input=W.input.slice(0,-1),W.keyecho&&(T.innerHTML=T.innerHTML.slice(0,-1))}t>=37&&t<=40&&e.preventDefault(),M[9]=t,M[10]=128,e.shiftKey&&(M[10]+=8),e.altKey&&(M[10]+=16),e.ctrlKey&&(M[10]+=32),q[t]=M[10]},K=e=>{const t=e.keyCode||e.charCode;M[9]=-M[9],M[10]=-M[10],q[t]=-q[t]},X=e=>{const t=e.keyCode||e.charCode,o=N[1];if(o>0){let e=0;(e=N[o+2]===N[o]?o+3:N[o+2]+1)!==N[o+1]&&(N[N[o+2]]=t,N[o+2]=e)}W.keyecho&&(e=>{T.innerHTML+=e})(String.fromCharCode(t))},Q=e=>{switch(e.type){case"mousemove":M[7]=be(e.clientX),M[8]=pe(e.clientY);break;case"touchmove":case"touchstart":M[7]=be(e.touches[0].clientX),M[8]=pe(e.touches[0].clientY)}},_=e=>{const t=Date.now();switch(M[4]=128,e.shiftKey&&(M[4]+=8),e.altKey&&(M[4]+=16),e.ctrlKey&&(M[4]+=32),t-M[11]<300&&(M[4]+=64),M[11]=t,e.type){case"mousedown":switch(M[5]=be(e.clientX),M[6]=pe(e.clientY),e.button){case 0:M[4]+=1,M[1]=M[4],M[2]=-1,M[3]=-1;break;case 1:M[4]+=4,M[1]=-1,M[2]=-1,M[3]=M[4];break;case 2:M[4]+=2,M[1]=-1,M[2]=M[4],M[3]=-1}break;case"touchstart":M[5]=be(e.touches[0].clientX),M[6]=pe(e.touches[0].clientY),M[4]+=1,M[1]=M[4],M[2]=-1,M[3]=-1,Q(e)}},Z=e=>{switch(M[4]=-M[4],e.type){case"mouseup":switch(e.button){case 0:M[1]=-M[1];break;case 1:M[2]=-M[3];break;case 2:M[2]=-M[2]}break;case"touchend":M[1]=-M[1]}},J=e=>{e.preventDefault()},ee=(e,t,o,n)=>{if(!L.running)return;if(L.paused)return void setTimeout(ee,1,e,t,o,n);window.removeEventListener("keypress",W.detect),window.removeEventListener("keypress",W.readline);let a,r,s,l,d=0,P=0;for(;d<n.drawCountMax&&P<=n.codeCountMax;){switch(e[t][o]){case i.pc.dupl:a=F.pop(),F.push(a,a);break;case i.pc.swap:r=F.pop(),a=F.pop(),F.push(r,a);break;case i.pc.rota:s=F.pop(),r=F.pop(),a=F.pop(),F.push(r,s,a);break;case i.pc.incr:a=F.pop(),F.push(a+1);break;case i.pc.decr:a=F.pop(),F.push(a-1);break;case i.pc.not:a=F.pop(),F.push(~a);break;case i.pc.and:r=F.pop(),a=F.pop(),F.push(a&r);break;case i.pc.or:r=F.pop(),a=F.pop(),F.push(a|r);break;case i.pc.xor:r=F.pop(),a=F.pop(),F.push(a^r);break;case i.pc.neg:a=F.pop(),F.push(-a);break;case i.pc.abs:a=F.pop(),F.push(Math.abs(a));break;case i.pc.sign:a=F.pop(),F.push(Math.sign(a));break;case i.pc.rand:a=F.pop(),F.push(Math.floor(Math.random()*Math.abs(a)));break;case i.pc.plus:r=F.pop(),a=F.pop(),F.push(a+r);break;case i.pc.subt:r=F.pop(),a=F.pop(),F.push(a-r);break;case i.pc.mult:r=F.pop(),a=F.pop(),F.push(a*r);break;case i.pc.divr:r=F.pop(),a=F.pop(),F.push(Math.round(a/r));break;case i.pc.div:r=F.pop(),a=F.pop(),F.push(Math.floor(a/r));break;case i.pc.mod:r=F.pop(),a=F.pop(),F.push(a%r);break;case i.pc.divm:s=F.pop(),r=F.pop(),a=F.pop(),F.push(Math.round(a/r*s));break;case i.pc.sqrt:r=F.pop(),a=F.pop(),F.push(Math.round(Math.sqrt(a)*r));break;case i.pc.hyp:s=F.pop(),r=F.pop(),a=F.pop(),F.push(Math.round(Math.sqrt(a*a+r*r)*s));break;case i.pc.root:l=F.pop(),s=F.pop(),r=F.pop(),a=F.pop(),F.push(Math.round(Math.pow(a/r,1/s)*l));break;case i.pc.powr:l=F.pop(),s=F.pop(),r=F.pop(),a=F.pop(),F.push(Math.round(Math.pow(a/r,s)*l));break;case i.pc.log:s=F.pop(),r=F.pop(),a=F.pop(),F.push(Math.round(Math.log(a/r)/Math.LN10*s));break;case i.pc.alog:s=F.pop(),r=F.pop(),a=F.pop(),F.push(Math.round(Math.pow(10,a/r)*s));break;case i.pc.ln:s=F.pop(),r=F.pop(),a=F.pop(),F.push(Math.round(Math.log(a/r)*s));break;case i.pc.exp:s=F.pop(),r=F.pop(),a=F.pop(),F.push(Math.round(Math.exp(a/r)*s));break;case i.pc.sin:l=F.pop(),s=F.pop(),a=(r=F.pop())/s*(2*Math.PI)/V.degrees,F.push(Math.round(Math.sin(a)*l));break;case i.pc.cos:l=F.pop(),s=F.pop(),a=(r=F.pop())/s*(2*Math.PI)/V.degrees,F.push(Math.round(Math.cos(a)*l));break;case i.pc.tan:l=F.pop(),s=F.pop(),a=(r=F.pop())/s*(2*Math.PI)/V.degrees,F.push(Math.round(Math.tan(a)*l));break;case i.pc.asin:l=F.pop(),s=F.pop(),r=F.pop(),a=V.degrees/(2*Math.PI),F.push(Math.round(Math.asin(r/s)*l*a));break;case i.pc.acos:l=F.pop(),s=F.pop(),r=F.pop(),a=V.degrees/(2*Math.PI),F.push(Math.round(Math.acos(r/s)*l*a));break;case i.pc.atan:l=F.pop(),s=F.pop(),r=F.pop(),a=V.degrees/(2*Math.PI),F.push(Math.round(Math.atan2(r,s)*l*a));break;case i.pc.pi:a=F.pop(),F.push(Math.round(Math.PI*a));break;case i.pc.ctos:a=F.pop(),oe(String.fromCharCode(a));break;case i.pc.itos:a=F.pop(),oe(a.toString());break;case i.pc.hexs:for(r=F.pop(),a=F.pop().toString(16).toUpperCase();a.length<r;)a="0"+a;oe(a);break;case i.pc.sval:s=F.pop(),r=F.pop(),a=ne(r),l="#"===a[0]?isNaN(parseInt(a.slice(1),16))?s:parseInt(a.slice(1),16):isNaN(parseInt(a,10))?s:parseInt(a,10),F.push(l);break;case i.pc.qtos:l=F.pop(),s=F.pop(),r=F.pop(),oe((a=r/s).toFixed(l));break;case i.pc.qval:s=F.pop(),r=F.pop(),a=ne(F.pop()),l=isNaN(parseFloat(a))?s:parseFloat(a),F.push(Math.round(l*r));break;case i.pc.scat:r=ne(F.pop()),a=ne(F.pop()),oe(a+r);break;case i.pc.slen:a=ne(F.pop()),F.push(a.length);break;case i.pc.case:r=F.pop(),a=ne(F.pop()),oe(r>0?a.toUpperCase():r<0?a.toLowerCase():a);break;case i.pc.copy:s=F.pop(),r=F.pop(),a=ne(F.pop()),oe(a.substr(r-1,s));break;case i.pc.dels:l=F.pop(),s=F.pop(),a=(r=ne(F.pop())).substr(0,s-1)+r.substr(s-1+l),oe(a);break;case i.pc.inss:l=F.pop(),s=ne(F.pop()),r=ne(F.pop()),a=s.substr(0,l-1)+r+s.substr(l-1),oe(a);break;case i.pc.poss:r=ne(F.pop()),a=ne(F.pop()),F.push(r.indexOf(a)+1);break;case i.pc.repl:if(l=F.pop(),s=ne(F.pop()),r=ne(F.pop()),a=ne(F.pop()),l>0){for(;l>0;)a=a.replace(r,s),l-=1;oe(a)}else oe(a.replace(new RegExp(r,"g"),s));break;case i.pc.eqal:r=F.pop(),a=F.pop(),F.push(a===r?-1:0);break;case i.pc.noeq:r=F.pop(),a=F.pop(),F.push(a!==r?-1:0);break;case i.pc.less:r=F.pop(),a=F.pop(),F.push(a<r?-1:0);break;case i.pc.more:r=F.pop(),a=F.pop(),F.push(a>r?-1:0);break;case i.pc.lseq:r=F.pop(),a=F.pop(),F.push(a<=r?-1:0);break;case i.pc.mreq:r=F.pop(),a=F.pop(),F.push(a>=r?-1:0);break;case i.pc.maxi:r=F.pop(),a=F.pop(),F.push(Math.max(a,r));break;case i.pc.mini:r=F.pop(),a=F.pop(),F.push(Math.min(a,r));break;case i.pc.seql:r=ne(F.pop()),a=ne(F.pop()),F.push(a===r?-1:0);break;case i.pc.sneq:r=ne(F.pop()),a=ne(F.pop()),F.push(a!==r?-1:0);break;case i.pc.sles:r=ne(F.pop()),a=ne(F.pop()),F.push(a<r?-1:0);break;case i.pc.smor:r=ne(F.pop()),a=ne(F.pop()),F.push(a>r?-1:0);break;case i.pc.sleq:r=ne(F.pop()),a=ne(F.pop()),F.push(a<=r?-1:0);break;case i.pc.smeq:r=ne(F.pop()),a=ne(F.pop()),F.push(a>=r?-1:0);break;case i.pc.smax:r=ne(F.pop()),a=ne(F.pop()),oe(Math.max(a,r));break;case i.pc.smin:r=ne(F.pop()),a=ne(F.pop()),oe(Math.min(a,r));break;case i.pc.ldin:a=e[t][o+1],F.push(a),o+=1;break;case i.pc.ldvg:a=e[t][o+1],F.push(N[a]),o+=1;break;case i.pc.ldvv:a=e[t][o+1],r=e[t][o+2],F.push(N[N[a]+r]),o+=2;break;case i.pc.ldvr:a=e[t][o+1],r=e[t][o+2],F.push(N[N[N[a]+r]]),o+=2;break;case i.pc.ldag:a=e[t][o+1],F.push(a),o+=1;break;case i.pc.ldav:a=e[t][o+1],r=e[t][o+2],F.push(N[a]+r),o+=2;break;case i.pc.lstr:for(r=(o+=1)+(a=e[t][o]),s="";o<r;)o+=1,s+=String.fromCharCode(e[t][o]);oe(s);break;case i.pc.ldmt:F.push(U.length-1);break;case i.pc.zero:a=e[t][o+1],r=e[t][o+2],N[N[a]+r]=0,o+=2;break;case i.pc.stvg:a=F.pop(),N[e[t][o+1]]=a,o+=1;break;case i.pc.stvv:a=e[t][o+1],r=e[t][o+2],s=F.pop(),N[N[a]+r]=s,o+=2;break;case i.pc.stvr:a=e[t][o+1],r=e[t][o+2],s=F.pop(),N[N[N[a]+r]]=s,o+=2;break;case i.pc.stmt:a=F.pop(),U.push(a);break;case i.pc.lptr:a=F.pop(),F.push(N[a]);break;case i.pc.sptr:r=F.pop(),a=F.pop(),N[r]=a;break;case i.pc.cptr:s=F.pop(),r=F.pop(),a=F.pop(),ae(a,r,s);break;case i.pc.zptr:r=F.pop(),a=F.pop(),ce(a,r);break;case i.pc.test:break;case i.pc.cstr:r=F.pop(),a=F.pop(),l=N[r-1],s=N[a],ae(a,r,Math.min(s,l)+1);break;case i.pc.jump:t=e[t][o+1]-1,o=-1;break;case i.pc.ifno:0===F.pop()?(t=e[t][o+1]-1,o=-1):o+=1;break;case i.pc.halt:return void R();case i.pc.subr:-1===z.global&&(z.global=z.perm),G.push(t+1),t=e[t][o+1]-1,o=-1;break;case i.pc.retn:t=G.pop(),o=-1;break;case i.pc.pssr:H.push(e[t][o+1]),o+=1;break;case i.pc.plsr:H.pop();break;case i.pc.psrj:F.push(t+1);break;case i.pc.plrj:G.pop(),t=F.pop()-1,o=-1;break;case i.pc.memc:if(a=e[t][o+1],r=e[t][o+2],(s=U.pop())+r>n.stackSize)throw R(),te("Memory stack has overflowed into memory heap. Probable cause is unterminated recursion.");U.push(N[a]),N[a]=s,U.push(s+r),o+=2;break;case i.pc.memr:U.pop(),a=e[t][o+1],r=U.pop(),U.push(N[a]),N[a]=r,o+=2;break;case i.pc.hfix:z.perm=z.temp;break;case i.pc.hclr:z.temp=z.perm;break;case i.pc.hrst:z.global>-1&&(z.temp=z.global,z.perm=z.global);break;case i.pc.pnup:W.pendown=!1;break;case i.pc.pndn:W.pendown=!0;break;case i.pc.udat:W.update=!0,d=n.drawCountMax;break;case i.pc.ndat:W.update=!1;break;case i.pc.kech:a=-1===F.pop(),W.keyecho=a;break;case i.pc.outp:s=-1===F.pop(),r=F.pop(),a=-1===F.pop(),x(a,r);break;case i.pc.cons:r=F.pop(),a=-1===F.pop(),k(a,r);break;case i.pc.trac:case i.pc.memw:F.pop();break;case i.pc.dump:C.innerHTML="memory dump was asked for",n.showMemory;break;case i.pc.time:a=Date.now(),a-=W.startTime,F.push(a);break;case i.pc.tset:a=Date.now(),r=F.pop(),W.startTime=a-r;break;case i.pc.wait:return a=F.pop(),(o+=1)===e[t].length&&(t+=1,o=0),void setTimeout(ee,a,e,t,o,n);case i.pc.tdet:return r=F.pop(),a=F.pop(),F.push(0),(o+=1)===e[t].length&&(t+=1,o=0),s=setTimeout(ee,a,e,t,o,n),W.detect=re.bind(null,r,s,e,t,o,n),void window.addEventListener("keyup",W.detect);case i.pc.inpt:(a=F.pop())<0?F.push(M[-a]):F.push(q[a]);break;case i.pc.iclr:(a=F.pop())<0?M[-a]=-1:q[a]=-1;break;case i.pc.bufr:(a=F.pop())>0&&(r=z.temp+4,F.push(z.temp+1),N[z.temp+1]=r+a,N[z.temp+2]=r,N[z.temp+3]=r,N.fill(0,r,r+a),z.temp=r+a,z.max=Math.max(z.temp,z.max));break;case i.pc.read:a=F.pop(),r=N[1],s="",l="";let P=!1;for(;a>0&&!P;)N[r+1]===N[r+2]?P=!0:(l=N[N[r+1]],s+=String.fromCharChode(l),N[r+1]+=1),a-=1;oe(s);break;case i.pc.rdln:return a=Math.pow(2,31)-1,(o+=1)===e[t].length&&(t+=1,o=0),r=setTimeout(ee,a,e,t,o,n),W.readline=ie.bind(null,r,e,t,o,n),void window.addEventListener("keypress",W.readline);case i.pc.prnt:s=F.pop(),r=F.pop(),a=ne(F.pop()),b(se(),a,r,s);break;case i.pc.text:a=ne(F.pop()),v(a),n.showOutput;break;case i.pc.newl:v("\n");break;case i.pc.fdir:case i.pc.open:case i.pc.clos:case i.pc.fptr:case i.pc.fbeg:case i.pc.eof:case i.pc.frds:case i.pc.frln:case i.pc.fwrs:case i.pc.fwnl:break;case i.pc.canv:V.sizey=F.pop(),V.sizex=F.pop(),V.starty=F.pop(),V.startx=F.pop(),N[N[0]+1]=Math.round(V.startx+V.sizex/2),N[N[0]+2]=Math.round(V.starty+V.sizey/2),N[N[0]+3]=0,B.turtx(N[N[0]+1]),B.turty(N[N[0]+2]),B.turtd(N[N[0]+3]),D.push([N[N[0]+1],N[N[0]+2]]),d=n.drawCountMax;break;case i.pc.reso:r=F.pop(),a=F.pop(),Math.min(a,r)<n.smallSize&&(a*=2,r*=2,V.doubled=!0),V.width=a,V.height=r,h(a,r),y(16777215),d=n.drawCountMax;break;case i.pc.pixc:r=F.pop(),a=F.pop(),F.push(O(le(a),de(r)));break;case i.pc.pixs:s=F.pop(),r=F.pop(),a=F.pop(),j(le(a),de(r),s,V.doubled),W.update&&(d+=1);break;case i.pc.angl:a=F.pop(),r=Math.round(a+N[N[0]+3]*a/V.degrees),N[N[0]+3]=r%a,B.turtd(N[N[0]+3]),V.degrees=a;break;case i.pc.curs:a=F.pop(),u(a);break;case i.pc.home:a=V.startx+V.sizex/2,r=V.starty+V.sizey/2,N[N[0]+1]=Math.round(a),N[N[0]+2]=Math.round(r),N[N[0]+3]=0,B.turtx(N[N[0]+1]),B.turty(N[N[0]+2]),B.turtd(N[N[0]+3]),D.push([N[N[0]+1],N[N[0]+2]]);break;case i.pc.setx:a=F.pop(),N[N[0]+1]=a,B.turtx(a),D.push([N[N[0]+1],N[N[0]+2]]);break;case i.pc.sety:a=F.pop(),N[N[0]+2]=a,B.turty(a),D.push([N[N[0]+1],N[N[0]+2]]);break;case i.pc.setd:a=F.pop()%V.degrees,N[N[0]+3]=a,B.turtd(a);break;case i.pc.thik:a=F.pop(),N[N[0]+4]=a,B.turtt(a);break;case i.pc.colr:a=F.pop(),N[N[0]+5]=a,B.turtc(a);break;case i.pc.rgb:a=F.pop(),(a%=50)<=0&&(a+=50),a=c.colours[a-1].value,F.push(a);break;case i.pc.mixc:l=F.pop(),s=F.pop(),r=F.pop();const S=(e,t)=>Math.round((e*s+t*l)/(s+l)),T=e=>Math.floor(e/65536),$=e=>Math.floor((65280&e)/256),A=e=>255&e,I=S(T(a=F.pop()),T(r)),E=S($(a),$(r)),L=S(A(a),A(r));F.push(65536*I+256*E+L);break;case i.pc.toxy:r=F.pop(),a=F.pop(),N[N[0]+1]=a,N[N[0]+2]=r,B.turtx(a),B.turty(r),D.push([a,r]);break;case i.pc.mvxy:r=F.pop()+N[N[0]+2],a=F.pop()+N[N[0]+1],N[N[0]+1]=a,N[N[0]+2]=r,B.turtx(a),B.turty(r),D.push([a,r]);break;case i.pc.drxy:r=F.pop()+N[N[0]+2],a=F.pop()+N[N[0]+1],W.pendown&&(p(se(),le(a),de(r)),W.update&&(d+=1)),N[N[0]+1]=a,N[N[0]+2]=r,B.turtx(a),B.turty(r),D.push([a,r]);break;case i.pc.fwrd:s=F.pop(),r=N[N[0]+3],r=Math.cos(r*Math.PI/(V.degrees/2)),r=-Math.round(r*s),r+=N[N[0]+2],a=N[N[0]+3],a=Math.sin(a*Math.PI/(V.degrees/2)),a=Math.round(a*s),a+=N[N[0]+1],W.pendown&&(p(se(),le(a),de(r)),W.update&&(d+=1)),N[N[0]+1]=a,N[N[0]+2]=r,B.turtx(a),B.turty(r),D.push([a,r]);break;case i.pc.back:s=F.pop(),r=N[N[0]+3],r=Math.cos(r*Math.PI/(V.degrees/2)),r=Math.round(r*s),r+=N[N[0]+2],a=N[N[0]+3],a=Math.sin(a*Math.PI/(V.degrees/2)),a=-Math.round(a*s),a+=N[N[0]+1],W.pendown&&(p(se(),le(a),de(r)),W.update&&(d+=1)),N[N[0]+1]=a,N[N[0]+2]=r,B.turtx(a),B.turty(r),D.push([a,r]);break;case i.pc.left:a=(N[N[0]+3]-F.pop())%V.degrees,N[N[0]+3]=a,B.turtd(a);break;case i.pc.rght:a=(N[N[0]+3]+F.pop())%V.degrees,N[N[0]+3]=a,B.turtd(a);break;case i.pc.turn:r=F.pop(),a=F.pop(),Math.abs(r)>=Math.abs(a)?(s=Math.atan(-a/r),r>0?s+=Math.PI:a<0&&(s+=2,s*=Math.PI)):(s=Math.atan(r/a),a>0?s+=Math.PI:(s+=3,s*=Math.PI),s/=2),s=Math.round(s*V.degrees/Math.PI/2)%V.degrees,N[N[0]+3]=s,B.turtd(s);break;case i.pc.rmbr:D.push([N[N[0]+1],N[N[0]+2]]);break;case i.pc.frgt:D.length-=F.pop();break;case i.pc.poly:s=F.pop(),r=D.length,a=s>r?0:r-s,g(se(),D.slice(a,r).map(ue),!1),W.update&&(d+=1);break;case i.pc.pfil:s=F.pop(),r=D.length,a=s>r?0:r-s,g(se(),D.slice(a,r).map(ue),!0),W.update&&(d+=1);break;case i.pc.circ:a=F.pop(),m(se(),le(a+V.startx),de(a+V.starty),!1),W.update&&(d+=1);break;case i.pc.blot:a=F.pop(),m(se(),le(a+V.startx),de(a+V.starty),!0),W.update&&(d+=1);break;case i.pc.elps:r=F.pop(),a=F.pop(),m(se(),le(a+V.startx),de(r+V.starty),!1),W.update&&(d+=1);break;case i.pc.eblt:r=F.pop(),a=F.pop(),m(se(),le(a+V.startx),de(r+V.starty),!0),W.update&&(d+=1);break;case i.pc.box:l=-1===F.pop(),s=F.pop(),r=N[N[0]+2]+F.pop(),a=N[N[0]+1]+F.pop(),f(se(),le(a),de(r),s,l),W.update&&(d+=1);break;case i.pc.blnk:a=F.pop(),y(a),W.update&&(d+=1);break;case i.pc.rcol:s=F.pop(),r=F.pop(),a=F.pop(),w(a,r,s,0,!1),W.update&&(d+=1);break;case i.pc.fill:l=F.pop(),s=F.pop(),r=F.pop(),a=F.pop(),w(a,r,s,l,!0),W.update&&(d+=1);break;case i.pc.mxin:F.push(Math.pow(2,31)-1)}if(P+=1,o+=1,!e[t])throw R(),te("The program has tried to jump to a line that does not exist. This is either a bug in our compiler, or in your assembled code.");o===e[t].length&&(t+=1,o=0)}setTimeout(ee,0,e,t,o,n)},te=e=>{const t=new Error(e);return t.type="Machine",t},oe=e=>{const t=Array.from(e).map(e=>e.charCodeAt(0));F.push(z.temp+1),z.temp+=1,N[z.temp]=e.length,t.forEach(e=>{z.temp+=1,N[z.temp]=e}),z.max=Math.max(z.temp,z.max)},ne=e=>{const t=N[e],o=e+1,n=N.slice(o,o+t).reduce((e,t)=>e+String.fromCharCode(t),"");return e+t+1>z.perm&&(z.temp=e+t),n},ce=(e,t)=>{t>0&&(N[e]=0,ce(e+1,t-1))},ae=(e,t,o)=>{o>0&&(N[t]=N[e],ae(e+1,t+1,o-1))},re=(e,t,o,n,c,a,r)=>{(r.keyCode||r.charCode)===e&&(F.pop(),F.push(-1),window.clearTimeout(t),ee(o,n,c,a))},ie=(e,t,o,n,c,a)=>{const r=a.keyCode||a.charCode;13===r?(oe(W.input),W.input="",window.clearTimeout(e),ee(t,o,n,c)):8===r?W.input=W.input.slice(0,-1):W.input+=String.fromCharCode(r)},se=()=>({x:le(N[N[0]+1]),y:de(N[N[0]+2]),d:N[N[0]+3],t:he(N[N[0]+4]),c:N[N[0]+5]}),le=e=>{const t=(e-V.startx)*V.width/V.sizex;return V.doubled?Math.round(t)+1:Math.round(t)},de=e=>{const t=(e-V.starty)*V.height/V.sizey;return V.doubled?Math.round(t)+1:Math.round(t)},he=e=>V.doubled?2*e:e,ue=([e,t])=>[le(e),de(t)],be=e=>{const{left:t,width:o}=d(),n=(e-t)*V.sizex/o+V.startx;return Math.round(n)},pe=e=>{const{height:t,top:o}=d(),n=(e-o)*V.sizey/t+V.starty;return Math.round(n)};o.d(t,"b",function(){return ge}),o.d(t,"a",function(){return me});const ge=(e,t)=>{try{switch(e){case"ready":fe("language-changed",ye("language")),fe("show-canvas-changed",ye("show-canvas")),fe("show-output-changed",ye("show-output")),fe("show-memory-changed",ye("show-memory")),fe("draw-count-max-changed",ye("draw-count-max")),fe("code-count-max-changed",ye("code-count-max")),fe("small-size-changed",ye("small-size")),fe("stack-size-changed",ye("stack-size")),fe("group-changed",ye("group")),fe("simple-changed",ye("simple")),fe("intermediate-changed",ye("intermediate")),fe("advanced-changed",ye("advanced"));break;case"new-program":je("name",""),je("compiled",!1),je("code",""),je("usage",[]),je("pcode",[]),fe("file-changed");break;case"save-program":case"save-program-as":break;case"set-language":je("language",t),fe("language-changed",ye("language"));break;case"set-example":c.languages.forEach(e=>{Object(n.b)({url:`examples/${e}/${t}.${c.extensions[e]}`,success:o=>{je(`name-${e}`,a.c[t]),je(`compiled-${e}`,!1),je(`code-${e}`,o.trim()),je(`usage-${e}`,[]),je(`pcode-${e}`,[]),fe("file-changed")},error:e=>{throw we(`Failed to load example file (response code ${e}).`)}})});break;case"set-file":const o=t.filename.split("."),i=o.pop(),s=o.join(".");switch(i){case"tgb":je("language","BASIC"),je("name-BASIC",s),je("compiled-BASIC",!1),je("code-BASIC",t.content.trim()),je("usage-BASIC",[]),je("pcode-BASIC",[]);break;case"tgp":je("language","Pascal"),je("name-Pascal",s),je("compiled-Pascal",!1),je("code-Pascal",t.content.trim()),je("usage-Pascal",[]),je("pcode-Pascal",[]);break;case"tgy":je("language","Python"),je("name-Python",s),je("compiled-Python",!1),je("code-Python",t.content.trim()),je("usage-Python",[]),je("pcode-Python",[]);break;case"tgx":try{const e=JSON.parse(t.content);je("language",e.language),je(`name-${e.language}`,e.name),je(`compiled-${e.language}`,!0),je(`code-${e.language}`,e.code.trim()),je(`usage-${e.language}`,e.usage),je(`pcode-${e.language}`,e.pcode)}catch(e){throw we("Invalid TGX file.")}break;default:throw we("Invalid file type.")}fe("language-changed",ye("language"));break;case"set-name":je("name",t),fe("name-changed",ye("name"));break;case"set-code":je("code",t),je("compiled",!1),fe("code-changed",{code:ye("code"),language:ye("language")});break;case"toggle-assembler":je("assembler",!ye("assembler")),fe("pcode-changed",{pcode:ye("pcode"),assembler:ye("assembler"),decimal:ye("decimal")});break;case"toggle-decimal":je("decimal",!ye("decimal")),fe("pcode-changed",{pcode:ye("pcode"),assembler:ye("assembler"),decimal:ye("decimal")});break;case"toggle-show-canvas":je("show-canvas",!ye("show-canvas")),fe("show-canvas-changed",ye("show-canvas"));break;case"toggle-show-output":je("show-output",!ye("show-output")),fe("show-output-changed",ye("show-output"));break;case"toggle-show-memory":je("show-memory",!ye("show-memory")),fe("show-memory-changed",ye("show-memory"));break;case"show-settings":fe("show-settings");break;case"set-draw-count-max":je("draw-count-max",t),fe("draw-count-max-changed",ye("draw-count-max"));break;case"set-code-count-max":je("code-count-max",t),fe("code-count-max-changed",ye("code-count-max"));break;case"set-small-size":je("small-size",t),fe("small-size-changed",ye("small-size"));break;case"set-stack-size":je("stack-size",t),fe("stack-size-changed",ye("stack-size"));break;case"reset-machine-options":je("show-canvas",!0),je("show-output",!1),je("show-memory",!0),je("draw-count-max",4),je("code-count-max",1e5),je("small-size",60),je("stack-size",2e4),fe("show-canvas-changed",ye("show-canvas")),fe("show-output-changed",ye("show-output")),fe("show-memory-changed",ye("show-memory")),fe("draw-count-max-changed",ye("draw-count-max")),fe("code-count-max-changed",ye("code-count-max")),fe("small-size-changed",ye("small-size")),fe("stack-size-changed",ye("stack-size"));break;case"set-group":je("group",t),fe("group-changed",ye("group"));break;case"toggle-simple":je("simple",!ye("simple")),fe("simple-changed",ye("simple"));break;case"toggle-intermediate":je("intermediate",!ye("intermediate")),fe("intermediate-changed",ye("intermediate"));break;case"toggle-advanced":je("advanced",!ye("advanced")),fe("advanced-changed",ye("advanced"));break;case"machine-run-halt":if(I())R();else{if(!ye("compiled")){let e=Object(r.compile)(ye("code"));je("usage",e.usage),je("pcode",e.pcode),je("compiled",!0),fe("usage-changed",e.usage),fe("pcode-changed",{pcode:e.pcode,assembler:ye("assembler"),decimal:ye("decimal")})}E(ye("pcode"),ye("machine-options"))}break;case"machine-play-pause":I()&&(L.paused?(L.paused=!1,B.play()):(L.paused=!0,B.pause()));break;default:console.log(`unknown signal '${e}'`)}}catch(e){fe("error",e)}},me=(e,t)=>{Oe[e]?Oe[e].push(t):Oe[e]=[t]},fe=(e,t)=>{Oe[e]&&Oe[e].forEach(e=>e(t)),"language-changed"===e&&fe("file-changed"),"file-changed"===e&&(fe("name-changed",ye("name")),fe("code-changed",{code:ye("code"),language:ye("language")}),fe("usage-changed",ye("usage")),fe("pcode-changed",{pcode:ye("pcode"),assembler:ye("assembler"),decimal:ye("decimal")}))},Oe={},je=(e,t)=>{switch(e){case"name":case"compiled":case"code":case"usage":case"pcode":je(`${e}-${ye("language")}`,t);break;default:window.localStorage.setItem(e,JSON.stringify(t))}},ye=e=>{switch(e){case"name":case"compiled":case"code":case"usage":case"pcode":return ye(`${e}-${ye("language")}`);case"file":return{name:ye("name"),compiled:ye("compiled"),code:ye("code"),usage:ye("usage"),pcode:ye("pcode")};case"machine-options":return{showCanvas:ye("show-canvas"),showOutput:ye("show-output"),showMemory:ye("show-memory"),drawCountMax:ye("draw-count-max"),codeCountMax:ye("code-count-max"),smallSize:ye("small-size"),stackSize:ye("stack-size")};default:return JSON.parse(window.localStorage.getItem(e))}},we=e=>{const t=new Error(e);return t.type="System",t};null===ye("language")&&je("language","Pascal"),c.languages.forEach(e=>{null===ye(`name-${e}`)&&je(`name-${e}`,""),null===ye(`compiled-${e}`)&&je(`compiled-${e}`,!1),null===ye(`code-${e}`)&&je(`code-${e}`,""),null===ye(`usage-${e}`)&&je(`usage-${e}`,[]),null===ye(`pcode-${e}`)&&je(`pcode-${e}`,[])}),null===ye("assembler")&&je("assembler",!0),null===ye("decimal")&&je("decimal",!0),null===ye("show-canvas")&&je("show-canvas",!0),null===ye("show-output")&&je("show-output",!1),null===ye("show-memory")&&je("show-memory",!0),null===ye("draw-count-max")&&je("draw-count-max",4),null===ye("code-count-max")&&je("code-count-max",1e5),null===ye("small-size")&&je("small-size",60),null===ye("stack-size")&&je("stack-size",2e4),null===ye("group")&&je("group",0),null===ye("simple")&&je("simple",!0),null===ye("intermediate")&&je("intermediate",!1),null===ye("advanced")&&je("advanced",!1),A("run",()=>fe("machine-started")),A("halt",()=>fe("machine-stopped")),A("play",()=>fe("machine-played")),A("pause",()=>fe("machine-paused")),A("turtx",e=>fe("turtx-changed",e)),A("turty",e=>fe("turty-changed",e)),A("turtd",e=>fe("turtd-changed",e)),A("turtt",e=>fe("turtt-changed",e)),A("turtc",e=>fe("turtc-changed",e))},function(e,t,o){"use strict";o.r(t),o.d(t,"languages",function(){return c}),o.d(t,"extensions",function(){return a}),o.d(t,"colours",function(){return r}),o.d(t,"cursors",function(){return i}),o.d(t,"fonts",function(){return s}),o.d(t,"inputs",function(){return l});var n=o(0);const c=["BASIC","Pascal","Python"],a={BASIC:"tgb",Pascal:"tgp",Python:"tgy"},r=[Object(n.b)(1,"green",2263842,!0),Object(n.b)(2,"red",16711680,!0),Object(n.b)(3,"blue",255,!0),Object(n.b)(4,"yellow",16776960,!1),Object(n.b)(5,"violet",9055202,!0),Object(n.b)(6,"lime",65280,!1),Object(n.b)(7,"orange",16755200,!1),Object(n.b)(8,"skyblue",45311,!1),Object(n.b)(9,"brown",9849600,!0),Object(n.b)(10,"pink",15602313,!0),Object(n.b)(11,"darkgreen",25600,!0),Object(n.b)(12,"darkred",11674146,!0),Object(n.b)(13,"darkblue",128,!0),Object(n.b)(14,"ochre",12628016,!0),Object(n.b)(15,"indigo",4915330,!0),Object(n.b)(16,"olive",8421376,!0),Object(n.b)(17,"orangered",16737792,!0),Object(n.b)(18,"teal",32896,!0),Object(n.b)(19,"darkbrown",6045747,!0),Object(n.b)(20,"magenta",16711935,!0),Object(n.b)(21,"lightgreen",10025880,!1),Object(n.b)(22,"lightred",13458524,!1),Object(n.b)(23,"lightblue",10075135,!1),Object(n.b)(24,"cream",16777147,!1),Object(n.b)(25,"lilac",11572223,!1),Object(n.b)(26,"yellowgreen",11193395,!1),Object(n.b)(27,"peach",16764080,!1),Object(n.b)(28,"cyan",65535,!1),Object(n.b)(29,"lightbrown",11567184,!1),Object(n.b)(30,"lightpink",16758465,!1),Object(n.b)(31,"seagreen",3978097,!1),Object(n.b)(32,"maroon",8388608,!0),Object(n.b)(33,"royal",4286945,!0),Object(n.b)(34,"gold",16762880,!1),Object(n.b)(35,"purple",8388736,!0),Object(n.b)(36,"emerald",51543,!1),Object(n.b)(37,"salmon",16416882,!1),Object(n.b)(38,"turquoise",48833,!1),Object(n.b)(39,"coffee",9596735,!1),Object(n.b)(40,"rose",16746666,!1),Object(n.b)(41,"greengrey",7377008,!0),Object(n.b)(42,"redgrey",11567232,!0),Object(n.b)(43,"bluegrey",8421536,!0),Object(n.b)(44,"yellowgrey",9474160,!0),Object(n.b)(45,"darkgrey",4210752,!0),Object(n.b)(46,"midgrey",8421504,!0),Object(n.b)(47,"lightgrey",10526880,!1),Object(n.b)(48,"silver",12632256,!1),Object(n.b)(49,"white",16777215,!1),Object(n.b)(50,"black",0,!0)],i=[Object(n.d)(0,"None","none"),Object(n.d)(1,"Default","default"),Object(n.d)(2,"Pointer","pointer"),Object(n.d)(3,"Crosshair","crosshair"),Object(n.d)(4,"Text","text"),Object(n.d)(5,"Move","move"),Object(n.d)(6,"Resize NESW","nesw-resize"),Object(n.d)(7,"Resize NS","ns-resize"),Object(n.d)(8,"Resize NWSE","nwse-resize"),Object(n.d)(9,"Resize EW","ew-resize"),Object(n.d)(10,"Resize N","n-resize"),Object(n.d)(11,"Wait","wait"),Object(n.d)(12,"Progress","progress"),Object(n.d)(13,"No Drop","no-drop"),Object(n.d)(14,"Forbidden","not-allowed"),Object(n.d)(15,"Help","help")],s=[Object(n.f)(0,"Arial","Arial, sans-serif"),Object(n.f)(1,"Arial Black",'"Arial Black", sans-serif'),Object(n.f)(2,"Comic Sans MS",'"Comic Sans MS", cursive, sans-serif'),Object(n.f)(3,"Courier New",'"Courier New", Courier, monospace'),Object(n.f)(4,"Georgia","Georgia, serif"),Object(n.f)(5,"Impact","Impact, Charcoal, sans-serif"),Object(n.f)(6,"Lucida Console",'"Lucida Console", monospace'),Object(n.f)(7,"Lucida Sans Unicode",'"Lucida Sans Unicode", sans-serif'),Object(n.f)(8,"Palatino Linotype",'"Palatino Linotype", "Book Antiqua", Palatino, serif'),Object(n.f)(9,"Symbol","Symbol"),Object(n.f)(10,"Tahoma","Tahoma, Geneva, sans-serif"),Object(n.f)(11,"Times New Roman",'"Times New Roman", Times, serif'),Object(n.f)(12,"Trebuchet MS",'"Trebuchet MS", helvetica, sans-serif'),Object(n.f)(13,"Verdana","Verdana, Geneva, sans-serif"),Object(n.f)(14,"Webdings","Webdings"),Object(n.f)(15,"Wingdings","Wingdings")],l=[Object(n.h)("?kshift",-10),Object(n.h)("?key",-9),Object(n.h)("?mousey",-8),Object(n.h)("?mousex",-7),Object(n.h)("?clicky",-6),Object(n.h)("?clickx",-5),Object(n.h)("?click",-4),Object(n.h)("?mmouse",-3),Object(n.h)("?rmouse",-2),Object(n.h)("?lmouse",-1),Object(n.h)("\\backspace",8),Object(n.h)("\\tab",9),Object(n.h)("\\enter",13),Object(n.h)("\\shift",16),Object(n.h)("\\ctrl",17),Object(n.h)("\\alt",18),Object(n.h)("\\pause",19),Object(n.h)("\\capslock",20),Object(n.h)("\\escape",27),Object(n.h)("\\space",32),Object(n.h)("\\pgup",33),Object(n.h)("\\pgdn",34),Object(n.h)("\\end",35),Object(n.h)("\\home",36),Object(n.h)("\\left",37),Object(n.h)("\\up",38),Object(n.h)("\\right",39),Object(n.h)("\\down",40),Object(n.h)("\\insert",45),Object(n.h)("\\delete",46),Object(n.h)("\\0",48),Object(n.h)("\\1",49),Object(n.h)("\\2",50),Object(n.h)("\\3",51),Object(n.h)("\\4",52),Object(n.h)("\\5",53),Object(n.h)("\\6",54),Object(n.h)("\\7",55),Object(n.h)("\\8",56),Object(n.h)("\\9",57),Object(n.h)("\\a",65),Object(n.h)("\\b",66),Object(n.h)("\\c",67),Object(n.h)("\\d",68),Object(n.h)("\\e",69),Object(n.h)("\\f",70),Object(n.h)("\\g",71),Object(n.h)("\\h",72),Object(n.h)("\\i",73),Object(n.h)("\\j",74),Object(n.h)("\\k",75),Object(n.h)("\\l",76),Object(n.h)("\\m",77),Object(n.h)("\\n",78),Object(n.h)("\\o",79),Object(n.h)("\\p",80),Object(n.h)("\\q",81),Object(n.h)("\\r",82),Object(n.h)("\\s",83),Object(n.h)("\\t",84),Object(n.h)("\\u",85),Object(n.h)("\\v",86),Object(n.h)("\\w",87),Object(n.h)("\\x",88),Object(n.h)("\\y",89),Object(n.h)("\\z",90),Object(n.h)("\\lwin",91),Object(n.h)("\\rwin",92),Object(n.h)("\\#0",96),Object(n.h)("\\#1",97),Object(n.h)("\\#2",98),Object(n.h)("\\#3",99),Object(n.h)("\\#4",100),Object(n.h)("\\#5",101),Object(n.h)("\\#6",102),Object(n.h)("\\#7",103),Object(n.h)("\\#8",104),Object(n.h)("\\#9",105),Object(n.h)("\\multiply",106),Object(n.h)("\\add",107),Object(n.h)("\\subtract",109),Object(n.h)("\\decimal",110),Object(n.h)("\\divide",111),Object(n.h)("\\f1",112),Object(n.h)("\\f2",113),Object(n.h)("\\f3",114),Object(n.h)("\\f4",115),Object(n.h)("\\f5",116),Object(n.h)("\\f6",117),Object(n.h)("\\f7",118),Object(n.h)("\\f8",119),Object(n.h)("\\f9",120),Object(n.h)("\\f10",121),Object(n.h)("\\f11",122),Object(n.h)("\\f12",123),Object(n.h)("\\numlock",144),Object(n.h)("\\scrolllock",145),Object(n.h)("\\semicolon",186),Object(n.h)("\\equals",187),Object(n.h)("\\comma",188),Object(n.h)("\\dash",189),Object(n.h)("\\fullstop",190),Object(n.h)("\\forwardslash",191),Object(n.h)("\\singlequote",192),Object(n.h)("\\openbracket",219),Object(n.h)("\\backslash",220),Object(n.h)("\\closebracket",221),Object(n.h)("\\hash",222),Object(n.h)("\\backtick",223)]},function(e,t,o){e.exports={error:o(9),factory:o(17),find:o(7),molecules:o(18),pcoder:o(10)}},function(e,t,o){e.exports.program=(t=>t.parent?e.exports.program(t.parent):t),e.exports.constant=((e,t,o)=>i(e,"constants",t,o)),e.exports.variable=((t,o,n)=>{const c=("BASIC"===n?["TURTX%","TURTY%","TURTD%","TURTT%","TURTC%"]:["turtx","turty","turtd","turtt","turtc"]).indexOf(o)+1,a=t.index>0&&t.globals.indexOf(o)>-1;return c>0?{turtle:c,fulltype:{type:"integer"}}:i(a?e.exports.program(t):t,"variables",o,n)}),e.exports.colour=((e,t)=>n.find(r.bind(null,s(e),t))),e.exports.input=((e,t)=>c.find(r.bind(null,e,t))),e.exports.custom=((e,t,o)=>i(e,"subroutines",t,o)),e.exports.native=((e,t)=>a.find(r.bind(null,s(e),t))),e.exports.command=((t,o,n)=>e.exports.custom(t,o,n)||e.exports.native(o,n));const{colours:n,inputs:c}=o(5),{commands:a}=o(12),r=(e,t,o)=>(o.name||o.names[t])===e,i=(e,t,o,n)=>e.parent?e[t].find(r.bind(null,o,n))||i(e.parent,t,o,n):e[t].find(r.bind(null,o,n)),s=e=>e.replace(/gray/,"grey").replace(/GRAY/,"GREY").replace(/^COLOR$/,"COLOUR").replace(/^color$/,"colour")},function(e,t,o){"use strict";o.d(t,"b",function(){return c}),o.d(t,"a",function(){return a}),o.d(t,"c",function(){return r});var n=o(0);const c=[Object(n.g)(1,"Drawing, counting, and procedures/methods",["DrawPause","OlympicRings1","OlympicRings2","ThePlough","ForLoop","Circles","NestedLoops","SimpleProcedure","ColourSpiral","ParameterProcedure","Polygons","YouAreHere"]),Object(n.g)(2,"Further commands and structures",["Stars","PolygonRings","Clock","DigitalClock","CycleColours","Triangles","Flashlights","RefParams","Balls3D","AskInput","StringFunctions","MathFunctions","TrigonometricGraphs"]),Object(n.g)(3,"Smooth movement and interaction",["MovingBall","BouncingBall","TurtleMove","TurtleBounce","MultiBounce","GravitySteps","SolarSystem","SimpleDraw","FiveTurtles"]),Object(n.g)(4,"Complex applications",["PaintApp","SnakeGame","Shoot","Mandelbrot","Quine","NoughtsAndCrosses"]),Object(n.g)(5,"Artificial life and social models",["GameOfLife","Schelling","IteratedPD"])],a=[Object(n.g)(1,"Introduction, Computer Science for Fun, and Turtling",["DrawPause","ColourSpiral"]),Object(n.g)(2,"Animation and Movement",["MovingBall","BouncingBall","TurtleMove","TurtleBounce","AskInput"]),Object(n.g)(3,"Computing in Physics: Cannons and Rockets",["GravitySteps","AimCannon","AutoCannon","Launch"]),Object(n.g)(4,"Cellular Automata: Modelling Disease, 'Life', and Shell Patterns",["LifeStart","Disease","GameOfLife","Automata"]),Object(n.g)(5,"Computing in Chemistry: Diffusion and Brownian Motion",["Diffusion","BrownianMotion"]),Object(n.g)(6,"Computing in Biology: Evolution and Behaviour",["Cheetahs","SexRatio","Flocking"]),Object(n.g)(7,"Chaos and Self-Similarity",["Logistic","LogisticSpider","Mandelbrot","MandelbrotMini","MandelbrotSpectrum","MandelbrotMiniSpectrum","Triangles","Sierpinski","SierpinskiDots","IFSBackground","SierpinskiColour","SierpinskiIFS","BarnsleyIFS","BarnsleyColour","TreeIFS","DragonIFS","DragonColour"]),Object(n.g)(8,"Waves and Quantum Mechanics",["Interference","WaveSuperposer","TwoSlits"]),Object(n.g)(9,"Games and Computer Science",["KnightsTour","Nim","NoughtsAndCrosses"]),Object(n.g)(10,"Philosophy and Social Science",["Schelling","IteratedPD"])],r={AimCannon:"Firing a cannon (manual)",AskInput:"Asking for typed input",AutoCannon:"Firing a cannon (automatic)",Automata:"One-dimensional cellular automata",Balls3D:"3D colour effects",BarnsleyColour:"Barnsley colour",BarnsleyIFS:"Barnsley IFS",BouncingBall:"Bouncing ball (using variables)",BrownianMotion:"Brownian motion",Cheetahs:"Cheetahs and gazelles",Circles:"Circling circles",Clock:"Analogue clock (using REPEAT)",ColourSpiral:"Spiral of colours",CycleColours:"Cycling colours (using MOD)",Diffusion:"A model of diffusion",DigitalClock:"Digital clock (using IF and WHILE)",Disease:"Spread of disease",DragonColour:"Dragon colour",DragonIFS:"Dragon IFS",DrawPause:"Simple drawing with pauses",FiveTurtles:"Five turtles moving to the mouse",Flashlights:"Using Booleans",Flocking:"Flocking behaviour",ForLoop:"FOR (counting) loop",GameOfLife:"Conway's Game of Life",GravitySteps:"Movement under gravity",IFSBackground:"Iterated function systems (IFS) background",Interference:"Interference",IteratedPD:"Iterated Prisoner's Dilemma",KnightsTour:"Knight's tour",Launch:"Launching a rocket into orbit",LifeStart:"Initialising Conway's Game of Life",Logistic:"Logistic equation",LogisticSpider:"Logistic spider",Mandelbrot:"Mandelbrot set",MandelbrotMini:"Mandelbrot mini",MandelbrotMiniSpectrum:"Mandelbrot mini spectrum",MandelbrotSpectrum:"Mandelbrot spectrum",MathFunctions:"Mathematical functions",MovingBall:"Moving ball (using variables)",MultiBounce:"Multiple bouncing balls",NestedLoops:"Nested FOR loops",Nim:"Nim",NoughtsAndCrosses:"Noughts and crosses",OlympicRings1:"Olympic rings 1 (using PENUP)",OlympicRings2:"Olympic rings 2 (with variable)",PaintApp:"Painting application",ParameterProcedure:"Procedure with parameter",PolygonRings:"Polygon rings",Polygons:"POLYGON and POLYLINE",Quine:"Quine (self-replicating) program",RefParams:"Reference parameters",Schelling:"Schelling's segregation model",SexRatio:"The sex ratio",Shoot:"Arcade shooting game",Sierpinski:"Sierpinski triangle",SierpinskiColour:"Sierpinski colour",SierpinskiDots:"Sierpinski dots",SierpinskiIFS:"Sierpinski IFS",SimpleDraw:"Drawing to the mouse",SimpleProcedure:"Simple procedure",SnakeGame:"Snake (classic game)",SolarSystem:"Solar system (using ARRAY)",Stars:"Stars (using ANGLES and FORGET)",StringFunctions:"String functions",ThePlough:"The plough constellation",TreeIFS:"Tree IFS",Triangles:"Recursive triangles",TrigonometricGraphs:"Trigonometric graphs",TurtleBounce:"Bouncing ball (using the Turtle)",TurtleMove:"Moving ball (using the Turtle)",TwoSlits:"Young's two-slit experiment",WaveSuperposer:"Wave superposer",YouAreHere:"Text and arrow (using PRINT)"}},function(e,t){e.exports=((e,t)=>{const o=t?new Error(e.replace("{lex}",`"${t.content}"`)):new Error(e);return o.lexeme=t,o.type="Compiler",o})},function(e,t,o){e.exports.merge=((e,t)=>e.slice(0,-1).concat([e[e.length-1].concat(t[0])]).concat(t.slice(1))),e.exports.mergeWithOperator=((t,o,c)=>{const a=e.exports.merge(t,o.pcode),r=e.exports.merge(a,[n[c]]);return Object.assign(o,{pcode:r})}),e.exports.loadLiteralValue=((e,t)=>"string"===e?[n.lstr,t.length].concat(Array.from(t).map(e=>e.charCodeAt(0))):[n.ldin,t]),e.exports.loadInputValue=(t=>t.value<0?e.exports.loadLiteralValue("integer",t.value):e.exports.loadLiteralValue("integer",t.value).concat(n.inpt)),e.exports.loadVariableValue=(e=>e.turtle?[n.ldin,0,n.lptr,n.ldin,e.turtle,n.plus,n.lptr]:0===e.routine.index?[n.ldvg,e.routine.turtleAddress+5+e.index]:e.byref?[n.ldvr,e.routine.index+9,e.index]:[n.ldvv,e.routine.index+9,e.index]),e.exports.loadVariableAddress=(e=>e.turtle?[n.ldin,0,n.lptr,n.ldin,e.turtle,n.plus]:0===e.routine.index?[n.ldag,e.routine.turtleAddress+5+e.index]:[n.ldav,e.routine.index+9,e.index]),e.exports.storeVariableValue=((e,t)=>e.turtle?[n.ldin,0,n.lptr,n.ldin,e.turtle,n.plus,n.sptr]:0===e.routine.index?"string"===e.fulltype.type?[n.ldvg,e.routine.turtleAddress+5+e.index,n.cstr]:[n.stvg,e.routine.turtleAddress+5+e.index]:"string"===e.fulltype.type?[n.ldvv,e.routine.index+9,e.index,n.cstr,n.hclr]:e.byref&&!t?[n.stvr,e.routine.index+9,e.index]:[n.stvv,e.routine.index+9,e.index]),e.exports.loadFunctionReturnValue=(e=>[n.ldvv,e,1]),e.exports.applyOperator=(e=>[n[e]]),e.exports.callCommand=((e,t,o)=>{const a=c.program(t).turtleAddress;switch(e.code){case n.newt:return[n.ldin,0,n.sptr];case n.oldt:return[n.ldin,a,n.ldin,0,n.sptr];case n.incr:case n.decr:return[n.dupl,n.lptr,e.code,n.swap,n.sptr];case n.rndc:return[n.rand,n.incr,n.rgb,n.colr];case n.rand:switch(o){case"BASIC":return[n.rand,n.incr];case"Pascal":return[n.rand];case"Python":return[n.swap,n.dupl,n.rota,n.incr,n.swap,n.subt,n.rand,n.plus]}break;case n.texl:return[n.text,n.newl];case n.uppc:return[n.ldin,1,n.case];case n.lowc:return[n.ldin,-1,n.case];case n.lefs:return[n.ldin,1,n.swap,n.copy];case n.rgts:return[n.swap,n.dupl,n.slen,n.incr,n.rota,n.subt,n.mxin,n.copy];case n.inss:switch(o){case"BASIC":case"Python":return[n.rota,n.rota,n.inss];case"Pascal":return[n.inss]}break;case n.poss:switch(o){case"BASIC":case"Python":return[n.swap,n.poss];case"Pascal":return[n.poss]}break;case n.svd0:return[n.ldin,0,n.sval];case n.bool:return[n.abs];case n.ilin:return[n.text,n.newl,n.rdln];case n.bufr:return[n.bufr,n.ldin,1,n.sptr,n.hfix];case void 0:return[n.subr,e.startLine];default:return[e.code]}}),e.exports.conditional=((e,t,o,c)=>{const a=c.length>0?2:1,r=[t.concat([n.ifno,o.length+e+a])],i=[[n.jump,o.length+c.length+e+a]];return c.length>0?r.concat(o).concat(i).concat(c):r.concat(o)}),e.exports.forLoop=((t,o,c,a,r,i,s)=>{const l=s.length+t+4,d=[c,e.exports.storeVariableValue(o).concat(a),e.exports.loadVariableValue(o).concat([n[r],n.ifno,l])],h=[e.exports.loadVariableValue(o).concat([n[i],n.jump,t+1])];return d.concat(s).concat(h)}),e.exports.repeatLoop=((e,t,o)=>{const c=[t.concat([n.ifno,e])];return o.concat(c)}),e.exports.whileLoop=((e,t,o)=>{const c=[t.concat([n.ifno,o.length+e+2])],a=[[n.jump,e]];return c.concat(o).concat(a)}),e.exports.subroutine=((t,o)=>{const n=e.exports.subroutineStartCode(t),c=d(t);return n.concat(o).concat(c)}),e.exports.subroutineStartCode=(e=>{const t=[[n.pssr,e.index]],o=t.concat(s(e));return e.variables.length>0&&e.parameters.length>0?o.concat(l(e)):e.variables.length>0?o:t}),e.exports.program=((e,t,o)=>{const c=u(e),a=[[n.jump,c.length+t.length+2]],r=[[n.halt]];return t.length>1?c.concat(a).concat(t).concat(o).concat(r):c.concat(o).concat(r)});const{pc:n}=o(1),c=o(7),a=e=>e.variables.filter(e=>"string"===e.fulltype.type),r=e=>{const t=e.routine.turtleAddress+5+e.index;return[n.ldag,t+2,n.stvg,t,n.ldin,e.length-1,n.stvg,t+1]},i=e=>{const t=e.routine.index+9,o=e.index;return[n.ldav,t,o+2,n.stvv,t,o,n.ldin,e.fulltype.length-1,n.stvv,t,o+1]},s=e=>{const t=[[n.memc,e.index+9,e.memoryNeeded],[n.ldav,e.index+9,1,n.ldin,e.memoryNeeded,n.zptr]];return a(e).length>0?t.concat(a(e).map(i)):t},l=t=>{const o=[];let n=t.parameters.length;for(;n>0;)n-=1,o.push(e.exports.storeVariableValue(t.parameters[n]));return o},d=e=>{const t=e.index+9,o=c.program(e).resultAddress,a=[n.ldvg,t,n.stvg,o],r=[n.memr,t],i=[n.plsr,n.retn];return e.variables.length>0&&"function"===e.type?[a,r.concat(i)]:e.variables.length>0?[r.concat(i)]:[i]},h=[n.home,n.ldin,2,n.thik,n.ldin,32,n.bufr,n.ldin,1,n.sptr,n.hfix,n.ldin,0,n.dupl,n.ldin,1e3,n.dupl,n.dupl,n.dupl,n.reso,n.canv],u=e=>{const t=[((e,t)=>[n.ldin,e,n.dupl,n.dupl,n.ldin,0,n.sptr,n.ldin,5,n.swap,n.sptr,n.incr,n.ldin,t+5,n.zptr,n.ldin,e+t+5,n.stmt])(e.turtleAddress,e.memoryNeeded),h];return a(e).length>0?t.concat(a(e).map(r)):t}},function(e,t,o){"use strict";o.d(t,"b",function(){return m}),o.d(t,"a",function(){return f});var n=o(2),c=o(5),a=o(4);const r=Object(n.a)("input",{type:"text",placeholder:"filename",on:[{type:"input",callback:e=>{Object(a.b)("set-name",e.currentTarget.value)}}]}),i=Object(n.a)("select",{content:c.languages.map(e=>Object(n.a)("option",{content:e,value:e})),on:[{type:"change",callback:e=>{Object(a.b)("set-language",e.currentTarget.value)}}]}),s=Object(n.a)("button",{content:"RUN",classes:["tsx-run-halt-button"],on:[{type:"click",callback:e=>{Object(a.b)("machine-run-halt"),e.currentTarget.blur()}}]}),l=Object(n.a)("button",{content:"&#10074;&#10074;",classes:["tsx-play-pause-button"],on:[{type:"click",callback:e=>{Object(a.b)("machine-play-pause"),e.currentTarget.blur()}}]}),d=Object(n.a)("dd",{classes:["tsx-turtxy"],content:"500"}),h=Object(n.a)("dd",{classes:["tsx-turtxy"],content:"500"}),u=Object(n.a)("dd",{classes:["tsx-turtd"],content:"0"}),b=Object(n.a)("dd",{classes:["tsx-turttc"],content:"2"}),p=Object(n.a)("dd",{classes:["tsx-turttc"],style:"background:#000;"}),g=Object(n.a)("dl",{classes:["tsx-turtle-properties"],content:[Object(n.a)("dt",{content:"X"}),d,Object(n.a)("dt",{content:"Y"}),h,Object(n.a)("dt",{content:"D"}),u,Object(n.a)("dt",{content:"T"}),b,Object(n.a)("dt",{content:"C"}),p]}),m=Object(n.a)("div",{classes:["tsx-controls"],content:[r,i]}),f=Object(n.a)("div",{classes:["tsx-controls"],content:[s,l,g]});Object(a.a)("name-changed",e=>{r.value=e}),Object(a.a)("language-changed",e=>{i.value=e}),Object(a.a)("machine-started",()=>{s.innerHTML="HALT",l.innerHTML="&#10074;&#10074;",d.innerHTML="500",h.innerHTML="500",u.innerHTML="0",b.innerHTML="2",p.style.background="#000"}),Object(a.a)("machine-stopped",()=>{s.innerHTML="RUN",l.innerHTML="&#10074;&#10074;"}),Object(a.a)("machine-played",()=>{l.innerHTML="&#10074;&#10074;"}),Object(a.a)("machine-paused",()=>{l.innerHTML="&#9658;"}),Object(a.a)("turtx-changed",e=>{d.innerHTML=e.toString(10)}),Object(a.a)("turty-changed",e=>{h.innerHTML=e.toString(10)}),Object(a.a)("turtd-changed",e=>{u.innerHTML=e.toString(10)}),Object(a.a)("turtt-changed",e=>{b.innerHTML=e.toString(10)}),Object(a.a)("turtc-changed",e=>{p.style.background=Object(n.c)(e)})},function(e,t,o){"use strict";o.r(t),o.d(t,"commands",function(){return a}),o.d(t,"categories",function(){return r}),o.d(t,"usage",function(){return i});var n=o(0),c=o(1);const a=[Object(n.c)({names:["FORWARD","forward","forward"],code:c.pc.fwrd,parameters:[Object(n.i)("n","integer")],category:0,level:0,description:"Moves the Turtle forward <code>n</code> units, drawing as it goes (unless the pen is up)."}),Object(n.c)({names:["BACK","back","back"],code:c.pc.back,parameters:[Object(n.i)("n","integer")],category:0,level:0,description:"Moves the Turtle back <code>n</code> units, drawing as it goes (unless the pen is up)."}),Object(n.c)({names:["LEFT","left","left"],code:c.pc.left,parameters:[Object(n.i)("n","integer")],category:0,level:0,description:"Rotates the Turtle left by <code>n</code> degrees."}),Object(n.c)({names:["RIGHT","right","right"],code:c.pc.rght,parameters:[Object(n.i)("n","integer")],category:0,level:0,description:"Rotates the Turtle right by <code>n</code> degrees."}),Object(n.c)({names:["DRAWXY","drawxy","drawxy"],code:c.pc.drxy,parameters:[Object(n.i)("x","integer"),Object(n.i)("y","integer")],category:0,level:1,description:"Moves the Turtle in a straight line to a point <code>x</code> units away along the x-axis and <code>y</code> units away along the y-axis, drawing as it goes (unless the pen is up)."}),Object(n.c)({names:["MOVEXY","movexy","movexy"],code:c.pc.mvxy,parameters:[Object(n.i)("x","integer"),Object(n.i)("y","integer")],category:0,level:1,description:"Moves the Turtle in a straight line to a point <code>x</code> units away along the x-axis and <code>y</code> units away along the y-axis, <em>without</em> drawing (regardless of the current pen status)."}),Object(n.c)({names:["HOME","home","home"],code:c.pc.home,category:1,level:0,description:"Moves the Turtle back to its starting position in the centre of the canvas, facing north, drawing as it goes (unless the pen is up)."}),Object(n.c)({names:["SETX","setx","setx"],code:c.pc.setx,parameters:[Object(n.i)("x","integer")],category:1,level:0,description:"Sets the Turtle&rsquo;s <code>x</code> coordinate directly (without movement or drawing on the canvas). This can also be achieved by direct assignment of the global variable <code>turtx</code>."}),Object(n.c)({names:["SETY","sety","sety"],code:c.pc.sety,parameters:[Object(n.i)("y","integer")],category:1,level:0,description:"Sets the Turtle&rsquo;s <code>y</code> coordinate directly (without movement or drawing on the canvas). This can also be achieved by direct assignment of the global variable <code>turty</code>."}),Object(n.c)({names:["SETXY","setxy","setxy"],code:c.pc.toxy,parameters:[Object(n.i)("x","integer"),Object(n.i)("y","integer")],category:1,level:0,description:"Sets the Turtle&rsquo;s <code>x</code> and <code>y</code> coordinates directly (without movement or drawing on the canvas). This can also be achieved by direct assingment of the global variables <code>turtx</code> and <code>turty</code>."}),Object(n.c)({names:["DIRECTION","direction","direction"],code:c.pc.setd,parameters:[Object(n.i)("n","integer")],category:1,level:0,description:"Sets the Turtle&rsquo;s direction to <code>n</code> degrees (0 for north, 90 for east, 180 for south, 270 for west). This can also be achieved by direct assignment of the global variable <code>turtd</code>. Note that the number of degrees in a circle (360 by default) can be changed with the <code>angles</code> command."}),Object(n.c)({names:["TURNXY","turnxy","turnxy"],code:c.pc.turn,parameters:[Object(n.i)("x","integer"),Object(n.i)("y","integer")],category:1,level:1,description:"Turns the Turtle to face the point <code>x</code> units away alongthe x-axis and <code>y</code> units away along the y-axis."}),Object(n.c)({names:["CIRCLE","circle","circle"],code:c.pc.circ,parameters:[Object(n.i)("radius","integer")],category:2,level:0,description:"Draws a circle outline in the Turtle&rsquo;s current colour and thickness, of the given <code>radius</code>, centred on the Turtle&rsquo;s current location."}),Object(n.c)({names:["BLOT","blot","blot"],code:c.pc.blot,parameters:[Object(n.i)("radius","integer")],category:2,level:0,description:"Draws a filled circle in the Turtle&rsquo;s current colour, of the given <code>radius</code>, centred on the Turtle&rsquo;s current location."}),Object(n.c)({names:["ELLIPSE","ellipse","ellipse"],code:c.pc.elps,parameters:[Object(n.i)("Xradius","integer"),Object(n.i)("Yradius","integer")],category:2,level:0,description:"Draws an ellipse outline in the Turtle&rsquo;s current colour and thickness, of the given <code>Xradius</code> and <code>Yradius</code>, centred on the Turtle&rsquo;s current location."}),Object(n.c)({names:["ELLBLOT","ellblot","ellblot"],code:c.pc.eblt,parameters:[Object(n.i)("Xradius","integer"),Object(n.i)("Yradius","integer")],category:2,level:0,description:"Draws a filled ellipse in the Turtle&rsquo;s current colour, of the given <code>Xradius</code> and <code>Yradius</code>, centred on the Turtle&rsquo;s current location."}),Object(n.c)({names:["POLYLINE","polyline","polyline"],code:c.pc.poly,parameters:[Object(n.i)("n","integer")],category:2,level:1,description:"Draws a polygon outline in the Turtle&rsquo;s current colour and thickness, connecting the last <code>n</code> locations that the Turtle has visited."}),Object(n.c)({names:["POLYGON","polygon","polygon"],code:c.pc.pfil,parameters:[Object(n.i)("n","integer")],category:2,level:1,description:"Draws a filled polygon in the Turtle&rsquo;s current colour and thickness, connecting the last <code>n</code> locations that the Turtle has visited."}),Object(n.c)({names:["FORGET","forget","forget"],code:c.pc.frgt,parameters:[Object(n.i)("n","integer")],category:2,level:1,description:"Makes the Turtle &ldquo;forget&rdquo; the last <code>n</code> points it has visited. Used in conjunction with <code>polyline</code> and <code>polygon</code>."}),Object(n.c)({names:["REMEMBER","remember","remember"],code:c.pc.rmbr,category:2,level:1,description:"Makes the Turtle &ldquo;remember&rdquo; its current location. This is only necessary if its current location was set by a direct assignment of the global variables <code>turtx</code> and <code>turty</code>; when using the standard moving commands, the Turtle automatically remembers where it has been."}),Object(n.c)({names:["BOX","box","box"],code:c.pc.box,parameters:[Object(n.i)("x","integer"),Object(n.i)("y","integer"),Object(n.i)("colour","integer"),Object(n.i)("border","boolean")],category:2,level:1,description:"Draws a box of width <code>x</code> and height <code>y</code>, with the top left corner in the Turtle&rsquo;s current location, filled with the specified <code>colour</code>. If <code>border</code> is <code>true</code>, a border is drawn around the box in the Turtle&rsquo;s current colour and and thickness. This is intended to be used with the <code>print</code> command, to provide a box for framing text."}),Object(n.c)({names:["COLOUR","colour","colour"],code:c.pc.colr,parameters:[Object(n.i)("colour","integer")],category:3,level:0,description:"Sets the <code>colour</code> of the Turtle&rsquo;s pen. Takes as an argument either an RGB value, or one of the Turtle System&rsquo;s fifty predefined colour constants (see the <b>Colours</b> tab). This can also be achieved by direct assignment of the global variable <code>turtc</code>."}),Object(n.c)({names:["RNDCOL","randcol","randcol"],code:c.pc.rndc,parameters:[Object(n.i)("n","integer")],category:3,level:0,description:"Assigns a random colour to the Turte&rsquo;s pen, between 1 and <code>n</code> (maximum 50). The colours are taken from the Turtle System&rsquo;s fifty predefined colours, which are each assigned a number between 1 and 50 (see the <b>Colours</b> tab)."}),Object(n.c)({names:["THICKNESS","thickness","thickness"],code:c.pc.thik,parameters:[Object(n.i)("thickness","integer")],category:3,level:0,description:"Sets the <code>thickness</code> of the Turtle&rsquo;s pen (for line drawing, and outlines of circles, ellipses, boxes, and polygons). This can also be achieved by direct assignment of the global variable <code>turtt</code>."}),Object(n.c)({names:["PENUP","penup","penup"],code:c.pc.pnup,category:3,level:0,description:"Lifts the Turtle&rsquo;s pen, so that subsequent movement will not draw a line on the Canvas."}),Object(n.c)({names:["PENDOWN","pendown","pendown"],code:c.pc.pndn,category:3,level:0,description:"Lowers the Turtle&rsquo;s pen, so that subsequent movement will draw a line on the Canvas."}),Object(n.c)({names:["OUTPUT","output","output"],code:c.pc.outp,parameters:[Object(n.i)("clear","boolean"),Object(n.i)("colour","integer"),Object(n.i)("tofront","boolean")],category:3,level:1,description:"Modifies the textual output. If the first argument is <code>true</code>, it clears any existing text. The second argument specifies the background colour, and the third argument is for switching the display. If the third argument is <code>true</code>, it switches to the <b>Output</b> tab, while if it is <code>false</code>, it switches to the <b>Canvas and Console</b> tab."}),Object(n.c)({names:["CONSOLE","console","console"],code:c.pc.cons,parameters:[Object(n.i)("clear","boolean"),Object(n.i)("colour","integer")],category:3,level:1,description:"Modifies the Console; if the first argument is <code>true</code>, it clears any existing text, while the second argument specifies the background colour."}),Object(n.c)({names:["RGB","rgb","rgb"],code:c.pc.rgb,parameters:[Object(n.i)("colour","integer")],returns:"integer",category:3,level:2,description:"Returns the RGB value of the input <code>colour</code> (an integer between 1 and 50). For example, <code>rgb(red)=255</code>."}),Object(n.c)({names:["MIXCOLS","mixcols","mixcols"],code:c.pc.mixc,parameters:[Object(n.i)("colour1","integer"),Object(n.i)("colour1","integer"),Object(n.i)("proportion1","integer"),Object(n.i)("proportion2","integer")],returns:"integer",category:3,level:2,description:"Mixes the given colours in the given proportions."}),Object(n.c)({names:["NEWTURTLE","newturtle","newturtle"],code:c.pc.newt,parameters:[Object(n.i)("array","integer",!0,5)],category:3,level:2,description:"Points the Turtle to a custom array in memory (this must be an array of five integers, corresponding to the Turtle&rsquo;s five properties, <code>turtx</code>, <code>turty</code>, <code>turtd</code>, <code>turtt</code>, and <code>turtc</code>). Use repeatedly to simulate multiple Turtles."}),Object(n.c)({names:["OLDTURTLE","oldturtle","oldturtle"],code:c.pc.oldt,category:3,level:2,description:"Points the Turtle back to the default (built-in) array in memory. Use in conjunction with <code>newturtle</code>."}),Object(n.c)({names:["UPDATE","update","update"],code:c.pc.udat,category:4,level:0,description:"Makes the Machine update the Canvas, and continue updating with all subsequent drawing commands. Used in conjunction with <em>noupdate</em>."}),Object(n.c)({names:["NOUPDATE","noupdate","noupdate"],code:c.pc.ndat,category:4,level:0,description:"Makes the Machine refrain from updating the Canvas when executing all subsequent drawing commands, until <em>update</em> is called. Use this to create smooth animations, by queueing up several drawing commands to execute simultaneously."}),Object(n.c)({names:["BLANK","blank","blank"],code:c.pc.blnk,parameters:[Object(n.i)("colour","integer")],category:4,level:0,description:"Blanks the entire Canvas with the specified <code>colour</code>."}),Object(n.c)({names:["CANVAS","canvas","canvas"],code:c.pc.canv,parameters:[Object(n.i)("x1","integer"),Object(n.i)("y1","integer"),Object(n.i)("x2","integer"),Object(n.i)("y2","integer")],category:4,level:1,description:"Sets the top left Canvas coordinate to <code>(x1,y1)</code>, and the Canvas width and height to <code>x2</code> and <code>y2</code> respectively. Note that the width and height fix the number of virtual points on the Canvas, not the number of actual pixels."}),Object(n.c)({names:["RESOLUTION","resolution","resolution"],code:c.pc.reso,parameters:[Object(n.i)("x","integer"),Object(n.i)("y","integer")],category:4,level:1,description:"Sets the Canvas resolution, i.e. the number of actual pixels in the <code>x</code> and <code>y</code> dimensions. To be used in conjunction with the <code>canvas</code> command, typically to set the number of actual pixels equal to the number of virtual points on the Canvas."}),Object(n.c)({names:["ANGLES","angles","angles"],code:c.pc.angl,parameters:[Object(n.i)("degrees","integer")],category:4,level:1,description:"Sets the number of <code>degrees</code> in a circle (360 by default)."}),Object(n.c)({names:["PIXSET","pixset","pixset"],code:c.pc.pixs,parameters:[Object(n.i)("x","integer"),Object(n.i)("y","integer"),Object(n.i)("colour","integer")],category:4,level:2,description:"Sets the <code>colour</code> at point <code>(x,y)</code>."}),Object(n.c)({names:["PIXCOL","pixcol","pixcol"],code:c.pc.pixc,parameters:[Object(n.i)("x","integer"),Object(n.i)("y","integer")],returns:"integer",category:4,level:2,description:"Returns the RGB value of the colour at point <code>(x,y)</code>."}),Object(n.c)({names:["RECOLOUR","recolour","recolour"],code:c.pc.rcol,parameters:[Object(n.i)("x","integer"),Object(n.i)("y","integer"),Object(n.i)("colour","integer")],category:4,level:2,description:"Floods the Canvas with the specified <code>colour</code>, starting at point <code>(x,y)</code>, until reaching any different colour."}),Object(n.c)({names:["FILL","fill","fill"],code:c.pc.fill,parameters:[Object(n.i)("x","integer"),Object(n.i)("y","integer"),Object(n.i)("colour","integer"),Object(n.i)("boundary","integer")],category:4,level:2,description:"Floods the Canvas with the specified <code>colour</code>, starting at point <code>(x,y)</code>, until reaching the <code>boundary</code> colour."}),Object(n.c)({names:["INC","inc","inc"],code:c.pc.incr,parameters:[Object(n.i)("variable","integer",!0)],category:5,level:0,description:"Increments the specified <code>variable</code> by 1."}),Object(n.c)({names:["DEC","dec","dec"],code:c.pc.decr,parameters:[Object(n.i)("variable","integer",!0)],category:5,level:0,description:"Decrements the specified <code>variable</code> by 1."}),Object(n.c)({names:["ABS","abs","abs"],code:c.pc.abs,parameters:[Object(n.i)("n","integer")],returns:"integer",category:5,level:0,description:"Returns the absolute value of <code>n</code>, i.e. <code>n</code> if positive, <code>-n</code> if negative."}),Object(n.c)({names:["SIGN","sign","sign"],code:c.pc.sign,parameters:[Object(n.i)("a","integer")],returns:"integer",category:5,level:1,description:"Returns <code>+1</code> if <code>a</code> is positive, <code>-1</code> if <code>a</code> is negative, and <code>0</code> otherwise."}),Object(n.c)({names:["MAX","max","max"],code:c.pc.maxi,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer")],returns:"integer",category:5,level:1,description:"Returns the maximum of <code>a</code> and <code>b</code>."}),Object(n.c)({names:["MIN","min","min"],code:c.pc.mini,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer")],returns:"integer",category:5,level:1,description:"Returns the minimum of <code>a</code> and <code>b</code>."}),Object(n.c)({names:["SQR","sqrt","sqrt"],code:c.pc.sqrt,parameters:[Object(n.i)("a","integer"),Object(n.i)("mult","integer")],returns:"integer",category:5,level:1,description:"Returns <code>&radic;a</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["HYPOT","hypot","hypot"],code:c.pc.hyp,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:5,level:1,description:"Returns <code>&radic;(a<sup>2</sup>+b<sup>2</sup>)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["RND",null,null],code:c.pc.rand,parameters:[Object(n.i)("n","integer")],returns:"integer",category:5,level:1,description:"Returns a random integer between 1 and <code>n</code>."}),Object(n.c)({names:[null,"random",null],code:c.pc.rand,parameters:[Object(n.i)("n","integer")],returns:"integer",category:5,level:1,description:"Returns a random non-negative integer less than <code>n</code>."}),Object(n.c)({names:[null,null,"randint"],code:c.pc.rand,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer")],returns:"integer",category:5,level:1,description:"Returns a random integer between <code>a</code> and <code>b</code>."}),Object(n.c)({names:["POWER","power","power"],code:c.pc.powr,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("c","integer"),Object(n.i)("mult","integer")],returns:"integer",category:5,level:2,description:"Returns <code>(a/b)<sup>c</sup></code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["ROOT","root","root"],code:c.pc.root,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("c","integer"),Object(n.i)("mult","integer")],returns:"integer",category:5,level:2,description:"Returns <code><sup>c</sup>&radic;(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["DIVMULT","divmult","divmult"],code:c.pc.divm,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:5,level:2,description:"Returns <code>a/b</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["MAXINT","maxint","maxint"],code:c.pc.mxin,returns:"integer",category:5,level:2,description:"Returns the maximum integer that the Machine can deal with (2<sup>31</sup>-1)."}),Object(n.c)({names:["SIN","sin","sin"],code:c.pc.sin,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:6,level:1,description:"Returns <code>sin(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["COS","cos","cos"],code:c.pc.cos,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:6,level:1,description:"Returns <code>cos(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["TAN","tan","tan"],code:c.pc.tan,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:6,level:1,description:"Returns <code>tan(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["PI","pi","pi"],code:c.pc.pi,parameters:[Object(n.i)("mult","integer")],returns:"integer",category:6,level:1,description:"Returns the value of Pi, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["EXP","exp","exp"],code:c.pc.exp,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:6,level:1,description:"Returns <code>a<sup>b</sup></code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["LN","ln","ln"],code:c.pc.ln,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:6,level:1,description:"Returns <code>ln(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["ANTILOG","antilog","antilog"],code:c.pc.alog,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:6,level:2,description:"Returns <code>antilog<sub>10</sub>(a/b)</code> - i.e. <code>10<sup>a/b</sub></code> - multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["LOG10","log10","log10"],code:c.pc.log,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:6,level:2,description:"Returns <code>log<sub>10</sub>(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["ASN","arcsin","asin"],code:c.pc.asin,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:6,level:2,description:"Returns <code>arcsin(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["ACS","arccos","acos"],code:c.pc.acos,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:6,level:2,description:"Returns <code>arccos(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["ATN","arctan","atan"],code:c.pc.atan,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("mult","integer")],returns:"integer",category:6,level:2,description:"Returns <code>arctan(a/b)</code>, multiplied by <code>mult</code> and rounded to the nearest integer. Use the multiplier to approximate real numbers."}),Object(n.c)({names:["WRITE","write","write"],code:c.pc.text,parameters:[Object(n.i)("string","string")],category:7,level:0,description:"Writes the input <code>string</code> to the console and textual output area of the System."}),Object(n.c)({names:["WRITELN","writeln","writeline"],code:c.pc.texl,parameters:[Object(n.i)("string","string")],category:7,level:0,description:"Writes the input <code>string</code> to the console and textual output area of the System, followed by a line break."}),Object(n.c)({names:["PRINT","print","print"],code:c.pc.prnt,parameters:[Object(n.i)("string","string"),Object(n.i)("font","integer"),Object(n.i)("size","integer")],category:7,level:0,description:"Prints the input <code>string</code> in the Turtle&rsquo;s current colour and at the Turtle&rsquo;s current location, in the specified <code>font</code> and <code>size</code>. Can be used in conjunction with the <code>box</code> drawing command. For a list of available fonts, see the <b>Constants</b> tab."}),Object(n.c)({names:["UCASE$","uppercase","upper"],code:c.pc.uppc,parameters:[Object(n.i)("string","string")],returns:"string",category:7,level:1,description:"Returns the input <code>string</code> as all uppercase."}),Object(n.c)({names:["LCASE$","lowercase","lower"],code:c.pc.lowc,parameters:[Object(n.i)("string","string")],returns:"string",category:7,level:1,description:"Returns the input <code>string</code> as all lowercase."}),Object(n.c)({names:["LEN","length","len"],code:c.pc.slen,parameters:[Object(n.i)("string","string")],returns:"integer",category:7,level:1,description:"Returns the length of the input <code>string</code> (i.e. the number of characters)."}),Object(n.c)({names:["DEL$","delete",null],code:c.pc.dels,parameters:[Object(n.i)("string","string"),Object(n.i)("index","integer"),Object(n.i)("length","integer")],returns:"string",category:7,level:2,description:"Returns the input <code>string</code> with some characters removed, starting at the given <code>index</code> and of the specified <code>length</code>."}),Object(n.c)({names:["LEFT$",null,null],code:c.pc.lefs,parameters:[Object(n.i)("string","string"),Object(n.i)("length","integer")],returns:"string",category:7,level:2,description:"Returns a copy of the characters in the input <code>string</code>, starting on the left and of the specified <code>length</code>."}),Object(n.c)({names:["MID$","copy","copy"],code:c.pc.copy,parameters:[Object(n.i)("string","string"),Object(n.i)("index","integer"),Object(n.i)("length","integer")],returns:"string",category:7,level:2,description:"Returns a copy of the characters in the input <code>string</code>, starting at the given <code>index</code> and of the specified <code>length</code>."}),Object(n.c)({names:["RIGHT$",null,null],code:c.pc.rgts,parameters:[Object(n.i)("string","string"),Object(n.i)("length","integer")],returns:"string",category:7,level:2,description:"Returns a copy of the characters in the input <code>string</code>, starting on the right and of the specified <code>length</code>."}),Object(n.c)({names:["INS$",null,"insert"],code:c.pc.inss,parameters:[Object(n.i)("string","string"),Object(n.i)("index","integer"),Object(n.i)("substr","string")],returns:"string",category:7,level:2,description:"Returns the input <code>string</code> with the specified <code>substring</code> inserted at the given <code>index</code>."}),Object(n.c)({names:[null,"insert",null],code:c.pc.inss,parameters:[Object(n.i)("substr","string"),Object(n.i)("string","string"),Object(n.i)("index","integer")],returns:"string",category:7,level:2,description:"Returns the input <code>string</code> with the specified <code>substring</code> inserted at the given <code>index</code>."}),Object(n.c)({names:["REPLACE","replace","replace"],code:c.pc.repl,parameters:[Object(n.i)("string","string"),Object(n.i)("substr","string"),Object(n.i)("replace","string"),Object(n.i)("n","integer")],returns:"string",category:7,level:2,description:"Returns the input <code>string</code> with up to <code>n</code> occurences of <code>substring</code> replaced by <code>replace</code>. Set <code>n</code> equal to <code>0</code> to replace every occurence."}),Object(n.c)({names:["INSTR",null,"find"],code:c.pc.poss,parameters:[Object(n.i)("string","string"),Object(n.i)("substr","string")],returns:"integer",category:7,level:2,description:"Searches for the input <code>substring</code> within the given <code>string</code>; returns the index of the first character if found, 0 otherwise."}),Object(n.c)({names:[null,"pos",null],code:c.pc.poss,parameters:[Object(n.i)("substr","string"),Object(n.i)("string","string")],returns:"integer",category:7,level:2,description:"Searches for the input <code>substring</code> within the given <code>string</code>; returns the index of the first character if found, 0 otherwise."}),Object(n.c)({names:["STR$","str","str"],code:c.pc.itos,parameters:[Object(n.i)("n","integer")],returns:"string",category:8,level:0,description:"Returns the integer <code>n</code> as a string, e.g. <code>str(12)='12'</code>."}),Object(n.c)({names:["VAL","val","integer"],code:c.pc.svd0,parameters:[Object(n.i)("string","string")],returns:"integer",category:8,level:0,description:"Returns the input <code>string</code> as an integer, e.g. <code>val('12')=12</code>. Returns <code>0</code> if the string cannot be converted (i.e. if it is not an integer string)."}),Object(n.c)({names:["VALDEF","valdef","intdef"],code:c.pc.sval,parameters:[Object(n.i)("string","string"),Object(n.i)("default","string")],returns:"integer",category:8,level:0,description:"Returns the input <code>string</code> as an integer, e.g. <code>val('12')=12</code>. Returns the specified <code>default</code> value if the string cannot be converted (i.e. if it is not an integer string)."}),Object(n.c)({names:["QSTR$","qstr","qstr"],code:c.pc.qtos,parameters:[Object(n.i)("a","integer"),Object(n.i)("b","integer"),Object(n.i)("decplaces","integer")],returns:"string",category:8,level:1,description:"Returns the value of <code>a/b</code> to the specified number of decimal places, as a decimal string, e.g. <code>qstr(2,3,4)='0.6667'</code>."}),Object(n.c)({names:["QVAL","qval","qval"],code:c.pc.qval,parameters:[Object(n.i)("string","string"),Object(n.i)("mult","integer"),Object(n.i)("default","integer")],returns:"integer",category:8,level:1,description:"Returns the input decimal <code>string</code> as an integer, multiplied by <code>mult</code> and rounded to the nearest integer, e.g. <code>qval('1.5',10)=15</code>. Returns the specified <code>default</code> value if the string cannot be converted (i.e. if it is not a decimal string)."}),Object(n.c)({names:["CHR$","chr","chr"],code:c.pc.null,parameters:[Object(n.i)("n","integer")],returns:"char",category:8,level:2,description:"Returns the character with ASCII character code <code>n</code>, e.g. <code>chr(65)='A'</code>."}),Object(n.c)({names:["ASC","ord","ord"],code:c.pc.null,parameters:[Object(n.i)("char","char")],returns:"integer",category:8,level:2,description:"Returns the ASCII code of the input character <code>char</code> (which must be a string of length 1), e.g. <code>ord('A')=65</code>."}),Object(n.c)({names:["BOOLINT","boolint",null],code:c.pc.null,parameters:[Object(n.i)("boolean","boolean")],returns:"integer",category:8,level:2,description:"Returns the input <code>boolean</code> as an integer (-1 for <code>true</code>, 0 for <code>false</code>)."}),Object(n.c)({names:[null,null,"boolint"],code:c.pc.bool,parameters:[Object(n.i)("boolean","boolean")],returns:"integer",category:8,level:2,description:"Returns the input <code>boolean</code> as an integer (1 for <code>true</code>, 0 for <code>false</code>)."}),Object(n.c)({names:["HEX$","hexstr","hex"],code:c.pc.hexs,parameters:[Object(n.i)("n","integer"),Object(n.i)("minlength","integer")],category:8,level:2,description:"Returns a string representation of integer <code>n</code> in hexadecimal format, padded with leading zeros as up to <code>minlength</code>, e.g. <code>hexstr(255,6)='0000FF'</code>."}),Object(n.c)({names:["PAUSE","pause","pause"],code:c.pc.wait,parameters:[Object(n.i)("m","integer")],category:9,level:0,description:"Makes the Turtle Machine wait <code>m</code> milliseconds before performing the next operation. This is useful for controlling the speed of animations."}),Object(n.c)({names:["GETLINE$","readln","readline"],code:c.pc.rdln,returns:"string",category:9,level:0,description:"Waits for the RETURN key to be pressed, then returns everything in the keybuffer up to (and not including) the new line character."}),Object(n.c)({names:["INPUT$",null,"input"],code:c.pc.ilin,parameters:[Object(n.i)("prompt","string")],returns:"string",category:9,level:0,description:"Gives an input prompt, then returns the input when the RETURN key is pressed (using the keybuffer)."}),Object(n.c)({names:["CURSOR","cursor","cursor"],code:c.pc.curs,parameters:[Object(n.i)("cursorcode","integer")],category:9,level:1,description:"Sets which cursor to display (1-15) when the mouse pointer is over the canvas. 0 hides the cursor; any value outside the range 0-15 resets the default cursor. For a list of available cursors, see the <b>Cursors</b> tab."}),Object(n.c)({names:["KEYECHO","keyecho","keyecho"],code:c.pc.kech,parameters:[Object(n.i)("on","boolean")],category:9,level:1,description:"Turns the keyboard echo to the console on (<code>true</code>) or off (<code>false</code>)."}),Object(n.c)({names:["DETECT","detect","detect"],code:c.pc.tdet,parameters:[Object(n.i)("keycode","integer"),Object(n.i)("m","integer")],returns:"boolean",category:9,level:1,description:"Waits a maximum of <code>m</code> milliseconds for the key with the specified <code>keycode</code> to be pressed; returns <code>true</code> if pressed (and stops waiting), <code>false</code> otherwise."}),Object(n.c)({names:["GET$","read","read"],code:c.pc.read,parameters:[Object(n.i)("n","integer")],returns:"string",category:9,level:1,description:"Returns the first <code>n</code> characters from the keybuffer as a string."}),Object(n.c)({names:["TIME","time","time"],code:c.pc.time,returns:"integer",category:9,level:1,description:"Returns the time (in milliseconds) since the program began."}),Object(n.c)({names:["TIMESET","timeset","timeset"],code:c.pc.tset,parameters:[Object(n.i)("m","integer")],category:9,level:1,description:"Artificially sets the time since the program began to <code>m</code> milliseconds."}),Object(n.c)({names:["RESET","reset","reset"],code:c.pc.iclr,parameters:[Object(n.i)("?input","integer")],category:9,level:2,description:"Resets the specified <code>?input</code> (<code>?mousex</code>, <code>?mousey</code>, <code>?click</code>, etc.) to its initial value (i.e. -1)."}),Object(n.c)({names:["KEYSTATUS","keystatus","keystatus"],code:c.pc.inpt,parameters:[Object(n.i)("keycode","integer")],returns:"integer",category:9,level:2,description:"Returns the <code>?kshift</code> value for the most recent press of the key with the specified <code>keycode</code>."}),Object(n.c)({names:["KEYBUFFER","keybuffer","keybuffer"],code:c.pc.bufr,parameters:[Object(n.i)("n","integer")],category:9,level:2,description:"Creates a new custom keybuffer of length <code>n</code>. A keybuffer of length 32 is available by default; use this command if you need a larger buffer."}),Object(n.c)({names:["HALT","halt","halt"],code:c.pc.halt,category:10,level:0,description:"Halts the program."}),Object(n.c)({names:["TRACE","trace","trace"],code:c.pc.trac,parameters:[Object(n.i)("on","boolean")],category:10,level:2,description:"Turns the PCode trace facility on (<code>true</code>) or off (<code>false</code>)."}),Object(n.c)({names:["WATCH","watch","watch"],code:c.pc.memw,parameters:[Object(n.i)("address","integer")],category:10,level:2,description:"Sets an <code>address</code> in memory for the trace facility to watch."}),Object(n.c)({names:["DUMP","dump","dump"],code:c.pc.dump,category:10,level:2,description:"&ldquo;Dumps&rdquo; the current memory state into the display in the memory tab."}),Object(n.c)({names:["HEAPRESET","heapreset","heapreset"],code:c.pc.hrst,category:10,level:2,description:"Resets the memory heap to the initial global value."})],r=[Object(n.a)(0,"Turtle: relative movement",a.filter(e=>0===e.category)),Object(n.a)(1,"Turtle: absolute movement",a.filter(e=>1===e.category)),Object(n.a)(2,"Turtle: drawing shapes",a.filter(e=>2===e.category)),Object(n.a)(3,"Other Turtle commands",a.filter(e=>3===e.category)),Object(n.a)(4,"Canvas operations",a.filter(e=>4===e.category)),Object(n.a)(5,"General arithmetic functions",a.filter(e=>5===e.category)),Object(n.a)(6,"Trig / exp / log functions",a.filter(e=>6===e.category)),Object(n.a)(7,"String operations",a.filter(e=>7===e.category)),Object(n.a)(8,"Type conversion routines",a.filter(e=>8===e.category)),Object(n.a)(9,"Input and timing routines",a.filter(e=>9===e.category)),Object(n.a)(10,"Turtle Machine monitoring",a.filter(e=>10===e.category))],i=r.concat({title:"Command structures",expressions:[Object(n.e)(["IF","if","if"],0),Object(n.e)(["ELSE","else","else"],0),Object(n.e)(["FOR","for","for"],0),Object(n.e)(["REPEAT","repeat","repeat"],1),Object(n.e)(["WHILE","while","while"],1),Object(n.e)(["DEF",null,"def"],1),Object(n.e)([null,"procedure",null],1),Object(n.e)([null,"function",null],2)]},{title:"Variable scope modifiers",expressions:[Object(n.e)(["LOCAL",null,null],1),Object(n.e)(["PRIVATE",null,null],2),Object(n.e)([null,null,"global"],1),Object(n.e)([null,null,"nonlocal"],2)]})},function(e,t,o){e.exports=((e,t,o)=>{if("null"!==e&&t!==e&&("string"!==e||"char"!==t)&&("boolint"!==e||"boolean"!==t&&"integer"!==t)&&("boolint"!==t||"boolean"!==e&&"integer"!==e))throw n(`Type error: '${e}' expected but '${t}' found.`,o)});const n=o(9)},function(e,t,o){e.exports=((e,t)=>n[t](e));const n={BASIC:o(20),Pascal:o(21),Python:o(22)}},function(e,t,o){e.exports=((e,t,o)=>n.concat({title:"Subroutine calls",expressions:t}).map(r.bind(null,o,e)).filter(e=>e.expressions.length>0));const{usage:n}=o(12),c=(e,t)=>` ${t.line.toString(10)}`,a=(e,t)=>e+t.count,r=(e,t,o)=>{const n=o.expressions.filter(((e,t,o)=>{const n=o.name||o.names[e];return t.filter(e=>e.content===n).length>0}).bind(null,e,t)).map(((e,t,o)=>{const n=o.name||o.names[e],a=t.filter(e=>e.content===n);return{name:n,level:o.level+1,count:a.length,lines:a.reduce(c,"").trim()}}).bind(null,e,t));return{title:o.title,expressions:n,total:n.reduce(a,0)}}},function(e,t,o){e.exports=((e,t)=>{const o=c(e,t),i=[],s=["BASIC","Pascal","Python"].indexOf(t);let l=0,d=1,h=!0,u=0;for(;l<o.length;){switch(o[l].type){case"linebreak":d+=1,h=!0,u=0;break;case"spaces":h&&(u=o[l].content.length),h=!1;break;case"comment":h=!1;break;case"unterminated-comment":throw n(a[0],r(o[l],d,u,t));case"unterminated-string":throw n(a[1],r(o[l],d,u,t));case"bad-binary":throw n(a[2+s],r(o[l],d,u,t));case"bad-octal":throw n(a[5+s],r(o[l],d,u,t));case"bad-hexadecimal":throw n(a[8+s],r(o[l],d,u,t));case"bad-decimal":throw n(a[11],r(o[l],d,u,t));case"illegal":throw n(a[12],r(o[l],d,u,t));default:h=!1,i.push(r(o[l],d,u,t))}l+=1}return i});const{error:n}=o(6),c=o(14),a=["Unterminated comment.","Unterminated string.","Binary numbers in Turtle BASIC begin with '%'.","Binary numbers in Turtle Pascal begin with '%'.","Binary numbers in Turtle Python begin with '0b'.","Turtle BASIC does not support octal numbers.","Octal numbers in Turtle Pascal begin with '&'","Octal numbers in Turtle Python begin with '0o'","Hexadecimal numbers in Turtle BASIC begin with '&'","Hexadecimal numbers in Turtle Pascal begin with '$'","Hexadecimal numbers in Turtle Python begin with '0x'","The Turtle System does not support real numbers.","Illegal character in this context."],r=(e,t,o,n)=>({type:i(e.type,e.content),content:"Pascal"===n?e.content.toLowerCase():e.content,value:s(e.type,e.content,n),line:t,offset:o}),i=(e,t)=>{switch(e){case"binary":case"octal":case"hexadecimal":case"decimal":return"integer";case"command":case"colour":case"custom":case"variable":return"identifier";default:return e}},s=(e,t,o)=>{switch(e){case"operator":switch(t.toLowerCase()){case"+":return"plus";case"-":return"subt";case"*":return"mult";case"/":return"divr";case"div":case"//":return"div";case"mod":case"%":return"mod";case"=":case"==":return"eqal";case"<>":case"!=":return"noeq";case"<=":return"lseq";case">=":return"mreq";case"<":return"less";case">":return"more";case"not":return"not";case"and":return"and";case"or":return"or";case"xor":case"eor":return"xor";default:return null}case"string":return t.slice(1,-1).replace(/''/g,"'").replace(/\\('|")/g,"$1");case"boolean":return"true"===t.toLowerCase()?-1:0;case"binary":return"Python"===o?parseInt(t.slice(2),2):parseInt(t.slice(1),2);case"octal":return"Python"===o?parseInt(t.slice(2),8):parseInt(t.slice(1),8);case"hexadecimal":return"Python"===o?parseInt(t.slice(2),16):parseInt(t.slice(1),16);case"decimal":return parseInt(t);case"turtle":return["x","y","d","t","c"].indexOf(t[4].toLowerCase())+1;default:return null}}},function(e,t){e.exports.program=((e,t)=>({language:t,name:e,index:0,indent:0,constants:[],variables:[],subroutines:[],lexemes:[],turtleAddress:null,memoryNeeded:null})),e.exports.subroutine=((e,t,o)=>({name:e,type:t,level:-1,index:null,indent:null,globals:[],nonlocals:[],constants:[],parameters:[],variables:[],parent:o,subroutines:[],lexemes:[],memoryNeeded:null})),e.exports.constant=((e,t,o)=>({name:e,type:t,value:o})),e.exports.variable=((e,t,o=!1)=>({name:e.content,lexeme:e,routine:t,byref:o,index:null,fulltype:null,private:null})),e.exports.fulltype=((e,t=null,o=null,n=null)=>"string"===e?{type:e,length:33,start:o,fulltype:n}:{type:e,length:t,start:o,fulltype:n})},function(e,t,o){e.exports.expression=((e,t,o,n,c)=>{const a=["eqal","less","lseq","more","mreq","noeq"];"boolean"===n&&(n="null");let r=l(e,t,o,n,c);for(;e.lexemes[r.lex]&&a.indexOf(e.lexemes[r.lex].value)>-1;){let t=s(e.lexemes[r.lex].value,r.type),o=l(e,r.lex+1,r.type,n,c);r=i.mergeWithOperator(r.pcode,o,t)}return r}),e.exports.variableAssignment=((t,o,n,c)=>{const s=r.variable(t,o,c);if(!s)throw a(`Variable "${o}" is not defined.`,t.lexemes[n]);if(!t.lexemes[n])throw a(`Variable "${o}" must be assigned a value.`,t.lexemes[n-1]);const l=e.exports.expression(t,n,"null",s.fulltype.type,c);return{lex:l.lex,pcode:i.merge(l.pcode,[i.storeVariableValue(s)])}}),e.exports.procedureCall=((e,t,o,n=!0)=>{const c=r.command(e,e.lexemes[t].content,o);if(!c)throw a("{lex} is not defined.",e.lexemes[t]);if(n&&"procedure"!==c.type)throw a("{lex} is a function, not a procedure.",e.lexemes[t]);return 0===c.parameters.length?g(e,t,c,o):m(e,t,c,o)});const n=o(19),c=o(13),a=o(9),r=o(7),i=o(10),s=(e,t)=>{return"string"===t||"char"===t?["seql","sles","sleq","smor","smeq","sneq","scat"][["eqal","less","lseq","more","mreq","noeq","plus"].indexOf(e)]:e},l=(e,t,o,n,c)=>{const a=["plus","subt","or","xor"];let r=d(e,t,o,n,c);for(;e.lexemes[r.lex]&&a.indexOf(e.lexemes[r.lex].value)>-1;){let t=s(e.lexemes[r.lex].value,r.type),o=d(e,r.lex+1,r.type,n,c);r=i.mergeWithOperator(r.pcode,o,t)}return r},d=(e,t,o,n,c)=>{const a=["and","div","divr","mod","mult"];let r=h(e,t,o,n,c);for(;e.lexemes[r.lex]&&a.indexOf(e.lexemes[r.lex].value)>-1;){let t=s(e.lexemes[r.lex].value,r.type),o=h(e,r.lex+1,r.type,n,c);r=i.mergeWithOperator(r.pcode,o,t)}return r},h=(e,t,o,c,r)=>{switch(e.lexemes[t].type){case"operator":return u(e,t,c,r)||(()=>{throw a("{lex} makes no sense here.",e.lexemes[t])})();case"boolean":case"char":case"integer":case"string":return n.literal(e.lexemes,t,c);case"keycode":case"query":return n.input(e.lexemes,t,c,r)||(()=>{throw a("{lex} is not a valid input code.",e.lexemes[t])})();case"turtle":case"identifier":return n.constant(e,t,c,r)||n.variable(e,t,c,r)||n.colour(e,t,c,r)||b(e,t,c,r)||(()=>{throw a("{lex} is not defined.",e.lexemes[t])})();default:return p(e,t,o,c,r)||(()=>{throw a("{lex} makes no sense here.",e.lexemes[t])})()}},u=(e,t,o,n)=>{if("-"===e.lexemes[t].content||"not"===e.lexemes[t].value){const a="-"===e.lexemes[t].content?"integer":"boolint",r="-"===e.lexemes[t].content?[i.applyOperator("neg")]:[i.applyOperator("not")];c(o,"integer",e.lexemes[t]);const s=h(e,t+1,a,o,n);return Object.assign(s,{pcode:i.merge(s.pcode,r)})}return null},b=(t,o,n,s)=>{const l=r.command(t,t.lexemes[o].content,s);if(l){if("function"!==l.type)throw a("{lex} is a procedure, not a function.",t.lexemes[o]);c(n,l.returns,t.lexemes[o]);const r=e.exports.procedureCall(t,o,s,!1);return l.code||r.pcode.push(i.loadFunctionReturnValue(l.resultAddress)),Object.assign(r,{type:l.returns})}return null},p=(t,o,n,c,r)=>{if("("===t.lexemes[o].content){const i=e.exports.expression(t,o+1,n,c,r);if(t.lexemes[i.lex]&&")"===t.lexemes[i.lex].content)return Object.assign(i,{lex:i.lex+1});throw a("Closing bracket missing.",t.lexemes[o-1])}return null},g=(e,t,o,n)=>{if("Python"===n){if(!e.lexemes[t+1]||"("!==e.lexemes[t+1].content)throw a("Opening bracket missing after command {lex}.",e.lexemes[t]);if(!e.lexemes[t+2]||")"!==e.lexemes[t+2].content)throw a("Command {lex} takes no arguments.",e.lexemes[t-1]);return{lex:t+3,pcode:[i.callCommand(o,e,n)]}}if(e.lexemes[t+1]&&"("===e.lexemes[t+1].content)throw a("Command {lex} takes no arguments.",e.lexemes[t]);return{lex:t+1,pcode:[i.callCommand(o,e,n)]}},m=(e,t,o,n)=>{if(!e.lexemes[t+1]||"("!==e.lexemes[t+1].content)throw a("Opening bracket missing after command {lex}.",e.lexemes[t]);const c=f(e,t+2,o,n),r=[i.callCommand(o,e,n)];return Object.assign(c,{pcode:i.merge(c.pcode,r)})},f=(e,t,o,n)=>{const c=o.parameters.length;let r=0,s=[[]];for(;r<c&&")"!==e.lexemes[t].content;){let l=O(e,t,o,r,n);if(r+=1,t=l.lex,s=i.merge(s,l.pcode),r<c){if(!e.lexemes[t]||","!==e.lexemes[t].content)throw a("Comma needed after parameter.",e.lexemes[t]);t+=1}}const l=o.name||o.names[n];if(r<c)throw a(`Not enough arguments given for command "${l}".`,e.lexemes[t]);if(","===e.lexemes[t].content)throw a(`Too many arguments given for command "${l}"`,e.lexemes[t]);if(")"!==e.lexemes[t].content)throw a(`Closing bracket missing after command "${l}"`,e.lexemes[t-1]);return{lex:t+1,pcode:s}},O=(t,o,n,c,s)=>{if(n.parameters[c].byref){let e=r.variable(t,t.lexemes[o].content,s);if(!e)throw a("{lex} is not defined.}",t.lexemes[o]);return{lex:o+1,pcode:[i.loadVariableAddress(e)]}}const l=n.parameters[c].type||n.parameters[c].fulltype.type;return e.exports.expression(t,o,"null",l,s)}},function(e,t,o){e.exports.literal=((e,t,o)=>{const{type:c,value:r}=e[t];return n(o,c,e[t]),"char"===c&&"string"===o?{type:c,lex:t+1,pcode:[a.loadLiteralValue(c,r),a.applyOperator("ctos")]}:{type:c,lex:t+1,pcode:[a.loadLiteralValue(c,r)]}}),e.exports.input=((e,t,o,r)=>{const i=c.input(e[t].content,r);if(i)return n(o,i.type,e[t]),{type:"integer",lex:t+1,pcode:[a.loadInputValue(i)]}}),e.exports.constant=((e,t,o,r)=>{const{lexemes:i}=e,s=c.constant(e,i[t].content,r);if(s)return n(o,s.type,i[t]),{type:s.type,lex:t+1,pcode:[a.loadLiteralValue(s.type,s.value)]}}),e.exports.variable=((e,t,o,r)=>{const{lexemes:i}=e,s=c.variable(e,i[t].content,r);if(s)return n(o,s.fulltype.type,i[t]),{type:s.fulltype.type,lex:t+1,pcode:[a.loadVariableValue(s)]}}),e.exports.colour=((e,t,o,r)=>{const{lexemes:i}=e,s=c.colour(i[t].content,r);if(s)return n(o,"integer",i[t]),{type:"integer",lex:t+1,pcode:[a.loadLiteralValue("integer",s.value)]}});const n=o(13),c=o(7),a=o(10)},function(e,t){e.exports=(e=>{let t=[];for(;e.length>0;){let w=o(e)||n(e)||c(e)||i(e)||a(e)||r(e)||s(e)||l(e)||d(e)||h(e)||u(e)||b(e)||O(e)||p(e)||g(e)||j(e)||m(e)||f(e)||y(e);t.push(w),e=e.slice(w.content.length)}return t});const o=e=>{return!!("\n"===e[0])&&{type:"linebreak",content:"\n"}},n=e=>{const t=e.match(/^( +)/);return!!t&&{type:"spaces",content:t[0]}},c=e=>{return!!e.match(/^REM\b/)&&{type:"comment",content:e.split("\n")[0]}},a=e=>{const t=e.match(/^(\+|-|\*|\/|DIV\b|MOD\b|=|<>|<=|>=|<|>|NOT\b|AND\b|OR\b|EOR\b)/);return!!t&&{type:"operator",content:t[0]}},r=e=>{const t=e.match(/^(\(|\)|,|:)/);return!!t&&{type:"punctuation",content:t[0]}},i=e=>{const t="'"===e[0],o='"'===e[0],n=e.match(/[^\\](')/),c=e.match(/[^\\](")/);return t&&n?{type:"string",content:e.slice(0,n.index+2)}:t?{type:"unterminated-string",content:e.split("\n")[0]}:o&&c?{type:"string",content:e.slice(0,c.index+2)}:!!o&&{type:"unterminated-string",content:e.split("\n")[0]}},s=e=>{const t=e.match(/^(TRUE|FALSE)\b/);return!!t&&{type:"boolean",content:t[0]}},l=e=>{const t=e.match(/^(%[01]+)\b/),o=e.match(/^(0b[01]+)\b/);return t?{type:"binary",content:t[0]}:!!o&&{type:"bad-binary",content:o[0]}},d=e=>{const t=e.match(/^((\$|#|(0x))[A-Fa-f0-9]+)\b/),o=e.match(/^(&[A-Fa-f0-9]+)\b/);return t?{type:"bad-hexadecimal",content:t[0]}:!!o&&{type:"hexadecimal",content:o[0]}},h=e=>{const t=e.match(/^(\d+\.\d+)/),o=e.match(/^(\d+)\b/);return t?{type:"bad-decimal",content:t[0]}:!!o&&{type:"decimal",content:o[0]}},u=e=>{const t=e.match(/^(DEF|DIM|ELSE|END|ENDIF|ENDPROC|ENDWHILE|FOR|IF|LOCAL|NEXT|PRIVATE|REPEAT|RETURN|STEP|THEN|TO|UNTIL|WHILE)\b/);return!!t&&{type:"keyword",content:t[0]}},b=e=>{const t=e.match(/^(ABS\b|ACS\b|ANGLES\b|ANTILOG\b|ASC\b|ASN\b|ATN\b|BACK\b|BLANK\b|BLOT\b|BOOLINT\b|BOX\b|CANVAS\b|CHR\$|CIRCLE\b|COLOU?R\b|CONSOLE\b|COS\b|CURSOR\b|DEC\b|DEL\$|DETECT\b|DIRECTION\b|DIVMULT\b|DRAWXY\b|DUMP\b|ELLBLOT\b|ELLIPSE\b|EXP\b|FILL\b|FORGET\b|FORWARD\b|GET\$|GETLINE\$|HEAPRESET|HEX\$|HOME\b|HYPOT\b|INC\b|INPUT\$|INSTR|KEYBUFFER\b|KEYECHO\b|KEYSTATUS\b|LCASE\$|LEFT\$|LEFT\b|LEN\b|LN\b|LOG10\b|MAX\b|MAXINT\b|MID\$|MIN\b|MIXCOLS\b|MOVEXY\b|NEWTURTLE\b|NOUPDATE\b|OLDTURTLE\b|OUTPUT\b|PAUSE\b|PENDOWN\b|PENUP\b|PI\b|PIXCOL\b|PIXSET\b|POLYGON\b|POLYLINE\b|POWER\b|PRINT\b|QSTR\$|QVAL\b|RECOLOUR\b|REMEMBER\b|RESET\b|RESOLUTION\b|RGB\b|RIGHT\$|RIGHT\b|RND\b|RNDCOL\b|ROOT\b|SETX\b|SETXY\b|SETY\b|SIGN\b|SIN\b|SQR\b|STR\$|TAN\b|THICKNESS\b|TIME\b|TIMESET\b|TRACE\b|TURNXY\b|UPDATE\b|UCASE\$|VAL\b|VALDEF\b|WATCH\b|WRITE\b|WRITELN\b)/);return!!t&&{type:"command",content:t[0]}},p=e=>{const t=e.match(/^(TURT[XYDTC]%)\b/);return!!t&&{type:"turtle",content:t[0]}},g=e=>{const t=e.match(/^(TRUE|FALSE|GREEN|DARKGREEN|LIGHTGREEN|SEAGREEN|GREENGREY|GREENGRAY|RED|DARKRED|LIGHTRED|MAROON|REDGREY|REDGRAY|BLUE|DARKBLUE|LIGHTBLUE|ROYAL|BLUEGREY|YELLOW|OCHRE|CREAM|GOLD|YELLOWGREY|YELLOWGRAY|VIOLET|INDIGO|LILAC|PURPLE|DARKGREY|DARKGRAY|LIME|OLIVE|YELLOWGREEN|EMERALD|MIDGREY|MIDGRAY|ORANGE|ORANGERED|PEACH|SALMON|LIGHTGREY|LIGHTGRAY|SKYBLUE|TEAL|CYAN|TURQUOISE|SILVER|BROWN|DARKBROWN|LIGHTBROWN|COFFEE|WHITE|PINK|MAGENTA|LIGHTPINK|ROSE|BLACK)\b/);return!!t&&{type:"colour",content:t[0]}},m=e=>{const t=e.match(/^(\\[#A-Z0-9]+)/);return!!t&&{type:"keycode",content:t[0]}},f=e=>{const t=e.match(/^(\?[A-Z]+)\b/);return!!t&&{type:"query",content:t[0]}},O=e=>{const t=e.match(/^((PROC|FN)[_a-zA-Z]+)\b/);return!!t&&{type:"custom",content:t[0]}},j=e=>{const t=e.match(/^([_a-zA-Z0-9]+[$|%])/);return!!t&&{type:"variable",content:t[0]}},y=e=>{const t=e.match(/^\d+/),o="#"===e[0];return t?{type:"unterminated-integer",content:e}:o?{type:"bad-hexadecimal",content:e}:{type:"illegal",content:e.split(/\b/)[0]}}},function(e,t){e.exports=(e=>{const t=[];for(;e.length>0;){let v=o(e)||n(e)||c(e)||a(e)||r(e)||i(e)||s(e)||l(e)||d(e)||h(e)||u(e)||b(e)||p(e)||g(e)||m(e)||f(e)||O(e)||j(e)||y(e)||w(e);t.push(v),e=e.slice(v.content.length)}return t});const o=e=>{return!!("\n"===e[0])&&{type:"linebreak",content:"\n"}},n=e=>{const t=e.match(/^( +)/);return!!t&&{type:"spaces",content:t[0]}},c=e=>{const t="{"===e[0],o=e.match(/}/);return t&&o?{type:"comment",content:e.slice(0,o.index+1)}:!!t&&{type:"unterminated-comment",content:e.split("\n")[0]}},a=e=>{const t=e.match(/^(\+|-|\*|\/|div\b|mod\b|=|<>|<=|>=|<|>|:=|not\b|and\b|or\b|xor\b)/i);return!!t&&{type:"operator",content:t[0]}},r=e=>{const t=e.match(/^(\(|\)|\[|\]|,|:|;|\.\.|\.)/);return!!t&&{type:"punctuation",content:t[0]}},i=e=>{const t="'"===e[0],o='"'===e[0],n=e.match(/[^\\](')/),c=e.match(/[^\\](")/);return t&&n?{type:"string",content:e.slice(0,n.index+2)}:t?{type:"unterminated-string",content:e.split("\n")[0]}:o&&c?{type:"string",content:e.slice(0,c.index+2)}:!!o&&{type:"unterminated-string",content:e.split("\n")[0]}},s=e=>{const t=e.match(/^(true|false)\b/i);return!!t&&{type:"boolean",content:t[0]}},l=e=>{const t=e.match(/^(%[01]+)\b/),o=e.match(/^(0b[01]+)\b/);return t?{type:"binary",content:t[0]}:!!o&&{type:"bad-binary",content:o[0]}},d=e=>{const t=e.match(/^(&[0-7]+)\b/),o=e.match(/^(0o[0-7]+)\b/);return t?{type:"octal",content:t[0]}:!!o&&{type:"bad-octal",content:o[0]}},h=e=>{const t=e.match(/^((&|#|(0x))[A-Fa-f0-9]+)\b/),o=e.match(/^(\$[A-Fa-f0-9]+)\b/);return t?{type:"bad-hexadecimal",content:t[0]}:!!o&&{type:"hexadecimal",content:o[0]}},u=e=>{const t=e.match(/^(\d+\.\d+)/),o=e.match(/^(\d+)\b/);return t?{type:"bad-decimal",content:t[0]}:!!o&&{type:"decimal",content:o[0]}},b=e=>{const t=e.match(/^(begin|const|do|downto|else|end|for|function|if|of|procedure|program|repeat|result|then|to|until|var|while)\b/i);return!!t&&{type:"keyword",content:t[0]}},p=e=>{const t=e.match(/^(array|boolean|char|integer|string)\b/i);return!!t&&{type:"type",content:t[0]}},g=e=>{const t=e.match(/^(abs|angles|antilog|arccos|arcsin|arctan|back|blank|blot|boolint|box|canvas|chr|circle|colou?r|console|copy|cos|cursor|dec|delete|detect|direction|divmult|drawxy|dump|ellblot|ellipse|exp|fill|forget|forward|heapreset|hexstr|home|hypot|inc|insert|keybuffer|keyecho|keystatus|left|length|ln|log10|lowercase|max|maxint|min|mixcols|movexy|newturtle|noupdate|oldturtle|ord|output|pause|pendown|penup|pi|pixcol|pixset|polygon|polyline|pos|power|print|qstr|qval|randcol|random|read|readln|recolour|remember|reset|resolution|rgb|right|root|setx|setxy|sety|sign|sin|sqrt|str|tan|thickness|time|timeset|trace|turnxy|update|uppercase|val|valdef|watch|write|writeln)\b/i);return!!t&&{type:"command",content:t[0]}},m=e=>{const t=e.match(/^(turt[xydtc])\b/i);return!!t&&{type:"turtle",content:t[0]}},f=e=>{const t=e.match(/^(true|false|green|darkgreen|lightgreen|seagreen|greengrey|greengray|red|darkred|lightred|maroon|redgrey|redgray|blue|darkblue|lightblue|royal|bluegrey|yellow|ochre|cream|gold|yellowgrey|yellowgray|violet|indigo|lilac|purple|darkgrey|darkgray|lime|olive|yellowgreen|emerald|midgrey|midgray|orange|orangered|peach|salmon|lightgrey|lightgray|skyblue|teal|cyan|turquoise|silver|brown|darkbrown|lightbrown|coffee|white|pink|magenta|lightpink|rose|black)\b/i);return!!t&&{type:"colour",content:t[0]}},O=e=>{const t=e.match(/^(\\[#a-z0-9]+)/i);return!!t&&{type:"keycode",content:t[0]}},j=e=>{const t=e.match(/^(\?[a-z]+)\b/i);return!!t&&{type:"query",content:t[0]}},y=e=>{const t=e.match(/^([_a-zA-Z][_a-zA-Z0-9]*)\b/);return!!t&&{type:"identifier",content:t[0]}},w=e=>({type:"illegal",content:e.split(/\b/)[0]})},function(e,t){e.exports=(e=>{let t=[];for(;e.length>0;){let w=o(e)||n(e)||c(e)||a(e)||r(e)||i(e)||s(e)||l(e)||d(e)||h(e)||u(e)||b(e)||p(e)||g(e)||m(e)||f(e)||O(e)||j(e)||y(e);t.push(w),e=e.slice(w.content.length)}return t});const o=e=>{return!!("\n"===e[0])&&{type:"linebreak",content:"\n"}},n=e=>{const t=e.match(/^( +)/);return!!t&&{type:"spaces",content:t[0]}},c=e=>{return!!e.match(/^#/)&&{type:"comment",content:e.split("\n")[0]}},a=e=>{const t=e.match(/^(\+|-|\*|\/\/|\/|%|==|!=|<=|>=|=|<|>|not\b|and\b|or\b|xor\b)/);return!!t&&{type:"operator",content:t[0]}},r=e=>{const t=e.match(/^(\(|\)|,|:)/);return!!t&&{type:"punctuation",content:t[0]}},i=e=>{const t="'"===e[0],o='"'===e[0],n=e.match(/[^\\](')/),c=e.match(/[^\\](")/);return t&&n?{type:"string",content:e.slice(0,n.index+2)}:t?{type:"unterminated-string",content:e.split("\n")[0]}:o&&c?{type:"string",content:e.slice(0,c.index+2)}:!!o&&{type:"unterminated-string",content:e.split("\n")[0]}},s=e=>{const t=e.match(/^(True|False)\b/);return!!t&&{type:"boolean",content:t[0]}},l=e=>{const t=e.match(/^(0b[01]+)\b/),o=e.match(/^(%[01]+)\b/);return t?{type:"binary",content:t[0]}:!!o&&{type:"bad-binary",content:o[0]}},d=e=>{const t=e.match(/^(0o[0-7]+)\b/),o=e.match(/^(&[0-7]+)\b/);return t?{type:"octal",content:t[0]}:!!o&&{type:"bad-octal",content:o[0]}},h=e=>{const t=e.match(/^(0x[A-Fa-f0-9]+)\b/),o=e.match(/^((&|#|\$)[A-Fa-f0-9]+)\b/);return t?{type:"hexadecimal",content:t[0]}:!!o&&{type:"bad-hexadecimal",content:o[0]}},u=e=>{const t=e.match(/^(\d+\.\d+)/),o=e.match(/^(\d+)\b/);return t?{type:"bad-decimal",content:t[0]}:!!o&&{type:"decimal",content:o[0]}},b=e=>{const t=e.match(/^(def|else|for|global|if|in|nonlocal|pass|range|return|while)\b/);return!!t&&{type:"keyword",content:t[0]}},p=e=>{const t=e.match(/^(abs|acos|angles|antilog|asin|atan|back|blank|blot|boolint|box|canvas|chr|circle|colou?r|console|copy|cos|cursor|dec|detect|direction|divmult|drawxy|dump|ellblot|ellipse|exp|fill|find|forget|forward|heapreset|hex|home|hypot|inc|input|insert|int|intdef|keybuffer|keyecho|keystatus|left|len|ln|log10|lower|max|maxint|min|mixcols|movexy|newturtle|noupdate|oldturtle|ord|output|pause|pendown|penup|pi|pixcol|pixset|polygon|polyline|power|print|qstr|qval|randcol|randint|read|readline|recolour|remember|reset|resolution|rgb|right|root|setx|setxy|sety|sign|sin|sqrt|str|tan|thickness|time|timeset|trace|turnxy|update|upper|watch|write|writeline)\b/);return!!t&&{type:"command",content:t[0]}},g=e=>{const t=e.match(/^(turt[xydtc])\b/);return!!t&&{type:"turtle",content:t[0]}},m=e=>{const t=e.match(/^(green|darkgreen|lightgreen|seagreen|greengrey|greengray|red|darkred|lightred|maroon|redgrey|redgray|blue|darkblue|lightblue|royal|bluegrey|yellow|ochre|cream|gold|yellowgrey|yellowgray|violet|indigo|lilac|purple|darkgrey|darkgray|lime|olive|yellowgreen|emerald|midgrey|midgray|orange|orangered|peach|salmon|lightgrey|lightgray|skyblue|teal|cyan|turquoise|silver|brown|darkbrown|lightbrown|coffee|white|pink|magenta|lightpink|rose|black)\b/);return!!t&&{type:"colour",content:t[0]}},f=e=>{const t=e.match(/^(\\[#a-z0-9]+)/i);return!!t&&{type:"keycode",content:t[0]}},O=e=>{const t=e.match(/^(\?[a-z]+)\b/);return!!t&&{type:"query",content:t[0]}},j=e=>{const t=e.match(/^([_a-zA-Z][_a-zA-Z0-9]*)\b/);return!!t&&{type:"identifier",content:t[0]}},y=e=>({type:"illegal",content:e.split(/\b/)[0]})},function(e,t,o){e.exports=((e,t)=>{if(0===e.length)throw n("Program does not contain any lexemes.");const o=i[t](e),c=o[0],a=o.slice(1);if("Python"===t){s(o,0),o.length>1&&l(o,o.length-1);const e=d(o);if(e)throw n("Could not detetermine type of variable {lex}.",e.lexeme)}return o.forEach(h),c.turtleAddress=u(a),o});const{error:n,molecules:c,factory:a,find:r}=o(6),i={BASIC:o(24),Pascal:o(25),Python:o(26)},s=(e,t)=>{for(var o,n,i=e[t],l=i.lexemes,d=0;d<l.length;)if("identifier"===l[d].type)if((o=r.variable(i,l[d].content,"Python"))&&null===o.fulltype){if(l[d+=1]&&"in"===l[d].content)o.fulltype=a.fulltype("integer"),d+=1;else if(l[d]&&"="===l[d].content&&l[d+=1])try{n=c.expression(i,d,"null","null","Python"),o.fulltype=a.fulltype(n.type),d=n.lex}catch(e){d+=1}}else d+=1;else if("return"===l[d].content){if(o=r.variable(i,"return","Python"),l[d+=1])try{n=c.expression(i,d,"null","null","Python"),o.fulltype=a.fulltype(n.type),d=n.lex}catch(e){d+=1}}else d+=1;return 0===t?1===e.length?e:s(e,e.length-1):t>1?s(e,t-1):e},l=function(e,t){for(var o,n,i,s=e[t],d=s.lexemes,h=0;h<d.length;){if("identifier"===d[h].type&&(o=r.custom(s,d[h].content,"Python"))&&o.parameters.length>0)for(n=0,h+=2;n<o.parameters.length;){try{i=c.expression(s,h,"null","null","Python"),null===o.parameters[n].fulltype&&(o.parameters[n].fulltype=a.fulltype(i.type)),h=i.lex+1}catch(e){}n+=1}h+=1}return 1===t?e:l(e,t-1)},d=e=>{return e.reduce((e,t)=>e.concat(t.variables),[]).find(e=>null===e.fulltype)},h=e=>{let t=0;e.variables.forEach(e=>{t+=1,e.index=t,e.fulltype&&null!==e.fulltype.length&&(t+=e.fulltype.length)}),e.memoryNeeded=t},u=e=>10+(e=>e.some(e=>"function"===e.type)?e.length+1:e.length)(e)},function(e,t,o){const{factory:n}=o(6),c=(e,t)=>({type:"Compiler",message:((e,t)=>{switch(e){case"progDef":return'Subroutines must be defined after program "END".';case"progNoDim":return"The online compiler does not support arrays. Please compile your program in the downloadable system.";case"progDim":return'"DIM" commands must occur at the top of the program.';case"progPrivate":return"Private variables cannot be defined in the main program.";case"progLocal":return"Local variables cannot be defined in the main program.";case"progAfter":return'No program text can appear after program "END" (except subroutine definitions).';case"progNoEnd":return'Program must finish with "END".';case"subName":return'"DEF" must be followed by a valid procedure or function name. (Procedure names must begin with "PROC", and function names must begin with "FN".)';case"subBadName":return"";case"subDim":return'"DIM" commands can only occur within the main program. To declare a local or private array, use "LOCAL" or "PRIVATE" instead.';case"subEmpty":return"Subroutine definition must be followed by some commands.";case"subPrivate":return"Private variables must be declared at the start of the subroutine.";case"subLocal":return"Local variables must be declared at the start of the subroutine.";case"subDef":return'The next subroutine must be defined after subroutine "ENDPROC".';case"subEndFn":return'Function must end with "=&lt;expression&gt;", not "ENDPROC".';case"subEndProc":return'Procedure must end with "ENDPROC", not "=&lt;expression&gt;".';case"subEmptyResult":return'"=" must be followed by a return value.';case"subAfter":return"No program text can appear after subroutine end (except further subroutine definitions).";case"subNoEndProc":return'Procedure must finish with "ENDPROC".';case"subNoEndFunc":return'Function must finish with "=&lt;expression$gt;".';case"parName":return"Parameter name expected.";case"parTurtle":return`"${t.content}" is the name of a Turtle property, and cannot be used as a parameter name.`;case"parId":return`"${t.content}" is not a valid parameter name. Integer parameters must end with "%", and string parameters must end with "$".`;case"parDupl":return`"${t.content}" is already a parameter for this subroutine.`;case"parBracket":return"Closing bracket needed after parameters.";case"parComma":return"Comma needed after parameter.";case"varName":return"Variable name expected.";case"varTurtle":return`"${t.content}" is the name of a Turtle property, and cannot be used as a variable name.`;case"varId":return`"${t.content}" is not a valid variable name. Integer variables must end with "%", and string variables must end with "$".`;case"varDupl":return`"${t.content}" is already a variable in the current scope.`;default:return"Bad error message ID."}})(e,t),lexeme:t}),a=(e,t)=>e.variables.some(e=>(e.name||e.names.basic)===t),r=e=>{const t="%"===e.slice(-1)?"boolint":"string",o="boolint"===t?0:34;return n.fulltype(t,o)},i=e=>"PROC"===e.slice(0,4)?"procedure":"FN"===e.slice(0,2)&&"function";e.exports=(e=>{const t=[];for(var o,s,l,d,h,u,b=0,p="start";b<e.length;)switch(p){case"start":if(o=!0,s=!1,l=!1,d=n.program("!","BASIC"),t.push(d),"DEF"===e[b].content)throw c("progDef",e[b]);p="DIM"===e[b].content?"dim":"prog";break;case"dim":break;case"prog":if("DIM"===e[b].content)throw c("progDim",e[b]);if("PRIVATE"===e[b].content)throw c("progPrivate",e[b]);if("LOCAL"===e[b].content)throw c("progLocal",e[b]);if("DEF"===e[b].content)throw c("progDef",e[b]);"END"===e[b].content?(o=!1,p="end"):("variable"===e[b].type&&(a(t[0],e[b].content)||((h=n.variable(e[b].content,t[0],!1)).fulltype=r(e[b].content),t[0].variables.push(h))),t[0].lexemes.push(e[b])),b+=1;break;case"end":if(e[b]){if("DEF"!==e[b].content){if(0===d.index)throw c("progAfter",e[b]);throw c("subAfter",e[b])}b+=1,p="def"}break;case"def":if(!e[b])throw c("subName",e[b-1]);if(!i(e[b].content))throw c("subBadName",e[b]);if((d=n.subroutine(e[b].content,i(e[b].content,t[0]))).parent=t[0],t.push(d),t[0].subroutines.push(d),"procedure"===d.type?s=!0:(l=!0,h=n.variable("result",d),d.variables.push(h)),!e[b+1])throw c("subAfter",e[b]);"("===e[b+=1].content?(b+=1,p="parameters"):p="variables";break;case"parameters":if(!e[b])throw c("parName",e[b-1]);if(byref="RETURN"===e[b].content,!e[b="RETURN"===e[b].content?b+1:b])throw c("parName",e[b-1]);if("turtle"===e[b].type)throw c("parTurtle",e[b]);if("variable"!==e[b].type)throw c("parId",e[b]);if(a(d,e[b].content))throw c("parDupl",e[b]);if((h=n.variable(e[b].content,d,byref)).fulltype=r(e[b].content),d.parameters.push(h),d.variables.push(h),!e[b+=1])throw c("parBracket",e[b-1]);if("variable"===e[b].type)throw c("parComma",e[b]);if(")"===e[b].content)p="variables";else if(","!==e[b].content)throw c("parBracket",e[b]);b+=1;break;case"variables":if(!e[b])throw c("subEmpty",e[b-1]);switch(e[b].content){case"DIM":throw c("subDim",e[b]);case"PRIVATE":b+=1,p="private";break;case"LOCAL":b+=1,p="local";break;default:p="subroutine"}break;case"private":if(!e[b])throw c("varName",e[b-1]);if("turtle"===e[b].type)throw c("varTurtle",e[b]);if("variable"!==e[b].type)throw c("varId",e[b]);if(a(d,e[b].content))throw c("varDupl",e[b]);if((h=n.variable(e[b].content,t[0])).fulltype=r(e[b].content),h.private=d,t[0].variables.push(h),!e[b+=1])throw c("subNoEnd",e[b-1]);","===e[b].content?b+=1:p="variables";break;case"local":if(!e[b])throw c("varName",e[b-1]);if("turtle"===e[b].type)throw c("varTurtle",e[b]);if("variable"!==e[b].type)throw c("varId",e[b]);if(a(d,e[b].content))throw c("varDupl",e[b]);if((h=n.variable(e[b].content,d)).fulltype=r(e[b].content),d.variables.push(h),!e[b+=1]){if("procedure"===d.type)throw c("subNoEndProc",e[b]);throw c("subNoEndFn",e[b])}","===e[b].content?b+=1:p="variables";break;case"subroutine":if("DIM"===e[b].content)throw c("subDim",e[b]);if("PRIVATE"===e[b].content)throw c("subPrivate",e[b]);if("LOCAL"===e[b].content)throw c("subLocal",e[b]);if("DEF"===e[b].content)throw c("subDef",e[b]);if("variable"===e[b].type&&(a(t[0],e[b].content)||a(d,e[b].content)||((h=n.variable(e[b].content,t[0])).fulltype=r(e[b].content),t[0].variables.push(h))),"ENDPROC"===e[b].content){if("procedure"!==d.type)throw c("subEndFn",e[b]);b+=1,s=!1,p="end"}else if(e[b].line>e[b-1].line&&"="===e[b].content){if("function"!==d.type)throw c("subEndProc",e[b]);d.lexemes.push(e[b]),b+=1,p="result"}else d.lexemes.push(e[b]),b+=1;break;case"result":if(!e[b])throw c("subEmptyResult",e[b-1]);for(u=e[b].line;e[b]&&e[b].line===u;)d.lexemes.push(e[b]),b+=1;l=!1,p="end"}if(o)throw c("progNoEnd",e[b-1]);if(s)throw c("subNoEndProc",e[b-1]);if(l)throw c("subNoEndFn",e[b-1]);return t})},function(e,t,o){const{factory:n,find:c}=o(6),a=(e,t)=>({type:"Compiler",message:((e,t)=>{switch(e){case"progBegin":return'Program must start with keyword "PROGRAM".';case"progName":return'"PROGRAM" must be followed by a legal program name.';case"progTurtle":return"Program cannot be given the name of a Turtle attribute.";case"progId":return`"${t.content}" is not a valid program name.`;case"progSemi":return"Program name must be followed by a semicolon.";case"constVar":return"Constants must be defined before any variables.";case"constSub":return"Constants must be defined before any subroutines.";case"varSub":return"Variables must be defined before any subroutines.";case"progWeird":return'Expected "BEGIN", constant/variable definitions, or subroutine definitions.';case"constDef":return"Constant must be assigned a value.";case"constNegString":return"Strings cannot be negated.";case"constNegBoolean":return"Boolean values cannot be negated.";case"constSemi":return"Constant declaration must be followed by a semicolon.";case"constValue":return`"${t.content}" is not a valid constant value.`;case"constName":return"No constant name found.";case"constTurtle":return`"${t.content}" is the name of a predefined Turtle property, and cannot be used as a constant name.`;case"constId":return`"${t.content}" is not a valid constant name.`;case"constProg":return`Constant name "${t.content}" is already the name of the program.`;case"constDupl":return`"${t.content}" is already the name of a constant in the current scope.`;case"varType":return"Variable name must be followed by a colon, then the variable type (array, boolean, char, integer, or string).";case"varBadType":return`"${t.content}" is not a valid variable type (expected "array", "boolean", "char", "integer", or "string").`;case"varStringNoSize":return"Opening bracket must be followed by an integer value.";case"varStringBadSize":return"String size must be an integer.";case"varStringRbkt":return'String size must be followed by a closing square bracket "]".';case"varArrayBadSize":return'Array declarations take the form "array[n..m]", where "n" and "m" are integer values specifying the start and end index of the array.';case"varArrayNoConstant":return`Constant "${t.content}" has not been declared.`;case"varArrayBadConstant":return`"${t.content}" is not an integer constant.`;case"varArrayOf":return'Array declaration must be followed by "of", and then the type of the elements of the array.';case"varName":return"No variable name found.";case"varTurtle":return`"${t.content}" is the name of a predefined Turtle property, and cannot be used as a variable name.`;case"varId":return`"${t.content}" is not a valid variable name.`;case"varProg":return`Variable name "${t.content}" is already the name of the program.`;case"varDupl":return`"${t.content}" is already the name of a constant or variable in the current scope.`;case"varComma":return"Comma missing between variable declarations.";case"parNoRbkt":return'Parameter declarations must be followed by a closing bracket ")".';case"parArrayNoRef":return"Array parameters can only be passed by reference, not by value.";case"parArraySize":return"Array references parameters cannot be given a size specification.";case"subName":return"No subroutine name found.";case"subTurtle":return`"${t.content}" is the name of a predefined Turtle property, and cannot be used as a subroutine name.`;case"subId":return`"${t.content}" is not a valid subroutine name.`;case"subProg":return`Subroutine name "${t.content}" is already the name of the program.`;case"subDupl":return`"${t.content}" is already the name of a subroutine in the current scope.`;case"subSemi":return"Subroutine declaration must be followed by a semicolon.";case"fnType":return"Function must be followed by a colon, the the return type (integer, boolean, char, or string).";case"fnBadType":return`"${t.content}" is not a valid return type (expected "integer", "boolean", "char", or "string").`;case"subEnd":return'Routine commands must finish with "END".';case"constAfter":return"No program text found after constant declarations.";case"varAfter":return"No text found after variable declarations.";case"varSemi":return"Variable declaration(s) must be followed by a semicolon.";case"progDot":return'Program "END" must be followed by a full stop.';case"progOver":return'No text can appear after program "END".';default:return e}})(e,t),lexeme:t}),r=(e,t)=>e.variables.concat(e.constants).some(e=>e.name===t),i=(e,t,o=!1,n=null)=>{if(o){if(!e[t])throw a(n,e[t-1]);if(";"!==e[t].content)throw a(n,e[t])}for(;e[t]&&";"===e[t].content;)t+=1;return t},s=(e,t)=>{const[o,c]=e.slice(t,t+2);if(!o||"program"!==o.content)throw a("progBegin",o);if(!c)throw a("progName",o);if("turtle"===c.type)throw a("progTurtle",c);if("identifier"!==c.type)throw a("progId",c);return{lex:i(e,t+2,!0,"progSemi"),routine:n.program(c.content,"Pascal")}},l=(e,t,o)=>{const n=e[t];if(!n)throw a("progWeird",e[t-1]);switch(n.content){case"const":if(o.variables.length>0)throw a("constVar",n);if(o.subroutines.length>0)throw a("constSub",n);return{lex:t+1,state:"const"};case"var":if(o.subroutines.length>0)throw a("varSub",n);return{lex:t+1,state:"var"};case"function":case"procedure":return{lex:t+1,state:n.content};case"begin":return{lex:i(e,t+1),state:"begin"};default:throw a("progWeird",n)}},d=(e,t,o,r)=>{const s=e[t];let l;if(!s)throw a("constDef",e[t-1]);switch(s.type){case"string":throw a("constNegString",s);case"boolean":throw a("constNegBoolean",s);case"integer":return{lex:i(e,t+1,!0,"constSemi"),constant:n.constant(o,s.type,-s.value)};case"identifier":if(!(l=c.constant(r,s.content,"Pascal")||c.colour(s.content,"Pascal")))throw a("constValue",s);return{lex:i(e,t+1,!0,"constSemi"),constant:n.constant(o,l.type,-l.value)};default:throw a("constValue",s)}},h=(e,t,o,r)=>{const s=e[t];let l;if(!s)throw a("constDef",e[t-1]);switch(s.type){case"boolean":case"integer":case"string":return{lex:i(e,t+1,!0,"constSemi"),constant:n.constant(o,s.type,s.value)};case"identifier":if(!(l=c.constant(r,s.content,"Pascal")||c.colour(s.content,"Pascal")))throw a("constValue",s);return{lex:i(e,t+1,!0,"constSemi"),constant:n.constant(o,l.type,l.value)};default:throw a("constValue",s)}},u=(e,t,o)=>{const[n,i,s]=e.slice(t,t+3);if(!n)throw a("constName",e[t-1]);if("turtle"===n.type)throw a("constTurtle",n);if("identifier"!==n.type)throw a("constId",n);if(n.content===c.mainProgram(o).name)throw a("constProg",n);if(r(o,n.content))throw a("constDupl",n);if(!i)throw a("constDef",n);if("="!==i.content)throw a("constDef",i);if(!s)throw a("constDef",i);return"-"===s.content?d(e,t+3,n.content,o):h(e,t+2,n.content,o)},b=(e,t,o)=>{const[r,i,s,l,d,h]=e.slice(t,t+6);let u,b,p;if(!r)throw a("varArrayBadSize",type);if("["!==r.content)throw a("varArrayBadSize",r);if(!i)throw a("varArrayBadSize",r);switch(i.type){case"identifier":if(!(u=c.constant(o,i.content,"Pascal")))throw a("varArrayNoConstant",i);if("integer"!==u.type)throw a("varArrayBadConstant",i);p=u.value;break;case"integer":p=i.value;break;default:throw a("varArrayBadSize",i)}if(!s)throw a("varArrayBadSize",i);if(".."!==s.content)throw a("varArrayBadSize",s);if(!l)throw a("varArrayBadSize",s);switch(l.type){case"identifier":if(!(u=c.constant(o,l.content,"Pascal")))throw a("varArrayNoConstant",l);if("integer"!==u.type)throw a("varArrayBadConstant",l);b=u.value;break;case"integer":b=l.value;break;default:throw a("varArrayBadSize",l)}if(!d)throw a("varArrayBadSize",l);if("]"!==d.content)throw a("varArrayBadSize",d);if(!h)throw a("varArrayOf",d);if("of"!==h.content)throw a("varArrayOf",h);return result=g(e,t+6,o),{lex:result.lex,fulltype:n.fulltype("array",b-p+1,p,result.fulltype)}},p=(e,t,o,n)=>{if(!n)throw a("parArrayNoRef",type);if(!e[t])throw a("varArrayOf",e[t-1]);if("["===e[t].content)throw a("parArraySize",e[t]);if("of"!==e[t].content)throw a("varArrayOf",e[t]);return g(e,t+1,o,!0,n)},g=(e,t,o,c,r)=>{const i=e[t];if(!e[t])throw a("varType",e[t-1]);switch(i.content){case"boolean":case"integer":case"char":return{lex:t+1,fulltype:n.fulltype(i.content)};case"string":if(e[t+1]&&"["===e[t+1].content){const[o,c]=e.slice(t+2,t+4);if(!o)throw a("varStringNoSize",e[t+1]);if("integer"!==o.type)throw a("varStringBadSize",o);if(!c)throw a("varStringRbkt",o);if("]"!==c.content)throw a("varStringRbkt",c);return{lex:t+4,fulltype:n.fulltype("string",o.value)}}return{lex:t+1,fulltype:n.fulltype("string")};case"array":return c?p(e,t+1,o,r):b(e,t+1,o);default:throw a("varBadType",i)}},m=(e,t,o,i=!1,s=!1)=>{const l=[];let d=!0;for(;d;){if(!e[t])throw a("varName",e[t-1]);if("turtle"===e[t].type)throw a("varTurtle",e[t]);if("identifier"!==e[t].type)throw a("varId",e[t]);if(e[t].content===c.mainProgram(o).name)throw a("varProg",e[t]);if(r(o,e[t].content))throw a("varDupl",e[t]);if(l.push(n.variable(e[t].content,o,s)),!e[t+1])throw a("varType",lexmes[t]);if(","===e[t+1].content)t+=2;else if(":"===e[t+1].content)t+=2,d=!1;else switch(e[t+1].type){case"identifier":throw a("varComma",e[t+1]);case"type":default:throw a("varType",e[t+1])}}return({lex:t,fulltype:fulltype}=g(e,t,o,i,s)),l.forEach(e=>e.fulltype=fulltype),{lex:t,variables:l}},f=(e,t,o,r)=>{const s=e[t];let l,d,h;if(!s)throw a("subName",e[t-1]);if("turtle"===s.type)throw a("subTurtle",s);if("identifier"!==s.type)throw a("subId",s);if(s.content===c.mainProgram(r).name)throw a("subProg",s);if(c.customCommand(r,s.content,"Pascal"))throw a("subDupl",s);if(l=n.subroutine(s.content,o,r),"function"===o&&l.variables.push(n.variable("result",l,!1)),!e[t+=1])throw a("subSemi",s);if("("===e[t].content&&(({parameters:d,lex:t}=((e,t,o)=>{let n=[],c=[],r=!0;for(;r;){if(({lex:t,variables:c}=e[t]&&"var"===e[t].content?m(e,t+1,o,!0,!0):m(e,t,o,!0,!1)),n=n.concat(c),!e[t])throw a("parNoRbkt",e[t-1]);switch(e[t].content){case";":t+=1;break;case")":t+=1,r=!1;break;default:throw a("parNoRbkt",e[t])}}return{lex:t,parameters:n}})(e,t+1,l)),l.parameters=d,l.variables=l.variables.concat(d)),"function"===o){if(!e[t])throw a("fnType",e[t-1]);if(":"!==e[t].content)throw a("fnType",e[t]);({lex:t,fulltype:h}=g(e,t+1,l)),l.variables[0].fulltype=h}return{lex:t=i(e,t,!0,"subSemi"),routine:l}},O=(e,t)=>{let o=[],n=1;for(;n>0&&e[t];)"begin"===e[t].content&&(n+=1),"end"===e[t].content&&(n-=1),o.push(e[t]),t+=1;if(n>0)throw a("subEnd",e[t]);return{lex:t,content:o.slice(0,-1)}};e.exports=(e=>{const t=[],o=[];let n,c,r,d,h,b=0,p=0,g="program";for(;p<e.length;)switch(g){case"program":({lex:p,routine:n}=s(e,p)),t.push(n),o.push(n),g="crossroads";break;case"crossroads":({lex:p,state:g}=l(e,p,n));break;case"const":if(({lex:p,constant:r}=u(e,p,n)),n.constants.push(r),!e[p])throw a("constAfter",e[p-1]);"identifier"!==e[p].type&&(g="crossroads");break;case"var":if(({lex:p,variables:d}=m(e,p,n)),n.variables=n.variables.concat(d),!e[p=i(e,p,!0,"varSemi")])throw a("varAfter",e[p-1]);"identifier"!==e[p].type&&(g="crossroads");break;case"procedure":case"function":c=o[o.length-1],({lex:p,routine:n}=f(e,p,g,c)),c.subroutines.push(n),o.push(n),g="crossroads";break;case"begin":({lex:p,content:h}=O(e,p)),n.lexemes=h,g="end";break;case"end":if(0===n.index){if(!e[p])throw a("progDot",e[p-1]);if("."!==e[p].content)throw a("progDot",e[p]);if(e[p+1])throw a("progOver",e[p+1]);p+=1}else p=i(e,p,!0,"subSemi"),b+=1,n.index=b,t.push(o.pop()),n=o[o.length-1],g="crossroads"}return t})},function(e,t,o){e.exports=(e=>{const t=[],o=[];let a,u=0,b="crossroads";for(a=c.program("!","Python"),t.push(a),o.push(a);u<e.length;)switch(b){case"crossroads":({lex:u,state:b}=r(e,u,a));break;case"global":({lex:u,state:b}=i(e,u,a));break;case"nonlocal":({lex:u,state:b}=s(e,u,a));break;case"def":({lex:u,routine:a,state:b}=l(e,u,a)),o.push(a);break;case"parameters":({lex:u,state:b}=d(e,u,a));break;case"commands":({lex:u,state:b}=h(e,u,a)),null===a.index&&(a.index=t.length,t.push(o.pop()),a=o[o.length-1])}if(0===t[0].lexemes.length){if(!t.some(e=>"main"===e.name))throw n('Program must have some commands or define a "main" procedure.',e[e.length-1]);t[0].lexemes=[{type:"identifier",content:"main",indent:0},{type:"punctuation",content:"(",indent:0},{type:"punctuation",content:")",indent:0}]}return t});const{error:n,factory:c,find:a}=o(6),r=(e,t,o)=>{if(!e[t])throw n("No commands given.",e[t-1]);if(o.indent){if(e[t].offset<o.indent)throw n("Not enough indentation.",e[t]);if(e[t].offset>o.indent)throw n("Too much indentation.",e[t])}else o.indent=e[t].offset;switch(e[t].content){case"global":if(0===o.index)throw n("Global variables are only allowed in subroutines.",e[t]);if(o.subroutines.length>0)throw n("Global variables must be declared before any subroutine definitions.",e[t]);return{lex:t+1,state:"global"};case"nonlocal":if(0===o.index)throw n("Nonlocal variables are only allowed in subroutines.",e[t]);if(o.subroutines.length>0)throw n("Nonlocal variables must be declared before any subroutine definitions.",e[t]);return{lex:t+1,state:"nonlocal"};case"def":if(o.lexemes.length>0)throw n("Subroutine definitions must come before the routine's commands",e[t]);return{lex:t+1,state:"def"};default:return{lex:t,state:"commands"}}},i=(e,t,o)=>{if(!e[t])throw n('"global" must be followed by an identifier.',e[t-1]);if(e[t].line!==e[t-1].line)throw n("Global variable declarations must be on a single line.",e[t]);for(;e[t]&&e[t].line===e[t-1].line;){if("turtle"!==e[t].type&&"identifier"!==e[t].type)throw n("{lex} is not a valid variable name.",e[t]);if(o.globals.indexOf(e[t].content)>-1)throw n("Global variable {lex} has already been declared.",e[t]);o.globals.push(e[t].content);const r=a.program(o);if("turtle"===e[t].type||r.variables.some(o=>o.name===e[t].content)||r.variables.push(c.variable(e[t],r)),e[t+1].line>e[t].line)return{lex:t+1,state:"crossroads"};if(!e[t+1]||","!==e[t+1].content)throw n("Comma missing after global variable declaration.",e[t]);if(!e[t+2])throw n("Expected more global variable declarations after comma.",e[t+1]);if(e[t+2].line>e[t+1].line)throw n("Global variable declarations must be on a single line.",e[t+2]);t+=2}return{lex:t,state:"crossroads"}},s=(e,t,o)=>{if(!e[t])throw n('"local" must be followed by an identifier.',e[t-1]);if(e[t].line>e[t-1].line)throw n("Nonlocal variable definitions must be on a single line.",e[t]);if(o.nonlocals.indexOf(e[t].content)>-1)throw n("Nonlocal variable {lex} has already been defined.",e[t]);for(;e[t]&&e[t].line===e[t-1].line;){if("turtle"===e[t].type)throw n("Turtle variables are global, not nonlocal.",e[t]);if("identifier"!==e[t].type)throw n("{lex} is not a valid variable name.",e[t]);if(o.nonlocals.indexOf(e[t].content)>-1)throw n("Nonlocal variable {lex} has already been declared.",e[t]);if(o.nonlocals.push(e[t].content),e[t+1].line>e[t].line)return{lex:t+1,state:"crossroads"};if(!e[t+1]||","!==e[t+1].content)throw n("Comma missing after nonlocal variable declaration.",e[t]);if(!e[t+2])throw n("Expected more nonlocal variable declarations after comma.",e[t+1]);if(e[t+2].line>e[t+1].line)throw n("Nonlocal variable declarations must be on a single line.",e[t+2]);t+=2}return{lex:t,state:"crossroads"}},l=(e,t,o)=>{if(!e[t])throw n('"def" must be followed by an identifier.',e[t-1]);if(e[t-1].line!==e[t].line)throw n('Subroutine name must be on the same line as "def".',e[t]);if("turtle"===e[t].type)throw n("Subroutine cannot have the name of a global Turtle variable.",e[t]);if("identifier"!==e[t].type)throw n("{lex} is not a valid subroutine name.",e[t]);if(u(e[t].content,o))throw n("{lex} is already the name of a subroutine or variable in the current scope.",e[t]);if((o=c.subroutine(e[t].content,"procedure",o)).parent.subroutines.push(o),!e[t+1])throw n("Subroutine definition must be followed by an open bracket.",e[t-1]);if("("!==e[t+1].content)throw n("Subroutine definition must be followed by an open bracket.",e[t]);if(e[t].line!==e[t+1].line)throw n("Open bracket must be on the same line as the subroutine definition.",e[t]);return{lex:t+2,routine:o,state:"parameters"}},d=(e,t,o)=>{if(!e[t])throw n("Expecting parameter definition or closing bracket.",e[t-1]);if(")"===e[t].content){if(e[t-1].line!==e[t].line)throw n("Closing bracket after parameters cannot be on a new line.",e[t]);if(!e[t+1])throw n("Subroutine definition must be followed by a colon.",e[t]);if(":"!==e[t+1].content)throw n("Subroutine definition must be followed by a colon.",e[t+1]);if(e[t+1].line>e[t].line)throw n("Colon following subroutine definition cannot be on a new line.",e[t+1]);if(!e[t+2])throw n("No commands found following subroutine declaration.",e[t+1]);if(e[t+2].line===e[t+1].line)throw n("Subroutine commands must be on a new line.",e[t]);return{lex:t+2,state:"crossroads"}}if("turtle"===e[t].type)throw n("{lex} is the name of a predefined global Turtle variable.",e[t]);if("identifier"!==e[t].type)throw n("{lex} is not a valid identifier.",e[t]);if(e[t-1].line!==e[t].line)throw n("Parameter declaration cannot be on a new line.",e[t]);if(o.parameters.some(o=>o.name===e[t].content))throw n("{lex} is already the name of a parameter for this subroutine.",e[t]);let a=c.variable(e[t],o);if(o.parameters.push(a),o.variables.push(a),!e[t+1])throw n("Closing bracket missing after parameter declarations.",e[t]);if("turtle"===e[t+1].type||"identifier"===e[t+1].type)throw n("Comma missing between parameters.",e[t+1]);if(","===e[t+1].content){if(!e[t+2])throw n("Expected parameter declaration after comma.",e[t+1]);if(")"===e[t+2].content)throw n("Parameter list cannot end with a comma.",e[t+1]);return{lex:t+2,state:"parameters"}}if(")"===e[t+1].content)return{lex:t+1,state:"parameters"};throw n("py1parser43","parsNoCommaOrBracket",e[t])},h=(e,t,o)=>{let a;for(;e[t]&&e[t].offset>=o.indent;){if("return"===e[t].content){if(0===o.index)throw n("cmdMainReturn",e[t]);if("main"===o.name)throw n("cmdMainSubReturn",e[t]);if("function"===o.type)throw n("cmdRepeatReturn",e[t]);o.type="function",a=c.variable(e[t],o,!1),o.variables.unshift(a)}b(o,e,t)&&(a=c.variable(e[t],o,!1),o.variables.push(a)),o.lexemes.push(e[t]),t+=1}return{lex:t,state:"crossroads"}},u=(e,t)=>0===t.index?t.subroutines.some(t=>t.name===e):t.subroutines.some(t=>t.name===e)||t.globals.indexOf(e)>-1||t.nonlocals.indexOf(e)>-1,b=(e,t,o)=>"identifier"===t[o].type&&(!!t[o+1]&&(("="===t[o+1].content||"in"===t[o+1].content)&&(!(e.globals.indexOf(t[o].content)>-1)&&(!(e.nonlocals.indexOf(t[o].content)>-1)&&!a.variable(e,t[o].content,"Python")))))},function(e,t,o){e.exports=((e,t)=>{const o=e[0],c=e.slice(1).length>0?4:3,i=a(e,c,t),s=c+i.length,l=r(o,s,t);return n.program(e[0],i,l)});const{pcoder:n}=o(6),c={BASIC:o(28),Pascal:o(29),Python:o(30)},a=(e,t,o)=>{let c=[],a=1;for(;a<e.length;){e[a].startLine=t;const i=n.subroutineStartCode(e[a]).length;let s=r(e[a],t+i,o),l=n.subroutine(e[a],s);c=c.concat(l),a+=1,t+=l.length}return c},r=(e,t,o)=>{let n=[],a=0;for(;a<e.lexemes.length;){let r=c[o].call(null,e,a,t+n.length);n=n.concat(r.pcode),a=r.lex}return n}},function(e,t){e.exports=((e,t,o)=>({lex:t,pcode:[]}))},function(e,t,o){const{pc:n}=o(1),{molecules:c,find:a,pcoder:r}=o(6),i=(e,t)=>({messageId:e,message:((e,t)=>{switch(e){case"ifExpression":return'"IF" must be followed by a boolean expression.';case"ifThen":return'"IF ..." must be followed by "THEN".';case"ifNothing":return'No commands found after "IF".';case"elseNothing":return'No commands found after "ELSE".';case"forVariable":return'"FOR" must be followed by an integer variable.';case"forTurtle":return'Turtle attribute cannot be used as a "FOR" variable.';case"forNotFound":return`Variable "${t.content}" not defined.`;case"forNotInteger":return`"${t.content}" is not an integer variable.`;case"forAssignment":return'"FOR" variable must be assigned an initial value.';case"forEquals":return'Assignment operator is ":=", not "=".';case"forInitial":return'"FOR" loop variable must be assigned an initial value.';case"forToDownTo":return'"FOR ... := ..." must be followed by "TO" or "DOWNTO".';case"forToNothing":return`"${t.content.toUpperCase()}" must be followed by an integer (or integer constant).`;case"forDo":return'"FOR" loop range must be followed by "DO".';case"forNothing":return'No commands found after "FOR" loop initialisation.';case"repeatExpression":return'"UNTIL" must be followed by a boolean expression.';case"whileExpression":return'"WHILE" must be followed by a boolean expression.';case"whileDo":return'"WHILE ..." must be followed by "DO".';case"whileNothing":return'No commands found after "WHILE ... DO".';case"blockNothing":return'No commands found after "BEGIN".';case"blockBegin":return`"END" expected, not "${t.content.toUpperCase()}".`;case"blockRepeat":return`"UNTIL" expected, not "${t.content.toUpperCase()}".`;case"blockNoEnd":return'"BEGIN" does not have any matching "END".';case"cmdEqal":return'Variable assignment requires ":=" rather than "=".';case"cmdSemicolon":return"Semicolon needed after command.";case"cmdWeird":return`Command cannot begin with "${t.content}".`;default:return e}})(e),lexeme:t}),s=(e,t)=>{switch(t.content){case"end":if("begin"!==e)throw i("blockBegin",t);return!0;case"until":if("repeat"!==e)throw i("blockRepeat",t);return!0;default:return!1}},l=(e,t,o,n,c)=>{const a=e.lexemes;let r,l=[],h=!1;if(!a[t])throw i("blockNothing",a[t-1]);for(;!h&&t<a.length;)(h=s(n,a[t]))?t+=1:(({lex:t,pcode:r}=d(e,t,o+l.length)),l=l.concat(r));if(!h)throw i("blockNoEnd",a[t-1]);return{lex:t,pcode:l}},d=function(e,t,o){const s=e.lexemes,d=["begin","do","dot","repeat","semicolon","then"],h=["else","end","semicolon","until"];let u,b;if("turtle"===s[t].type||"identifier"===s[t].type){if(s[t+1]&&"="===s[t+1].content)throw i("cmd01");s[t+1]&&":="===s[t+1].content?(u=a.variable(e,s[t].content,"Pascal"),({lex:t,pcode:b}=c.variableAssignment(e,u,t+2,"Pascal"))):({lex:t,pcode:b}=c.procedureCall(e,t,"Pascal"))}else switch(s[t].content){case"if":({lex:t,pcode:b}=((e,t,o)=>{const a=e.lexemes;let r=[],s={},d=0,h=0;if(!a[t])throw i("if01","ifExpression",a[t-1]);if(t=(s=c.expression(e,t,"null","bool",!1)).lex,(r=s.pcode)[d=r.length-1].push(n.ifno),!a[t])throw i("if02","ifThen",a[t-1]);if("then"!==a[t].type)throw i("if03","ifThen",a[t]);if(!a[t+=1])throw i("if07","ifNothing",a[t]);if(t=(s="begin"===a[t].type?l(e,t+1,offset+r.length,"begin"):structure(routines,sub,t,addresses,offset+r.length)).lex,r=r.concat(s.pcode),"else"===a[t].content){if(!a[t+=1])throw i("if04","elseNothing",a[t]);h=r.length,r.push([n.jump]),t=(s="begin"===a[t].content?l(routines,sub,t+1,addresses,(offset,r.length)):structure(routines,sub,t,addresses,offset+r.length)).lex,(r=r.concat(s.pcode))[h].push(offset+r.length+1),r[d].push(offset+h+2)}else r[d].push(offset+r.length+1);return{lex:t,pcode:r}})(e,t+1));break;case"for":({lex:t,pcode:b}=((e,t,o)=>{e.lexemes;return{lex:t,pcode:r.forLoop(o,void 0,void 0,void 0,void 0,void 0,void 0)}})(e,t+1,o));break;case"repeat":({lex:t,pcode:b}=((e,t,o)=>{let a=e.lexemes,r=[],s={};if(t=(s=l(routines,sub,t,addresses,(offset,r.length))).lex,r=r.concat(s.pcode),!a[t])throw i("repeat01","repeatExpression",a[t-1]);return t=(s=c.expression(routines,sub,t,addresses,"null","bool",!1)).lex,(r=r.concat(s.pcode))[r.length-1].push(n.ifno),r[r.length-1].push(offset+1),{lex:t,pcode:r}})(e,t+1));break;case"while":({lex:t,pcode:b}=((e,t,o,a,r)=>{let s=e[0].language,d=e[t].lexemes,h=[],u={},b=0;if(!d[o])throw i("while01","whileExpression",d[o-1]);if(o=(u=c.expression(e,t,o,a,"null","bool",!1)).lex,(h=u.pcode)[b=h.length-1].push(n.ifno),"Pascal"===s){if(!d[o])throw i("while02","whileDo",d[o-1]);if("do"!==d[o].type)throw i("while03","whileDo",d[o]);o+=1}if(!d[o])throw i("while04","whileNothing",d[o]);switch(s){case"BASIC":u=d[o].line>d[o-1].line?l(e,t,o,a,h.length):structure(e,t,o,a,r+h.length);break;case"Pascal":u="begin"===d[o].type?l(e,t,o+1,a,h.length):structure(e,t,o,a,r+h.length)}return o=u.lex,(h=h.concat(u.pcode)).push([n.jump,r+1]),h[b].push(r+h.length+1),{lex:o,pcode:h}})(e,t+1,o));break;default:throw i("cmdWeird",s[t])}if(s[t])if(""!==s[t].content){if(-1===d.indexOf(s[t-1].content)&&-1===h.indexOf(s[t].content))throw i("cmdSemicolon",s[t])}else for(;s[t]&&""===s[t].content;)t+=1;return{lex:t,pcode:b}};e.exports=d},function(e,t,o){e.exports=((e,t,o)=>{switch(e.lexemes[t].type){case"turtle":case"identifier":if(e.lexemes[t+1]&&"=="===e.lexemes[t+1].content)throw n('Variable assignment in Python uses "=", not "==".',e.lexemes[t+1]);return e.lexemes[t+1]&&"="===e.lexemes[t+1].content?c.variableAssignment(e,e.lexemes[t].content,t+2,"Python"):c.procedureCall(e,t,"Python");case"keyword":switch(e.lexemes[t].content){case"return":return c.variableAssignment(e,"return",t+1,"Python");case"if":return i(e,t+1,o);case"for":return s(e,t+1,o);case"while":return l(e,t+1,o);default:throw n("{lex} makes no sense here.",e.lexemes[t])}default:throw n("{lex} makes no sense here.",e.lexemes[t])}});const{error:n,molecules:c,find:a,pcoder:r}=o(6),i=(e,t,o)=>{const a=e.lexemes;let i,s,l,h=[];if(!a[t])throw n("if01",a[t-1]);if(!d(a,t))throw n("if02",a[t]);if(t=(l=c.expression(e,t,"null","boolean","Python")).lex,i=l.pcode[0],!a[t])throw n("if03",a[t-1]);if(!u(a,t,":"))throw n("if04",a[t]);if(!a[t+=1])throw n("if05",a[t-1]);if(d(a,t))throw n("if06",a[t]);if(!b(a,t))throw n("if07",a[t]);if(t=(l=p(e,t,o+1,a[t].offset)).lex,s=l.pcode,a[t]&&"else"===a[t].content){if(d(a,t))throw n("if08",a[t]);if(!a[t+=1])throw n("if09",a[t-1]);if(!u(a,t,":"))throw n("if10",a[t]);if(!a[t+=1])throw n("if11",a[t-1]);if(d(a,t))throw n("if12",a[t]);if(!b(a,t))throw n("if13",a[t]);t=(l=p(e,t,o+s.length+2,a[t].offset)).lex,h=l.pcode}return{lex:t,pcode:r.conditional(o,i,s,h)}},s=(e,t,o)=>{const i=e.lexemes;let s,l,g,m,f,O,j;if(!i[t])throw n("for01",i[t-1]);if("turtle"===i[t].type)throw n("for02",i[t]);if(!h(i,t,"identifier"))throw n("for03",i[t]);if(!(l=a.variable(e,i[t].content,"Python")))throw n("for04",i[t]);if("integer"!==l.fulltype.type&&"boolint"!==l.fulltype.type)throw n("for05",i[t]);if(!i[t+=1])throw n("for06",i[t-1]);if(!u(i,t,"in"))throw n("for07",i[t]);if(!i[t+=1])throw n("for08",i[t-1]);if(!u(i,t,"range"))throw n("for09",i[t]);if(!i[t+=1])throw n("for10",i[t-1]);if(!u(i,t,"("))throw n("for11",i[t]);if(!i[t+=1])throw n("for12",i[t-1]);if(!d(i,t))throw n("for13",i[t]);if(t=(s=c.expression(e,t,"null","integer","Python")).lex,f=s.pcode[0],!i[t])throw n("for14",i[t-1]);if(!u(i,t,","))throw n("for15",i[t]);if(!i[t+=1])throw n("for16",i[t-1]);if(!d(i,t))throw n("for17",i[t]);if(t=(s=c.expression(e,t,"null","integer","Python")).lex,O=s.pcode[0],!i[t])throw n("for18",i[t-1]);if(!u(i,t,","))throw n("for19",i[t]);if(!i[t+=1])throw n("for20",i[t-1]);if(!d(i,t))throw n("for21",i[t]);if("integer"===i[t].type){if(1!==i[t].value)throw n("for22",i[t]);g="more",m="incr"}else{if("-"!==i[t].content)throw n("for26",i[t]);if(!i[t+=1])throw n("for23",i[t-1]);if(!h(i,t,"integer"))throw n("for24",i[t]);if(1!==i[t].value)throw n("for25",i[t]);g="less",m="decr"}if(!i[t+=1])throw n("for27",i[t-1]);if(!u(i,t,")"))throw n("for28",i[t]);if(!i[t+=1])throw n("for29",i[t-1]);if(!u(i,t,":"))throw n("for30",i[t]);if(!i[t+=1])throw n("for31",i[t-1]);if(d(i,t))throw n("for32",i[t]);if(!b(i,t))throw n("for33",i[t]);return t=(s=p(e,t,o+3,i[t].offset)).lex,j=s.pcode,{lex:t,pcode:r.forLoop(o,l,f,O,g,m,j)}},l=(e,t,o)=>{const a=e.lexemes;let i,s,l;if(!a[t])throw n("while01");if(!d(a,t))throw n("while02");if(t=(i=c.expression(e,t,"null","boolean","Python")).lex,s=i.pcode[0],!a[t])throw n("while03");if(!u(a,t,":"))throw n("while04");if(!a[t+=1])throw n("while05");if(d(a,t))throw n("while06");if(!b(a,t))throw n("while07");return t=(i=p(e,t,o+1,a[t].offset)).lex,l=i.pcode,{lex:t,pcode:r.whileLoop(o,s,l)}},d=(e,t)=>e[t].line===e[t-1].line,h=(e,t,o)=>d(e,t)&&e[t].type===o,u=(e,t,o)=>d(e,t)&&e[t].content===o,b=(e,t)=>e[t].offset>e[t-1].offset,p=(t,o,c,a)=>{const r=t.lexemes;let i,s=[],l=!1;if(!r[o])throw n("blockNothing",r[o-1]);for(;!l&&o<r.length;)(l=r[o].offset<a)||(i=s,({lex:o,pcode:s}=e.exports(t,o,c+s.length)),s=i.concat(s));return{lex:o,pcode:s}}},function(e,t,o){"use strict";o.r(t);var n={};o.r(n),o.d(n,"BASIC",function(){return d}),o.d(n,"Pascal",function(){return h}),o.d(n,"Python",function(){return u});var c={};o.r(c),o.d(c,"BASIC",function(){return b}),o.d(c,"Pascal",function(){return p}),o.d(c,"Python",function(){return g});var a={};o.r(a),o.d(a,"BASIC",function(){return m}),o.d(a,"Pascal",function(){return f}),o.d(a,"Python",function(){return O});var r={};o.r(r),o.d(r,"BASIC",function(){return j}),o.d(r,"Pascal",function(){return y}),o.d(r,"Python",function(){return w});var i=o(11),s=o(2),l=o(3);const d=[Object(s.a)("h3",{content:"Programs and Procedures: the Basics"}),Object(s.a)("p",{content:"The simplest BASIC programs take this form:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("REM myprog  [this is a comment]\nREM [program commands]\nEND","BASIC")}</code>`}),Object(s.a)("p",{content:`The first couple of Turtle example programs (from the Help menu) are like this. But the &lsquo;Olympic rings 2&rsquo; program introduces a global variable: it is called <code>${Object(l.highlight)("ringsize%","BASIC")}</code> and specifies the size of the rings. Such variables are &lsquo;declared&rsquo; by assigning a value, like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("ringsize% = 130\nREM [other program commands]\nEND","BASIC")}</code>`}),Object(s.a)("p",{content:"Complicated programs are usually divided into subroutines, to separate the various tasks and make them easier to understand. BASIC has two types of subroutine, procedures (which are like mini-programs) and functions (which are designed to calculate some value)."}),Object(s.a)("p",{content:`The &lsquo;Simple procedure&rsquo; example program has a procedure to draw a &lsquo;prong&rsquo; – a line ending in a blot – and then return to the starting point. Procedures fit into a BASIC program after the end of the main program, indicated by <code>${Object(l.highlight)("END","BASIC")}</code>. They look like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("DEF PROCmyprocedure(par1%)\n  LOCAL local1%, local2$\n  REM [procedure commands]\nENDPROC","BASIC")}</code>`}),Object(s.a)("p",{content:`All procedure names must begin with &lsquo;PROC&rsquo;, e.g. &lsquo;PROCmyprocedure&rsquo;. A procedure can have its own local variables, declared using <code>${Object(l.highlight)("LOCAL","BASIC")}</code>. A <code>${Object(l.highlight)("PRIVATE","BASIC")}</code> variable is declared the same way, but unlike a <code>${Object(l.highlight)("LOCAL","BASIC")}</code> variable, it retains its value between procedure calls. A procedure can also have parameters (or &lsquo;arguments&rsquo;) that are values sent into the subroutine when it is called from the program, and given a name within the subroutine (e.g. <code>${Object(l.highlight)("par1%","BASIC")}</code> above).`}),Object(s.a)("p",{content:"A function is similar to a procedure, with the addition that it returns a value. Also a function name must begin with &lsquo;FN&rsquo;, for example:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)('DEF FNmyfunction(par1%)\n  REM [procedure commands]\n  = "output"',"BASIC")}</code>`}),Object(s.a)("p",{content:`The last statement of a function always begins with <code>${Object(l.highlight)("=","BASIC")}</code> and the <code>${Object(l.highlight)('"output"',"BASIC")}</code> provides the return value for the function.`}),Object(s.a)("h4",{content:"Reserved Words, Declarations, Types, and Variables"}),Object(s.a)("p",{content:`The words <code>${Object(l.highlight)("REM","BASIC")}</code>, <code>${Object(l.highlight)("END","BASIC")}</code>, <code>${Object(l.highlight)("DEF","BASIC")}</code>, etc. are all capitalized to emphasise the program structure. BASIC takes notice of capitalization. These three words are also in red here (or gray for comments) – this is to indicate that they are special &lsquo;reserved&rsquo; words that cannot be used for other purposes (so you can&rsquo;t call a procedure or variable &lsquo;END&rsquo;).`}),Object(s.a)("p",{content:"Variables all end with either a &lsquo;%&rsquo; or a &lsquo;$&rsquo; – Turtle will tell you if you forget! Turtle BASIC allows two types of variables:"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:"<td>integer</td><td>whole number (name ends in &lsquo;%&rsquo;)</td>"}),Object(s.a)("tr",{content:"<td>string</td><td>sequence of characters (name ends in &lsquo;$&rsquo;)</td>"})]}),Object(s.a)("p",{content:`Most of your variables are likely to be integer variables, like a transparent box that stores a number. You can look at the box to see which number it contains at any time, and you can change the number by assigning a new value. In the &lsquo;Olympic rings 2&rsquo; example program, <code>${Object(l.highlight)("ringsize%","BASIC")}</code> is declared by assigning the value <code>${Object(l.highlight)("130","BASIC")}</code> using the command:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("ringsize% = 130","BASIC")}</code>`}),Object(s.a)("p",{content:"Five special integer variables are &lsquo;built in&rsquo; from the start, and these are called the Turtle&rsquo;s fields:"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("TURTX%","BASIC")}</code></td><td>The Turtle&rsquo;s x-coordinate</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("TURTY%","BASIC")}</code></td><td>The Turtle&rsquo;s y-coordinate</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("TURTD%","BASIC")}</code></td><td>The Turtle&rsquo;s direction</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("TURTT%","BASIC")}</code></td><td>The Turtle&rsquo;s pen thickness</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("TURTC%","BASIC")}</code></td><td>The Turtle&rsquo;s colour setting</td>`})]}),Object(s.a)("p",{content:"These automatically change to keep track of the Turtle&rsquo;s state, and are shown above the Canvas."}),Object(s.a)("p",{content:`For a use of <code>${Object(l.highlight)("TURTD%","BASIC")}</code>, see the &lsquo;Simple procedure&rsquo; example.`})],h=[Object(s.a)("h3",{content:"Programs and Procedures: the Basics"}),Object(s.a)("p",{content:"The simplest Pascal programs take this form:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("PROGRAM myprog;\nBEGIN\n  {program commands}\nEND.","Pascal")}</code>`}),Object(s.a)("p",{content:`The first couple of Turtle example programs (from the Help menu) are like this. But the &lsquo;Olympic rings 2&rsquo; program introduces a global variable: it is called <code>${Object(l.highlight)("ringsize","Pascal")}</code> and specifies the size of the rings. Such variables are &lsquo;declared&rsquo; at the beginning of the program, like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("PROGRAM myprog;\nVAR global1: integer;\n    global2, global3: integer;\nBEGIN\n  {program commands}\nEND.","Pascal")}</code>`}),Object(s.a)("p",{content:`Complicated programs are usually divided into subroutines, to separate the various tasks and make them easier to understand. Pascal has two types of subroutine, procedures (which are like mini-programs) and functions (which are designed to calculate some value). The &lsquo;Simple procedure&rsquo; example program has a procedure to draw a &lsquo;prong&rsquo; – a line ending in a blot – and then return to the starting point. Procedures fit into a Pascal program after the global variables and before the <code>${Object(l.highlight)("BEGIN","Pascal")}</code> of the main program; they look like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("Procedure myprocedure(par1: integer);\nVar local1, local2: integer;\nBegin\n  {procedure commands}\nEnd;","Pascal")}</code>`}),Object(s.a)("p",{content:`A procedure can have its own local variables, declared much like global variables. But it can also have parameters (or &lsquo;arguments&rsquo;) that are values sent into the subroutine when it is called from the program, and given a name within the subroutine (e.g. <code>${Object(l.highlight)("par1","Pascal")}</code> above).`}),Object(s.a)("h4",{content:"Reserved Words, Declarations, Types, and Variables"}),Object(s.a)("p",{content:`The words <code>${Object(l.highlight)("PROGRAM","Pascal")}</code>, <code>${Object(l.highlight)("BEGIN","Pascal")}</code> and <code>${Object(l.highlight)("END","Pascal")}</code> are often capitalized to emphasise the program structure, but Pascal actually takes no notice of capitalization (so you could write <code>${Object(l.highlight)("program","Pascal")}</code>, <code>${Object(l.highlight)("Program","Pascal")}</code> or even <code>${Object(l.highlight)("PrOgRaM","Pascal")}</code>!). These three words are also in red here – this is to indicate that they are special &lsquo;reserved&rsquo; words that cannot be used for other purposes (so you can&rsquo;t call a procedure or variable &lsquo;begin&rsquo;). As well as variables, a program can use constants to give a convenient name to a particular value. Any constants must be &lsquo;declared&rsquo; even before the variables, like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("PROGRAM myprog;\nCONST limit = 4;\nVAR global1: integer;\n{and so on}","Pascal")}</code>`}),Object(s.a)("p",{content:`Notice that variable and constant declarations must all end with a semicolon – Turtle will tell you if you forget! Notice also that while constants are given a value when declared (e.g. <code>${Object(l.highlight)("limit","Pascal")}</code> is given the value <code>${Object(l.highlight)("4","Pascal")}</code> above), variables are given a <em>type</em>, to indicate the sort of data that they can store. Turtle Pascal allows four main types of variables:`}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:"<td>integer</td><td>whole number</td>"}),Object(s.a)("tr",{content:"<td>boolean</td><td>true or false</td>"}),Object(s.a)("tr",{content:"<td>char</td><td>single character</td>"}),Object(s.a)("tr",{content:"<td>string</td><td>sequence of character(s)</td>"})]}),Object(s.a)("p",{content:"Most of your variables are likely to be integer variables, like a transparent box that stores a number. You can look at the box to see which number it contains at any time, and you can change the number by assigning a new value, e.g."}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("VAR ringsize: integer;","Pascal")}</code>`}),Object(s.a)("p",{content:`is declared in the &lsquo;Olympic rings 2&rsquo; example program, and <code>${Object(l.highlight)("ringsize","Pascal")}</code> is later assigned the value <code>${Object(l.highlight)("130","Pascal")}</code> using the command:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("ringsize := 130;","Pascal")}</code>`}),Object(s.a)("p",{content:"Five special integer variables are &lsquo;built in&rsquo; from the start, and these are called the Turtle&rsquo;s fields:"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("turtx","Pascal")}</code></td><td>The Turtle’s x-coordinate</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("turty","Pascal")}</code></td><td>The Turtle’s y-coordinate</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("turtd","Pascal")}</code></td><td>The Turtle’s direction</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("turtt","Pascal")}</code></td><td>The Turtle’s pen thickness</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("turtc","Pascal")}</code></td><td>The Turtle’s colour setting</td>`})]}),Object(s.a)("p",{content:"These automatically change to keep track of the Turtle&rsquo;s state, and are shown above the Canvas."}),Object(s.a)("p",{content:`For a use of <code>${Object(l.highlight)("turtd","Pascal")}</code>, see the &lsquo;Simple procedure&rsquo; example.`})],u=[Object(s.a)("h3",{content:"Programs and Procedures: the Basics"}),Object(s.a)("p",{content:"The simplest Python programs take this form:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("# myprog  [this is a comment]\ndef main():\n  # program commands","Python")}</code>`}),Object(s.a)("p",{content:`The first couple of Turtle example programs (from the Help menu) are like this. But the &lsquo;Olympic rings 2&rsquo; program introduces a variable: it is called <code>${Object(l.highlight)("ringsize","Python")}</code> and specifies the size of the rings. Such variables are &lsquo;declared&rsquo; by assigning a value, like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("ringsize = 130\n# other program commands","Python")}</code>`}),Object(s.a)("p",{content:`Complicated programs are usually divided into functions, to separate the various tasks and make them easier to understand. The &lsquo;Simple procedure&rsquo; example program has a function to draw a &lsquo;prong&rsquo; – a line ending in a blot – and then return to the starting point. Functions fit into a Python program before the <code>${Object(l.highlight)("main()","Python")}</code> function and may be nested; they look like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("def outsidefunction(par1):\n  global global1, global2        # optional\n  nonlocal nonlocal1, nonlocal2  # optional\n\n  def insidefunction():\n    # insidefunction&rsquo;s commands\n\n  # outsidefunction&rsquo;s commands","Python")}`}),Object(s.a)("p",{content:`Nested functions must occur after any <code>${Object(l.highlight)("global","Python")}</code> or <code>${Object(l.highlight)("nonlocal","Python")}</code> declarations and before the function&rsquo;s commands. Functions may return a value like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("def fname(par1):\n  # function commands\n  return somevalue","Python")}</code>`}),Object(s.a)("p",{content:"If there is no return statement then the function behaves like a procedure in Pascal or BASIC."}),Object(s.a)("p",{content:`A function can also have parameters (or &lsquo;arguments&rsquo;) that are values sent into the subroutine when it is called from the program, and given a name within the subroutine (e.g. <code>${Object(l.highlight)("par1","Python")}</code> above).`}),Object(s.a)("h4",{content:"Reserved Words, Declarations, Types, and Variables"}),Object(s.a)("p",{content:`The words <code>${Object(l.highlight)("def","Python")}</code>, <code>${Object(l.highlight)("return","Python")}</code>, <code>${Object(l.highlight)("global","Python")}</code>, etc. must all be in lower case; Python takes notice of capitalisation! These three words are also in red here – this is to indicate that they are special &lsquo;reserved&rsquo; words that cannot be used for other purposes (so you can&rsquo;t call a procedure or variable &lsquo;return&rsquo;). Variables are of two types, depending on the sort of data that they can store. Turtle Python allows two main types of variables:`}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:"<td>integer</td><td>whole number</td>"}),Object(s.a)("tr",{content:"<td>string</td><td>sequence of character(s)</td>"})]}),Object(s.a)("p",{content:`Most of your variables are likely to be integer variables, like a transparent box that stores a number. You can look at the box to see which number it contains at any time, and you can change the number by assigning a new value. In the &lsquo;Olympic rings 2&rsquo; example program, <code>${Object(l.highlight)("ringsize","Python")}</code> is declared by assigning the value <span>${Object(l.highlight)("130","Python")}</span> using the command:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("ringsize = 130","Python")}</code>`}),Object(s.a)("p",{content:`Note that sometimes Python cannot automatically determine what type a variable is meant to be. If this occurs an error message will be generated. To solve these cases the type of the variable can be forced into an integer by adding zero, e.g. <code>${Object(l.highlight)("varname + 0","Python")}</code>, or forced into a string by adding the null string, e.g. <code>${Object(l.highlight)("varname + ''","Python")}</code>.`}),Object(s.a)("p",{content:"Five special global integer variables are &lsquo;built in&rsquo; from the start, and these are called the Turtle&rsquo;s fields:"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("turtx","Python")}</code></td><td>The Turtle&rsquo;s x-coordinate</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("turty","Python")}</code></td><td>The Turtle&rsquo;s y-coordinate</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("turtd","Python")}</code></td><td>The Turtle&rsquo;s direction</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("turtt","Python")}</code></td><td>The Turtle&rsquo;s pen thickness</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("turtc","Python")}</code></td><td>The Turtle&rsquo;s colour setting</td>`})]}),Object(s.a)("p",{content:"These automatically change to keep track of the Turtle&rsquo;s state, and are shown above the Canvas."}),Object(s.a)("p",{content:`For a use of <code>${Object(l.highlight)("turtd","Python")}</code>, see the &lsquo;Simple procedure&rsquo; example.`})],b=[Object(s.a)("h3",{content:"Command Structures"}),Object(s.a)("p",{content:"Selection and ordering of commands is done by <em>sequencing</em>, <em>conditional selection</em>, and <em>looping</em>."}),Object(s.a)("h4",{content:"Sequencing of Commands"}),Object(s.a)("p",{content:"Commands to be performed in sequence are usually placed in the appropriate order within the program, e.g.:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("COLOUR(GREEN)\nBLOT(100)\nPAUSE(1000)\nCOLOUR(RED)\nFORWARD(450) REM etc.","BASIC")}</code>`}),Object(s.a)("p",{content:"(From the first example program in the Help menu.)"}),Object(s.a)("h4",{content:"Conditional Selection of Commands"}),Object(s.a)("p",{content:`Suppose you want to draw a blot with a given radius (stored as the integer variable <code>${Object(l.highlight)("radius%","BASIC")}</code>), but only if that value is less than 500; do it like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("IF radius% < 500 THEN\n  BLOT(radius%)\nENDIF","BASIC")}</code>`}),Object(s.a)("p",{content:`If you want to do something different when the condition is not met (e.g. drawing a blot with half the radius), extend the <code>${Object(l.highlight)("IF - THEN","BASIC")}</code> structure by adding <code>${Object(l.highlight)("ELSE","BASIC")}</code> and then the new command:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("IF radius% < 500 THEN\n  BLOT(radius%)\nELSE\n  BLOT(radius% / 2)\nENDIF","BASIC")}</code>`}),Object(s.a)("h4",{content:"Grouping of Commands"}),Object(s.a)("p",{content:`A sequence of commands within an <code>${Object(l.highlight)("IF - THEN - ELSE - ENDIF","BASIC")}</code> structure is always treated as a single command. The <code>${Object(l.highlight)("ELSE","BASIC")}</code> and <code>${Object(l.highlight)("ENDIF","BASIC")}</code> words bracket off the sequence of commands. (Another possibility is to package them into a procedure.) You can also write these on a single line without the <code>${Object(l.highlight)("ENDIF","BASIC")}</code>, like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("IF radius% < 500 THEN BLOT(radius%)","BASIC")}</code>`}),Object(s.a)("h4",{content:"Spacing, Indenting, Auto-Formatting"}),Object(s.a)("p",{content:"Unnecessary &lsquo;white space&rsquo; is ignored by BASIC, so you can use line breaks and indenting to make the structure of your program easy to read. However, each statement must be on its own line, unless separated by a colon &lsquo;:&rsquo;."}),Object(s.a)("h4",{content:"Looping Structures"}),Object(s.a)("p",{content:`BASIC provides three different structures for looping (or &lsquo;iterating&rsquo;) commands. If you know in advance how many times you want to loop – or you want to &lsquo;loop over&rsquo; a particular range of values (e.g. from 1 to 200), then the simplest is a &lsquo;<code>${Object(l.highlight)("FOR","BASIC")}</code> loop&rsquo; (or &lsquo;counting loop&rsquo;):`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("FOR count% = 1 TO 200\n  FORWARD(count% / 3)\n  RIGHT(5)\n  REM etc.\nNEXT","BASIC")}</code>`}),Object(s.a)("p",{content:`(From the first <code>${Object(l.highlight)("FOR","BASIC")}</code> loop example program in the Help menu.)`}),Object(s.a)("p",{content:`Here, <code>${Object(l.highlight)("NEXT","BASIC")}</code> is used to bracket together a number of commands, and indenting is used to show the structure.`}),Object(s.a)("p",{content:`To count downwards, use <code>${Object(l.highlight)("STEP -1","BASIC")}</code> at then end (as in the &lsquo;Procedure with parameter&rsquo; example program).`}),Object(s.a)("p",{content:`In a <code>${Object(l.highlight)("FOR","BASIC")}</code> loop, the &lsquo;loop variable&rsquo; (here <code>${Object(l.highlight)("count%","BASIC")}</code>) is given in turn each of the values in the range (here 1, 2, 3, &hellip;, 199, 200), and the loop instructions are performed each time. So in the example above, a spiral is drawn as the Turtle moves forward gradually more and more (as <code>${Object(l.highlight)("count%","BASIC")}</code> increases).`}),Object(s.a)("p",{content:"If instead of looping a specific number of times, you want to loop through some sequence of commands until some particular condition becomes true, then you can use:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("REPEAT\n  REM command1\n  REM command2 (etc.)\nUNTIL REM condition","BASIC")}</code>`}),Object(s.a)("p",{content:`The &lsquo;Simple procedure&rsquo; example program does this, looping until the Turtle is pointing directly north (i.e., <code>${Object(l.highlight)("TURTD% = 0","BASIC")}</code>).`}),Object(s.a)("p",{content:"Alternatively, you can loop through a sequence of commands while some condition is true (so that it stops when the condition becomes false):"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("WHILE REM condition\n  REM sequence of commands\nENDWHILE","BASIC")}</code>`}),Object(s.a)("p",{content:`Things that can be done with a <code>${Object(l.highlight)("REPEAT","BASIC")}</code> loop can equally be done with a <code>${Object(l.highlight)("WHILE","BASIC")}</code> loop (and vice-versa), but sometimes one is more natural than the other. Notice also that a <code>${Object(l.highlight)("REPEAT","BASIC")}</code> loop always executes the sequence of commands at least once, because it tests the condition at the end of the loop. But a <code>${Object(l.highlight)("WHILE","BASIC")}</code> loop tests the condition <em>before</em> executing the sequence of commands, and so will not execute them even once if condition is false to start with. (For examples of the various loops, see the second set of example programs, &lsquo;Further commands and structures&rsquo;.)`})],p=[Object(s.a)("h3",{content:"Command Structures"}),Object(s.a)("p",{content:"Selection and ordering of commands is done by <em>sequencing</em>, <em>conditional selection</em>, and <em>looping</em>."}),Object(s.a)("h4",{content:"Sequencing of Commands"}),Object(s.a)("p",{content:"Commands to be performed in sequence are usually placed in the appropriate order within the program, separated by semicolons, e.g.:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("colour(green);\nblot(100);\npause(1000);\ncolour(red);\nforward(450); {etc.}","Pascal")}</code>`}),Object(s.a)("p",{content:"(From the first example program in the Help menu.)"}),Object(s.a)("h4",{content:"Conditional Selection of Commands"}),Object(s.a)("p",{content:`Suppose you want to draw a blot with a given radius (stored as the integer variable <code>${Object(l.highlight)("radius","Pascal")}</code>), but only if that value is less than 500; do it like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("if radius < 500 then\n  blot(radius);","Pascal")}</code>`}),Object(s.a)("p",{content:`If you want to do something different when the condition is not met (e.g. drawing a blot with half the radius), extend the <code>${Object(l.highlight)("if condition then","Pascal")}</code> structure by adding <code>${Object(l.highlight)("else","Pascal")}</code> and then the new command:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("if radius < 500 then\n  blot(radius)\nelse\n  blot(radius / 2);","Pascal")}</code>`}),Object(s.a)("p",{content:`Notice that this is a single complex command, so you must not put a semicolon before the <code>${Object(l.highlight)("else","Pascal")}</code> (if you do, Turtle will give you a warning).`}),Object(s.a)("h4",{content:"Grouping of Commands"}),Object(s.a)("p",{content:`Sometimes you will want to do a sequence of commands within an <code>${Object(l.highlight)("if {condition} then {command} else","Pascal")}</code> structure, in which case you can bracket them between <code>${Object(l.highlight)("begin","Pascal")}</code> and <code>${Object(l.highlight)("end","Pascal")}</code>, e.g.`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("if {condition} then\n  begin\n    {sequence1}\n  end\nelse\n  begin\n    {sequence2}\n  end;","Pascal")}</code>`}),Object(s.a)("p",{content:"Any such bracketed sequence of commands is always treated as a single command. (Another possibility is to package them into a procedure.)"}),Object(s.a)("h4",{content:"Spacing, Indenting, Auto-Formatting"}),Object(s.a)("p",{content:"Unnecessary &lsquo;white space&rsquo; is ignored by Pascal, so you can use line breaks and indenting to make the structure of your program easy to read."}),Object(s.a)("h4",{content:"Looping Structures"}),Object(s.a)("p",{content:`Pascal provides three different structures for looping (or &lsquo;iterating&rsquo;) commands. If you know in advance how many times you want to loop – or you want to &lsquo;loop over&rsquo; a particular range of values (e.g. from 1 to 200), then the simplest is a &lsquo;<code>${Object(l.highlight)("for","Pascal")}</code> loop&rsquo; (or &lsquo;counting loop&rsquo;):`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("for count := 1 to 200 do\n  begin\n    forward(count / 3);\n    right(5);\n    {etc.}\n  end;","Pascal")}</code>`}),Object(s.a)("p",{content:`(From the first <code>${Object(l.highlight)("for","Pascal")}</code> loop example program in the Help menu.)`}),Object(s.a)("p",{content:`Again <code>${Object(l.highlight)("begin {commands} end","Pascal")}</code> is used to bracket together a number of commands, and indenting is used to show the structure.`}),Object(s.a)("p",{content:`In a <code>${Object(l.highlight)("for","Pascal")}</code> loop, the &lsquo;loop variable&rsquo; (here <code>${Object(l.highlight)("count","Pascal")}</code>) is given in turn each of the values in the range (here 1, 2, 3, &hellip;, 199, 200), and the loop instructions are performed each time. So in the example above, a spiral is drawn as the Turtle moves forward gradually more and more (as <code>${Object(l.highlight)("count","Pascal")}</code> increases).`}),Object(s.a)("p",{content:`To count downwards, use <code>${Object(l.highlight)("downto","Pascal")}</code> instead of <code>${Object(l.highlight)("to","Pascal")}</code> (as in the &lsquo;Procedure with parameter&rsquo; example program.`}),Object(s.a)("p",{content:"If instead of looping a specific number of times, you want to loop through some sequence of commands until some particular condition becomes true, then you can use:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("repeat\n  {command1;}\n  {command2; (etc.)}\nuntil {condition}","Pascal")}</code>`}),Object(s.a)("p",{content:`<p>The &lsquo;Simple procedure&rsquo; example program does this, looping until the Turtle is pointing directly north (i.e., <code>${Object(l.highlight)("turtd = 0","Pascal")}</code>). Alternatively, you can loop through a sequence of commands while some condition is true (so that it stops when the condition becomes false):`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("while {condition} do\n  begin\n    {sequence of commands}\n  end;","Pascal")}</code>`}),Object(s.a)("p",{content:`Things that can be done with a &lsquo;<code>${Object(l.highlight)("repeat","Pascal")}</code> loop&rsquo; can equally be done with a &lsquo;<code>${Object(l.highlight)("while","Pascal")}</code> loop&rsquo; (and vice-versa), but sometimes one is more natural than the other. Notice also that a <code>${Object(l.highlight)("repeat","Pascal")}</code> loop always executes the sequence of commands at least once, because it tests the condition at the end of the loop. But a <code>${Object(l.highlight)("while","Pascal")}</code> loop tests the condition <em>before</em> executing the sequence of commands, and so will not execute them even once if condition is false to start with. (For examples of the various loops, see the second set of example programs, &lsquo;Further commands and structures&rsquo;.)`})],g=[Object(s.a)("h3",{content:"Command Structures"}),Object(s.a)("p",{content:"Selection and ordering of commands is done by <em>sequencing</em>, <em>conditional selection</em>, and <em>looping</em>."}),Object(s.a)("h4",{content:"Sequencing of Commands"}),Object(s.a)("p",{content:"Commands to be performed in sequence are usually placed in the appropriate order within the program, with the same indent, e.g.:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("colour(green)\nblot(100)\npause(1000) # etc.","Python")}</code>`}),Object(s.a)("p",{content:"(From the first example program in the Help menu.)"}),Object(s.a)("h4",{content:"Conditional Selection of Commands"}),Object(s.a)("p",{content:`Suppose you want to draw a blot with a given radius (stored as the integer variable <code>${Object(l.highlight)("radius","Python")}</code>), but only if that value is less than 500; do it like this:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("if radius < 500:\n  blot(radius)","Python")}</code>`}),Object(s.a)("p",{content:`If you want to do something different when the condition is not met (e.g. drawing a blot with half the radius), extend the <code>${Object(l.highlight)("if","Python")}</code> structure by adding <code>${Object(l.highlight)("else","Python")}</code> and then the new command:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("if radius < 500:\n  blot(radius)\nelse:\n  blot(radius // 2)","Python")}</code>`}),Object(s.a)("p",{content:`Notice that this is a single complex command, so the <code>${Object(l.highlight)("else","Python")}</code> must have the same indent as <code>${Object(l.highlight)("if","Python")}</code> and the sub-commands must be further indented (if you do not indent correctly, Turtle will give you a warning).`}),Object(s.a)("h4",{content:"Grouping of Commands"}),Object(s.a)("p",{content:`Sometimes you will want to do a sequence of commands within an <code>${Object(l.highlight)("if - else","Python")}</code> structure, in which case you can group them by indenting them all by the same amount. Any such indented sequence of commands is treated as a single command. (Another possibility is to package them into a function.)`}),Object(s.a)("p",{content:"Note that indents must be consistent, so the following will generate several errors:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("if radius < 500:\n  blot(radius)\n    blot(radius // 3)      # too many indents\n  else:            # should match the if line\n  blot(radius // 2) # needs indent after else","Python")}</code>`}),Object(s.a)("h4",{content:"Auto-Formatting"}),Object(s.a)("h4",{content:"Looping Structures"}),Object(s.a)("p",{content:`Python provides two different structures for looping (or &lsquo;iterating&rsquo;) commands. If you know in advance how many times you want to loop – or you want to &lsquo;loop over&rsquo; a particular range of values (e.g. from 1 to 200), then the simplest is a &lsquo;<code>${Object(l.highlight)("for","Python")}</code> loop&rsquo; (or &lsquo;counting loop&rsquo;):`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("for count in range(1, 201, 1):\n  forward(count // 3)\n  right(5)\n  # etc.","Python")}</code>`}),Object(s.a)("p",{content:`(From the first <code>${Object(l.highlight)("for","Python")}</code> loop example program in the Help menu.)`}),Object(s.a)("p",{content:"Again indenting is used to group together a number of commands."}),Object(s.a)("p",{content:`In a <code>${Object(l.highlight)("for","Python")}</code> loop, the &lsquo;loop variable&rsquo; (here <code>${Object(l.highlight)("count","Python")}</code>) is given in turn each of the values in the range (here 1, 2, 3, &hellip;, 199, 200), and the loop instructions are performed each time. So in the example above, a spiral is drawn as the Turtle moves forward gradually more and more (as <code>${Object(l.highlight)("count","Python")}</code> increases).`}),Object(s.a)("p",{content:`The <code>${Object(l.highlight)("range","Python")}</code> function specifies the values that the loop variable will take as follows:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("range(firstValue, lastValue + 1, increment)","Python")}</code>`}),Object(s.a)("p",{content:"The increment can be either 1 or -1. To count down through a loop, use an increment of -1."}),Object(s.a)("p",{content:"If instead of looping a specific number of times, you want to loop through some sequence of commands while some condition is true (so that it stops when the condition becomes false), then you can use:"}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("while condition:\n  # sequence of commands","Python")}</code>`}),Object(s.a)("p",{content:`A <code>${Object(l.highlight)("while","Python")}</code> loop tests the condition <em>before</em> executing the sequence of commands, and so will not execute them even once if condition is false to start with. (For examples of the various loops, see the second set of example programs, &lsquo;Further commands and structures&rsquo;.)`})],m=[Object(s.a)("h3",{content:"Arithmetical Operators"}),Object(s.a)("p",{content:"The four main arithemetical operators are represented as:"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("+","BASIC")}</code></td><td>addition (also used for string concatenation)</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("-","BASIC")}</code></td><td>subtraction</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("*","BASIC")}</code></td><td>multiplication</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("/","BASIC")}</code></td><td>division</td>`})]}),Object(s.a)("p",{content:`<code>${Object(l.highlight)("/","BASIC")}</code> is <em>integer</em> division, with the remainder discarded (e.g. <code>${Object(l.highlight)("14 / 3 = 4","BASIC")}</code>). Remainders are given by:`}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("MOD","BASIC")}</code></td><td>remainder</td>`})]}),Object(s.a)("p",{content:`(e.g. <code>${Object(l.highlight)("14 MOD 3 = 2","BASIC")}</code>; <code>${Object(l.highlight)("67 MOD 10 = 7","BASIC")}</code>).`}),Object(s.a)("h3",{content:"Doing Fractional (e.g. Decimal) Arithmetic"}),Object(s.a)("p",{content:`The Turtle Machine is designed to handle memory simply and transparently for the learning of computer science, and so has no special type for representing fractional numbers; which is why <code>${Object(l.highlight)("/","BASIC")}</code> is integer division. But the Turtle System can handle fractional numbers by treating them explicitly as fractions, with both a numerator (above the line) and a denominator (below the line). A denominator of 1000000, for instance, allows decimal arithmetic to 6 decimal places.`}),Object(s.a)("p",{content:`Thus to get the sine of 34.56 degrees to 6 decimal places, you could use <code>${Object(l.highlight)("n% = SIN(3456, 100, 1000000)","BASIC")}</code> – this makes <code>${Object(l.highlight)("n%","BASIC")}</code> equal to the sine of the angle 3456/100, multiplied by 1000000 (and rounded). <code>${Object(l.highlight)("WRITELN(QSTR$(n%, 1000000, 6))","BASIC")}</code> will then print n%/1000000 to six decimal places, i.e. <code>${Object(l.highlight)('"0.567269"',"BASIC")}</code>. For more illustrations of this sort of decimal arithmetic, see the example program &lsquo;Mathematical functions&rsquo;.`}),Object(s.a)("h3",{content:"Boolean Operators"}),Object(s.a)("p",{content:"The four main boolean operators are represented in the standard way:"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("NOT","BASIC")}</code></td><td>negation</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("AND","BASIC")}</code></td><td>conjunction</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("OR","BASIC")}</code></td><td>disjunction (inclusive)</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("EOR","BASIC")}</code></td><td>exclusive disjunction</td>`})]}),Object(s.a)("p",{content:`These are used between integers, where zero stands for false and any other number stands for true. <code>${Object(l.highlight)("FALSE","BASIC")}</code> stands for <code>${Object(l.highlight)("0","BASIC")}</code> and <code>${Object(l.highlight)("TRUE","BASIC")}</code> for <code>${Object(l.highlight)("-1","BASIC")}</code>. The Boolean operators can also be used in a bitwise fashion (i.e. each binary bit in the result is calculated as the result of the relevant boolean operation on the corresponding bits of the inputs, e.g. <code>${Object(l.highlight)("21 AND 6 = 4","BASIC")}</code> (binary <code>${Object(l.highlight)("10101 AND 00110 = 100","BASIC")}</code>); <code>${Object(l.highlight)("21 OR 6 = 23","BASIC")}</code> (<code>${Object(l.highlight)("10111","BASIC")}</code>); <code>${Object(l.highlight)("21 EOR 6 = 19","BASIC")}</code> (<code>${Object(l.highlight)("10011","BASIC")}</code>).`}),Object(s.a)("h3",{content:"Comparison Operators"}),Object(s.a)("p",{content:"The six comparison operators are applicable to all types (with strings compared alphabetically):"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("=","BASIC")}</code></td><td>equality</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("<>","BASIC")}</code></td><td>inequality</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("<","BASIC")}</code></td><td>less than</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("<=","BASIC")}</code></td><td>less than or equal</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)(">","BASIC")}</code></td><td>greater than</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)(">=","BASIC")}</code></td><td>greater than or equal</td>`})]}),Object(s.a)("h3",{content:"Bracketing"}),Object(s.a)("p",{content:"Complex expressions require brackets, e.g."}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("IF (n% < 0) OR (n% > 9) THEN\n  n% = ((a% + 1) * (b% + 3) + c%) MOD 10","BASIC")}</code>`})],f=[Object(s.a)("h3",{content:"Arithmetical Operators"}),Object(s.a)("p",{content:"The four main arithemetical operators are represented as:"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("+","Pascal")}</code></td><td>addition (also used for string concatenation)</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("-","Pascal")}</code></td><td>subtraction</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("*","Pascal")}</code></td><td>multiplication</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("/","Pascal")}</code></td><td>division</td>`})]}),Object(s.a)("p",{content:`<code>${Object(l.highlight)("/","Pascal")}</code> is <em>integer</em> division, with the remainder discarded (e.g. <code>${Object(l.highlight)("14 / 3 = 4","Pascal")}</code>). Remainders are given by:`}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("mod","Pascal")}</code></td><td>remainder</td>`})]}),Object(s.a)("p",{content:`(e.g. <code>${Object(l.highlight)("14 mod 3 = 2","Pascal")}</code>; <code>${Object(l.highlight)("67 mod 10 = 7","Pascal")}</code>).`}),Object(s.a)("h3",{content:"Doing Fractional (e.g. Decimal) Arithmetic"}),Object(s.a)("p",{content:`The Turtle Machine is designed to handle memory simply and transparently for the learning of computer science, and so has no special type for representing fractional numbers; which is why <code>${Object(l.highlight)("/","Pascal")}</code> is integer division. But the Turtle System can handle fractional numbers by treating them explicitly as fractions, with both a numerator (above the line) and a denominator (below the line). A denominator of 1000000, for instance, allows decimal arithmetic to 6 decimal places.`}),Object(s.a)("p",{content:`Thus to get the sine of 34.56 degrees to six decimal places, you could use <code>${Object(l.highlight)("n := sin(3456, 100, 1000000)","Pascal")}</code> – this makes <code>${Object(l.highlight)("n","Pascal")}</code> equal to the sine of the angle 3456/100, multiplied by 1000000 (and rounded). <code>${Object(l.highlight)("writeln(qstr(n, 1000000, 6))","Pascal")}</code> will then print n/1000000 to six decimal places, i.e. <code>${Object(l.highlight)('"0.567269"',"Pascal")}</code>. For more illustrations of this sort of decimal arithmetic, see the example program &lsquo;Mathematical functions&rsquo;.`}),Object(s.a)("h3",{content:"Boolean Operators"}),Object(s.a)("p",{content:"The four main boolean operators are represented in the standard way:"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("not","Pascal")}</code></td><td>negation</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("and","Pascal")}</code></td><td>conjunction</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("or","Pascal")}</code></td><td>disjunction (inclusive)</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("xor","Pascal")}</code></td><td>exclusive disjunction</td>`})]}),Object(s.a)("p",{content:`These can also be used between integers, in a <em>bitwise</em> fashion (i.e. each binary bit in the result is calculated as the result of the relevant boolean operation on the corresponding bits of the inputs), e.g. <code>${Object(l.highlight)("21 and 6 = 4","Pascal")}</code> (binary <code>${Object(l.highlight)("10101 and 00110 = 100","Pascal")}</code>); <code>${Object(l.highlight)("21 or 6 = 23","Pascal")}</code> (<code>${Object(l.highlight)("10111","Pascal")}</code>); <code>${Object(l.highlight)("21 xor 6 = 19","Pascal")}</code> (<code>${Object(l.highlight)("10011","Pascal")}</code>).`}),Object(s.a)("h3",{content:"Comparison Operators"}),Object(s.a)("p",{content:"The six comparison operators are applicable to all types (with strings compared alphabetically):"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("=","Pascal")}</code></td><td>equality</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("<>","Pascal")}</code></td><td>inequality</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("<","Pascal")}</code></td><td>less than</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("<=","Pascal")}</code></td><td>less than or equal</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)(">","Pascal")}</code></td><td>greater than</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)(">=","Pascal")}</code></td><td>greater than or equal</td>`})]}),Object(s.a)("h3",{content:"Bracketing"}),Object(s.a)("p",{content:"Complex expressions require brackets, e.g."}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("if (n < 0) or (n > 9) then\n  n := ((a + 1) * (b + 3) + c) mod 10","Pascal")}</code>`})],O=[Object(s.a)("h3",{content:"Arithmetical Operators"}),Object(s.a)("p",{content:"The four main arithemetical operators are represented as:"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("+","Python")}</code></td><td>addition (also used for string concatenation)</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("-","Python")}</code></td><td>subtraction</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("*","Python")}</code></td><td>multiplication</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("//","Python")}</code></td><td>division</td>`})]}),Object(s.a)("p",{content:`<code>${Object(l.highlight)("//","Python")}</code> is <em>integer</em> division, with the remainder discarded (e.g. <code>${Object(l.highlight)("14 // 3 = 4","Python")}</code>). Remainders are given by:`}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("mod","Python")}</code></td><td>remainder</td>`})]}),Object(s.a)("p",{content:`(e.g. <code>${Object(l.highlight)("14 mod 3 == 2","Python")}</code>; <code>${Object(l.highlight)("67 mod 10 == 7","Python")}</code>).`}),Object(s.a)("h3",{content:"Doing Fractional (e.g. Decimal) Arithmetic"}),Object(s.a)("p",{content:`The Turtle Machine is designed to handle memory simply and transparently for the learning of computer science, and so has no special type for representing fractional numbers; which is why <code>${Object(l.highlight)("//","Python")}</code> is integer division. But the Turtle System can handle fractional numbers by treating them explicitly as fractions, with both a numerator (above the line) and a denominator (below the line). A denominator of 1000000, for instance, allows decimal arithmetic to 6 decimal places.`}),Object(s.a)("p",{content:`Thus to get the sine of 34.56 degrees to six decimal places, you could use <code>${Object(l.highlight)("n = sin(3456, 100, 1000000)","Python")}</code> – this makes <code>${Object(l.highlight)("n","Python")}</code> equal to the sine of the angle 3456/100, multiplied by 1000000 (and rounded). <code>${Object(l.highlight)("writeln(qstr(n, 1000000, 6))","Python")}</code> will then print n/1000000 to six decimal places, i.e. <code>${Object(l.highlight)("'0.567269'","Python")}</code>. For more illustrations of this sort of decimal arithmetic, see the example program &lsquo;Mathematical functions&rsquo;.`}),Object(s.a)("h3",{content:"Boolean Operators"}),Object(s.a)("p",{content:"The four main boolean operators are represented in the standard way:"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("not","Python")}</code></td><td>negation</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("and","Python")}</code></td><td>conjunction</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("or","Python")}</code></td><td>disjunction (inclusive)</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("xor","Python")}</code></td><td>exclusive disjunction</td>`})]}),Object(s.a)("p",{content:`These can also be used between integers, in a <em>bitwise</em> fashion (i.e. each binary bit in the result is calculated as the result of the relevant boolean operation on the corresponding bits of the inputs), e.g. <code>${Object(l.highlight)("21 and 6 = 4","Python")}</code> (binary <code>${Object(l.highlight)("10101 and 00110 = 100","Python")}</code>); <code>${Object(l.highlight)("21 or 6 = 23","Python")}</code> (<code>${Object(l.highlight)("10111","Python")}</code>); <code>${Object(l.highlight)("21 xor 6 = 19","Python")}</code> (<code>${Object(l.highlight)("10011","Python")}</code>).`}),Object(s.a)("h3",{content:"Comparison Operators"}),Object(s.a)("p",{content:"The six comparison operators are applicable to all types (with strings compared alphabetically):"}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("==","Python")}</code></td><td>equality</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("!=","Python")}</code></td><td>inequality</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("<","Python")}</code></td><td>less than</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)("<=","Python")}</code></td><td>less than or equal</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)(">","Python")}</code></td><td>greater than</td>`}),Object(s.a)("tr",{content:`<td><code>${Object(l.highlight)(">=","Python")}</code></td><td>greater than or equal</td>`})]}),Object(s.a)("h3",{content:"Bracketing"}),Object(s.a)("p",{content:"Complex expressions require brackets, e.g."}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("if (n < 0) or (n > 9):\n  n = ((a + 1) * (b + 3) + c) mod 10","Python")}</code>`})],j=[Object(s.a)("h3",{content:"User Input"}),Object(s.a)("p",{content:"The facilities for user input – via keyboard or mouse – are designed to be as straightforward and comprehensible as possible, while operating strictly through simple processes that are consistent with the workings of the <em>Turtle Machine</em>."}),Object(s.a)("h4",{content:"Mouse Position Detection"}),Object(s.a)("p",{content:`The x- and y-coordinates of the mouse&rsquo;s current position can be found at any time by using the special global variables <code>${Object(l.highlight)("?MOUSEX","BASIC")}</code> and <code>${Object(l.highlight)("?MOUSEY","BASIC")}</code> – these do not require the mouse to be clicked.`}),Object(s.a)("h4",{content:"Mouse Click Detection"}),Object(s.a)("p",{content:`When a mouse click is performed, the x- and y-coordinates of the click position are remembered by the variables <code>${Object(l.highlight)("?CLICKX","BASIC")}</code> and <code>${Object(l.highlight)("?CLICKY","BASIC")}</code>. However to identify the type of click, use the variable <code>${Object(l.highlight)("?CLICK","BASIC")}</code>, which is initially set to a value of -1, but after any click has taken place is set to a numerical value of 128 plus additions as follows:`}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:"<td>1</td><td>if the click was with the left mouse button</td>"}),Object(s.a)("tr",{content:"<td>2</td><td>if the click was with the right mouse button</td>"}),Object(s.a)("tr",{content:"<td>4</td><td>if the click was with the middle mouse button</td>"}),Object(s.a)("tr",{content:"<td>8</td><td>if the <kbd>shift</kbd> key was held down while clicking</td>"}),Object(s.a)("tr",{content:"<td>16</td><td>if the <kbd>alt</kbd> key was held down while clicking</td>"}),Object(s.a)("tr",{content:"<td>32</td><td>if the <kbd>ctrl</kbd> key was held down while clicking</td>"}),Object(s.a)("tr",{content:"<td>64</td><td>if it was a double-click</td>"})]}),Object(s.a)("p",{content:`So if <code>${Object(l.highlight)("n% = ?CLICK","BASIC")}</code> makes <code>${Object(l.highlight)("n%","BASIC")}</code> equal to 137 (128+8+1), this indicates that a left-click is currently under way, with the <kbd>shift</kbd> key held down. When the click event is finished, the <code>${Object(l.highlight)("?CLICK","BASIC")}</code> value will become negative. Thus if <code>${Object(l.highlight)("?CLICK","BASIC")}</code> returns a value of -137, this indicates that the last click event – now finished – was <kbd>shift</kbd>+left; the coordinate position of that click can still be identified – until the next click takes place – as (<code>${Object(l.highlight)("?CLICKX","BASIC")}</code>, <code>${Object(l.highlight)("?CLICKY","BASIC")}</code>). On a left-click, the variable <code>${Object(l.highlight)("?LMOUSE","BASIC")}</code> records the relevant value (as calculated above); likewise <code>${Object(l.highlight)("?RMOUSE","BASIC")}</code> and <code>${Object(l.highlight)("?MMOUSE","BASIC")}</code> record any right-click or middle-click. Again, these are all made negative when the click is released, so an empty loop like:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("REPEAT\nUNTIL ?LMOUSE > 0","BASIC")}</code>`}),Object(s.a)("p",{content:`waits for a left-click with the mouse. Afterwards, <code>${Object(l.highlight)("?CLICKX","BASIC")}</code> and <code>${Object(l.highlight)("?CLICKY","BASIC")}</code> indicate where that click event occurred, and <code>${Object(l.highlight)("?CLICK","BASIC")}</code> can be queried using the bitwise <code>${Object(l.highlight)("AND","BASIC")}</code> operator to discover which special keys were pressed (e.g. <code>${Object(l.highlight)("IF (ABS(?CLICK) AND 8) > 0","BASIC")}</code> will test whether <kbd>shift</kbd> was being held down).`}),Object(s.a)("h4",{content:"Key Press Detection"}),Object(s.a)("p",{content:`Detecting key presses (rather than typing in of characters) uses the variables <code>${Object(l.highlight)("?KEY","BASIC")}</code> and <code>${Object(l.highlight)("?KSHIFT","BASIC")}</code>, and the function <code>${Object(l.highlight)("KEYSTATUS","BASIC")}</code>. <code>${Object(l.highlight)("?KEY","BASIC")}</code> gives the code of the last key to be pressed – these codes can be tested using the special keycode constants <code>${Object(l.highlight)("\\ALT","BASIC")}</code>, <code>${Object(l.highlight)("\\BACKSPACE","BASIC")}</code>, <code>${Object(l.highlight)("\\CAPSLOCK","BASIC")}</code>, <code>${Object(l.highlight)("\\CTRL","BASIC")}</code>, <code>${Object(l.highlight)("\\DELETE","BASIC")}</code>, <code>${Object(l.highlight)("\\DOWN","BASIC")}</code>, <code>${Object(l.highlight)("\\END","BASIC")}</code>, <code>${Object(l.highlight)("\\ESCAPE","BASIC")}</code>, <code>${Object(l.highlight)("\\HOME","BASIC")}</code>, <code>${Object(l.highlight)("\\INSERT","BASIC")}</code>, <code>${Object(l.highlight)("\\LEFT","BASIC")}</code>, <code>${Object(l.highlight)("\\LWIN","BASIC")}</code>, <code>${Object(l.highlight)("\\PGDN","BASIC")}</code>, <code>${Object(l.highlight)("\\PGUP","BASIC")}</code>, <code>${Object(l.highlight)("\\RETURN","BASIC")}</code>, <code>${Object(l.highlight)("\\RIGHT","BASIC")}</code>, <code>${Object(l.highlight)("\\RWIN","BASIC")}</code>, <code>${Object(l.highlight)("\\SHIFT","BASIC")}</code>, <code>${Object(l.highlight)("\\SPACE","BASIC")}</code>, <code>${Object(l.highlight)("\\TAB","BASIC")}</code>, and <code>${Object(l.highlight)("\\UP","BASIC")}</code>, as well as <code>${Object(l.highlight)("\\A","BASIC")}</code> to <code>${Object(l.highlight)("\\Z","BASIC")}</code>, <code>${Object(l.highlight)("\\0","BASIC")}</code> to <code>${Object(l.highlight)("\\9","BASIC")}</code>, <code>${Object(l.highlight)("\\HASH","BASIC")}</code>, <code>${Object(l.highlight)("\\EQUALS","BASIC")}</code> etc. Keys on the numeric keypad have codes <code>${Object(l.highlight)("\\#0","BASIC")}</code>, <code>${Object(l.highlight)("\\#1","BASIC")}</code> etc., and function keys <code>${Object(l.highlight)("\\F1","BASIC")}</code>, <code>${Object(l.highlight)("\\F2","BASIC")}</code> etc. All these stand for numeric values (e.g. <code>${Object(l.highlight)("\\RETURN","BASIC")}</code> is 13, <code>${Object(l.highlight)("\\ESCAPE","BASIC")}</code> is 27), but <code>${Object(l.highlight)("IF ?KEY = \\RETURN","BASIC")}</code> is easier to understand than <code>${Object(l.highlight)("IF ?KEY = 13","BASIC")}</code>.`}),Object(s.a)("p",{content:`Like the mouse-click variables, <code>${Object(l.highlight)("?KEY","BASIC")}</code> becomes negative after the key is released, so <code>${Object(l.highlight)("REPEAT : UNTIL ?KEY = -\\A","BASIC")}</code> will wait until the &lsquo;A&rsquo; key has been released. If you want to identify the last key whether it is still pressed or not, use <code>${Object(l.highlight)("ABS","BASIC")}</code> (e.g. <code>${Object(l.highlight)("IF ABS(?KEY) = \\A THEN","BASIC")}</code>).`}),Object(s.a)("p",{content:`Whenever a key is pressed, the variable <code>${Object(l.highlight)("?KSHIFT","BASIC")}</code> gives its &lsquo;shift-status&rsquo;, calculated in the same way as <code>${Object(l.highlight)("?CLICK","BASIC")}</code> (i.e. 128 plus 8 if <kbd>shift</kbd> was down, 16 for <kbd>alt</kbd>, 32 for <kbd>ctrl</kbd>, and turning negative after the key is released). So to test if <kbd>ctrl</kbd> was down on the last keypress, use <code>${Object(l.highlight)("IF (ABS(?KSHIFT) AND 32) > 0","BASIC")}</code>, with <code>${Object(l.highlight)("AND","BASIC")}</code> here acting as a bitwise boolean operator.`}),Object(s.a)("p",{content:`To recover the shift-status for the last press of the <kbd>X</kbd> key (say), use <code>${Object(l.highlight)("KEYSTATUS(\\X)","BASIC")}</code>, which can tell you (a) whether <kbd>shift</kbd> / <kbd>alt</kbd> / <kbd>ctrl</kbd> were down; (b) whether the <kbd>X</kbd> is still pressed (since <code>${Object(l.highlight)("KEYSTATUS","BASIC")}</code> goes negative on release); (c) whether <kbd>X</kbd> has been pressed at all (since all of these input codes are set to -1 initially, and can be reset to -1 using <code>${Object(l.highlight)("RESET(\\X)","BASIC")}</code> etc.).`}),Object(s.a)("h4",{content:"Keyboard Input"}),Object(s.a)("p",{content:`The system provides a <em>keyboard buffer</em> to store typed characters. Initially this is set to store up to 32 characters, but can be extended using e.g. <code>${Object(l.highlight)("KEYBUFFER(50)","BASIC")}</code>. To read from the buffer into a string, use e.g. <code>${Object(l.highlight)("s$ = GET$(10)","BASIC")}</code>, which reads up to 10 characters (depending on how many are in the buffer). <code>${Object(l.highlight)("KEYSTATUS(\\KEYBUFFER)","BASIC")}</code> returns the number of characters it contains, and <code>${Object(l.highlight)("RESET(\\KEYBUFFER)","BASIC")}</code> flushes it.`}),Object(s.a)("p",{content:`<code>${Object(l.highlight)("s$ = GETLINE$","BASIC")}</code> reads a line of text, waiting until the <kbd>return</kbd> key is pressed and then making <code>${Object(l.highlight)("s$","BASIC")}</code> equal to what has been typed into the buffer (discarding the <kbd>return</kbd> character).`}),Object(s.a)("p",{content:`The function <code>${Object(l.highlight)("DETECT","BASIC")}</code> waits a given time for some input to be received (e.g. a specific key pressed), and returns <code>${Object(l.highlight)("TRUE","BASIC")}</code> when that input is received, or <code>${Object(l.highlight)("FALSE","BASIC")}</code> if it is not received in time. Thus <code>${Object(l.highlight)("IF DETECT(\\ESCAPE, 5000) THEN - ELSE -","BASIC")}</code> gives 5 seconds to press the <kbd>escape</kbd> key (meanwhile continuing to collect any typed characters in the keyboard buffer). By default, text that goes into the keyboard buffer is also &lsquo;echoed&rsquo; to the console (below the Canvas), along with text that is output (using <code>${Object(l.highlight)("WRITE","BASIC")}</code> or <code>${Object(l.highlight)("WRITELN","BASIC")}</code>). This behaviour can be turned on and off with <code>${Object(l.highlight)("KEYECHO(TRUE)","BASIC")}</code> and <code>${Object(l.highlight)("KEYECHO(FALSE)","BASIC")}</code>.`})],y=[Object(s.a)("h3",{content:"User Input"}),Object(s.a)("p",{content:"The facilities for user input – via keyboard or mouse – are designed to be as straightforward and comprehensible as possible, while operating strictly through simple processes that are consistent with the workings of the <em>Turtle Machine</em>."}),Object(s.a)("h4",{content:"Mouse Position Detection"}),Object(s.a)("p",{content:`The x- and y-coordinates of the mouse&rsquo;s current position can be found at any time by using the special global variables <code>${Object(l.highlight)("?mousex","Pascal")}</code> and <code>${Object(l.highlight)("?mousey","Pascal")}</code> – these do not require the mouse to be clicked.`}),Object(s.a)("h4",{content:"Mouse Click Detection"}),Object(s.a)("p",{content:`When a mouse click is performed, the x- and y-coordinates of the click position are remembered by the variables <code>${Object(l.highlight)("?clickx","Pascal")}</code> and <code>${Object(l.highlight)("?clicky","Pascal")}</code>. However to identify the type of click, use the variable <code>${Object(l.highlight)("?click","Pascal")}</code>, which is initially set to a value of -1, but after any click has taken place is set to a numerical value of 128 plus additions as follows:`}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:"<td>1</td><td>if the click was with the left mouse button</td>"}),Object(s.a)("tr",{content:"<td>2</td><td>if the click was with the right mouse button</td>"}),Object(s.a)("tr",{content:"<td>4</td><td>if the click was with the middle mouse button</td>"}),Object(s.a)("tr",{content:"<td>8</td><td>if the shift key was held down while clicking</td>"}),Object(s.a)("tr",{content:"<td>16</td><td>if the alt key was held down while clicking</td>"}),Object(s.a)("tr",{content:"<td>32</td><td>if the ctrl key was held down while clicking</td>"}),Object(s.a)("tr",{content:"<td>64</td><td>if it was a double-click</td>"})]}),Object(s.a)("p",{content:`So if <code>${Object(l.highlight)("n := ?click","Pascal")}</code> makes <code>${Object(l.highlight)("n","Pascal")}</code> equal to 137 (128 + 8 + 1), this indicates that a left-click is currently under way, with the <kbd>shift</kbd> key held down. When the click event is finished, the <code>${Object(l.highlight)("?click","Pascal")}</code> value will become negative. Thus if <code>${Object(l.highlight)("?click","Pascal")}</code> returns a value of -137, this indicates that the last click event – now finished – was shift+left; the coordinate position of that click can still be identified – until the next click takes place – as (<code>${Object(l.highlight)("?clickx","Pascal")}</code>, <code>${Object(l.highlight)("?clicky","Pascal")}</code>). On a left-click, the variable <code>${Object(l.highlight)("?lmouse","Pascal")}</code> records the relevant value (as calculated above); likewise <code>${Object(l.highlight)("?rmouse","Pascal")}</code> and <code>${Object(l.highlight)("?mmouse","Pascal")}</code> record any right-click or middle-click. Again, these are all made negative when the click is released, so an empty loop like:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("repeat\nuntil ?lmouse > 0;","Pascal")}</code>`}),Object(s.a)("p",{content:`waits for a left-click with the mouse. Afterwards, <code>${Object(l.highlight)("?clickx","Pascal")}</code> and <code>${Object(l.highlight)("?clicky","Pascal")}</code> indicate where that click event occurred, and <code>${Object(l.highlight)("?click","Pascal")}</code> can be queried using the bitwise <code>${Object(l.highlight)("and","Pascal")}</code> operator to discover which special keys were pressed (e.g. <code>${Object(l.highlight)("if (abs(?click) and 8) > 0","Pascal")}</code> will test whether <kbd>shift</kbd> was being held down).`}),Object(s.a)("h4",{content:"Key Press Detection"}),Object(s.a)("p",{content:`Detecting key presses (rather than typing in of characters) uses the variables <code>${Object(l.highlight)("?key","Pascal")}</code> and <code>${Object(l.highlight)("?kshift","Pascal")}</code>, and the function <code>${Object(l.highlight)("keystatus","Pascal")}</code>. <code>${Object(l.highlight)("?key","Pascal")}</code> gives the code of the last key to be pressed – these codes can be tested using the special keycode constants <code>${Object(l.highlight)("\\alt","Pascal")}</code>, <code>${Object(l.highlight)("\\backspace","Pascal")}</code>, <code>${Object(l.highlight)("\\capslock","Pascal")}</code>, <code>${Object(l.highlight)("\\ctrl","Pascal")}</code>, <code>${Object(l.highlight)("\\delete","Pascal")}</code>, <code>${Object(l.highlight)("\\down","Pascal")}</code>, <code>${Object(l.highlight)("\\end","Pascal")}</code>, <code>${Object(l.highlight)("\\escape","Pascal")}</code>, <code>${Object(l.highlight)("\\home","Pascal")}</code>, <code>${Object(l.highlight)("\\insert","Pascal")}</code>, <code>${Object(l.highlight)("\\left","Pascal")}</code>, <code>${Object(l.highlight)("\\lwin","Pascal")}</code>, <code>${Object(l.highlight)("\\pgdn","Pascal")}</code>, <code>${Object(l.highlight)("\\pgup","Pascal")}</code>, <code>${Object(l.highlight)("\\return","Pascal")}</code>, <code>${Object(l.highlight)("\\right","Pascal")}</code>, <code>${Object(l.highlight)("\\rwin","Pascal")}</code>, <code>${Object(l.highlight)("\\shift","Pascal")}</code>, <code>${Object(l.highlight)("\\space","Pascal")}</code>, <code>${Object(l.highlight)("\\tab","Pascal")}</code>, and <code>${Object(l.highlight)("\\up","Pascal")}</code>, as well as <code>${Object(l.highlight)("\\a","Pascal")}</code> to <code>${Object(l.highlight)("\\z","Pascal")}</code>, <code>${Object(l.highlight)("\\0","Pascal")}</code> to <code>${Object(l.highlight)("\\9","Pascal")}</code>, <code>${Object(l.highlight)("\\hash","Pascal")}</code>, <code>${Object(l.highlight)("\\equals","Pascal")}</code> etc. Keys on the numeric keypad have codes <code>${Object(l.highlight)("\\#0","Pascal")}</code>, <code>${Object(l.highlight)("\\#1","Pascal")}</code> etc., and function keys <code>${Object(l.highlight)("\\f1","Pascal")}</code>, <code>${Object(l.highlight)("\\f2","Pascal")}</code> etc. All these stand for numeric values (e.g. <code>${Object(l.highlight)("\\return","Pascal")}</code> is 13, <code>${Object(l.highlight)("\\escape","Pascal")}</code> is 27), but <code>${Object(l.highlight)("if ?key = \return","Pascal")}</code> is easier to understand than <code>${Object(l.highlight)("if ?key = 13","Pascal")}</code>.`}),Object(s.a)("p",{content:`Like the mouse-click functions, <code>${Object(l.highlight)("?key","Pascal")}</code> becomes negative after the key is released, so <code>${Object(l.highlight)("repeat until ?key = -\\a","Pascal")}</code> will wait until the <kbd>A</kbd> key has been released. If you want to identify the last key whether it is still pressed or not, use <code>${Object(l.highlight)("abs","Pascal")}</code> (e.g. <code>${Object(l.highlight)("if abs(?key) = \\a then {commands}","Pascal")}</code>).`}),Object(s.a)("p",{content:`Whenever a key is pressed, the variable <code>${Object(l.highlight)("?kshift","Pascal")}</code> gives its &lsquo;shift-status&rsquo;, calculated in the same way as <code>${Object(l.highlight)("?click","Pascal")}</code> (i.e. 128 plus 8 if <kbd>shift</kbd> was down, 16 for <kbd>alt</kbd>, 32 for <kbd>ctrl</kbd>, and turning negative after the key is released). So to test if <kbd>ctrl</kbd> was down on the last keypress, use <code>${Object(l.highlight)("if (abs(?kshift) and 32) > 0","Pascal")}</code>, with <code>${Object(l.highlight)("and","Pascal")}</code> here acting as a bitwise boolean operator.`}),Object(s.a)("p",{content:`To recover the shift-status for the last press of the <kbd>X</kbd> key (say), use <code>${Object(l.highlight)("keystatus(\\x)","Pascal")}</code>, which can tell you (a) whether <kbd>shift</kbd> / <kbd>alt</kbd> / <kbd>ctrl</kbd> were down; (b) whether the <kbd>X</kbd> is still pressed (since <code>${Object(l.highlight)("keystatus","Pascal")}</code> goes negative on release); (c) whether <kbd>X</kbd> has been pressed at all (since all of these input codes are set to -1 initially, and can be reset to -1 using <code>${Object(l.highlight)("reset(\\x)","Pascal")}</code> etc.).`}),Object(s.a)("h4",{content:"Keyboard Input"}),Object(s.a)("p",{content:`The system provides a <em>keyboard buffer</em> to store typed characters. Initially this is set to store up to 32 characters, but can be extended using e.g. <code>${Object(l.highlight)("keybuffer(50)","Pascal")}</code>. To read from the buffer into a string, use e.g. <code>${Object(l.highlight)("s := read(10)","Pascal")}</code>, which reads up to 10 characters (depending on how many are in the buffer). <code>${Object(l.highlight)("keystatus(\\keybuffer)","Pascal")}</code> returns the number of characters it contains, and <code>${Object(l.highlight)("reset(\\keybuffer)","Pascal")}</code> flushes it.`}),Object(s.a)("p",{content:`<code>${Object(l.highlight)("s := readln","Pascal")}</code> reads a line of text, waiting until the <kbd>return</kbd> key is pressed and then making <code>${Object(l.highlight)("s","Pascal")}</code> equal to what has been typed into the buffer (discarding the <kbd>return</kbd> character).`}),Object(s.a)("p",{content:`The function <code>${Object(l.highlight)("detect","Pascal")}</code> waits a given time for some input to be received (e.g. a specific key pressed), and returns <code>${Object(l.highlight)("true","Pascal")}</code> when that input is received, or <code>${Object(l.highlight)("false","Pascal")}</code> if it is not received in time. Thus <code>${Object(l.highlight)("if detect(\\escape, 5000) then {command1} else {command2}","Pascal")}</code> gives 5 seconds to press the <kbd>escape</kbd> key (meanwhile continuing to collect any typed characters in the keyboard buffer). By default, text that goes into the keyboard buffer is also &lsquo;echoed&rsquo; to the console (below the Canvas), along with text that is output (using <code>${Object(l.highlight)("write","Pascal")}</code> or <code>${Object(l.highlight)("writeln","Pascal")}</code>). This behaviour can be turned on and off with <code>${Object(l.highlight)("keyecho(true)","Pascal")}</code> and <code>${Object(l.highlight)("keyecho(false)","Pascal")}</code>.`})],w=[Object(s.a)("h3",{content:"User Input"}),Object(s.a)("p",{content:"The facilities for user input – via keyboard or mouse – are designed to be as straightforward and comprehensible as possible, while operating strictly through simple processes that are consistent with the workings of the <em>Turtle Machine</em>."}),Object(s.a)("h4",{content:"Mouse Position Detection"}),Object(s.a)("p",{content:`The x- and y-coordinates of the mouse&rsquo;s current position can be found at any time by using the special global variables <code>${Object(l.highlight)("?mousex","Python")}</code> and <code>${Object(l.highlight)("?mousey","Python")}</code> – these do not require the mouse to be clicked.`}),Object(s.a)("h4",{content:"Mouse Click Detection"}),Object(s.a)("p",{content:`When a mouse click is performed, the x- and y-coordinates of the click position are remembered by the variables <code>${Object(l.highlight)("?clickx","Python")}</code> and <code>${Object(l.highlight)("?clicky","Python")}</code>. However to identify the type of click, use the variable <code>${Object(l.highlight)("?click","Python")}</code>, which is initially set to a value of -1, but after any click has taken place is set to a numerical value of 128 plus additions as follows:`}),Object(s.a)("table",{classes:["tsx-help-table"],content:[Object(s.a)("tr",{content:"<td>1</td><td>if the click was with the left mouse button</td>"}),Object(s.a)("tr",{content:"<td>2</td><td>if the click was with the right mouse button</td>"}),Object(s.a)("tr",{content:"<td>4</td><td>if the click was with the middle mouse button</td>"}),Object(s.a)("tr",{content:"<td>8</td><td>if the shift key was held down while clicking</td>"}),Object(s.a)("tr",{content:"<td>16</td><td>if the alt key was held down while clicking</td>"}),Object(s.a)("tr",{content:"<td>32</td><td>if the ctrl key was held down while clicking</td>"}),Object(s.a)("tr",{content:"<td>64</td><td>if it was a double-click</td>"})]}),Object(s.a)("p",{content:`So if <code>${Object(l.highlight)("n = ?click","Python")}</code> makes <code>${Object(l.highlight)("n","Python")}</code> equal to 137 (128 + 8 + 1), this indicates that a left-click is currently under way, with the <kbd>shift</kbd> key held down. When the click event is finished, the <code>${Object(l.highlight)("?click","Python")}</code> variable will become negative. Thus if <code>${Object(l.highlight)("?click","Python")}</code> returns a value of -137, this indicates that the last click event – now finished – was shift+left; the coordinate position of that click can still be identified – until the next click takes place – as (<code>${Object(l.highlight)("?clickx","Python")}</code>, <code>${Object(l.highlight)("?clicky","Python")}</code>). On a left-click, the variable <code>${Object(l.highlight)("?lmouse","Python")}</code> records the relevant value (as calculated above); likewise <code>${Object(l.highlight)("?rmouse","Python")}</code> and <code>${Object(l.highlight)("?mmouse","Python")}</code> record any right-click or middle-click. Again, these are all made negative when the click is released, so an empty loop like:`}),Object(s.a)("pre",{content:`<code>${Object(l.highlight)("while not(?lmouse > 0):\n  pass  # this statement does nothing!","Python")}</code>`}),Object(s.a)("p",{content:`waits for a left-click with the mouse. Afterwards, <code>${Object(l.highlight)("?clickx","Python")}</code> and <code>${Object(l.highlight)("?clicky","Python")}</code> indicate where that click event occurred, and <code>${Object(l.highlight)("?click","Python")}</code> can be queried using the bitwise <code>${Object(l.highlight)("and","Python")}</code> operator to discover which special keys were pressed (e.g. <code>${Object(l.highlight)("if (abs(?click) and 8) > 0","Python")}</code> will test whether <kbd>shift</kbd> was being held down).`}),Object(s.a)("h4",{content:"Key Press Detection"}),Object(s.a)("p",{content:`Detecting key presses (rather than typing in of characters) uses the variables <code>${Object(l.highlight)("?key","Python")}</code> and <code>${Object(l.highlight)("?kshift","Python")}</code>, and the function <code>${Object(l.highlight)("keystatus","Python")}</code>. <code>${Object(l.highlight)("?key","Python")}</code> gives the code of the last key to be pressed – these codes can be tested using the special keycode constants <code>${Object(l.highlight)("\\alt","Python")}</code>, <code>${Object(l.highlight)("\\backspace","Python")}</code>, <code>${Object(l.highlight)("\\capslock","Python")}</code>, <code>${Object(l.highlight)("\\ctrl","Python")}</code>, <code>${Object(l.highlight)("\\delete","Python")}</code>, <code>${Object(l.highlight)("\\down","Python")}</code>, <code>${Object(l.highlight)("\\end","Python")}</code>, <code>${Object(l.highlight)("\\escape","Python")}</code>, <code>${Object(l.highlight)("\\home","Python")}</code>, <code>${Object(l.highlight)("\\insert","Python")}</code>, <code>${Object(l.highlight)("\\left","Python")}</code>, <code>${Object(l.highlight)("\\lwin","Python")}</code>, <code>${Object(l.highlight)("\\pgdn","Python")}</code>, <code>${Object(l.highlight)("\\pgup","Python")}</code>, <code>${Object(l.highlight)("\return","Python")}</code>, <code>${Object(l.highlight)("\right","Python")}</code>, <code>${Object(l.highlight)("\\rwin","Python")}</code>, <code>${Object(l.highlight)("\\shift","Python")}</code>, <code>${Object(l.highlight)("\\space","Python")}</code>, <code>${Object(l.highlight)("\\tab","Python")}</code>, and <code>${Object(l.highlight)("\\up","Python")}</code>, as well as <code>${Object(l.highlight)("\\a","Python")}</code> to <code>${Object(l.highlight)("\\z","Python")}</code>, <code>${Object(l.highlight)("\\0","Python")}</code> to <code>${Object(l.highlight)("\\9","Python")}</code>, <code>${Object(l.highlight)("\\hash","Python")}</code>, <code>${Object(l.highlight)("\\equals","Python")}</code> etc. Keys on the numeric keypad have codes <code>${Object(l.highlight)("\\#0","Python")}</code>, <code>${Object(l.highlight)("\\#1","Python")}</code> etc., and function keys <code>${Object(l.highlight)("\\f1","Python")}</code>, <code>${Object(l.highlight)("\\f2","Python")}</code> etc. All these stand for numeric values (e.g. <code>${Object(l.highlight)("\\return","Python")}</code> is 13, <code>${Object(l.highlight)("\\escape","Python")}</code> is 27), but <code>${Object(l.highlight)("if ?key = \return","Python")}</code> is easier to understand than <code>${Object(l.highlight)("if ?key = 13","Python")}</code>.`}),Object(s.a)("p",{content:`Like the mouse-click variables, <code>${Object(l.highlight)("?key","Python")}</code> becomes negative after the key is released, so <code>${Object(l.highlight)("while not(?key = -\\a): pass","Python")}</code> will wait until the <kbd>A</kbd> key has been released. If you want to identify the last key, whether it is still pressed or not, use <code>${Object(l.highlight)("abs","Python")}</code> (e.g. <code>${Object(l.highlight)("if abs(?key) = \\a: # command","Python")}</code>).`}),Object(s.a)("p",{content:`Whenever a key is pressed, the variable <code>${Object(l.highlight)("?kshift","Python")}</code> gives its &lsquo;shift-status&rsquo;, calculated in the same way as <code>${Object(l.highlight)("?click","Python")}</code> (i.e. 128 plus 8 if <kbd>shift</kbd> was down, 16 for <kbd>alt</kbd>, 32 for <kbd>ctrl</kbd>, and turning negative after the key is released). So to test if <kbd>ctrl</kbd> was down on the last keypress, use <code>${Object(l.highlight)("if (abs(?kshift) and 32) > 0","Python")}</code>, with <code>${Object(l.highlight)("and","Python")}</code> here acting as a bitwise boolean operator.`}),Object(s.a)("p",{content:`To recover the shift-status for the last press of the <kbd>X</kbd> key (say), use <code>${Object(l.highlight)("keystatus(\\x)","Python")}</code>, which can tell you (a) whether <kbd>shift</kbd> / <kbd>alt</kbd> / <kbd>ctrl</kbd> were down; (b) whether the <kbd>X</kbd> is still pressed (since <code>${Object(l.highlight)("keystatus","Python")}</code> goes negative on release); (c) whether <kbd>X</kbd> has been pressed at all (since all of these input codes are set to -1 initially, and can be reset to -1 using <code>${Object(l.highlight)("reset(\\x)","Python")}</code> etc.).`}),Object(s.a)("h4",{content:"Keyboard Input"}),Object(s.a)("p",{content:`The system provides a <em>keyboard buffer</em> to store typed characters. Initially this is set to store up to 32 characters, but can be extended using e.g. <code>${Object(l.highlight)("keybuffer(50)","Python")}</code>. To read from the buffer into a string, use e.g. <code>${Object(l.highlight)("s = read(10)","Python")}</code>, which reads up to 10 characters (depending on how many are in the buffer). <code>${Object(l.highlight)("keystatus(\\keybuffer)","Python")}</code> returns the number of characters it contains, and <code>${Object(l.highlight)("reset(\\keybuffer)","Python")}</code> flushes it.`}),Object(s.a)("p",{content:`<code>${Object(l.highlight)("s = readln","Python")}</code> reads a line of text, waiting until the <kbd>return</kbd> key is pressed and then making <code>${Object(l.highlight)("s","Python")}</code> equal to what has been typed into the buffer (discarding the <kbd>return</kbd> character).`}),Object(s.a)("p",{content:`The function <code>${Object(l.highlight)("detect","Python")}</code> waits a given time for some input to be received (e.g. a specific key pressed), and returns <code>${Object(l.highlight)("True","Python")}</code> when that input is received, or <code>${Object(l.highlight)("False","Python")}</code> if it is not received in time. Thus <code>${Object(l.highlight)("if detect(\\escape, 5000): #command1","Python")}</code> <code>${Object(l.highlight)("else: #command2","Python")}</code> gives 5 seconds to press the <kbd>escape</kbd> key (meanwhile continuing to collect any typed characters in the keyboard buffer). By default, text that goes into the keyboard buffer is also &lsquo;echoed&rsquo; to the console (below the Canvas), along with text that is output (using <code>${Object(l.highlight)("write","Python")}</code> or <code>${Object(l.highlight)("writeln","Python")}</code>). This behaviour can be turned on and off with <code>${Object(l.highlight)("keyecho(True)","Python")}</code> and <code>${Object(l.highlight)("keyecho(False)","Python")}</code>.`})];var v=o(4);const x=Object(s.a)("div"),k=Object(s.a)("div"),P=Object(s.a)("div"),S=Object(s.a)("div"),T=Object(s.a)("div"),$=Object(s.a)("div");var C=Object(s.f)("tsx-help-tabs",[{label:"Commands",active:!0,content:[x]},{label:"Basics",active:!1,content:[k]},{label:"Structures",active:!1,content:[P]},{label:"Operators",active:!1,content:[S]},{label:"User Input",active:!1,content:[T]},{label:"Constants",active:!1,content:[$]}]);Object(v.a)("language-changed",e=>{k.innerHTML="",P.innerHTML="",S.innerHTML="",T.innerHTML="",n[e].forEach(e=>k.appendChild(e)),c[e].forEach(e=>P.appendChild(e)),a[e].forEach(e=>S.appendChild(e)),r[e].forEach(e=>T.appendChild(e))});const A=document.getElementById("tsx");A.classList.add("tsx"),A.classList.add("tsx-system"),document.body.parentElement.classList.add("tsx-browser"),A.classList.add("tsx-help"),A.appendChild(i.b),A.appendChild(C),Object(v.b)("ready")}]);