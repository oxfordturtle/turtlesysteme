!function(e){var n={};function t(a){if(n[a])return n[a].exports;var o=n[a]={i:a,l:!1,exports:{}};return e[a].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=e,t.c=n,t.d=function(e,n,a){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:a})},t.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=224)}([function(e,n,t){var a,o,s={},l=(a=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=a.apply(this,arguments)),o}),r=function(e){var n={};return function(e){if("function"==typeof e)return e();if(void 0===n[e]){var t=function(e){return document.querySelector(e)}.call(this,e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}}(),i=null,c=0,u=[],d=t(239);function p(e,n){for(var t=0;t<e.length;t++){var a=e[t],o=s[a.id];if(o){o.refs++;for(var l=0;l<o.parts.length;l++)o.parts[l](a.parts[l]);for(;l<a.parts.length;l++)o.parts.push(x(a.parts[l],n))}else{var r=[];for(l=0;l<a.parts.length;l++)r.push(x(a.parts[l],n));s[a.id]={id:a.id,refs:1,parts:r}}}}function m(e,n){for(var t=[],a={},o=0;o<e.length;o++){var s=e[o],l=n.base?s[0]+n.base:s[0],r={css:s[1],media:s[2],sourceMap:s[3]};a[l]?a[l].parts.push(r):t.push(a[l]={id:l,parts:[r]})}return t}function g(e,n){var t=r(e.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var a=u[u.length-1];if("top"===e.insertAt)a?a.nextSibling?t.insertBefore(n,a.nextSibling):t.appendChild(n):t.insertBefore(n,t.firstChild),u.push(n);else if("bottom"===e.insertAt)t.appendChild(n);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=r(e.insertInto+" "+e.insertAt.before);t.insertBefore(n,o)}}function h(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var n=u.indexOf(e);n>=0&&u.splice(n,1)}function y(e){var n=document.createElement("style");return e.attrs.type="text/css",v(n,e.attrs),g(e,n),n}function v(e,n){Object.keys(n).forEach(function(t){e.setAttribute(t,n[t])})}function x(e,n){var t,a,o,s;if(n.transform&&e.css){if(!(s=n.transform(e.css)))return function(){};e.css=s}if(n.singleton){var l=c++;t=i||(i=y(n)),a=w.bind(null,t,l,!1),o=w.bind(null,t,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(e){var n=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",v(n,e.attrs),g(e,n),n}(n),a=function(e,n,t){var a=t.css,o=t.sourceMap,s=void 0===n.convertToAbsoluteUrls&&o;(n.convertToAbsoluteUrls||s)&&(a=d(a));o&&(a+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var l=new Blob([a],{type:"text/css"}),r=e.href;e.href=URL.createObjectURL(l),r&&URL.revokeObjectURL(r)}.bind(null,t,n),o=function(){h(t),t.href&&URL.revokeObjectURL(t.href)}):(t=y(n),a=function(e,n){var t=n.css,a=n.media;a&&e.setAttribute("media",a);if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){h(t)});return a(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;a(e=n)}else o()}}e.exports=function(e,n){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(n=n||{}).attrs="object"==typeof n.attrs?n.attrs:{},n.singleton||"boolean"==typeof n.singleton||(n.singleton=l()),n.insertInto||(n.insertInto="head"),n.insertAt||(n.insertAt="bottom");var t=m(e,n);return p(t,n),function(e){for(var a=[],o=0;o<t.length;o++){var l=t[o];(r=s[l.id]).refs--,a.push(r)}e&&p(m(e,n),n);for(o=0;o<a.length;o++){var r;if(0===(r=a[o]).refs){for(var i=0;i<r.parts.length;i++)r.parts[i]();delete s[r.id]}}}};var f,b=(f=[],function(e,n){return f[e]=n,f.filter(Boolean).join("\n")});function w(e,n,t,a){var o=t?"":a.css;if(e.styleSheet)e.styleSheet.cssText=b(n,o);else{var s=document.createTextNode(o),l=e.childNodes;l[n]&&e.removeChild(l[n]),l.length?e.insertBefore(s,l[n]):e.appendChild(s)}}},function(e,n){e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t=function(e,n){var t=e[1]||"",a=e[3];if(!a)return t;if(n&&"function"==typeof btoa){var o=(l=a,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(l))))+" */"),s=a.sources.map(function(e){return"/*# sourceURL="+a.sourceRoot+e+" */"});return[t].concat(s).concat([o]).join("\n")}var l;return[t].join("\n")}(n,e);return n[2]?"@media "+n[2]+"{"+t+"}":t}).join("")},n.i=function(e,t){"string"==typeof e&&(e=[[null,e,""]]);for(var a={},o=0;o<this.length;o++){var s=this[o][0];"number"==typeof s&&(a[s]=!0)}for(o=0;o<e.length;o++){var l=e[o];"number"==typeof l[0]&&a[l[0]]||(t&&!l[2]?l[2]=t:t&&(l[2]="("+l[2]+") and ("+t+")"),n.push(l))}},n}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Text and arrow (using PRINT)",author:"Oxford University",date:"19/04/2016",time:"10:19:41",code:"# YouAreHere\n\ndef main():\n  colour(red)\n  blot(20)\n  colour(violet)\n  print('You are here',4,36)\n  setxy(790,540)\n  colour(blue)\n  drawxy(40,0)\n  drawxy(28,-28)\n  drawxy(0,-40)\n  drawxy(-28,-28)\n  drawxy(-40,0)\n  setxy(500,500)\n  setxy(530,480)\n  setxy(535,505)\n  setxy(500,500)\n  polyline(5)\n  polygon(3)",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:5,lines:"10 11 12 13 14"}],total:5},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:5,lines:"8 15 16 17 18"}],total:5},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"5"},{name:"polygon",level:2,count:1,lines:"20"},{name:"polyline",level:2,count:1,lines:"19"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"4 6 9"}],total:3},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"7"}],total:1},{category:"Command structures",expressions:[{name:"def",level:2,count:1,lines:"3"}],total:1}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,24],[140,1],[144,1,1],[80,16711680,221],[80,20,243],[80,9055202,221],[87,89,111,117,32,97,114,101,32,104,101,114,101,0,80,4,80,36,61],[80,790,80,540,224],[80,255,221],[80,40,80,0,226],[80,28,80,28,16,226],[80,0,80,40,16,226],[80,28,16,80,28,16,226],[80,40,16,80,0,226],[80,500,80,500,224],[80,530,80,480,224],[80,535,80,505,224],[80,500,80,500,224],[80,5,240],[80,3,241],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Wave superposer",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Young's two-slit experiment",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Moving ball (using the Turtle)",author:"Oxford University",date:"19/04/2016",time:"10:45:32",code:"# TurtleMove\n\ndef main():\n  global turtx,turty\n  setxy(100,700)\n  for count in range(0,100,1):\n    noupdate()\n    colour(white)\n    blot(51)\n    movexy(8,-4)\n    colour(red)\n    blot(50)\n    update()\n    pause(5)",usage:[{category:"Turtle: relative movement",expressions:[{name:"movexy",level:2,count:1,lines:"10"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:1,lines:"5"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"9 12"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"8 11"}],total:2},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"7"},{name:"update",level:1,count:1,lines:"13"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"14"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"6"},{name:"def",level:2,count:1,lines:"3"}],total:2},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:1,lines:"4"}],total:1}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,20],[140,1],[144,1,2],[80,100,80,700,224],[80,0],[98,1,2,80,100],[82,1,2,67,129,19],[163],[80,16777215,221],[80,51,243],[80,8,80,4,16,225],[80,16711680,221],[80,50,243],[162],[80,5,178],[82,1,2,4,128,8],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Bouncing ball (using the Turtle)",author:"Oxford University",date:"19/04/2016",time:"13:22:59",code:"# TurtleBounce\n\ndef main():\n  global turtx,turty\n  xvelocity=3\n  yvelocity=-2\n  while (?key!=\\escape):\n    colour(white)\n    blot(51)\n    movexy(xvelocity,yvelocity)\n    colour(red)\n    blot(50)\n    update()\n    noupdate()\n    if (turtx<50) or (turtx>950):\n      xvelocity=-xvelocity\n    if (turty<50) or (turty>950):\n      yvelocity=-yvelocity",usage:[{category:"Turtle: relative movement",expressions:[{name:"movexy",level:2,count:1,lines:"10"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"9 12"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"8 11"}],total:2},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"14"},{name:"update",level:1,count:1,lines:"13"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"15 17"},{name:"while",level:2,count:1,lines:"7"},{name:"def",level:2,count:1,lines:"3"}],total:4},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:1,lines:"4"}],total:1}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,22],[140,1],[144,1,3],[80,3,98,1,2],[80,2,16,98,1,3],[80,-9,184,80,27,65,129,21],[80,16777215,221],[80,51,243],[82,1,2,82,1,3,225],[80,16711680,221],[80,50,243],[162],[163],[81,13,80,50,66,81,13,80,950,67,10,129,18],[82,1,2,16,98,1,2],[81,14,80,50,66,81,14,80,950,67,10,129,20],[82,1,3,16,98,1,3],[128,8],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Trigonometric graphs",author:"Oxford University",date:"19/04/2016",time:"13:20:38",code:"# TrigonometricGraphs\n\ndef axes():\n  global yscale,xorigin,yorigin,halfwidth\n  thickness(3)\n  setxy(xorigin-halfwidth,yorigin)\n  drawxy(halfwidth*2,0)\n  setxy(xorigin,0)\n  drawxy(0,1000)\n  setxy(xorigin,yorigin)\n  circle(15)\n  thickness(2)\n  setxy(xorigin-halfwidth,yorigin-yscale)\n  drawxy(halfwidth*2,0)\n  setxy(xorigin-halfwidth,yorigin+yscale)\n  drawxy(halfwidth*2,0)\n  setxy(xorigin+halfwidth+10,yorigin-yscale-18)\n  print('+1',0,20)\n  setxy(xorigin+halfwidth+10,yorigin+yscale-18)\n  print('-1',0,20)\n  setxy(xorigin-halfwidth-60,yorigin)\n  print('-180',0,20)\n  setxy(xorigin-halfwidth/2,yorigin)\n  print('-90',0,20)\n  setxy(xorigin+halfwidth/2-30,yorigin)\n  print('90',0,20)\n  setxy(xorigin+halfwidth,yorigin)\n  print('180',0,20)\n\ndef sinecurve():\n  global yscale,xorigin,yorigin,halfwidth\n  for degrees in range(-180,181,1):\n    x=xorigin+divmult(degrees,180,halfwidth)\n    y=yorigin-sin(degrees,1,yscale)\n    setxy(x,y)\n  polyline(361)\n\ndef cosinecurve():\n  global yscale,xorigin,yorigin,halfwidth\n  for degrees in range(-180,181,1):\n    x=xorigin+divmult(degrees,180,halfwidth)\n    y=yorigin-cos(degrees,1,yscale)\n    setxy(x,y)\n  polyline(361)\n\ndef tancurve():\n  global yscale,xorigin,yorigin,halfwidth\n  for degrees in range(-180,181,1):\n    if degrees==-90:\n      polyline(90)\n    else:\n      if degrees==90:\n        polyline(179)\n      else:\n        x=xorigin+divmult(degrees,180,halfwidth)\n        y=yorigin-tan(degrees,1,yscale)\n        setxy(x,y)\n  polyline(90)\n\ndef main():\n  global xorigin,yorigin,halfwidth,yscale\n  xorigin=500\n  yorigin=500\n  halfwidth=400\n  yscale=200\n  axes()\n  noupdate()\n  thickness(4)\n  colour(green)\n  setxy(20,800)\n  print('sine',16,40)\n  sinecurve()\n  colour(red)\n  setxy(20,860)\n  print('cosine',16,40)\n  cosinecurve()\n  colour(blue)\n  setxy(20,920)\n  print('tangent',16,40)\n  tancurve()",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:4,lines:"7 9 14 16"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:17,lines:"6 8 10 13 15 17 19 21 23 25 27 35 43 57 70 74 78"}],total:17},{category:"Turtle: drawing shapes",expressions:[{name:"circle",level:1,count:1,lines:"11"},{name:"polyline",level:2,count:5,lines:"36 44 50 53 58"}],total:6},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"69 73 77"},{name:"thickness",level:1,count:3,lines:"5 12 68"}],total:6},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"67"}],total:1},{category:"General arithmetic functions",expressions:[{name:"divmult",level:3,count:3,lines:"33 41 55"}],total:3},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:1,lines:"42"},{name:"sin",level:2,count:1,lines:"34"},{name:"tan",level:2,count:1,lines:"56"}],total:3},{category:"String operations",expressions:[{name:"print",level:1,count:9,lines:"18 20 22 24 26 28 71 75 79"}],total:9},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"49 52"},{name:"else",level:1,count:2,lines:"51 54"},{name:"for",level:1,count:3,lines:"32 40 48"},{name:"def",level:2,count:5,lines:"3 30 38 46 60"}],total:12},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:5,lines:"4 31 39 47 61"}],total:5},{category:"Subroutine calls",expressions:[{name:"axes",level:0,count:1,lines:"66"},{name:"sinecurve",level:0,count:1,lines:"72"},{name:"cosinecurve",level:0,count:1,lines:"76"},{name:"tancurve",level:0,count:1,lines:"80"}],total:4}],pcode:[[80,16,1,1,80,0,113,80,5,2,113,4,80,9,115,80,25,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,92],[140,1],[144,1,1],[80,3,220],[81,23,81,25,25,81,24,224],[81,25,80,2,26,80,0,226],[81,23,80,0,224],[80,0,80,1e3,226],[81,23,81,24,224],[80,15,242],[80,2,220],[81,23,81,25,25,81,24,81,22,25,224],[81,25,80,2,26,80,0,226],[81,23,81,25,25,81,24,81,22,24,224],[81,25,80,2,26,80,0,226],[81,23,81,25,24,80,10,24,81,24,81,22,25,80,18,25,224],[87,43,49,0,80,0,80,20,61],[81,23,81,25,24,80,10,24,81,24,81,22,24,80,18,25,224],[87,45,49,0,80,0,80,20,61],[81,23,81,25,25,80,60,25,81,24,224],[87,45,49,56,48,0,80,0,80,20,61],[81,23,81,25,80,2,27,25,81,24,224],[87,45,57,48,0,80,0,80,20,61],[81,23,81,25,80,2,27,24,80,30,25,81,24,224],[87,57,48,0,80,0,80,20,61],[81,23,81,25,24,81,24,224],[87,49,56,48,0,80,0,80,20,61],[145,1,141,137],[140,2],[144,2,4],[80,180,16],[98,2,2,80,181],[82,2,2,67,129,40],[81,23,82,2,2,80,180,81,25,32,24,98,2,3],[81,24,82,2,2,80,1,81,22,41,25,98,2,4],[82,2,3,82,2,4,224],[82,2,2,4,128,34],[80,361,240],[145,2,141,137],[140,3],[144,3,4],[80,180,16],[98,3,2,80,181],[82,3,2,67,129,51],[81,23,82,3,2,80,180,81,25,32,24,98,3,3],[81,24,82,3,2,80,1,81,22,42,25,98,3,4],[82,3,3,82,3,4,224],[82,3,2,4,128,45],[80,361,240],[145,3,141,137],[140,4],[144,4,4],[80,180,16],[98,4,2,80,181],[82,4,2,67,129,68],[82,4,2,80,90,16,64,129,61],[80,90,240],[128,67],[82,4,2,80,90,64,129,64],[80,179,240],[128,67],[81,23,82,4,2,80,180,81,25,32,24,98,4,3],[81,24,82,4,2,80,1,81,22,43,25,98,4,4],[82,4,3,82,4,4,224],[82,4,2,4,128,56],[80,90,240],[145,4,141,137],[140,5],[144,5,1],[80,500,97,23],[80,500,97,24],[80,400,97,25],[80,200,97,22],[136,4],[163],[80,4,220],[80,2263842,221],[80,20,80,800,224],[87,115,105,110,101,0,80,16,80,40,61],[136,31],[80,16711680,221],[80,20,80,860,224],[87,99,111,115,105,110,101,0,80,16,80,40,61],[136,42],[80,255,221],[80,20,80,920,224],[87,116,97,110,103,101,110,116,0,80,16,80,40,61],[136,53],[145,5,141,137],[136,70],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Recursive triangles",author:"Oxford University",date:"19/04/2016",time:"10:30:20",code:"# Triangles\n\ndef triangle(size):\n  if size>=2:\n    forward(size)\n    triangle(size//2)\n    right(120)\n    forward(size)\n    triangle(size//2)\n    right(120)\n    forward(size)\n    triangle(size//2)\n    right(120)\n\ndef main():\n  movexy(-100,150)\n  triangle(256)",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:3,lines:"5 8 11"},{name:"right",level:1,count:3,lines:"7 10 13"},{name:"movexy",level:2,count:1,lines:"16"}],total:7},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"4"},{name:"def",level:2,count:2,lines:"3 15"}],total:3},{category:"Subroutine calls",expressions:[{name:"triangle",level:0,count:4,lines:"6 9 12 17"}],total:4}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,5,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,23],[140,1],[144,1,2],[98,1,2],[82,1,2,80,2,69,129,17],[82,1,2,227],[82,1,2,80,2,28,136,4],[80,120,230],[82,1,2,227],[82,1,2,80,2,28,136,4],[80,120,230],[82,1,2,227],[82,1,2,80,2,28,136,4],[80,120,230],[145,1,141,137],[140,2],[144,2,1],[80,100,16,80,150,225],[80,256,136,4],[145,2,141,137],[136,18],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Sierpinski triangle",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"The plough constellation",author:"Oxford University",date:"19/04/2016",time:"09:53:50",code:"# ThePlough\n\ndef main():\n  blank(black)\n  colour(lightblue)\n  setxy(100,200)\n  blot(10)\n  setxy(300,250)\n  blot(10)\n  setxy(420,350)\n  blot(10)\n  setxy(570,490)\n  blot(10)\n  setxy(900,560)\n  blot(10)\n  setxy(840,720)\n  blot(10)\n  setxy(590,660)\n  blot(10)\n  setxy(570,490)\n  colour(silver)\n  polyline(8)",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:8,lines:"6 8 10 12 14 16 18 20"}],total:8},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:7,lines:"7 9 11 13 15 17 19"},{name:"polyline",level:2,count:1,lines:"22"}],total:8},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"5 21"}],total:2},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"4"}],total:1},{category:"Command structures",expressions:[{name:"def",level:2,count:1,lines:"3"}],total:1}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,26],[140,1],[144,1,1],[80,0,248],[80,10075135,221],[80,100,80,200,224],[80,10,243],[80,300,80,250,224],[80,10,243],[80,420,80,350,224],[80,10,243],[80,570,80,490,224],[80,10,243],[80,900,80,560,224],[80,10,243],[80,840,80,720,224],[80,10,243],[80,590,80,660,224],[80,10,243],[80,570,80,490,224],[80,12632256,221],[80,8,240],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"String functions",author:"University of Oxford",date:"29/09/2016",time:"17:54:55",code:"# StringFunctions\n\ndef main():\n  output(-1,cream,-1)\n  delay=500\n  s1='Turtle Python'\n  s2=copy(s1,1,6)\n  writeline(s2+' is the name of a small animal.')\n  pause(delay)\n  s3=copy(s1,8,6)\n  writeline(s3+' is a large snake.')\n  pause(delay)\n  s4=insert(s3,2,'onty M')\n  writeline(''''+s4+''' is a silly name.')\n  pause(delay)\n  writeline('\"'+s1+'\" has '+str(len(s1))+' characters.')\n  pause(delay)\n  writeline('In lower case it is \"'+lower(s1)+'\".')\n  writeline('In upper case it is \"'+upper(s1)+'\".')\n  pause(delay)\n  posn=find(s1,s3)\n  if posn>0:\n    writeline('\"'+s3+'\" occurs within \"'+s1+'\" at position '+str(posn)+'.')\n  pause(delay)\n  s5='3.14159'\n  writeline(s5+' times 100000 = '+str(qval(s5,100000,-1))+'.')\n  pause(delay)\n  n=qval(s5,100000,-1)\n  writeline(str(n)+' divided by 100000 = '+qstr(n,100000,5)+'.')\n  writeline('')\n  pause(delay*5)\n  writeline('Now back to the Canvas and Console ...')\n  output(0,peach,-1)\n  pause(delay*5)\n  output(0,lightred,0)\n  pause(delay*5)\n  console(-1,lightblue)\n  writeline('You will see this on a clear light blue Console')",usage:[{category:"Other Turtle commands",expressions:[{name:"console",level:2,count:1,lines:"37"},{name:"output",level:2,count:3,lines:"4 33 35"}],total:4},{category:"String operations",expressions:[{name:"writeline",level:1,count:12,lines:"8 11 14 16 18 19 23 26 29 30 32 38"},{name:"len",level:2,count:1,lines:"16"},{name:"lower",level:2,count:1,lines:"18"},{name:"upper",level:2,count:1,lines:"19"},{name:"copy",level:3,count:2,lines:"7 10"},{name:"find",level:3,count:1,lines:"21"},{name:"insert",level:3,count:1,lines:"13"}],total:19},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:4,lines:"16 23 26 29"},{name:"qstr",level:2,count:1,lines:"29"},{name:"qval",level:2,count:2,lines:"26 28"}],total:7},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:10,lines:"9 12 15 17 20 24 27 31 34 36"}],total:10},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"22"},{name:"def",level:2,count:1,lines:"3"}],total:2}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,42],[140,1],[144,1,9],[80,1,16,80,16777147,80,1,16,166],[80,500,98,1,2],[87,84,117,114,116,108,101,32,80,121,116,104,111,110,0,98,1,3,146],[82,1,3,80,1,80,6,57,98,1,4,146],[82,1,4,87,32,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,97,32,115,109,97,108,108,32,97,110,105,109,97,108,46,0,54,190,191],[82,1,2,178],[82,1,3,80,8,80,6,57,98,1,5,146],[82,1,5,87,32,105,115,32,97,32,108,97,114,103,101,32,115,110,97,107,101,46,0,54,190,191],[82,1,2,178],[82,1,5,80,2,87,111,110,116,121,32,77,0,3,3,59,98,1,6,146],[87,39,0,82,1,6,54,87,39,32,105,115,32,97,32,115,105,108,108,121,32,110,97,109,101,46,0,54,190,191],[82,1,2,178],[87,34,0,82,1,3,54,87,34,32,104,97,115,32,0,54,82,1,3,55,49,54,87,32,99,104,97,114,97,99,116,101,114,115,46,0,54,190,191,147],[82,1,2,178],[87,73,110,32,108,111,119,101,114,32,99,97,115,101,32,105,116,32,105,115,32,34,0,82,1,3,80,-1,56,54,87,34,46,0,54,190,191,147],[87,73,110,32,117,112,112,101,114,32,99,97,115,101,32,105,116,32,105,115,32,34,0,82,1,3,80,1,56,54,87,34,46,0,54,190,191,147],[82,1,2,178],[82,1,3,82,1,5,2,60,98,1,7],[82,1,7,80,0,67,129,26],[87,34,0,82,1,5,54,87,34,32,111,99,99,117,114,115,32,119,105,116,104,105,110,32,34,0,54,82,1,3,54,87,34,32,97,116,32,112,111,115,105,116,105,111,110,32,0,54,82,1,7,49,54,87,46,0,54,190,191,147],[82,1,2,178],[87,51,46,49,52,49,53,57,0,98,1,8,146],[82,1,8,87,32,116,105,109,101,115,32,49,48,48,48,48,48,32,61,32,0,54,82,1,8,80,1e5,80,1,16,53,49,54,87,46,0,54,190,191,147],[82,1,2,178],[82,1,8,80,1e5,80,1,16,53,98,1,9],[82,1,9,49,87,32,100,105,118,105,100,101,100,32,98,121,32,49,48,48,48,48,48,32,61,32,0,54,82,1,9,80,1e5,80,5,52,54,87,46,0,54,190,191,147],[87,0,190,191],[82,1,2,80,5,26,178],[87,78,111,119,32,98,97,99,107,32,116,111,32,116,104,101,32,67,97,110,118,97,115,32,97,110,100,32,67,111,110,115,111,108,101,32,46,46,46,0,190,191],[80,0,80,16764080,80,1,16,166],[82,1,2,80,5,26,178],[80,0,80,13458524,80,0,166],[82,1,2,80,5,26,178],[80,1,16,80,10075135,167],[87,89,111,117,32,119,105,108,108,32,115,101,101,32,116,104,105,115,32,111,110,32,97,32,99,108,101,97,114,32,108,105,103,104,116,32,98,108,117,101,32,67,111,110,115,111,108,101,0,190,191],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Stars (using ANGLES and FORGET)",author:"Oxford University",date:"19/04/2016",time:"10:20:13",code:"# Stars\n\ndef star(points,col):\n  angles(points*2)\n  for count in range(0,points,1):\n    forward(450)\n    back(450)\n    forget(1)\n    right(1)\n    forward(200)\n    back(200)\n    forget(1)\n    right(1)\n  colour(col)\n  polygon(points*2)\n\ndef main():\n  penup()\n  for n in range(3,13,1):\n    star(n,rgb(n-2))\n    pause(500)",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:2,lines:"7 11"},{name:"forward",level:1,count:2,lines:"6 10"},{name:"right",level:1,count:2,lines:"9 13"}],total:6},{category:"Turtle: drawing shapes",expressions:[{name:"forget",level:2,count:2,lines:"8 12"},{name:"polygon",level:2,count:1,lines:"15"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:1,lines:"14"},{name:"penup",level:1,count:1,lines:"18"},{name:"rgb",level:3,count:1,lines:"20"}],total:3},{category:"Canvas operations",expressions:[{name:"angles",level:2,count:1,lines:"4"}],total:1},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"21"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:2,lines:"5 19"},{name:"def",level:2,count:2,lines:"3 17"}],total:4},{category:"Subroutine calls",expressions:[{name:"star",level:0,count:1,lines:"20"}],total:1}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,5,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,33],[140,1],[144,1,4],[98,1,3,98,1,2],[82,1,2,80,2,26,212],[80,0],[98,1,4,82,1,2],[82,1,4,67,129,20],[80,450,227],[80,450,228],[80,1,237],[80,1,230],[80,200,227],[80,200,228],[80,1,237],[80,1,230],[82,1,4,4,128,9],[82,1,3,221],[82,1,2,80,2,26,241],[145,1,141,137],[140,2],[144,2,2],[160],[80,3],[98,2,2,80,13],[82,2,2,67,129,32],[82,2,2,82,2,2,80,2,25,222,136,4],[80,500,178],[82,2,2,4,128,27],[145,2,141,137],[136,23],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Solar system",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Snake (classic game)",author:"Oxford University",date:"19/04/2016",time:"10:37:04",code:"# Snake\n\ndef newapple():\n  global applecolour,snakecolour,boardsize\n  x=randint(0,boardsize-1)\n  y=randint(0,boardsize-1)\n  while pixcol(x,y)==snakecolour:\n    x=randint(0,boardsize-1)\n    y=randint(0,boardsize-1)\n  pixset(x,y,applecolour)\n\ndef main():\n  global turtx,turty,turtd\n  global applecolour,snakecolour,boardsize\n  boardsize=30\n  canvas(0,0,boardsize,boardsize)\n  resolution(boardsize,boardsize)\n  angles(4)\n  snakecolour=purple\n  applecolour=green\n  blank(lightblue)\n  cursor(0)\n  colour(snakecolour)\n  thickness(1)\n  penup()\n  forward(1)\n  snakelength=2\n  newapple()\n  crash=False\n  while not crash:\n    noupdate()\n    if (abs(?key)==\\up) and (turtd!=2):\n      direction(0)\n    if (abs(?key)==\\right) and (turtd!=3):\n      direction(1)\n    if (abs(?key)==\\down) and (turtd!=0):\n      direction(2)\n    if (abs(?key)==\\left) and (turtd!=1):\n      direction(3)\n    forward(1)\n    if (turtx<0) or (turtx>=boardsize) or (turty<0) or (turty>=boardsize):\n      crash=True\n    if pixcol(turtx,turty)==snakecolour:\n      crash=True\n    if pixcol(turtx,turty)==applecolour:\n      inc(snakelength)\n      pixset(turtx,turty,snakecolour)\n      newapple()\n    colour(lightblue)\n    polyline(snakelength+2)\n    colour(snakecolour)\n    polyline(snakelength)\n    update()\n    pause(250-(snakelength*3))\n  resolution(1000,1000)\n  blank(lilac)\n  setxy(boardsize//4,2*boardsize//5)\n  print('Score '+str(snakelength-2),20,100)",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:2,lines:"26 40"}],total:2},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:4,lines:"33 35 37 39"},{name:"setxy",level:1,count:1,lines:"57"}],total:5},{category:"Turtle: drawing shapes",expressions:[{name:"polyline",level:2,count:2,lines:"50 52"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"23 49 51"},{name:"penup",level:1,count:1,lines:"25"},{name:"thickness",level:1,count:1,lines:"24"}],total:5},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:2,lines:"21 56"},{name:"noupdate",level:1,count:1,lines:"31"},{name:"update",level:1,count:1,lines:"53"},{name:"angles",level:2,count:1,lines:"18"},{name:"canvas",level:2,count:1,lines:"16"},{name:"resolution",level:2,count:2,lines:"17 55"},{name:"pixcol",level:3,count:3,lines:"7 43 45"},{name:"pixset",level:3,count:2,lines:"10 47"}],total:13},{category:"General arithmetic functions",expressions:[{name:"abs",level:1,count:4,lines:"32 34 36 38"},{name:"inc",level:1,count:1,lines:"46"},{name:"randint",level:2,count:4,lines:"5 6 8 9"}],total:9},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"58"}],total:1},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:1,lines:"58"}],total:1},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"54"},{name:"cursor",level:2,count:1,lines:"22"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:7,lines:"32 34 36 38 41 43 45"},{name:"while",level:2,count:2,lines:"7 30"},{name:"def",level:2,count:2,lines:"3 12"}],total:11},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:3,lines:"4 13 14"}],total:3},{category:"Subroutine calls",expressions:[{name:"newapple",level:0,count:2,lines:"28 48"}],total:2}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,8,115,80,21,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,62],[140,1],[144,1,3],[80,0,81,21,80,1,25,2,1,3,4,2,25,19,24,98,1,2],[80,0,81,21,80,1,25,2,1,3,4,2,25,19,24,98,1,3],[82,1,2,82,1,3,210,81,20,64,129,12],[80,0,81,21,80,1,25,2,1,3,4,2,25,19,24,98,1,2],[80,0,81,21,80,1,25,2,1,3,4,2,25,19,24,98,1,3],[128,8],[82,1,2,82,1,3,81,19,211],[145,1,141,137],[140,2],[144,2,3],[80,30,97,21],[80,0,80,0,81,21,81,21,208],[81,21,81,21,209],[80,4,212],[80,8388736,97,20],[80,2263842,97,19],[80,10075135,248],[80,0,213],[81,20,221],[80,1,220],[160],[80,1,227],[80,2,98,2,2],[136,4],[80,0,98,2,3],[82,2,3,8,129,57],[163],[80,-9,184,17,80,38,64,81,16,80,2,65,9,129,35],[80,0,219],[80,-9,184,17,80,39,64,81,16,80,3,65,9,129,37],[80,1,219],[80,-9,184,17,80,40,64,81,16,80,0,65,9,129,39],[80,2,219],[80,-9,184,17,80,37,64,81,16,80,1,65,9,129,41],[80,3,219],[80,1,227],[81,14,80,0,66,81,14,81,21,69,10,81,15,80,0,66,10,81,15,81,21,69,10,129,44],[80,-1,98,2,3],[81,14,81,15,210,81,20,64,129,46],[80,-1,98,2,3],[81,14,81,15,210,81,19,64,129,50],[85,2,2,1,112,4,2,113],[81,14,81,15,81,20,211],[136,4],[80,10075135,221],[82,2,2,80,2,24,240],[81,20,221],[82,2,2,240],[162],[80,250,82,2,2,80,3,26,25,178],[128,31],[80,1e3,80,1e3,209],[80,11572223,248],[81,21,80,4,28,80,2,81,21,26,80,5,28,224],[87,83,99,111,114,101,32,0,82,2,2,80,2,25,49,54,80,20,80,100,61],[145,2,141,137],[136,14],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Simple procedure",author:"Oxford University",date:"19/04/2016",time:"10:11:24",code:"# SimpleProcedure\n\ndef prong():\n  forward(400)\n  blot(20)\n  back(400)\n\ndef main():\n  global turtd\n  randcol(10)\n  prong()\n  right(61)\n  while turtd!=0:\n    randcol(10)\n    prong()\n    right(61)",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:1,lines:"6"},{name:"forward",level:1,count:1,lines:"4"},{name:"right",level:1,count:2,lines:"12 16"}],total:4},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"5"}],total:1},{category:"Other Turtle commands",expressions:[{name:"randcol",level:1,count:2,lines:"10 14"}],total:2},{category:"Command structures",expressions:[{name:"while",level:2,count:1,lines:"13"},{name:"def",level:2,count:2,lines:"3 8"}],total:3},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:1,lines:"9"}],total:1},{category:"Subroutine calls",expressions:[{name:"prong",level:0,count:2,lines:"11 15"}],total:2}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,5,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,21],[140,1],[144,1,1],[80,400,227],[80,20,243],[80,400,228],[145,1,141,137],[140,2],[144,2,1],[80,10,19,4,222,221],[136,4],[80,61,230],[81,16,80,0,65,129,20],[80,10,19,4,222,221],[136,4],[80,61,230],[128,15],[145,2,141,137],[136,10],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Drawing to the mouse",author:"Oxford University",date:"19/04/2016",time:"13:26:08",code:"# SimpleDraw\n\ndef palette():\n  for col in range(1,11,1):\n    setxy(col*100-50,950)\n    colour(rgb(col))\n    blot(50)\n\ndef main():\n  global turtx,turty\n  palette()\n  home()\n  thickness(10)\n  blot(2)\n  while True:\n    while not((?lmouse>0) or (?rmouse>0)):\n      update()\n    if ?mousey>900:\n      colour(rgb(?mousex//100+1))\n    else:\n      if ?lmouse>0:\n        drawxy(?mousex-turtx,?mousey-turty)\n      else:\n        setxy(?mousex,?mousey)",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:1,lines:"22"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"home",level:1,count:1,lines:"12"},{name:"setxy",level:1,count:2,lines:"5 24"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"7 14"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"6 19"},{name:"thickness",level:1,count:1,lines:"13"},{name:"rgb",level:3,count:2,lines:"6 19"}],total:5},{category:"Canvas operations",expressions:[{name:"update",level:1,count:1,lines:"17"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"18 21"},{name:"else",level:1,count:2,lines:"20 23"},{name:"for",level:1,count:1,lines:"4"},{name:"while",level:2,count:2,lines:"15 16"},{name:"def",level:2,count:2,lines:"3 9"}],total:9},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:1,lines:"10"}],total:1},{category:"Subroutine calls",expressions:[{name:"palette",level:0,count:1,lines:"11"}],total:1}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,5,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,33],[140,1],[144,1,2],[80,1],[98,1,2,80,11],[82,1,2,67,129,13],[82,1,2,80,100,26,80,50,25,80,950,224],[82,1,2,222,221],[80,50,243],[82,1,2,4,128,7],[145,1,141,137],[140,2],[144,2,1],[136,4],[216],[80,10,220],[80,2,243],[80,-1,129,32],[80,-1,184,80,0,67,80,-2,184,80,0,67,10,8,129,24],[162],[128,21],[80,-8,184,80,900,67,129,27],[80,-7,184,80,100,28,80,1,24,222,221],[128,31],[80,-1,184,80,0,67,129,30],[80,-7,184,81,14,25,80,-8,184,81,15,25,226],[128,31],[80,-7,184,80,-8,184,224],[128,20],[145,2,141,137],[136,14],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Sierpinski triangle",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Sierpinski triangle",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Sierpinski triangle",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Sierpinski triangle",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Arcade shooting game",author:"Oxford University",date:"19/04/2016",time:"10:37:38",code:"# Shoot\n\ndef bottle(x,y):\n  setxy(x,y)\n  colour(cyan)\n  movexy(0,-15)\n  thickness(40)\n  drawxy(0,-50)\n  thickness(10)\n  drawxy(0,-40)\n  thickness(2)\n  movexy(-20,90)\n  movexy(40,0)\n  movexy(0,-20)\n  movexy(-40,0)\n  colour(purple)\n  polygon(4)\n  movexy(20,35)\n\ndef addhat():\n  global facex,facey\n  setxy(facex,facey-80)\n  colour(darkgrey)\n  ellblot(90,30)\n  thickness(2)\n  colour(black)\n  ellipse(90,30)\n  movexy(-70,0)\n  thickness(4)\n  drawxy(35,-70)\n  drawxy(70,0)\n  drawxy(35,70)\n  colour(darkgrey)\n  thickness(1)\n  polygon(4)\n\ndef face():\n  global facex,facey\n  thickness(1)\n  colour(#FF8899)\n  blot(100)\n  colour(white)\n  setxy(facex-20,facey-20)\n  blot(10)\n  colour(black)\n  blot(4)\n  thickness(4)\n  movexy(0,-22)\n  colour(#663300)\n  drawxy(15,15)\n  thickness(1)\n  colour(white)\n  setxy(facex+20,facey-20)\n  blot(10)\n  colour(black)\n  blot(4)\n  thickness(4)\n  movexy(0,-22)\n  colour(#663300)\n  drawxy(-15,15)\n  addhat()\n  setxy(facex,facey+13)\n  colour(red)\n  blot(10)\n  movexy(0,32)\n  ellblot(30,6)\n  colour(white)\n  ellblot(20,4)\n\ndef background():\n  blank(coffee)\n  bottle(100,500)\n  bottle(200,500)\n  bottle(450,500)\n  bottle(500,500)\n  bottle(565,500)\n  bottle(865,500)\n  colour(darkbrown)\n  thickness(20)\n  setxy(0,125)\n  drawxy(1000,0)\n  setxy(0,325)\n  drawxy(1000,0)\n  setxy(0,525)\n  drawxy(1000,0)\n  colour(brown)\n  thickness(30)\n  setxy(0,100)\n  drawxy(1000,0)\n  setxy(0,300)\n  drawxy(1000,0)\n  setxy(0,500)\n  drawxy(1000,0)\n\ndef gunsight():\n  colour(black)\n  thickness(6)\n  setxy(?mousex-50,?mousey)\n  drawxy(100,0)\n  setxy(?mousex,?mousey-50)\n  drawxy(0,100)\n\ndef main():\n  global facex,facey\n  facex=-100\n  facey=625\n  facexspeed=5\n  faceyspeed=0\n  targets=10\n  hits=0\n  cursor(0)\n  while hits<targets:\n    noupdate()\n    background()\n    setxy(facex,facey)\n    face()\n    for i in range(0,hits,1):\n      bottle(50*i+15,740)\n    colour(brown)\n    thickness(272)\n    setxy(0,863)\n    drawxy(1000,0)\n    gunsight()\n    thickness(2)\n    update()\n    facex=facex+facexspeed\n    facey=facey+faceyspeed\n    if facex>1100:\n      facex=-100\n    if facex<-100:\n      facex=1100\n    if (facey<100) or (facey>625):\n      faceyspeed=faceyspeed*-1\n    if ((?lmouse>0) and (((?mousex-facex)*(?mousex-facex))+((?mousey-facey)*(?mousey-facey))<10000)):\n      facex=-100\n      facexspeed=randint(2,6)\n      faceyspeed=randint(-4,4)\n      facey=randint(50,599)\n      inc(hits)\n  blank(black)\n  setxy(200,450)\n  colour(green)\n  print('  Well done!  ',4,75)",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:16,lines:"8 10 30 31 32 50 60 81 83 85 89 91 93 99 101 122"},{name:"movexy",level:2,count:10,lines:"6 12 13 14 15 18 28 48 58 65"}],total:26},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:16,lines:"4 22 43 53 62 80 82 84 88 90 92 98 100 115 121 141"}],total:16},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:6,lines:"41 44 46 54 56 64"},{name:"ellblot",level:1,count:3,lines:"24 66 68"},{name:"ellipse",level:1,count:1,lines:"27"},{name:"polygon",level:2,count:2,lines:"17 35"}],total:12},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:19,lines:"5 16 23 26 33 40 42 45 49 52 55 59 63 67 78 86 96 119 142"},{name:"thickness",level:1,count:15,lines:"7 9 11 25 29 34 39 47 51 57 79 87 97 120 124"}],total:34},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:2,lines:"71 140"},{name:"noupdate",level:1,count:1,lines:"113"},{name:"update",level:1,count:1,lines:"125"}],total:4},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:1,lines:"139"},{name:"randint",level:2,count:3,lines:"136 137 138"}],total:4},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"143"}],total:1},{category:"Input and timing routines",expressions:[{name:"cursor",level:2,count:1,lines:"111"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:4,lines:"128 130 132 134"},{name:"for",level:1,count:1,lines:"117"},{name:"while",level:2,count:1,lines:"112"},{name:"def",level:2,count:6,lines:"3 20 37 70 95 103"}],total:12},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:3,lines:"21 38 104"}],total:3},{category:"Subroutine calls",expressions:[{name:"addhat",level:0,count:1,lines:"61"},{name:"bottle",level:0,count:7,lines:"72 73 74 75 76 77 118"},{name:"background",level:0,count:1,lines:"114"},{name:"face",level:0,count:1,lines:"116"},{name:"gunsight",level:0,count:1,lines:"123"}],total:11}],pcode:[[80,17,1,1,80,0,113,80,5,2,113,4,80,7,115,80,24,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,154],[140,1],[144,1,3],[98,1,3,98,1,2],[82,1,2,82,1,3,224],[80,65535,221],[80,0,80,15,16,225],[80,40,220],[80,0,80,50,16,226],[80,10,220],[80,0,80,40,16,226],[80,2,220],[80,20,16,80,90,225],[80,40,80,0,225],[80,0,80,20,16,225],[80,40,16,80,0,225],[80,8388736,221],[80,4,241],[80,20,80,35,225],[145,1,141,137],[140,2],[144,2,1],[81,23,81,24,80,80,25,224],[80,4210752,221],[80,90,80,30,245],[80,2,220],[80,0,221],[80,90,80,30,244],[80,70,16,80,0,225],[80,4,220],[80,35,80,70,16,226],[80,70,80,0,226],[80,35,80,70,226],[80,4210752,221],[80,1,220],[80,4,241],[145,2,141,137],[140,3],[144,3,1],[80,1,220],[80,16746649,221],[80,100,243],[80,16777215,221],[81,23,80,20,25,81,24,80,20,25,224],[80,10,243],[80,0,221],[80,4,243],[80,4,220],[80,0,80,22,16,225],[80,6697728,221],[80,15,80,15,226],[80,1,220],[80,16777215,221],[81,23,80,20,24,81,24,80,20,25,224],[80,10,243],[80,0,221],[80,4,243],[80,4,220],[80,0,80,22,16,225],[80,6697728,221],[80,15,16,80,15,226],[136,23],[81,23,81,24,80,13,24,224],[80,16711680,221],[80,10,243],[80,0,80,32,225],[80,30,80,6,245],[80,16777215,221],[80,20,80,4,245],[145,3,141,137],[140,4],[144,4,1],[80,9596735,248],[80,100,80,500,136,4],[80,200,80,500,136,4],[80,450,80,500,136,4],[80,500,80,500,136,4],[80,565,80,500,136,4],[80,865,80,500,136,4],[80,6045747,221],[80,20,220],[80,0,80,125,224],[80,1e3,80,0,226],[80,0,80,325,224],[80,1e3,80,0,226],[80,0,80,525,224],[80,1e3,80,0,226],[80,9849600,221],[80,30,220],[80,0,80,100,224],[80,1e3,80,0,226],[80,0,80,300,224],[80,1e3,80,0,226],[80,0,80,500,224],[80,1e3,80,0,226],[145,4,141,137],[140,5],[144,5,1],[80,0,221],[80,6,220],[80,-7,184,80,50,25,80,-8,184,224],[80,100,80,0,226],[80,-7,184,80,-8,184,80,50,25,224],[80,0,80,100,226],[145,5,141,137],[140,6],[144,6,6],[80,100,16,97,23],[80,625,97,24],[80,5,98,6,2],[80,0,98,6,3],[80,10,98,6,4],[80,0,98,6,5],[80,0,213],[82,6,5,82,6,4,66,129,149],[163],[136,73],[81,23,81,24,224],[136,40],[80,0],[98,6,6,82,6,5],[82,6,6,67,129,127],[80,50,82,6,6,26,80,15,24,80,740,136,4],[82,6,6,4,128,123],[80,9849600,221],[80,272,220],[80,0,80,863,224],[80,1e3,80,0,226],[136,99],[80,2,220],[162],[81,23,82,6,2,24,97,23],[81,24,82,6,3,24,97,24],[81,23,80,1100,67,129,138],[80,100,16,97,23],[81,23,80,100,16,66,129,140],[80,1100,97,23],[81,24,80,100,66,81,24,80,625,67,10,129,142],[82,6,3,80,1,16,26,98,6,3],[80,-1,184,80,0,67,80,-7,184,81,23,25,80,-7,184,81,23,25,26,80,-8,184,81,24,25,80,-8,184,81,24,25,26,24,80,1e4,66,9,129,148],[80,100,16,97,23],[80,2,80,6,2,1,3,4,2,25,19,24,98,6,2],[80,4,16,80,4,2,1,3,4,2,25,19,24,98,6,3],[80,50,80,599,2,1,3,4,2,25,19,24,97,24],[85,6,5,1,112,4,2,113],[128,117],[80,0,248],[80,200,80,450,224],[80,2263842,221],[87,32,32,87,101,108,108,32,100,111,110,101,33,32,32,0,80,4,80,75,189],[145,6,141,137],[136,108],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"The sex ratio",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Schelling's segregation model",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Reference parameters",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Quine (self-replicating) program",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"POLYGON and POLYLINE",author:"Oxford University",date:"19/04/2016",time:"10:19:11",code:"# Polygons\n\ndef poly(points,col):\n  direction(90)\n  for count in range(0,points,1):\n    forward(600//points)\n    left(360//points)\n  colour(col)\n  polygon(points)\n  colour(black)\n  polyline(points+1)\n\ndef main():\n  penup()\n  thickness(4)\n  setxy(100,400)\n  poly(3,blue)\n  setxy(400,400)\n  poly(4,red)\n  setxy(700,400)\n  poly(5,yellow)\n  setxy(150,750)\n  poly(6,pink)\n  setxy(440,750)\n  poly(7,green)\n  setxy(740,750)\n  poly(8,turquoise)",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:1,lines:"6"},{name:"left",level:1,count:1,lines:"7"}],total:2},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:1,lines:"4"},{name:"setxy",level:1,count:6,lines:"16 18 20 22 24 26"}],total:7},{category:"Turtle: drawing shapes",expressions:[{name:"polygon",level:2,count:1,lines:"9"},{name:"polyline",level:2,count:1,lines:"11"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"8 10"},{name:"penup",level:1,count:1,lines:"14"},{name:"thickness",level:1,count:1,lines:"15"}],total:4},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"5"},{name:"def",level:2,count:2,lines:"3 13"}],total:3},{category:"Subroutine calls",expressions:[{name:"poly",level:0,count:6,lines:"17 19 21 23 25 27"}],total:6}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,5,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,36],[140,1],[144,1,4],[98,1,3,98,1,2],[80,90,219],[80,0],[98,1,4,82,1,2],[82,1,4,67,129,14],[80,600,82,1,2,28,227],[80,360,82,1,2,28,229],[82,1,4,4,128,9],[82,1,3,221],[82,1,2,241],[80,0,221],[82,1,2,80,1,24,240],[145,1,141,137],[140,2],[144,2,1],[160],[80,4,220],[80,100,80,400,224],[80,3,80,255,136,4],[80,400,80,400,224],[80,4,80,16711680,136,4],[80,700,80,400,224],[80,5,80,16776960,136,4],[80,150,80,750,224],[80,6,80,15602313,136,4],[80,440,80,750,224],[80,7,80,2263842,136,4],[80,740,80,750,224],[80,8,80,48833,136,4],[145,2,141,137],[136,19],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Polygon rings",author:"Oxford University",date:"19/04/2016",time:"10:21:01",code:"# PolygonRings\n\ndef annulus(inner,width,angle):\n  global turtc\n  for count in range(0,360//angle+1,1):\n    forward(inner+width)\n    back(width)\n    back(inner)\n    forget(1)\n    right(angle)\n    forward(inner)\n    forward(width)\n    colour(rgb(count%20+1))\n    polygon(4)\n    back(inner+width)\n\ndef main():\n  penup()\n  blot(500)\n  randcol(6)\n  annulus(410,80,2)\n  annulus(310,80,3)\n  annulus(210,80,5)\n  annulus(110,80,7)\n  annulus(10,80,1)",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:3,lines:"7 8 15"},{name:"forward",level:1,count:3,lines:"6 11 12"},{name:"right",level:1,count:1,lines:"10"}],total:7},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"19"},{name:"forget",level:2,count:1,lines:"9"},{name:"polygon",level:2,count:1,lines:"14"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:1,lines:"13"},{name:"penup",level:1,count:1,lines:"18"},{name:"randcol",level:1,count:1,lines:"20"},{name:"rgb",level:3,count:1,lines:"13"}],total:4},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"5"},{name:"def",level:2,count:2,lines:"3 17"}],total:3},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:1,lines:"4"}],total:1},{category:"Subroutine calls",expressions:[{name:"annulus",level:0,count:5,lines:"21 22 23 24 25"}],total:5}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,5,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,33],[140,1],[144,1,5],[98,1,4,98,1,3,98,1,2],[80,0],[98,1,5,80,360,82,1,4,28,80,1,24],[82,1,5,67,129,21],[82,1,2,82,1,3,24,227],[82,1,3,228],[82,1,2,228],[80,1,237],[82,1,4,230],[82,1,2,227],[82,1,3,227],[82,1,5,80,20,29,80,1,24,222,221],[80,4,241],[82,1,2,82,1,3,24,228],[82,1,5,4,128,8],[145,1,141,137],[140,2],[144,2,1],[160],[80,500,243],[80,6,19,4,222,221],[80,410,80,80,80,2,136,4],[80,310,80,80,80,3,136,4],[80,210,80,80,80,5,136,4],[80,110,80,80,80,7,136,4],[80,10,80,80,80,1,136,4],[145,2,141,137],[136,22],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Procedure with parameter",author:"Oxford University",date:"19/04/2016",time:"10:17:36",code:"# ParameterProc\n\ndef prong(length):\n  forward(length)\n  blot(length//20)\n  back(length)\n\ndef main():\n  for count in range(360,0,-1):\n    randcol(10)\n    prong(count+100)\n    right(61)",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:1,lines:"6"},{name:"forward",level:1,count:1,lines:"4"},{name:"right",level:1,count:1,lines:"12"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"5"}],total:1},{category:"Other Turtle commands",expressions:[{name:"randcol",level:1,count:1,lines:"10"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"9"},{name:"def",level:2,count:2,lines:"3 8"}],total:3},{category:"Subroutine calls",expressions:[{name:"prong",level:0,count:1,lines:"11"}],total:1}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,5,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,21],[140,1],[144,1,2],[98,1,2],[82,1,2,227],[82,1,2,80,20,28,243],[82,1,2,228],[145,1,141,137],[140,2],[144,2,2],[80,360],[98,2,2,80,0],[82,2,2,66,129,20],[80,10,19,4,222,221],[82,2,2,80,100,24,136,4],[80,61,230],[82,2,2,5,128,14],[145,2,141,137],[136,11],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Painting application",author:"Oxford University",date:"19/04/2016",time:"10:40:43",code:"# PaintApp\n\ndef setbrushwidth(wdth):\n  global brushwidth,brushcolour\n  brushwidth=0\n  colour(black)\n  for count in range(0,5,1):\n    setxy(625+count*50,875)\n    blot(8+count*2)\n  colour(brushcolour)\n  brushwidth=wdth\n  recolour(((brushwidth+16)*25)+25,875,lightred)\n\ndef setbrushcolour(clr):\n  global brushcolour\n  brushcolour=clr\n  colour(clr)\n  setxy(975,875)\n  blot(16)\n\ndef paintbrush(x,y):\n  global brushwidth\n  setxy(x,y)\n  blot(brushwidth)\n\ndef paintcan(x,y):\n  global brushcolour\n  recolour(x,y,brushcolour)\n\ndef setup():\n\n  def square(col):\n    movexy(50,0)\n    movexy(0,50)\n    movexy(-50,0)\n    movexy(0,-50)\n    colour(col)\n    polygon(4)\n\n  def text(s):\n    colour(black)\n    print(s,0,20)\n\n  colour(lightred)\n  setxy(0,850)\n  drawxy(1000,0)\n  setxy(0,900)\n  drawxy(1000,0)\n  setxy(450,850)\n  drawxy(0,50)\n  setxy(850,850)\n  drawxy(0,50)\n  setxy(10,858)\n  text('Left-click to draw, right-click to fill')\n  setxy(450+10,858)\n  text('Brush width:')\n  setxy(850+10,858)\n  text('Colour:')\n  setxy(0,900)\n  for count in range(1,21,1):\n    square(rgb(count))\n    movexy(0,50)\n    square(rgb(count+30))\n    movexy(50,-50)\n  setbrushwidth(8)\n  setbrushcolour(black)\n\ndef main():\n  global brushwidth,brushcolour\n  setup()\n  while True:\n    if ?lmouse>0:\n      if ?mousey>900:\n        setbrushcolour(pixcol(?mousex,?mousey))\n      else:\n        if ((?mousey>850) and ((?mousex>600) and (?mousex<850))):\n          setbrushwidth(((?mousex//50)*2)-16)\n        else:\n          if ?mousey<850-brushwidth:\n            paintbrush(?mousex,?mousey)\n    if (?rmouse>0) and (?mousey<850):\n      paintcan(?mousex,?mousey)\n    update()",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:4,lines:"46 48 50 52"},{name:"movexy",level:2,count:6,lines:"33 34 35 36 62 64"}],total:10},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:11,lines:"8 18 23 45 47 49 51 53 55 57 59"}],total:11},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:3,lines:"9 19 24"},{name:"polygon",level:2,count:1,lines:"38"}],total:4},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:6,lines:"6 10 17 37 41 44"},{name:"rgb",level:3,count:2,lines:"61 63"}],total:8},{category:"Canvas operations",expressions:[{name:"update",level:1,count:1,lines:"83"},{name:"pixcol",level:3,count:1,lines:"74"},{name:"recolour",level:3,count:2,lines:"12 28"}],total:4},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"42"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"72 73 76 79 81"},{name:"else",level:1,count:2,lines:"75 78"},{name:"for",level:1,count:2,lines:"7 60"},{name:"while",level:2,count:1,lines:"71"},{name:"def",level:2,count:8,lines:"3 14 21 26 30 32 40 68"}],total:18},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:5,lines:"4 15 22 27 69"}],total:5},{category:"Subroutine calls",expressions:[{name:"text",level:0,count:3,lines:"54 56 58"},{name:"square",level:0,count:2,lines:"61 63"},{name:"setbrushwidth",level:0,count:2,lines:"65 77"},{name:"setbrushcolour",level:0,count:2,lines:"66 74"},{name:"setup",level:0,count:1,lines:"70"},{name:"paintbrush",level:0,count:1,lines:"80"},{name:"paintcan",level:0,count:1,lines:"82"}],total:12}],pcode:[[80,19,1,1,80,0,113,80,5,2,113,4,80,7,115,80,26,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,101],[140,1],[144,1,3],[98,1,2],[80,0,97,25],[80,0,221],[80,0],[98,1,3,80,5],[82,1,3,67,129,15],[80,625,82,1,3,80,50,26,24,80,875,224],[80,8,82,1,3,80,2,26,24,243],[82,1,3,4,128,10],[81,26,221],[82,1,2,97,25],[81,25,80,16,24,80,25,26,80,25,24,80,875,80,13458524,252],[145,1,141,137],[140,2],[144,2,2],[98,2,2],[82,2,2,97,26],[82,2,2,221],[80,975,80,875,224],[80,16,243],[145,2,141,137],[140,3],[144,3,3],[98,3,3,98,3,2],[82,3,2,82,3,3,224],[81,25,243],[145,3,141,137],[140,4],[144,4,3],[98,4,3,98,4,2],[82,4,2,82,4,3,81,26,252],[145,4,141,137],[140,6],[144,6,2],[98,6,2],[80,50,80,0,225],[80,0,80,50,225],[80,50,16,80,0,225],[80,0,80,50,16,225],[82,6,2,221],[80,4,241],[145,6,141,137],[140,7],[144,7,2],[98,7,2],[80,0,221],[82,7,2,80,0,80,20,61],[145,7,141,137],[140,5],[144,5,2],[80,13458524,221],[80,0,80,850,224],[80,1e3,80,0,226],[80,0,80,900,224],[80,1e3,80,0,226],[80,450,80,850,224],[80,0,80,50,226],[80,850,80,850,224],[80,0,80,50,226],[80,10,80,858,224],[87,76,101,102,116,45,99,108,105,99,107,32,116,111,32,100,114,97,119,44,32,114,105,103,104,116,45,99,108,105,99,107,32,116,111,32,102,105,108,108,0,146,136,48],[80,450,80,10,24,80,858,224],[87,66,114,117,115,104,32,119,105,100,116,104,58,0,146,136,48],[80,850,80,10,24,80,858,224],[87,67,111,108,111,117,114,58,0,146,136,48],[80,0,80,900,224],[80,1],[98,5,2,80,21],[82,5,2,67,129,80],[82,5,2,222,136,38],[80,0,80,50,225],[82,5,2,80,30,24,222,136,38],[80,50,80,50,16,225],[82,5,2,4,128,73],[80,8,136,4],[80,0,136,19],[145,5,141,137],[140,8],[144,8,1],[136,54],[80,-1,129,100],[80,-1,184,80,0,67,129,96],[80,-8,184,80,900,67,129,91],[80,-7,184,80,-8,184,210,136,19],[128,96],[80,-8,184,80,850,67,80,-7,184,80,600,67,80,-7,184,80,850,66,9,9,129,94],[80,-7,184,80,50,28,80,2,26,80,16,25,136,4],[128,96],[80,-8,184,80,850,81,25,25,66,129,96],[80,-7,184,80,-8,184,136,27],[80,-2,184,80,0,67,80,-8,184,80,850,66,9,129,98],[80,-7,184,80,-8,184,136,33],[162],[128,86],[145,8,141,137],[136,83],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Olympic rings 2 (with variable)",author:"Oxford University",date:"19/04/2016",time:"09:53:24",code:"# OlympicRings2\n\ndef main():\n  ringsize=130\n  thickness(20)\n  penup()\n  forward(50)\n  circle(ringsize)\n  left(90)\n  forward(300)\n  colour(blue)\n  circle(ringsize)\n  back(600)\n  colour(red)\n  circle(ringsize)\n  forward(150)\n  right(90)\n  back(125)\n  colour(lime)\n  circle(ringsize)\n  left(90)\n  forward(300)\n  colour(yellow)\n  circle(ringsize)",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:2,lines:"13 18"},{name:"forward",level:1,count:4,lines:"7 10 16 22"},{name:"left",level:1,count:2,lines:"9 21"},{name:"right",level:1,count:1,lines:"17"}],total:9},{category:"Turtle: drawing shapes",expressions:[{name:"circle",level:1,count:5,lines:"8 12 15 20 24"}],total:5},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:4,lines:"11 14 19 23"},{name:"penup",level:1,count:1,lines:"6"},{name:"thickness",level:1,count:1,lines:"5"}],total:6},{category:"Command structures",expressions:[{name:"def",level:2,count:1,lines:"3"}],total:1}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,28],[140,1],[144,1,2],[80,130,98,1,2],[80,20,220],[160],[80,50,227],[82,1,2,242],[80,90,229],[80,300,227],[80,255,221],[82,1,2,242],[80,600,228],[80,16711680,221],[82,1,2,242],[80,150,227],[80,90,230],[80,125,228],[80,65280,221],[82,1,2,242],[80,90,229],[80,300,227],[80,16776960,221],[82,1,2,242],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Olympic rings 1 (using PENUP)",author:"Oxford University",date:"19/04/2016",time:"09:50:27",code:"# OlympicRings1\n\ndef main():\n  thickness(20)\n  penup()\n  forward(50)\n  circle(130)\n  left(90)\n  forward(300)\n  colour(blue)\n  circle(130)\n  back(600)\n  colour(red)\n  circle(130)\n  forward(150)\n  right(90)\n  back(125)\n  colour(lime)\n  circle(130)\n  left(90)\n  forward(300)\n  colour(yellow)\n  circle(130)",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:2,lines:"12 17"},{name:"forward",level:1,count:4,lines:"6 9 15 21"},{name:"left",level:1,count:2,lines:"8 20"},{name:"right",level:1,count:1,lines:"16"}],total:9},{category:"Turtle: drawing shapes",expressions:[{name:"circle",level:1,count:5,lines:"7 11 14 19 23"}],total:5},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:4,lines:"10 13 18 22"},{name:"penup",level:1,count:1,lines:"5"},{name:"thickness",level:1,count:1,lines:"4"}],total:6},{category:"Command structures",expressions:[{name:"def",level:2,count:1,lines:"3"}],total:1}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,27],[140,1],[144,1,1],[80,20,220],[160],[80,50,227],[80,130,242],[80,90,229],[80,300,227],[80,255,221],[80,130,242],[80,600,228],[80,16711680,221],[80,130,242],[80,150,227],[80,90,230],[80,125,228],[80,65280,221],[80,130,242],[80,90,229],[80,300,227],[80,16776960,221],[80,130,242],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Noughts and crosses",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Nim",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Nested FOR loops",author:"Oxford University",date:"19/04/2016",time:"09:55:44",code:"# NestedLoops\n\ndef main():\n  penup()\n  for countblot in range(0,10,1):\n    forward(260)\n    colour(black)\n    blot(150)\n    colour(rgb(countblot+1))\n    for countcirc in range(1,26,1):\n      circle(countcirc*8)\n    back(260)\n    right(36)",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:1,lines:"12"},{name:"forward",level:1,count:1,lines:"6"},{name:"right",level:1,count:1,lines:"13"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"8"},{name:"circle",level:1,count:1,lines:"11"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"7 9"},{name:"penup",level:1,count:1,lines:"4"},{name:"rgb",level:3,count:1,lines:"9"}],total:4},{category:"Command structures",expressions:[{name:"for",level:1,count:2,lines:"5 10"},{name:"def",level:2,count:1,lines:"3"}],total:3}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,23],[140,1],[144,1,3],[160],[80,0],[98,1,2,80,10],[82,1,2,67,129,22],[80,260,227],[80,0,221],[80,150,243],[82,1,2,80,1,24,222,221],[80,1],[98,1,3,80,26],[82,1,3,67,129,19],[82,1,3,80,8,26,242],[82,1,3,4,128,15],[80,260,228],[80,36,230],[82,1,2,4,128,8],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Multiple bouncing balls",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Moving ball (using variables)",author:"Oxford University",date:"19/04/2016",time:"10:47:04",code:"# MovingBall\n\ndef main():\n  x=100\n  y=700\n  for count in range(0,100,1):\n    noupdate()\n    colour(white)\n    blot(51)\n    x=x+8\n    y=y-4\n    setxy(x,y)\n    colour(red)\n    blot(50)\n    update()\n    pause(5)",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:1,lines:"12"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"9 14"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"8 13"}],total:2},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"7"},{name:"update",level:1,count:1,lines:"15"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"16"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"6"},{name:"def",level:2,count:1,lines:"3"}],total:2}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,23],[140,1],[144,1,4],[80,100,98,1,2],[80,700,98,1,3],[80,0],[98,1,4,80,100],[82,1,4,67,129,22],[163],[80,16777215,221],[80,51,243],[82,1,2,80,8,24,98,1,2],[82,1,3,80,4,25,98,1,3],[82,1,2,82,1,3,224],[80,16711680,221],[80,50,243],[162],[80,5,178],[82,1,4,4,128,9],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Mathematical functions",author:"University of Oxford",date:"29/09/2016",time:"17:56:55",code:"# MathFunctions\n\ndef show(s,n):\n  global a,b,denominator,decimals\n  writeline(s+'('+str(a)+'/'+str(b)+') = '+qstr(n,denominator,decimals))\n\ndef selectab():\n  global a,b\n  a=randint(100,999)\n  b=randint(100,999)\n\ndef main():\n  global a,b,denominator,decimals\n  decimals=4\n  denominator=1000000\n  output(-1,white,-1)\n  writeline('This program selects two random numbers a and b, in the')\n  writeline('range 100-999, and then outputs various mathematical')\n  writeline('functions of the fraction a/b. The results are expressed')\n  writeline('to '+str(decimals)+' decimal places, and a denominator of '+str(denominator)+' is')\n  writeline('used in the calculations to provide precision, even')\n  writeline('though the Turtle functions strictly operate only on')\n  writeline('integers and produce integer results.')\n  writeline('')\n  selectab()\n  writeline('a='+str(a)+'; b='+str(b))\n  writeline('a/b = '+str(a)+'/'+str(b)+' = '+qstr(a,b,decimals))\n  writeline('')\n  show('square',power(a,b,2,denominator))\n  show('square root',root(a,b,2,denominator))\n  show('cube',power(a,b,3,denominator))\n  show('cube root',root(a,b,3,denominator))\n  writeline('')\n  show('hypot',hypot(a,b,denominator))\n  show('calculated hypot',sqrt(a*a+b*b,denominator))\n  writeline('')\n  show('sin',sin(a,b,denominator))\n  show('cos',cos(a,b,denominator))\n  show('tan',tan(a,b,denominator))\n  writeline('')\n  show('ln',ln(a,b,denominator))\n  if divmult(a,b,1000)+ln(denominator,1,1000)>ln(maxint,1,1000):\n    writeline('EXP('+str(a)+'/'+str(b)+') would give numerical overflow, because')\n    writeline('the result*'+str(denominator)+' would be greater than '+str(maxint))\n  else:\n    show('exp',exp(a,b,denominator))\n  show('log10',log10(a,b,denominator))\n  if divmult(a,b,1000)+log10(denominator,1,1000)>log10(maxint,1,1000):\n    writeline('ANTILOG('+str(a)+'/'+str(b)+') would give numerical overflow, because')\n    writeline('the result*'+str(denominator)+' would be greater than '+str(maxint))\n  else:\n    show('antilog',antilog(a,b,denominator))\n  writeline('')\n  if a>b:\n    writeline('ARCCOS and ARCSIN are not defined for '+str(a)+'/'+str(b)+' = '+qstr(a,b,decimals))\n  else:\n    show('arccos',acos(a,b,denominator))\n    show('arcsin',asin(a,b,denominator))\n  show('arctan',atan(a,b,denominator))",usage:[{category:"Other Turtle commands",expressions:[{name:"output",level:2,count:1,lines:"16"}],total:1},{category:"General arithmetic functions",expressions:[{name:"hypot",level:2,count:1,lines:"34"},{name:"randint",level:2,count:2,lines:"9 10"},{name:"sqrt",level:2,count:1,lines:"35"},{name:"divmult",level:3,count:2,lines:"42 48"},{name:"maxint",level:3,count:4,lines:"42 44 48 50"},{name:"power",level:3,count:2,lines:"29 31"},{name:"root",level:3,count:2,lines:"30 32"}],total:14},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:1,lines:"38"},{name:"exp",level:2,count:1,lines:"46"},{name:"ln",level:2,count:3,lines:"41 42"},{name:"sin",level:2,count:1,lines:"37"},{name:"tan",level:2,count:1,lines:"39"},{name:"acos",level:3,count:1,lines:"57"},{name:"antilog",level:3,count:1,lines:"52"},{name:"asin",level:3,count:1,lines:"58"},{name:"atan",level:3,count:1,lines:"59"},{name:"log10",level:3,count:3,lines:"47 48"}],total:14},{category:"String operations",expressions:[{name:"writeline",level:1,count:21,lines:"5 17 18 19 20 21 22 23 24 26 27 28 33 36 40 43 44 49 50 53 55"}],total:21},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:18,lines:"5 20 26 27 43 44 49 50 55"},{name:"qstr",level:2,count:3,lines:"5 27 55"}],total:21},{category:"Command structures",expressions:[{name:"if",level:1,count:3,lines:"42 48 54"},{name:"else",level:1,count:3,lines:"45 51 56"},{name:"def",level:2,count:3,lines:"3 7 12"}],total:9},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:3,lines:"4 8 13"}],total:3},{category:"Subroutine calls",expressions:[{name:"selectab",level:0,count:1,lines:"25"},{name:"show",level:0,count:16,lines:"29 30 31 32 34 35 37 38 39 41 46 47 52 57 58 59"}],total:17}],pcode:[[80,14,1,1,80,0,113,80,5,2,113,4,80,9,115,80,23,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,63],[140,1],[144,1,3],[98,1,3,98,1,2],[82,1,2,87,40,0,54,81,20,49,54,87,47,0,54,81,21,49,54,87,41,32,61,32,0,54,82,1,3,81,22,81,23,52,54,190,191,147],[145,1,141,137],[140,2],[144,2,1],[80,100,80,999,2,1,3,4,2,25,19,24,97,20],[80,100,80,999,2,1,3,4,2,25,19,24,97,21],[145,2,141,137],[140,3],[144,3,1],[80,4,97,23],[80,1e6,97,22],[80,1,16,80,16777215,80,1,16,166],[87,84,104,105,115,32,112,114,111,103,114,97,109,32,115,101,108,101,99,116,115,32,116,119,111,32,114,97,110,100,111,109,32,110,117,109,98,101,114,115,32,97,32,97,110,100,32,98,44,32,105,110,32,116,104,101,0,190,191],[87,114,97,110,103,101,32,49,48,48,45,57,57,57,44,32,97,110,100,32,116,104,101,110,32,111,117,116,112,117,116,115,32,118,97,114,105,111,117,115,32,109,97,116,104,101,109,97,116,105,99,97,108,0,190,191],[87,102,117,110,99,116,105,111,110,115,32,111,102,32,116,104,101,32,102,114,97,99,116,105,111,110,32,97,47,98,46,32,84,104,101,32,114,101,115,117,108,116,115,32,97,114,101,32,101,120,112,114,101,115,115,101,100,0,190,191],[87,116,111,32,0,81,23,49,54,87,32,100,101,99,105,109,97,108,32,112,108,97,99,101,115,44,32,97,110,100,32,97,32,100,101,110,111,109,105,110,97,116,111,114,32,111,102,32,0,54,81,22,49,54,87,32,105,115,0,54,190,191,147],[87,117,115,101,100,32,105,110,32,116,104,101,32,99,97,108,99,117,108,97,116,105,111,110,115,32,116,111,32,112,114,111,118,105,100,101,32,112,114,101,99,105,115,105,111,110,44,32,101,118,101,110,0,190,191],[87,116,104,111,117,103,104,32,116,104,101,32,84,117,114,116,108,101,32,102,117,110,99,116,105,111,110,115,32,115,116,114,105,99,116,108,121,32,111,112,101,114,97,116,101,32,111,110,108,121,32,111,110,0,190,191],[87,105,110,116,101,103,101,114,115,32,97,110,100,32,112,114,111,100,117,99,101,32,105,110,116,101,103,101,114,32,114,101,115,117,108,116,115,46,0,190,191],[87,0,190,191],[136,9],[87,97,61,0,81,20,49,54,87,59,32,98,61,0,54,81,21,49,54,190,191,147],[87,97,47,98,32,61,32,0,81,20,49,54,87,47,0,54,81,21,49,54,87,32,61,32,0,54,81,20,81,21,81,23,52,54,190,191,147],[87,0,190,191],[87,115,113,117,97,114,101,0,81,20,81,21,80,2,81,22,36,146,136,4],[87,115,113,117,97,114,101,32,114,111,111,116,0,81,20,81,21,80,2,81,22,35,146,136,4],[87,99,117,98,101,0,81,20,81,21,80,3,81,22,36,146,136,4],[87,99,117,98,101,32,114,111,111,116,0,81,20,81,21,80,3,81,22,35,146,136,4],[87,0,190,191],[87,104,121,112,111,116,0,81,20,81,21,81,22,34,146,136,4],[87,99,97,108,99,117,108,97,116,101,100,32,104,121,112,111,116,0,81,20,81,20,26,81,21,81,21,26,24,81,22,33,146,136,4],[87,0,190,191],[87,115,105,110,0,81,20,81,21,81,22,41,146,136,4],[87,99,111,115,0,81,20,81,21,81,22,42,146,136,4],[87,116,97,110,0,81,20,81,21,81,22,43,146,136,4],[87,0,190,191],[87,108,110,0,81,20,81,21,81,22,39,146,136,4],[81,20,81,21,80,1e3,32,81,22,80,1,80,1e3,39,24,255,80,1,80,1e3,39,67,129,48],[87,69,88,80,40,0,81,20,49,54,87,47,0,54,81,21,49,54,87,41,32,119,111,117,108,100,32,103,105,118,101,32,110,117,109,101,114,105,99,97,108,32,111,118,101,114,102,108,111,119,44,32,98,101,99,97,117,115,101,0,54,190,191,147],[87,116,104,101,32,114,101,115,117,108,116,42,0,81,22,49,54,87,32,119,111,117,108,100,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,0,54,255,49,54,190,191,147],[128,49],[87,101,120,112,0,81,20,81,21,81,22,40,146,136,4],[87,108,111,103,49,48,0,81,20,81,21,81,22,37,146,136,4],[81,20,81,21,80,1e3,32,81,22,80,1,80,1e3,37,24,255,80,1,80,1e3,37,67,129,54],[87,65,78,84,73,76,79,71,40,0,81,20,49,54,87,47,0,54,81,21,49,54,87,41,32,119,111,117,108,100,32,103,105,118,101,32,110,117,109,101,114,105,99,97,108,32,111,118,101,114,102,108,111,119,44,32,98,101,99,97,117,115,101,0,54,190,191,147],[87,116,104,101,32,114,101,115,117,108,116,42,0,81,22,49,54,87,32,119,111,117,108,100,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,0,54,255,49,54,190,191,147],[128,55],[87,97,110,116,105,108,111,103,0,81,20,81,21,81,22,38,146,136,4],[87,0,190,191],[81,20,81,21,67,129,59],[87,65,82,67,67,79,83,32,97,110,100,32,65,82,67,83,73,78,32,97,114,101,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,0,81,20,49,54,87,47,0,54,81,21,49,54,87,32,61,32,0,54,81,20,81,21,81,23,52,54,190,191,147],[128,61],[87,97,114,99,99,111,115,0,81,20,81,21,81,22,45,146,136,4],[87,97,114,99,115,105,110,0,81,20,81,21,81,22,44,146,136,4],[87,97,114,99,116,97,110,0,81,20,81,21,81,22,46,146,136,4],[145,3,141,137],[136,14],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Initialising Conway's Game of Life",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Initialising Conway's Game of Life",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Initialising Conway's Game of Life",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Mandelbrot set",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Initialising Conway's Game of Life",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Initialising Conway's Game of Life",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Initialising Conway's Game of Life",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Launching a rocket into orbit",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Knight's tour",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Iterated Prisoner's Dilemma",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Interference",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Spread of disease",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Movement under gravity",author:"Oxford University",date:"19/04/2016",time:"10:43:03",code:"# GravitySteps\n\ndef steps(s):\n  size=1000/s\n  setxy(0,1000)\n  thickness(1)\n  for count in range(0,s*2,1):\n    if count%2==1:\n      movexy(0,-size)\n    else:\n      movexy(size,0)\n  movexy(0,s*size)\n  movexy(-s*size,0)\n  colour(blue)\n  polygon(s*2+2)\n\ndef throwball(xvel,yvel,gravity,floor):\n  global turty\n  dec(turty)\n  while (turty!=floor):\n    colour(white)\n    blot(25)\n    movexy(xvel,yvel)\n    yvel=yvel+gravity\n    if turty>floor:\n      turty=floor\n    colour(red)\n    blot(24)\n    update()\n    pause(10)\n    noupdate()\n\ndef main():\n  global turtx,turty\n  steps(10)\n  setxy(950,75)\n  while not(turtx<75):\n    throwball(-2,-22,1,turty+100)\n  for bounce in range(0,10,1):\n    throwball(0,bounce*2-18,1,turty)",usage:[{category:"Turtle: relative movement",expressions:[{name:"movexy",level:2,count:5,lines:"9 11 12 13 23"}],total:5},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:2,lines:"5 36"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"22 28"},{name:"polygon",level:2,count:1,lines:"15"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"14 21 27"},{name:"thickness",level:1,count:1,lines:"6"}],total:4},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"31"},{name:"update",level:1,count:1,lines:"29"}],total:2},{category:"General arithmetic functions",expressions:[{name:"dec",level:1,count:1,lines:"19"}],total:1},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"30"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"8 25"},{name:"else",level:1,count:1,lines:"10"},{name:"for",level:1,count:2,lines:"7 39"},{name:"while",level:2,count:2,lines:"20 37"},{name:"def",level:2,count:3,lines:"3 17 33"}],total:10},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:2,lines:"18 34"}],total:2},{category:"Subroutine calls",expressions:[{name:"steps",level:0,count:1,lines:"35"},{name:"throwball",level:0,count:2,lines:"38 40"}],total:3}],pcode:[[80,14,1,1,80,0,113,80,5,2,113,4,80,5,115,80,19,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,54],[140,1],[144,1,4],[98,1,2],[80,1e3,82,1,2,27,98,1,3],[80,0,80,1e3,224],[80,1,220],[80,0],[98,1,4,82,1,2,80,2,26],[82,1,4,67,129,18],[82,1,4,80,2,29,80,1,64,129,16],[80,0,82,1,3,16,225],[128,17],[82,1,3,80,0,225],[82,1,4,4,128,11],[80,0,82,1,2,82,1,3,26,225],[82,1,2,16,82,1,3,26,80,0,225],[80,255,221],[82,1,2,80,2,26,80,2,24,241],[145,1,141,137],[140,2],[144,2,5],[98,2,5,98,2,4,98,2,3,98,2,2],[84,16,1,112,5,2,113],[81,16,82,2,5,65,129,40],[80,16777215,221],[80,25,243],[82,2,2,82,2,3,225],[82,2,3,82,2,4,24,98,2,3],[81,16,82,2,5,67,129,34],[82,2,5,97,16],[80,16711680,221],[80,24,243],[162],[80,10,178],[163],[128,27],[145,2,141,137],[140,3],[144,3,2],[80,10,136,4],[80,950,80,75,224],[81,15,80,75,66,8,129,48],[80,2,16,80,22,16,80,1,81,16,80,100,24,136,23],[128,45],[80,0],[98,3,2,80,10],[82,3,2,67,129,53],[80,0,82,3,2,80,2,26,80,18,25,80,1,81,16,136,23],[82,3,2,4,128,49],[145,3,141,137],[136,41],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Conway's Game of Life",author:"Oxford University",date:"19/04/2016",time:"10:35:44",code:"# GameOfLife\n\ndef next(x,y):\n  global width,height\n  numneighbours=0\n  for i in range(-1,2,1):\n    for j in range(-1,2,1):\n      numneighbours=numneighbours+(pixcol((x+width+i)%width,(y+height+j)%height)%2)\n  if (pixcol(x,y)%2)==0:\n    if numneighbours==3:\n      pixset(x,y,2)\n  else:\n    if (numneighbours<3) or (numneighbours>4):\n      pixset(x,y,#FFFFFF)\n\ndef main():\n  global width,height\n  width=32\n  height=32\n  canvas(0,0,width,height)\n  resolution(width,height)\n  for i in range(0,width+1,1):\n    for j in range(0,height+1,1):\n      if randint(0,6)==0:\n        pixset(i,j,1)\n      else:\n        pixset(i,j,#FFFFFC)\n  while ?key!=\\escape:\n    timeset(0)\n    noupdate()\n    for i in range(0,width+1,1):\n      for j in range(0,height+1,1):\n        next(i,j)\n    update()\n    noupdate()\n    for i in range(0,width+1,1):\n      for j in range(0,height+1,1):\n        if (pixcol(i,j) and 2)>0:\n          pixset(i,j,pixcol(i,j) xor 3)\n    update()",usage:[{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:2,lines:"30 35"},{name:"update",level:1,count:2,lines:"34 40"},{name:"canvas",level:2,count:1,lines:"20"},{name:"resolution",level:2,count:1,lines:"21"},{name:"pixcol",level:3,count:4,lines:"8 9 38 39"},{name:"pixset",level:3,count:5,lines:"11 14 25 27 39"}],total:15},{category:"General arithmetic functions",expressions:[{name:"randint",level:2,count:1,lines:"24"}],total:1},{category:"Input and timing routines",expressions:[{name:"timeset",level:2,count:1,lines:"29"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"9 10 13 24 38"},{name:"else",level:1,count:2,lines:"12 26"},{name:"for",level:1,count:8,lines:"6 7 22 23 31 32 36 37"},{name:"while",level:2,count:1,lines:"28"},{name:"def",level:2,count:2,lines:"3 16"}],total:18},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:2,lines:"4 17"}],total:2},{category:"Subroutine calls",expressions:[{name:"next",level:0,count:1,lines:"33"}],total:1}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,7,115,80,20,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,69],[140,1],[144,1,6],[98,1,3,98,1,2],[80,0,98,1,4],[80,1,16],[98,1,5,80,2],[82,1,5,67,129,17],[80,1,16],[98,1,6,80,2],[82,1,6,67,129,16],[82,1,4,82,1,2,81,19,24,82,1,5,24,81,19,29,82,1,3,81,20,24,82,1,6,24,81,20,29,210,80,2,29,24,98,1,4],[82,1,6,4,128,12],[82,1,5,4,128,9],[82,1,2,82,1,3,210,80,2,29,80,0,64,129,21],[82,1,4,80,3,64,129,20],[82,1,2,82,1,3,80,2,211],[128,23],[82,1,4,80,3,66,82,1,4,80,4,67,10,129,23],[82,1,2,82,1,3,80,16777215,211],[145,1,141,137],[140,2],[144,2,3],[80,32,97,19],[80,32,97,20],[80,0,80,0,81,19,81,20,208],[81,19,81,20,209],[80,0],[98,2,2,81,19,80,1,24],[82,2,2,67,129,42],[80,0],[98,2,3,81,20,80,1,24],[82,2,3,67,129,41],[80,0,80,6,2,1,3,4,2,25,19,24,80,0,64,129,39],[82,2,2,82,2,3,80,1,211],[128,40],[82,2,2,82,2,3,80,16777212,211],[82,2,3,4,128,34],[82,2,2,4,128,31],[80,-9,184,80,27,65,129,68],[80,0,177],[163],[80,0],[98,2,2,81,19,80,1,24],[82,2,2,67,129,54],[80,0],[98,2,3,81,20,80,1,24],[82,2,3,67,129,53],[82,2,2,82,2,3,136,4],[82,2,3,4,128,49],[82,2,2,4,128,46],[162],[163],[80,0],[98,2,2,81,19,80,1,24],[82,2,2,67,129,66],[80,0],[98,2,3,81,20,80,1,24],[82,2,3,67,129,65],[82,2,2,82,2,3,210,80,2,9,80,0,67,129,64],[82,2,2,82,2,3,82,2,2,82,2,3,210,80,3,11,211],[82,2,3,4,128,60],[82,2,2,4,128,57],[162],[128,42],[145,2,141,137],[136,24],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"FOR (counting) loop",author:"Oxford University",date:"19/04/2016",time:"09:54:25",code:"# ForLoop\n\ndef main():\n  for count in range(0,200,1):\n    forward(count//3)\n    right(5)\n    colour(red)\n    blot(200)\n    colour(black)\n    circle(200)",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:1,lines:"5"},{name:"right",level:1,count:1,lines:"6"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"8"},{name:"circle",level:1,count:1,lines:"10"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"7 9"}],total:2},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"4"},{name:"def",level:2,count:1,lines:"3"}],total:2}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,17],[140,1],[144,1,2],[80,0],[98,1,2,80,200],[82,1,2,67,129,16],[82,1,2,80,3,28,227],[80,5,230],[80,16711680,221],[80,200,243],[80,0,221],[80,200,242],[82,1,2,4,128,7],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Flocking behaviour",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Using Booleans",author:"Oxford University",date:"19/04/2016",time:"10:32:18",code:"# Flashlights\n\ndef drawit(blob):\n  temp=0\n  temp=blob\n  if blob:\n    randcol(10)\n    blot(25)\n  else:\n    colour(black)\n    blot(30)\n    randcol(10)\n    circle(25)\n\ndef main():\n  blot(1000)\n  thickness(8)\n  while True:\n    setx(randint(1,8)*111)\n    sety(randint(1,8)*111)\n    drawit(randint(0,1)==1)",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setx",level:1,count:1,lines:"19"},{name:"sety",level:1,count:1,lines:"20"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:3,lines:"8 11 16"},{name:"circle",level:1,count:1,lines:"13"}],total:4},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:1,lines:"10"},{name:"randcol",level:1,count:2,lines:"7 12"},{name:"thickness",level:1,count:1,lines:"17"}],total:4},{category:"General arithmetic functions",expressions:[{name:"randint",level:2,count:3,lines:"19 20 21"}],total:3},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"6"},{name:"else",level:1,count:1,lines:"9"},{name:"while",level:2,count:1,lines:"18"},{name:"def",level:2,count:2,lines:"3 15"}],total:5},{category:"Subroutine calls",expressions:[{name:"drawit",level:0,count:1,lines:"21"}],total:1}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,5,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,28],[140,1],[144,1,3],[98,1,2],[80,0,98,1,3],[82,1,2,98,1,3],[82,1,2,129,13],[80,10,19,4,222,221],[80,25,243],[128,17],[80,0,221],[80,30,243],[80,10,19,4,222,221],[80,25,242],[145,1,141,137],[140,2],[144,2,1],[80,1e3,243],[80,8,220],[80,-1,129,27],[80,1,80,8,2,1,3,4,2,25,19,24,80,111,26,217],[80,1,80,8,2,1,3,4,2,25,19,24,80,111,26,218],[80,0,80,1,2,1,3,4,2,25,19,24,80,1,64,136,4],[128,22],[145,2,141,137],[136,18],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Five turtles moving to the mouse",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Simple drawing with pauses",author:"Oxford University",date:"19/04/2016",time:"09:49:55",code:"# DrawPause\n\ndef main():\n  colour(green)\n  blot(100)\n  pause(1000)\n  colour(red)\n  forward(450)\n  pause(1000)\n  right(90)\n  thickness(9)\n  colour(blue)\n  pause(1000)\n  forward(300)",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:2,lines:"8 14"},{name:"right",level:1,count:1,lines:"10"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"5"}],total:1},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"4 7 12"},{name:"thickness",level:1,count:1,lines:"11"}],total:4},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:3,lines:"6 9 13"}],total:3},{category:"Command structures",expressions:[{name:"def",level:2,count:1,lines:"3"}],total:1}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,18],[140,1],[144,1,1],[80,2263842,221],[80,100,243],[80,1e3,178],[80,16711680,221],[80,450,227],[80,1e3,178],[80,90,230],[80,9,220],[80,255,221],[80,1e3,178],[80,300,227],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Spread of disease",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Spread of disease",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Spread of disease",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Digital clock (using IF and WHILE)",author:"University of Oxford",date:"29/09/2016",time:"16:22:24",code:"# DigitalClock\n\ndef showtime():\n  global hours,minutes\n  setxy(300,430)\n  box(400,130,white,False)\n  if hours<10:\n    hstring='0'+str(hours)\n  else:\n    hstring=str(hours)\n  if minutes<10:\n    mstring='0'+str(minutes)\n  else:\n    mstring=str(minutes)\n  print(hstring+':'+mstring,21,100)\n\ndef main():\n  global hours,minutes\n  blank(lightgreen)\n  setxy(250,390)\n  colour(maroon)\n  thickness(10)\n  box(500,210,lightbrown,True)\n  colour(black)\n  hours=0\n  minutes=0\n  while hours<12:\n    showtime()\n    pause(600)\n    inc(minutes)\n    if minutes==60:\n      inc(hours)\n      minutes=0\n  showtime()",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:2,lines:"5 20"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"box",level:2,count:2,lines:"6 23"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"21 24"},{name:"thickness",level:1,count:1,lines:"22"}],total:3},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"19"}],total:1},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:2,lines:"30 32"}],total:2},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"15"}],total:1},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:4,lines:"8 10 12 14"}],total:4},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"29"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:3,lines:"7 11 31"},{name:"else",level:1,count:2,lines:"9 13"},{name:"while",level:2,count:1,lines:"27"},{name:"def",level:2,count:2,lines:"3 17"}],total:8},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:2,lines:"4 18"}],total:2},{category:"Subroutine calls",expressions:[{name:"showtime",level:0,count:2,lines:"28 34"}],total:2}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,7,115,80,20,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,38],[140,1],[144,1,3],[80,300,80,430,224],[80,400,80,130,80,16777215,80,0,246],[81,19,80,10,66,129,11],[87,48,0,81,19,49,54,98,1,2,146],[128,12],[81,19,49,98,1,2,146],[81,20,80,10,66,129,15],[87,48,0,81,20,49,54,98,1,3,146],[128,16],[81,20,49,98,1,3,146],[82,1,2,87,58,0,54,82,1,3,54,80,21,80,100,189],[145,1,141,137],[140,2],[144,2,1],[80,10025880,248],[80,250,80,390,224],[80,8388608,221],[80,10,220],[80,500,80,210,80,11567184,80,-1,246],[80,0,221],[80,0,97,19],[80,0,97,20],[81,19,80,12,66,129,36],[136,4],[80,600,178],[84,20,1,112,4,2,113],[81,20,80,60,64,129,35],[84,19,1,112,4,2,113],[80,0,97,20],[128,28],[136,4],[145,2,141,137],[136,18],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Diffusion",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Cycling colours (using MOD)",author:"Oxford University",date:"19/04/2016",time:"10:29:51",code:"# CycleColours\n\ndef main():\n  global turtc\n  blank(black)\n  colinc=randint(0,4)\n  colcode=randint(1,20)\n  colour(rgb(colcode))\n  length=0\n  thickness(16)\n  while not(length>250):\n    colcode=(colcode+colinc)%20+1\n    colour(rgb(colcode))\n    length=length+1\n    forward(length)\n    right(30)",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:1,lines:"15"},{name:"right",level:1,count:1,lines:"16"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"8 13"},{name:"thickness",level:1,count:1,lines:"10"},{name:"rgb",level:3,count:2,lines:"8 13"}],total:5},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"5"}],total:1},{category:"General arithmetic functions",expressions:[{name:"randint",level:2,count:2,lines:"6 7"}],total:2},{category:"Command structures",expressions:[{name:"while",level:2,count:1,lines:"11"},{name:"def",level:2,count:1,lines:"3"}],total:2},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:1,lines:"4"}],total:1}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,20],[140,1],[144,1,4],[80,0,248],[80,0,80,4,2,1,3,4,2,25,19,24,98,1,2],[80,1,80,20,2,1,3,4,2,25,19,24,98,1,3],[82,1,3,222,221],[80,0,98,1,4],[80,16,220],[82,1,4,80,250,67,8,129,19],[82,1,3,82,1,2,24,80,20,29,80,1,24,98,1,3],[82,1,3,222,221],[82,1,4,80,1,24,98,1,4],[82,1,4,227],[80,30,230],[128,12],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Spiral of colours",author:"Oxford University",date:"19/04/2016",time:"10:13:25",code:"# ColourSpiral\n\ndef lineturn():\n  global length\n  forward(length)\n  right(60)\n\ndef main():\n  global length\n  blank(black)\n  forward(15)\n  thickness(27)\n  length=20\n  while length<=500:\n    randcol(40)\n    lineturn()\n    length=length+10",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:2,lines:"5 11"},{name:"right",level:1,count:1,lines:"6"}],total:3},{category:"Other Turtle commands",expressions:[{name:"randcol",level:1,count:1,lines:"15"},{name:"thickness",level:1,count:1,lines:"12"}],total:2},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"10"}],total:1},{category:"Command structures",expressions:[{name:"while",level:2,count:1,lines:"14"},{name:"def",level:2,count:2,lines:"3 8"}],total:3},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:2,lines:"4 9"}],total:2},{category:"Subroutine calls",expressions:[{name:"lineturn",level:0,count:1,lines:"16"}],total:1}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,6,115,80,19,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,21],[140,1],[144,1,1],[81,19,227],[80,60,230],[145,1,141,137],[140,2],[144,2,1],[80,0,248],[80,15,227],[80,27,220],[80,20,97,19],[81,19,80,500,68,129,20],[80,40,19,4,222,221],[136,4],[81,19,80,10,24,97,19],[128,15],[145,2,141,137],[136,9],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Analogue clock (using REPEAT)",author:"Oxford University",date:"19/04/2016",time:"10:22:45",code:"# Clock\n\ndef showhands():\n  global hours,minutes\n  colour(white)\n  blot(360)\n  colour(red)\n  direction(hours*30)\n  thickness(10)\n  forward(250)\n  back(250)\n  direction(minutes*6)\n  thickness(6)\n  forward(350)\n  back(350)\n\ndef main():\n  global hours,minutes\n  thickness(10)\n  circle(400)\n  hours=0\n  minutes=0\n  while not(hours==12):\n    while not(minutes==60):\n      showhands()\n      pause(600)\n      inc(minutes)\n    inc(hours)\n    minutes=0\n  showhands()",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:2,lines:"11 15"},{name:"forward",level:1,count:2,lines:"10 14"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:2,lines:"8 12"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"6"},{name:"circle",level:1,count:1,lines:"20"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"5 7"},{name:"thickness",level:1,count:3,lines:"9 13 19"}],total:5},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:2,lines:"27 28"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"26"}],total:1},{category:"Command structures",expressions:[{name:"while",level:2,count:2,lines:"23 24"},{name:"def",level:2,count:2,lines:"3 17"}],total:4},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:2,lines:"4 18"}],total:2},{category:"Subroutine calls",expressions:[{name:"showhands",level:0,count:2,lines:"25 30"}],total:2}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,7,115,80,20,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,35],[140,1],[144,1,1],[80,16777215,221],[80,360,243],[80,16711680,221],[81,19,80,30,26,219],[80,10,220],[80,250,227],[80,250,228],[81,20,80,6,26,219],[80,6,220],[80,350,227],[80,350,228],[145,1,141,137],[140,2],[144,2,1],[80,10,220],[80,400,242],[80,0,97,19],[80,0,97,20],[81,19,80,12,64,8,129,33],[81,20,80,60,64,8,129,30],[136,4],[80,600,178],[84,20,1,112,4,2,113],[128,25],[84,19,1,112,4,2,113],[80,0,97,20],[128,24],[136,4],[145,2,141,137],[136,18],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Circling circles",author:"Oxford University",date:"19/04/2016",time:"09:55:01",code:"# Circles\n\ndef main():\n  thickness(6)\n  penup()\n  blank(black)\n  colour(orange)\n  for count in range(0,36,1):\n    forward(200)\n    circle(200)\n    back(200)\n    right(10)\n    pause(25)",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:1,lines:"11"},{name:"forward",level:1,count:1,lines:"9"},{name:"right",level:1,count:1,lines:"12"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"circle",level:1,count:1,lines:"10"}],total:1},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:1,lines:"7"},{name:"penup",level:1,count:1,lines:"5"},{name:"thickness",level:1,count:1,lines:"4"}],total:3},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"6"}],total:1},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"13"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"8"},{name:"def",level:2,count:1,lines:"3"}],total:2}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,20],[140,1],[144,1,2],[80,6,220],[160],[80,0,248],[80,16755200,221],[80,0],[98,1,2,80,36],[82,1,2,67,129,19],[80,200,227],[80,200,242],[80,200,228],[80,10,230],[80,25,178],[82,1,2,4,128,11],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Cheetahs and gazelles",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Brownian motion",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Bouncing ball (using variables)",author:"Oxford University",date:"19/04/2016",time:"10:49:16",code:"# BouncingBall\n\ndef main():\n  x=100\n  y=700\n  xvel=8\n  yvel=-4\n  while 0<1:\n    noupdate()\n    colour(white)\n    blot(51)\n    x=x+xvel\n    y=y+yvel\n    setxy(x,y)\n    colour(red)\n    blot(50)\n    update()\n    pause(5)\n    if (x<50) or (x>949):\n      xvel=-xvel\n    if (y<50) or (y>949):\n      yvel=-yvel",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:1,lines:"14"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"11 16"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"10 15"}],total:2},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"9"},{name:"update",level:1,count:1,lines:"17"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"18"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"19 21"},{name:"while",level:2,count:1,lines:"8"},{name:"def",level:2,count:1,lines:"3"}],total:4}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,27],[140,1],[144,1,5],[80,100,98,1,2],[80,700,98,1,3],[80,8,98,1,4],[80,4,16,98,1,5],[80,0,80,1,66,129,26],[163],[80,16777215,221],[80,51,243],[82,1,2,82,1,4,24,98,1,2],[82,1,3,82,1,5,24,98,1,3],[82,1,2,82,1,3,224],[80,16711680,221],[80,50,243],[162],[80,5,178],[82,1,2,80,50,66,82,1,2,80,949,67,10,129,23],[82,1,4,16,98,1,4],[82,1,3,80,50,66,82,1,3,80,949,67,10,129,25],[82,1,5,16,98,1,5],[128,10],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Cellular automata",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Cellular automata",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"3D colour effects",author:"Oxford University",date:"19/04/2016",time:"10:33:37",code:"# Balls3D\n\ndef main():\n  global turtc\n  setxy(250,250)\n  colour(#00FFFF)\n  for count in range(240,0,-1):\n    blot(count)\n    turtc=turtc+#10000\n  right(60)\n  setxy(750,250)\n  colour(#D2691E)\n  for count in range(40,0,-1):\n    blot(count*6)\n    forward(3)\n    turtc=turtc+#10102\n  setxy(250,750)\n  colour(#D2691E)\n  for count in range(40,0,-1):\n    blot(count*6)\n    forward(3)\n    turtc=turtc+#10102\n  setxy(750,750)\n  colour(#FFA500)\n  for count in range(80,0,-1):\n    blot(count*3)\n    forward(2)\n    turtc=turtc+#101",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:3,lines:"15 21 27"},{name:"right",level:1,count:1,lines:"10"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:4,lines:"5 11 17 23"}],total:4},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:4,lines:"8 14 20 26"}],total:4},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:4,lines:"6 12 18 24"}],total:4},{category:"Command structures",expressions:[{name:"for",level:1,count:4,lines:"7 13 19 25"},{name:"def",level:2,count:1,lines:"3"}],total:5},{category:"Variable scope modifiers",expressions:[{name:"global",level:2,count:1,lines:"4"}],total:1}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,43],[140,1],[144,1,2],[80,250,80,250,224],[80,65535,221],[80,240],[98,1,2,80,0],[82,1,2,66,129,14],[82,1,2,243],[81,17,80,65536,24,97,17],[82,1,2,5,128,9],[80,60,230],[80,750,80,250,224],[80,13789470,221],[80,40],[98,1,2,80,0],[82,1,2,66,129,24],[82,1,2,80,6,26,243],[80,3,227],[81,17,80,65794,24,97,17],[82,1,2,5,128,18],[80,250,80,750,224],[80,13789470,221],[80,40],[98,1,2,80,0],[82,1,2,66,129,33],[82,1,2,80,6,26,243],[80,3,227],[81,17,80,65794,24,97,17],[82,1,2,5,128,27],[80,750,80,750,224],[80,16753920,221],[80,80],[98,1,2,80,0],[82,1,2,66,129,42],[82,1,2,80,3,26,243],[80,2,227],[81,17,80,257,24,97,17],[82,1,2,5,128,36],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Cellular automata",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Firing a cannon (automatic)",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Asking for typed input",author:"University of Oxford",date:"29/09/2016",time:"16:56:03",code:"# AskInput\n\ndef main():\n  name=input('What is your name?')\n  writeline('')\n  writeline('Hello, '+name+',')\n  writeline('How are you?')",usage:[{category:"String operations",expressions:[{name:"writeline",level:1,count:3,lines:"5 6 7"}],total:3},{category:"Input and timing routines",expressions:[{name:"input",level:1,count:1,lines:"4"}],total:1},{category:"Command structures",expressions:[{name:"def",level:2,count:1,lines:"3"}],total:1}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,11],[140,1],[144,1,2],[87,87,104,97,116,32,105,115,32,121,111,117,114,32,110,97,109,101,63,0,190,191,188,98,1,2,146],[87,0,190,191],[87,72,101,108,108,111,44,32,0,82,1,2,54,87,44,0,54,190,191],[87,72,111,119,32,97,114,101,32,121,111,117,63,0,190,191],[145,1,141,137],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Python",version:11,name:"Firing a cannon (manual)",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"# this program is not available in Turtle Python",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Text and arrow (using PRINT)",author:"University of Oxford",date:"22/09/2016",time:"22:55:14",code:"PROGRAM YouAreHere;\nBEGIN\n  colour(red);\n  blot(20);\n  colour(violet);\n  print('You are here',4,36);\n  setxy(790,540);\n  colour(blue);\n  drawxy(40,0);\n  drawxy(28,-28);\n  drawxy(0,-40);\n  drawxy(-28,-28);\n  drawxy(-40,0);\n  setxy(500,500);\n  setxy(530,480);\n  setxy(535,505);\n  setxy(500,500);\n  polyline(5);\n  polygon(3)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:5,lines:"9 10 11 12 13"}],total:5},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:5,lines:"7 14 15 16 17"}],total:5},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"4"},{name:"polygon",level:2,count:1,lines:"19"},{name:"polyline",level:2,count:1,lines:"18"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"3 5 8"}],total:3},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"6"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,5,115,80,15,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,16711680,221],[80,20,243],[80,9055202,221],[87,89,111,117,32,97,114,101,32,104,101,114,101,0,80,4,80,36,189],[80,790,80,540,224],[80,255,221],[80,40,80,0,226],[80,28,80,28,16,226],[80,0,80,40,16,226],[80,28,16,80,28,16,226],[80,40,16,80,0,226],[80,500,80,500,224],[80,530,80,480,224],[80,535,80,505,224],[80,500,80,500,224],[80,5,240],[80,3,241],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Wave superposer",author:"University of Oxford",date:"22/09/2016",time:"22:56:30",code:"PROGRAM WaveSuperposer31;\n\n{* WSv3.1 - DO NOT MODIFY - copyright Hugh Wallis 23/3/16 **************************}\n{* Dev version of WaveSuperposer24.tgp *********************************************}\n\n{* CONSTANTS - CBMv2.0 DO NOT MODIFY Constants *************************************}\nConst textRow=0;tvalRow=1;spinRow=2;buttRow=3;fine=1;course=0;\nConst normText=0;boldText=1;large=1;small=0;noBorder=0;withBorder=1;\nConst noBackground=0;withBackground=1;\n{* END CBMv2.0 DO NOT MODIFY Constants *********************************************}\n\nCONST maxwaves=60;maxAmplitude=500;maxPhase=360;amplitudeInc=5;phaseInc=2;maxDecayRate=10;\nCONST precDecay=100; {decay rate precision multiplier}\nVAR exitFlag,count,numwaves,selectedwave,multSumWaves,decayRate,infoFlag: integer;\nVAR divideBy,granularity:integer;\nVAR keypressed:string;\nVAR wavesShown,buttonText:string;\nVAR amplitudes,phases,onoff,decayMult: array[1..maxwaves] of integer;\n\n{* UTILITIES - CBMv2.0 DO NOT MODIFY Procedures ************************************}\n{* Internal Utilities *}\nFunction getNumDigits(num:integer):integer;\n{Returns the number of digits in num (for right justification in outValue)}\nVar numDigits:integer;\nBegin\n num:=abs(num);\n if (num = 0) then numDigits:=1\n else\n begin\n  numDigits:=0;\n  while num > 0 do\n   begin\n    num:=num/10;\n    inc(numDigits);\n   end;\n end;\n result:=numDigits;\nEnd;\nProcedure outText(x,y,textType,textColour:integer;text:string);\n{Prints normal/bold text with slightly different start positions}\nVar height:integer;\nBegin\n if textType = boldText then y:=y-3 else y:=y-1;\n setxy(x+5,y);\n colour(textColour);\n if textType = boldText then print(text,16,18) else print(text,0,18);\nEnd;\nProcedure outValue(x,y,numWidth,value,textColour:integer);\n{Prints value in box allowing for numWidth digits, right justified}\nVar width,height,minusShift,charWidth:integer;\nvar valueStr:string;\nBegin\n charWidth:=13;\n minusShift:=8;\n width:=12+charWidth*numWidth;\n height:=24;\n {Display borders}\n pendown; setxy(x+width,y); colour(midgrey); drawxy(0,height); drawxy(-width,0);\n colour(darkgrey); drawxy(0,-height-1); drawxy(width,0);\n {Background}\n setxy(x+1,y+1);setxy(x+width-2,y+1);setxy(x+width-2,y+height-2);setxy(x+1,y\n+height-2);\n colour(black);\n polygon(4);\n {recolour(x+1,y+1,black);}\n {Display value}\n if (value < 0) then \n  setxy(x+5+charWidth*(numWidth-getNumDigits(value))-minusShift,y-2)\n else\n  setxy(x+5+charWidth*(numWidth-getNumDigits(value)),y-2);\n colour(textColour);\n valueStr:=str(value);\n print(valueStr,0,18);\nEnd;\nProcedure spinButton(x,y:integer;symbol:char;buttonColour:integer);\n{Prints a spinner button with symbol in buttonColour} \nVar width,height:integer;\nBegin\n width:=24;\n height:=24;\n {Display borders}\n pendown;\n setxy(x+width,y);\n colour(darkgrey);\n drawxy(0,height);\n drawxy(-width,0);\n colour(lightgrey);\n drawxy(0,-height-1);\n drawxy(width,0);\n {Background}\n recolour(x+1,y+1,buttonColour);\n {Display symbol}\n setxy(x+6,y-14);\n colour(black);\n print(symbol,4,24);\nEnd;\n{* End Internal Utilities *}\n{* Available for external use: Button, smallButton, Border, Borders, Spinner *}\nProcedure Button(x,y,numChars:integer;bText:string;buttonColour,textColour:integer);\n{Prints larger button for displaying outside a Control board}\n{Note: Parameter bText needs to be declared as a pstring before being passed into here}\nVar width,height:integer;\nBegin\n width:=8+13*numChars;\n height:=30;\n y:=y-2;\n {Display borders}\n pendown;\n setxy(x+width,y);\n colour(darkgrey);\n drawxy(0,height);\n drawxy(-width,0);\n colour(lightgrey);\n drawxy(0,-height-1);\n drawxy(width,0);\n {Background}\n recolour(x+1,y+1,buttonColour);\n {Display symbol}\n setxy(x+8,y-2);\n colour(textColour);\n print(bText,0,22);\nEnd;\nProcedure smallButton\n(x,y,numChars:integer;bText:string;buttonColour,textColour:integer);\n{Prints smaller button for displaying within a Control board}\n{Note: Parameter bText needs to be declared as a pstring before being passed into here}\nVar width,height:integer;\nBegin\n width:=8+13*numChars;\n height:=24;\n {Display borders}\n pendown;\n setxy(x+width,y);\n colour(darkgrey);\n drawxy(0,height);\n drawxy(-width,0);\n colour(lightgrey);\n drawxy(0,-height-1);\n drawxy(width,0);\n {Background}\n recolour(x+1,y+1,buttonColour);\n {Display symbol}\n setxy(x+4,y-1);\n colour(textColour);\n print(bText,0,18);\nEnd;\nProcedure Border(x,y,width,height,highcolour,lowcolour,backColour,backFlag:integer);\n{Display border only (no background) with pixel location/dimensions and highlighting \ncolours}\nBegin\n pendown;\n if (backFlag = withBackground) then\n  begin\n   setxy(x+1,y+1);setxy(x-2+width,y+1);setxy(x-2+width,y-2+height);setxy(x+1,y-\n2+height);\n   colour(backColour);\n   polygon(4);\n  end; \n setxy(x+width,y);\n colour(lowcolour);\n drawxy(0,height);\n drawxy(-width,0);\n colour(highcolour);\n drawxy(0,-height-1);\n drawxy(width,0);\nEnd;\nProcedure Borders\n(x,y,numChars,numDigits,numRows,highColour,lowColour,backColour,borderFlag,backFlag:integer);\n{Display board border with background at pixel location, but dimensions specified in no. \nchars+digits and rows}\nVar width,height,spinnerShift:integer;\nBegin\n spinnerShift:=34;\n height:=8+numRows*spinnerShift;\n width:=8+(numChars+numDigits+6)*13;\n if borderFlag = withBorder then\n  {Display border} \n  begin\n    Border(x,y,width,height,highColour,lowColour,silver,noBackground);\n    Border(x+2,y+2,width-4,height-4,lowColour,highColour,silver,noBackground);\n  end;\n if backFlag = withBackground then\n  {Display background}\n  begin \n   if borderFlag = noBorder then\n    begin\n     x:=x-2;y:=y-8;\n    end\n   else\n    begin\n     x:=x+2;y:=y+2; \n    end;\n   setxy(x,y);setxy(x-6+width,y);setxy(x-6+width,y-6+height);setxy(x,y-6+height);\n   colour(backColour);\n   polygon(4);\n  end;\nEnd;\nProcedure Spinner(row,spinType,textType,x,y,numChars,numDigits:integer; text:string; \nvalue,textColour,digitColour,buttonColour:integer);\n{Displays a spinner row in a board.  3 Types: text only, text and value or full spinner - \ntext, value and spinner buttons}\n{Note: Parameter text needs to be declared as a pstring before being passed into here}\nVar charWidth,textShift,buttonShift,numShift,spinnerShift:integer;\nBegin\n spinnerShift:=34;\n charWidth:=13;\n buttonShift:=30;\n textShift:=charWidth*numChars;\n numShift:=18+charWidth*numDigits;\n y:=y+(row-1)*spinnerShift;\n outText(x,y,textType,textColour,text);\n if spinType = spinRow then spinButton(x+textShift,y,'<',buttonColour);\n if spinType <> textRow then outValue(x+textShift\n+buttonShift,y,numDigits,value,digitColour);\n if spinType = spinRow then spinButton(x+textShift+buttonShift\n+numShift,y,'>',buttonColour);\nEnd;\nProcedure incDecSpinner(row,x,y,numChars,numDigits:integer;var value:integer;min,max,mult:integer);\n{* Increments or decrements a spinner value by mult (between max and min), if mouse \nclicked on spinner button. *}\n{* Called by updateControlBoard procedure(s). *}\n{* Copy and modify this procedure to create different behaviour for spinner buttons. *}\nVar charWidth,textShift,buttonShift,numShift,spinnerShift:integer;\nBegin\n spinnerShift:=34; charWidth:=13; buttonShift:=30;\n textShift:=charWidth*numChars; numShift:=18+charWidth*numDigits;\n y:=y+(row-1)*spinnerShift;\n {Decrement button clicked}\n if (?mousex>(x+textShift)) and\n    (?mousex<(x+textShift+buttonShift)) and\n    (?mousey>y) and (?mousey<y+spinnerShift) then \n   if(value >= (min+mult)) then value:=value-mult; {Modify for alternative decrement}\n {Increment button clicked}\n if (?mousex>(x+textShift+buttonShift+numShift)) and\n    (?mousex<(x+textShift+2*buttonShift+numShift)) and\n    (?mousey>y) and (?mousey<y+spinnerShift) then \n   if (value <= (max-mult)) then value:=value+mult; {Modify for alternative increment}\nEnd;\nProcedure loadDecayMults(decayRate:integer);\nVar count,count2:integer;\nBegin\n{Load Decay multipliers} \n  for count:=1 to maxwaves do decayMult[count]:=precDecay;\n  for count:=2 to maxwaves do\n  begin\n   for count2:=count to maxwaves do\n   begin\n    decayMult[count2]:=((precDecay-decayRate)*decayMult[count2])/precDecay;\n   end;\n  end\nEnd;\nProcedure incDecDecay(row,x,y,numChars,numDigits:integer;var value:integer;min,max,mult:integer);\nVar charWidth,textShift,buttonShift,numShift,spinnerShift:integer;\nVar count,count2:integer;\nBegin\n spinnerShift:=34; charWidth:=13; buttonShift:=30;\n textShift:=charWidth*numChars; numShift:=18+charWidth*numDigits;\n y:=y+(row-1)*spinnerShift;\n {Decrement button clicked}\n if (?mousex>(x+textShift)) and\n    (?mousex<(x+textShift+buttonShift)) and\n    (?mousey>y) and (?mousey<y+spinnerShift) then \n   if(value >= (min+mult)) then value:=value-mult; {Modify for alternative decrement}\n {Increment button clicked}\n if (?mousex>(x+textShift+buttonShift+numShift)) and\n    (?mousex<(x+textShift+2*buttonShift+numShift)) and\n    (?mousey>y) and (?mousey<y+spinnerShift) then \n   if (value <= (max-mult)) then value:=value+mult; {Modify for alternative increment}\n loadDecayMults(decayRate);\nEnd;\nProcedure incDecDivideBy(row,x,y,numChars,numDigits:integer;var value:integer;min,max,mult:integer);\nVar charWidth,textShift,buttonShift,numShift,spinnerShift:integer;\nVar count,count2:integer;\nBegin\n spinnerShift:=34; charWidth:=13; buttonShift:=30;\n textShift:=charWidth*numChars; numShift:=18+charWidth*numDigits;\n y:=y+(row-1)*spinnerShift;\n {Decrement button clicked}\n if (?mousex>(x+textShift)) and\n    (?mousex<(x+textShift+buttonShift)) and\n    (?mousey>y) and (?mousey<y+spinnerShift) then \n   if(value >= (min+mult)) then\n   begin\n    value:=value-mult; {Modify for alternative decrement}\n    wavesShown:='Divide by';\n     for count:= 1 to maxwaves do\n      begin\n       if (count) mod divideBy = 0 then onoff[count]:=1 else onoff[count]:=0;\n      end;\n    end;\n {Increment button clicked}\n if (?mousex>(x+textShift+buttonShift+numShift)) and\n    (?mousex<(x+textShift+2*buttonShift+numShift)) and\n    (?mousey>y) and (?mousey<y+spinnerShift) then \n   if (value <= (max-mult)) then\n    begin\n     value:=value+mult; {Modify for alternative increment}\n     wavesShown:='Divide by';\n     for count:= 1 to maxwaves do\n      begin\n       if (count) mod divideBy = 0 then onoff[count]:=1 else onoff[count]:=0;\n      end;\n    end;\n loadDecayMults(decayRate);\nEnd;\nProcedure updateValueButton(x,y,numChars:integer;var \nvalue:integer;newValue,size:integer);\n{* Sets value to newValue, if mouse clicked on button. *}\n{* Called by updateControlBoard procedure(s). *}\n{* Copy and modify this procedure to create different behaviour for buttons. *}\nVar width,height:integer;\nBegin\n width:=8+13*numChars;\n if size=large then height:=30 else height:=22;\n if (?mousex>x) and (?mousex<(x+width)) and (?mousey>y) and (?mousey<y+height) \nthen \n  Begin\n   value:=newValue; {Modify for alternative button action}\n  End; \nEnd;\nProcedure updateToggleButton(x,y,numChars:integer;var value:integer;size:integer);\n{* Toggles value between 0 and 1, if mouse clicked on button. *}\n{* Called by updateControlBoard procedure(s). *}\n{* Copy and modify this procedure to create different behaviour for buttons. *}\nVar width,height:integer;\nBegin\n width:=8+13*numChars;\n if size=large then height:=30 else height:=22;\n if (?mousex>x) and (?mousex<(x+width)) and (?mousey>y) and (?mousey<y+height) \nthen \n  Begin\n   if (value=0) then value:=1 else value:=0; {Modify for alternative button behaviour}\n  End; \nEnd;\nProcedure updateWaveButton(x,y,numChars,size:integer);\nVar width,height:integer;\nBegin\n width:=8+13*numChars;\n if size=large then height:=30 else height:=34;\n if (?mousex>x) and (?mousex<(x+width)) and (?mousey>y) and (?mousey<y+height) \nthen \n  Begin\n   amplitudes[selectedWave]:=100;\n   phases[selectedWave]:=0;\n  End; \nEnd;\nProcedure initWaves;\nVar count:integer;\nBegin\n   for count:= 1 to maxwaves do\n   begin\n    amplitudes[count]:=100;\n    phases[count]:=0;\n    onoff[count]:=1;\n   end;\n   decayRate:=10;\n   loadDecayMults(decayRate);\n   multSumWaves:=1;\nEnd; \nProcedure initAllWavesButton(x,y,numChars,size:integer);\nVar width,height:integer;\nBegin\n width:=8+13*numChars;\n if size=large then height:=30 else height:=34;\n if (?mousex>x) and (?mousex<(x+width)) and (?mousey>y) and (?mousey<y+height) \n then\n  begin\n   initWaves;\n   wavesShown:='All waves';\n  end;\nEnd;\nProcedure updateShowButtons(showType,x,y,numChars,size:integer);\nVar width,height,count,prevCount,temp:integer;\nBegin\n width:=8+13*numChars;\n if size=large then height:=30 else height:=22;\n if (?mousex>x) and (?mousex<(x+width)) and (?mousey>y) and (?mousey<y+height) \n then \n  Begin\n   if showType = 1 then {Show All}\n    begin\n     wavesShown:='All waves';\n     for count:= 1 to maxwaves do\n      begin\n       onoff[count]:=1;\n      end;\n    end;\n   if (showType = 2)then {Evens}\n    begin\n     wavesShown:='Evens';\n     for count:= 1 to maxwaves do\n      begin\n       if count mod 2 = 0 then onoff[count]:=1 else onoff[count]:=0;\n      end;\n    end;\n   if showType = 3 then {Odds}\n    begin\n     wavesShown:='Odds';\n     for count:= 1 to maxwaves do\n      begin\n       if count mod 2 = 0 then onoff[count]:=0 else onoff[count]:=1;\n      end;\n    end;\n   if showType = 4 then {Fibonacci}\n    begin\n     wavesShown:='Fibonacci';\n     for count:= 1 to maxwaves do\n      begin\n       onoff[count]:=0;\n      end;\n     onoff[1]:=1;\n     count:=2;prevCount:=1;\n     repeat\n      onoff[count]:=1;\n      temp:=count;count:=count+prevCount;prevCount:=temp;\n     until count>maxwaves;     \n    end;\n   if showType = 5 then {Show None}\n    begin\n     wavesShown:='None';\n     for count:= 1 to maxwaves do\n      begin\n       onoff[count]:=0;\n      end;\n    end;\n  End; \nEnd;\nProcedure Fibonacci;\nVar count,prevCount,temp:integer;\nBegin\n     for count:= 1 to maxwaves do\n      begin\n       onoff[count]:=0;\n      end;\n     onoff[1]:=1;\n     count:=2;prevCount:=1;\n     repeat\n      onoff[count]:=1;\n      temp:=count;count:=count+prevCount;prevCount:=temp;\n     until count>maxwaves;     \nEnd;\nProcedure updatePresetButtons(showType,x,y,numChars,size:integer);\nVar width,height,count,prevCount,temp:integer;\nBegin\n width:=8+13*numChars;\n if size=large then height:=30 else height:=26;\n if (?mousex>x) and (?mousex<(x+width)) and (?mousey>y) and (?mousey<y+height) \n then \n  Begin\n   initWaves;\n   if showType = 0 then {Limited Divide by}\n    begin\n     for count:=1 to (selectedWave-1) do\n      begin\n       onoff[count]:=0;\n      end;\n     onoff[selectedWave]:=1;     \n     for count:= selectedWave+1 to maxwaves do\n      begin\n       if (count-selectedWave) mod divideBy = 0 then onoff[count]:=1 else onoff[count]:=0;\n      end;\n     wavesShown:='Lim Divide';\n     loadDecayMults(decayRate);\n     multSumWaves:=1;\n    end;\n   if showType = 1 then {Blunt Saw}\n    begin\n     initWaves;\n     for count:=1 to maxwaves do\n      begin\n       if count mod 2 = 0 then onoff[count]:=1 else onoff[count]:=0;\n       amplitudes[count]:=200;\n      end;\n     wavesShown:='Sawtooth';\n     decayRate:=30;\n     loadDecayMults(decayRate);\n     numwaves:=12;\n     multSumWaves:=1;\n    end;\n   if showType = 2 then {Square}\n    begin\n     initWaves;\n     for count:=1 to maxwaves do\n      begin\n       if count mod 2 = 0 then onoff[count]:=0 else onoff[count]:=1;\n       amplitudes[count]:=150;\n      end;\n     wavesShown:='Square';\n     decayRate:=40;\n     loadDecayMults(decayRate);\n     numwaves:=11;\n     amplitudes[3]:=115;amplitudes[5]:=130;amplitudes[7]:=130;amplitudes[9]:=190;\n     multSumWaves:=1;\n    end;\n   if showType = 3 then {Stock}\n    begin\n     initWaves;\n     fibonacci;\n     wavesShown:='Shortstock';\n     decayRate:=3;\n     loadDecayMults(decayRate);\n     numwaves:=40;\n     multSumWaves:=1;\n     granularity:=fine;\n    end;\n   if showType = 4 then {Longstock}\n    begin\n     initWaves;\n     fibonacci;\n     wavesShown:='Longstock';\n     decayRate:=3;\n     loadDecayMults(decayRate);\n     numwaves:=60;\n     multSumWaves:=1;\n     granularity:=fine;\n     onoff[1]:=0;onoff[2]:=0;onoff[3]:=0;onoff[5]:=0;\n    end;\n   if showType = 5 then {Pulse Heartbeat}\n    begin\n     initWaves;\n     for count:=1 to maxwaves do\n      begin\n       if count mod 2 = 0 then onoff[count]:=0 else onoff[count]:=1;\n       amplitudes[count]:=100;\n      end;\n     wavesShown:='Pulse';\n     decayRate:=3;\n     loadDecayMults(decayRate);\n     numwaves:=60;\n     onoff[3]:=0;\n     multSumWaves:=3;\n    end;\n   if showType = 6 then {Relaxed Heartbeat}\n    begin\n     initWaves;\n     for count:=1 to maxwaves do\n      begin\n       if count mod 2 = 0 then onoff[count]:=1 else onoff[count]:=0;\n       amplitudes[count]:=100;\n      end;\n     wavesShown:='Relaxed';\n     decayRate:=2;\n     loadDecayMults(decayRate);\n     numwaves:=60;\n     onoff[1]:=0;onoff[3]:=0;onoff[5]:=0;onoff[7]:=0;onoff[9]:=0;\n     phases[2]:=90;\n     multSumWaves:=4;\n    end;\n   if showType = 7 then {Beat}\n    begin\n     initWaves;\n     for count:=1 to maxwaves do\n      begin\n       onoff[count]:=0;\n       amplitudes[count]:=100;\n      end;\n     wavesShown:='One beat';\n     decayRate:=1;\n     loadDecayMults(decayRate);\n     numwaves:=40;\n     onoff[28]:=1;onoff[30]:=1;\n     granularity:=fine;\n     multSumWaves:=1;\n    end;\n   if showType = 8 then {Double}\n    begin\n     initWaves;\n     for count:=1 to maxwaves do\n      begin\n       onoff[count]:=0;\n       amplitudes[count]:=100;\n      end;\n     wavesShown:='Two beats';\n     decayRate:=1;\n     loadDecayMults(decayRate);\n     numwaves:=40;\n     onoff[34]:=1;onoff[36]:=1;onoff[38]:=1;\n     granularity:=fine;\n     multSumWaves:=1;\n    end;\n  End; \nEnd;\n{* End Available for external use *}\n{* END CBMv2.0 DO NOT MODIFY Procedures ********************************************}\n\n{* PROCEDURES CBMv2.0 MODIFY *******************************************************}\nProcedure ControlBoard(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar t1,t2:string;\nBegin\n Borders(x,y,numChars,numDigits,numRows,gold,darkbrown,ochre,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     t1:='No. Waves';\n     Spinner(1,spinRow,boldText,x,y,numChars,numDigits,t1,numwaves,black,white,red);\n     t2:=' 2';\n     smallButton(x+10,y+34,2,t2,red,black);\n     t2:='10';\n     smallButton(x+54,y+34,2,t2,red,black);\n     t2:='20';\n     smallButton(x+98,y+34,2,t2,red,black);\n     t2:='40';\n     smallButton(x+142,y+34,2,t2,red,black);\n     t2:='60';\n     smallButton(x+186,y+34,2,t2,red,black);\n     t2:='Initialise all waves';\n     smallButton(x+8,y+68,16,t2,lightgreen,black);\nEnd;\nProcedure ControlBoard2(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar t1,t2:string;\nBegin\n Borders(x,y,numChars,numDigits,numRows,gold,darkbrown,ochre,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     t1:='Select Wave';t2:='';\n     Spinner(1,spinRow,boldText,x,y,numChars,numDigits,t1,selectedWave,black,white,lime);\n     Spinner(2,tvalRow,normText,x,y,numChars,numDigits,t2,onoff[selectedWave],black,white,emerald);\n     t2:='Wave On/Off';\n     smallButton(x+28,y+34,11,t2,emerald,black);\nEnd;\nProcedure ControlBoard2a(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar t1,t2:string;\nBegin\n Borders(x,y,numChars,numDigits,numRows,gold,darkbrown,ochre,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     t1:=' Amplitude';\n     t2:='       Phase';\n     Spinner(1,spinRow,normText,x,y,numChars,numDigits,t1,amplitudes[selectedWave],black,white,lightgreen);\n     Spinner(2,spinRow,normText,x,y,numChars,numDigits,t2,phases[selectedWave],black,white,lightgreen);\n     t2:='X';\n     smallButton(x+14,y+34,1,t2,lightgreen,black);\nEnd;\nProcedure ControlBoard3(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar t1:string;\nVar xshift:integer;\nBegin\n Borders(x,y,numChars,numDigits,numRows,gold,darkbrown,ochre,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     xshift:=32;\n     t1:='All';\n     smallButton(x+xshift,y,2,t1,emerald,black);\n     t1:='Evens';\n     smallButton(x+xshift+55,y,5,t1,emerald,black);\n     t1:='Odds';\n     smallButton(x+xshift+150,y,5,t1,emerald,black);\n     t1:='Fibonacci';\n     smallButton(x+xshift+245,y,8,t1,emerald,black);\n     t1:='None';\n     smallButton(x+xshift+380,y,5,t1,emerald,black);\nEnd;\nProcedure ControlBoard4(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar dummy:integer;\nVar t1,t2:string;\nBegin\n Borders(x,y,numChars,numDigits,numRows,gold,darkbrown,ochre,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     t1:='Decay Rate';t2:='%';\n     Spinner(1,textRow,boldText,x,y,numChars,numDigits,t1,dummy,black,white,darkblue);\n     Spinner(2,spinRow,boldText,x,y,numChars,numDigits,t2,decayRate,black,white,skyblue);\nEnd;\nProcedure ControlBoard5(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar dummy:integer;\nVar t1:string;\nBegin\n Borders(x,y,numChars,numDigits,numRows,ochre,darkbrown,ochre,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     t1:='Shrink Y';\n     Spinner(1,spinRow,normText,x,y,numChars,numDigits,t1,multSumWaves,black,white,ochre);\nEnd;\nProcedure ControlBoard6(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar dummy:integer;\nVar t1:string;\nBegin\n Borders(x,y,numChars,numDigits,numRows,ochre,darkbrown,gold,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     t1:='  Superposed Wave';\n     Spinner(1,textRow,boldText,x,y,numChars,numDigits,t1,dummy,black,white,ochre);\nEnd;\nProcedure ControlBoard7(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar dummy:integer;\nVar t1:string;\nBegin\n Borders(x,y,numChars,numDigits,numRows,ochre,darkbrown,gold,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     t1:=' Component Waves';\n     Spinner(1,textRow,boldText,x,y,numChars,numDigits,t1,dummy,black,white,ochre);\nEnd;\nProcedure ControlBoard8(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar t1:string;\nBegin\n Borders(x,y,numChars,numDigits,numRows,gold,darkbrown,ochre,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     t1:='Coarse';\n     smallButton(x+22,y+2,6,t1,ochre,black);\n     t1:='Fine';\n     smallButton(x+130,y+2,4,t1,ochre,black);\nEnd;\nProcedure infoBoard(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar dummy:integer;\nVar t1,t2:string;\nBegin\n Borders(x,y,numChars,numDigits,numRows,gold,blue,ochre,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     t1:='Showing:  ' + wavesShown;\n     t2:='        Divide by';\n     Spinner(1,textRow,boldText,x,y,numChars,numDigits,t1,dummy,black,white,emerald);\n     Spinner(2,spinRow,normText,x,y,numChars,numDigits,t2,divideBy,black,white,emerald);\n     t2:='Lim';\n     smallButton(x+8,y+1*34,3,t2,emerald,black);\n     t2:='  Square';\n     smallButton(x+8,y+2*34,9,t2,emerald,black);\n     t2:='    Pulse';\n     smallButton(x+8,y+3*34,9,t2,emerald,black);\n     t2:='One beat';\n     smallButton(x+8,y+4*34,9,t2,emerald,black);\n     t2:='Shortstock';\n     smallButton(x+8,y+5*34,9,t2,emerald,black);\n     t2:=' Sawtooth';\n     smallButton(x+142,y+2*34,9,t2,emerald,black);\n     t2:='  Relaxed';\n     smallButton(x+142,y+3*34,9,t2,emerald,black);\n     t2:='Two beats';\n     smallButton(x+142,y+4*34,9,t2,emerald,black);\n     t2:='Longstock';\n     smallButton(x+142,y+5*34,9,t2,emerald,black);\nEnd;\nProcedure helpExitBoard(x,y,numChars,numDigits,numRows,borderFlag,backFlag:integer);\nVar t1:string;\nBegin\n Borders(x,y,numChars,numDigits,numRows,gold,darkbrown,ochre,borderFlag,backFlag);\n if borderFlag = withBorder then\n  begin\n   x:=x+4;y:=y+8;\n  end;\n     t1:=' Menu';\n     smallButton(x+3,y,5,t1,blue,cream);\n     t1:=' Exit';\n     smallButton(x+81,y,4,t1,red,white);\nEnd;\n{**********************************************************************************}\nProcedure updateControlBoard(x,y,numChars,numDigits,borderFlag:integer);\nBegin\n if borderFlag = noBorder then\n begin\n  x:=x-4;y:=y-8;\n end;\n     incDecSpinner(1,x,y,numChars,numDigits,numwaves,1,maxwaves,1);\n     updateValueButton(x+10,y+40,2,numwaves,2,small);\n     updateValueButton(x+54,y+40,2,numwaves,10,small);\n     updateValueButton(x+98,y+40,2,numwaves,20,small);\n     updateValueButton(x+142,y+40,2,numwaves,40,small);\n     updateValueButton(x+186,y+40,2,numwaves,60,small);\n     initAllWavesButton(x+8,y+68,16,small);\nEnd;\nProcedure updateControlBoard2(x,y,numChars,numDigits,borderFlag:integer);\nBegin\n if borderFlag = noBorder then\n begin\n  x:=x-4;y:=y-8;\n end;\n incDecSpinner(1,x,y,numChars,numDigits,selectedWave,1,maxWaves,1);\n updateToggleButton(x+28,y+34,11,onoff[selectedWave],small);\nEnd;\nProcedure updateControlBoard2a(x,y,numChars,numDigits,borderFlag:integer);\nBegin\n if borderFlag = noBorder then\n begin\n  x:=x-4;y:=y-8;\n end;\n     incDecSpinner(1,x,y,numChars,numDigits,amplitudes[selectedWave],-maxAmplitude,maxAmplitude,amplitudeInc);\n     incDecSpinner(2,x,y,numChars,numDigits,phases[selectedWave],-maxPhase,maxPhase,phaseInc);\n     updateWaveButton(x+14,y+34,1,small);\nEnd;\nProcedure updateControlBoard3(x,y,numChars,numDigits,borderFlag:integer);\nVar xshift:integer;\nBegin\n if borderFlag = noBorder then\n begin\n  x:=x-4;y:=y-8;\n end;\n     xshift:=32;\n     updateShowButtons(1,x+xshift,y,2,small);\n     updateShowButtons(2,x+xshift+55,y,5,small);\n     updateShowButtons(3,x+xshift+150,y,5,small);\n     updateShowButtons(4,x+xshift+245,y,8,small);\n     updateShowButtons(5,x+xshift+380,y,5,small);\nEnd;\nProcedure updateControlBoard4(x,y,numChars,numDigits,borderFlag:integer);\nVar dummy:integer;\nBegin\n if borderFlag = noBorder then\n begin\n  x:=x-4;y:=y-8;\n end;\n     incDecDecay(2,x,y,numChars,numDigits,decayRate,0,precDecay-1,1);\nEnd;\nProcedure updateControlBoard5(x,y,numChars,numDigits,borderFlag:integer);\nBegin\n if borderFlag = noBorder then\n begin\n  x:=x-4;y:=y-8;\n end;\n     incDecSpinner(1,x,y,numChars,numDigits,multSumWaves,1,20,1);\nEnd;\nProcedure updateControlBoard8(x,y,numChars,numDigits,borderFlag:integer);\nBegin\n if borderFlag = noBorder then\n begin\n  x:=x-4;y:=y-8;\n end;\n     updateValueButton(x+22,y+8,6,granularity,course,small);\n     updateValueButton(x+130,y+8,4,granularity,fine,small);\nEnd;\nProcedure updateInfoBoard(x,y,numChars,numDigits,borderFlag:integer);\nVar dummy:integer;\nBegin\n if borderFlag = noBorder then\n begin\n  x:=x-4;y:=y-8;\n end;\n     incDecDivideBy(2,x,y,numChars,numDigits,divideBy,1,20,1);\n     updatePresetButtons(0,x+8,y+1*36,3,small);\n     updatePresetButtons(2,x+8,y+2*36,9,small);\n     updatePresetButtons(5,x+8,y+3*36,9,small);\n     updatePresetButtons(7,x+8,y+4*36,9,small);\n     updatePresetButtons(3,x+8,y+5*36,9,small);\n     updatePresetButtons(1,x+142,y+2*36,9,small);\n     updatePresetButtons(6,x+142,y+3*36,9,small);\n     updatePresetButtons(8,x+142,y+4*36,9,small);\n     updatePresetButtons(4,x+142,y+5*36,9,small);\nEnd;\nProcedure updateHelpExitBoard(x,y,numChars,numDigits,borderFlag:integer);\nVar dummy:integer;\nBegin\n if borderFlag = noBorder then\n begin\n  x:=x-4;y:=y-8;\n end;\n     updateToggleButton(x+8,y,4,infoFlag,small);\n     updateValueButton(x+76,y,4,exitFlag,1,small);\nEnd;\n{***********************************************************************************}\nProcedure displayControlBoards;\nBegin\n  ControlBoard(36,6,10,2,3,withBorder,withBackground);\n  Borders(280,2,34,0,2,gold,darkbrown,ochre,withBorder,withBackground);  \n  ControlBoard2(286,10,12,2,3,noBorder,noBackground);\n  ControlBoard2a(546,10,10,4,3,noBorder,noBackground);\n  ControlBoard3(280,74,33,1,1,withBorder,withBackground);\n  ControlBoard4(810,40,2,3,2,withBorder,withBackground);\n  ControlBoard5(34,954,8,2,1,withBorder,withBackground);\n  ControlBoard6(372,956,11,2,1,withBorder,withBackground);\n  ControlBoard7(372,414,11,2,1,withBorder,withBackground);\n  ControlBoard8(750,954,10,0,1,withBorder,withBackground);\n  helpExitBoard(810,2,5,0,1,withBorder,withBackground);\n  if infoFlag = 1 then infoBoard(684,122,13,2,6,withBorder,withBackground);\nEnd;\nProcedure updateControlBoards;\nBegin\n  updateControlBoard(36,6,10,2,withBorder);\n  updateControlBoard2(286,14,12,2,noBorder);\n  updateControlBoard2a(546,14,10,4,noBorder);\n  updateControlBoard3(280,80,33,1,withBorder);\n  updateControlBoard4(810,36,2,3,withBorder);\n  updateControlBoard5(34,954,8,2,withBorder);\n  updateControlBoard8(750,954,10,0,withBorder);\n  updateHelpExitBoard(810,7,5,0,withBorder);\n  if infoFlag = 1 then updateInfoBoard(684,122,13,2,withBorder);\nEnd;\n{* END CBMv2.0 MODIFY **************************************************************}\n\n{* Fourier curve procedures ********************************************************}\n Procedure sinecurve(period,gwidth,scolour,xstart,ystart: integer);\n Var x,y,gran,step,xdiv: integer;\n Begin\n  if onoff[period] = 1 then\n  begin\n   if granularity = fine then\n    begin\n     gran:=180;\n     step:=5;\n     xdiv:=2;\n     xstart:=xstart+4;\n    end\n  else\n   begin\n    gran:=90;\n    step:=10;\n    xdiv:=1;\n   end;\n  colour(scolour);\n  setxy(xstart,ystart);\n  direction(90);\n  x:=0;\n  for x:=0 to gran do\n   begin\n    penup;\n    forward(step);\n    {forward(gwidth/gran);}\n    forget(1);\n    {pendown;}\n    left(90);\n    y:=(decayMult[period]*sin((4*x/xdiv+phases[period])*period,1,amplitudes[period]))/precDecay;\n    forward(y);\n    back(y);\n    forget(1);\n    right(90)\n   end;\n  if period=selectedwave then\n   thickness(4);\n  polyline(gran+1);\n  if period=selectedwave then\n   thickness(2);\n  end;\n End;\n Procedure addsinecurves(maxperiod,amplitude,phase,scolour,xstart,ystart: integer);\n Var x,period,y,gran,step,xdiv: integer;\n Begin\n  colour(scolour);\n  if granularity = fine then\n    begin\n     gran:=180;\n     step:=5;\n     xdiv:=2;\n     xstart:=xstart+4;\n     thickness(2);\n     colour(black);\n    end\n  else\n   begin\n    gran:=90;\n    step:=10;\n    xdiv:=1;\n    thickness(2);\n   end;\n  setxy(xstart,ystart);\n  direction(90);\n  x:=0;\n  for x:=0 to gran do\n   begin\n    penup;\n    forward(step);\n    forget(1);\n    pendown;\n    left(90);\n    y:=0;\n    for period:=1 to maxperiod do\n     begin\n      if onoff[period] = 1 then\n         y:=y+(decayMult[period]*sin((4*x/xdiv+phases[period])*period,1,amplitudes[period]))/precDecay;\n     end;\n     if multSumWaves > 0 then \n      y:=y/multSumWaves\n     else\n      if multSumWaves < 0 then\n       begin\n        y:=y*abs(multSumWaves);\n       end;\n    if granularity=fine then penup;\n    forward(y);\n    back(y);\n    pendown;\n    forget(1);\n    right(90)\n   end;\n  polyline(gran+1)\n End;\n Procedure verticalgrid(startx,starty,gwidth,gheight: integer);\n Var count: integer;\n Begin\n {Draw vertical lines of grid}\n  setxy(startx,starty+gheight);\n  colour(lightgrey);\n  direction(0);\n  for count:=1 to 9 do\n   begin\n    pendown;\n    if count=1 then\n     thickness(4)\n    else\n     thickness(2);\n    forward(2*gheight);\n    back(2*gheight);\n    right(90);\n    penup;\n    forward(gwidth/8);\n    if count mod 2=1 then\n     forward(1);\n    pendown;\n    left(90)\n   end\n End;\n Procedure horizontalgrid(startx,starty,gwidth,gheight: integer);\n Var count,steps: integer;\n Begin\n {Draw horizontal lines of grid}\n  steps:=50;\n  setxy(startx,starty-gheight);\n  colour(lightgrey);\n  direction(90);\n  for count:=1 to 2*(gheight/steps)+1 do\n   begin\n    if count=gheight/steps+1 then\n     thickness(4)\n    else\n     thickness(2);\n    pendown;\n    forward(gwidth);\n    back(gwidth);\n    right(90);\n    penup;\n    forward(steps);\n    pendown;\n    left(90)\n   end\n End;\n Procedure initialise;\n Var count: integer;\n Begin\n  keyecho(false);\n  numwaves:=2;\n  selectedwave:=1;\n  multSumWaves:=1;\n  decayRate:=10;\n  infoFlag:=0;\n  divideBy:=1;\n  granularity:=course;\n  wavesShown:='All waves';\n  loadDecayMults(decayRate);\n  for count:=1 to maxwaves do\n   begin\n    amplitudes[count]:=100;\n    phases[count]:=0;\n    onoff[count]:=1;\n   end\n End;\n Procedure displayGraphs;\n Var count: integer;\n Begin\n  Border(30,460,940,540,ochre,black,silver,withBackground);\n  Border(32,462,936,536,black,ochre,white,withBackground);\n  verticalgrid(50,730,900,250);\n  horizontalgrid(50,730,900,250);\n  addsinecurves(numwaves,100,0,darkgrey,40,730);\n  Border(30,118,940,340,ochre,darkbrown,silver,noBackground);\n  Border(32,120,936,336,darkbrown,ochre,cream,withBackground);\n  verticalgrid(50,288,900,150);\n  horizontalgrid(50,288,900,150);\n  for count:=1 to numwaves do\n   sinecurve(count,900,count,40,288);\n End;\n{* End Fourier curve procedures ****************************************************}\n\nBegin\n initialise;\n exitFlag:=0;\n repeat\n  noupdate;\n  blank(coffee);\n  displayGraphs;\n  displayControlBoards;\n  update;\n  repeat\n   pause(30);\n  until ?click > 0;\n  updateControlBoards;\n until exitFlag=1\nEnd.\n\n{* END SCBMv2.4 - DO NOT MODIFY - copyright Hugh Wallis 15/9/14 ************************}",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:4,lines:"932 988 1010 1036"},{name:"forward",level:1,count:9,lines:"925 931 969 987 1009 1013 1015 1035 1039"},{name:"left",level:1,count:4,lines:"929 972 1017 1041"},{name:"right",level:1,count:4,lines:"934 991 1011 1037"},{name:"drawxy",level:2,count:20,lines:"58 59 85 86 88 89 111 112 114 115 135 136 138 139 161 162 164 165"}],total:41},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:4,lines:"920 964 1001 1027"},{name:"setxy",level:1,count:27,lines:"44 58 61 68 70 83 93 109 119 133 143 154 159 193 919 963 999 1025"}],total:31},{category:"Turtle: drawing shapes",expressions:[{name:"forget",level:2,count:4,lines:"927 933 970 990"},{name:"polygon",level:2,count:3,lines:"64 157 195"},{name:"polyline",level:2,count:2,lines:"938 993"}],total:9},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:23,lines:"45 58 59 63 71 84 87 94 110 113 120 134 137 144 156 160 163 194 918 946 954 1000 1026"},{name:"pendown",level:1,count:11,lines:"58 82 108 132 151 971 989 1004 1016 1034 1040"},{name:"penup",level:1,count:5,lines:"924 968 986 1012 1038"},{name:"thickness",level:1,count:8,lines:"937 940 953 961 1006 1008 1031 1033"}],total:47},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"1086"},{name:"noupdate",level:1,count:1,lines:"1085"},{name:"update",level:1,count:1,lines:"1089"},{name:"recolour",level:3,count:3,lines:"91 117 141"}],total:6},{category:"General arithmetic functions",expressions:[{name:"abs",level:1,count:2,lines:"26 984"},{name:"inc",level:1,count:1,lines:"34"}],total:3},{category:"Trig / exp / log functions",expressions:[{name:"sin",level:2,count:2,lines:"930 977"}],total:2},{category:"String operations",expressions:[{name:"print",level:1,count:6,lines:"46 73 95 121 145"}],total:6},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:1,lines:"72"}],total:1},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"1091"},{name:"keyecho",level:2,count:1,lines:"1047"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:93,lines:"27 43 46 67 152 176 182 185 212 213 215 229 232 234 237 260 263 265 268 279 282 288 292 295 301 314 315 328 329 332 339 340 364 365 376 377 380 388 393 396 401 404 418 446 447 451 460 466 471 480 485 495 506 518 523 533 538 549 565 591 614 628 644 665 678 690 702 713 727 758 770 784 793 804 818 826 834 844 862 883 895 903 905 936 939 947 976 979 982 986 1005 1014 1030"},{name:"else",level:1,count:26,lines:"28 43 46 69 189 288 301 314 328 332 339 364 376 393 401 446 460 471 485 523 538 912 956 981 1007 1032"},{name:"for",level:1,count:27,lines:"243 244 246 286 299 350 383 391 399 407 421 431 453 458 469 483 521 536 552 568 922 966 974 1002 1028 1057 1076"},{name:"repeat",level:1,count:4,lines:"413 437 1084 1090"},{name:"while",level:2,count:1,lines:"31"},{name:"procedure",level:2,count:48,lines:"39 48 75 99 123 147 167 198 218 239 252 271 306 321 335 347 360 372 428 442 587 610 624 639 660 673 685 697 709 722 754 768 782 791 801 815 824 832 841 859 870 885 900 943 995 1020 1044 1064"},{name:"function",level:3,count:1,lines:"22"}],total:200},{category:"Subroutine calls",expressions:[{name:"getnumdigits",level:0,count:2,lines:"68 70"},{name:"border",level:0,count:6,lines:"179 180 1067 1068 1072 1073"},{name:"outtext",level:0,count:1,lines:"211"},{name:"spinbutton",level:0,count:2,lines:"212 215"},{name:"outvalue",level:0,count:1,lines:"213"},{name:"loaddecaymults",level:0,count:13,lines:"269 304 357 463 476 490 501 512 528 543 559 575 1056"},{name:"initwaves",level:0,count:10,lines:"368 450 468 482 497 508 520 535 551 567"},{name:"fibonacci",level:0,count:2,lines:"498 509"},{name:"borders",level:0,count:12,lines:"590 613 627 643 664 677 689 701 712 726 757 873"},{name:"spinner",level:0,count:12,lines:"596 619 620 634 635 670 671 683 695 707 733 734"},{name:"smallbutton",level:0,count:26,lines:"598 600 602 604 606 608 622 637 650 652 654 656 658 718 720 736 738 740 742 744 746 748 750 752 763 765"},{name:"incdecspinner",level:0,count:5,lines:"774 788 797 798 830"},{name:"updatevaluebutton",level:0,count:8,lines:"775 776 777 778 779 838 839 867"},{name:"initallwavesbutton",level:0,count:1,lines:"780"},{name:"updatetogglebutton",level:0,count:2,lines:"789 866"},{name:"updatewavebutton",level:0,count:1,lines:"799"},{name:"updateshowbuttons",level:0,count:5,lines:"809 810 811 812 813"},{name:"incdecdecay",level:0,count:1,lines:"822"},{name:"incdecdivideby",level:0,count:1,lines:"848"},{name:"updatepresetbuttons",level:0,count:9,lines:"849 850 851 852 853 854 855 856 857"},{name:"controlboard",level:0,count:1,lines:"872"},{name:"controlboard2",level:0,count:1,lines:"874"},{name:"controlboard2a",level:0,count:1,lines:"875"},{name:"controlboard3",level:0,count:1,lines:"876"},{name:"controlboard4",level:0,count:1,lines:"877"},{name:"controlboard5",level:0,count:1,lines:"878"},{name:"controlboard6",level:0,count:1,lines:"879"},{name:"controlboard7",level:0,count:1,lines:"880"},{name:"controlboard8",level:0,count:1,lines:"881"},{name:"helpexitboard",level:0,count:1,lines:"882"},{name:"infoboard",level:0,count:1,lines:"883"},{name:"updatecontrolboard",level:0,count:1,lines:"887"},{name:"updatecontrolboard2",level:0,count:1,lines:"888"},{name:"updatecontrolboard2a",level:0,count:1,lines:"889"},{name:"updatecontrolboard3",level:0,count:1,lines:"890"},{name:"updatecontrolboard4",level:0,count:1,lines:"891"},{name:"updatecontrolboard5",level:0,count:1,lines:"892"},{name:"updatecontrolboard8",level:0,count:1,lines:"893"},{name:"updatehelpexitboard",level:0,count:1,lines:"894"},{name:"updateinfoboard",level:0,count:1,lines:"895"},{name:"verticalgrid",level:0,count:2,lines:"1069 1074"},{name:"horizontalgrid",level:0,count:2,lines:"1070 1075"},{name:"addsinecurves",level:0,count:1,lines:"1071"},{name:"sinecurve",level:0,count:1,lines:"1077"},{name:"initialise",level:0,count:1,lines:"1082"},{name:"displaygraphs",level:0,count:1,lines:"1087"},{name:"displaycontrolboards",level:0,count:1,lines:"1088"},{name:"updatecontrolboards",level:0,count:1,lines:"1093"}],total:150}],pcode:[[80,60,1,1,80,0,113,80,5,2,113,4,80,265,115,80,325,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,79,97,78,80,60,97,79],[84,141,97,140,80,60,97,141],[84,203,97,202,80,60,97,203],[84,265,97,264,80,60,97,265],[128,1023],[140,1],[144,1,3],[98,1,2],[82,1,2,17,98,1,2],[82,1,2,80,0,64,129,15],[80,1,98,1,3],[128,20],[80,0,98,1,3],[82,1,2,80,0,67,129,20],[82,1,2,80,10,27,98,1,2],[85,1,3,1,112,4,2,113],[128,16],[82,1,3,98,1,1],[89,1,105,50,145,1,141,137],[140,2],[144,2,6],[98,2,5,98,2,4,98,2,3,98,2,2,98,2,1],[82,2,3,80,1,64,129,28],[82,2,2,80,3,25,98,2,2],[128,29],[82,2,2,80,1,25,98,2,2],[82,2,1,80,5,24,82,2,2,224],[82,2,4,221],[82,2,3,80,1,64,129,34],[82,2,5,80,16,80,18,189],[128,35],[82,2,5,80,0,80,18,189],[145,2,141,137],[140,3],[144,3,10],[98,3,5,98,3,4,98,3,3,98,3,2,98,3,1],[80,13,98,3,9],[80,8,98,3,8],[80,12,82,3,9,82,3,3,26,24,98,3,6],[80,24,98,3,7],[161],[82,3,1,82,3,6,24,82,3,2,224],[80,8421504,221],[80,0,82,3,7,226],[82,3,6,16,80,0,226],[80,4210752,221],[80,0,82,3,7,16,80,1,25,226],[82,3,6,80,0,226],[82,3,1,80,1,24,82,3,2,80,1,24,224],[82,3,1,82,3,6,24,80,2,25,82,3,2,80,1,24,224],[82,3,1,82,3,6,24,80,2,25,82,3,2,82,3,7,24,80,2,25,224],[82,3,1,80,1,24,82,3,2,82,3,7,24,80,2,25,224],[80,0,221],[80,4,241],[82,3,4,80,0,66,129,61],[82,3,1,80,5,24,82,3,9,82,3,3,82,3,4,136,8],[82,50,1,25,26,24,82,3,8,25,82,3,2,80,2,25,224],[128,63],[82,3,1,80,5,24,82,3,9,82,3,3,82,3,4,136,8],[82,50,1,25,26,24,82,3,2,80,2,25,224],[82,3,5,221],[82,3,4,49,98,3,10,146],[82,3,10,80,0,80,18,189],[145,3,141,137],[140,4],[144,4,6],[98,4,4,98,4,3,98,4,2,98,4,1],[80,24,98,4,5],[80,24,98,4,6],[161],[82,4,1,82,4,5,24,82,4,2,224],[80,4210752,221],[80,0,82,4,6,226],[82,4,5,16,80,0,226],[80,10526880,221],[80,0,82,4,6,16,80,1,25,226],[82,4,5,80,0,226],[82,4,1,80,1,24,82,4,2,80,1,24,82,4,4,252],[82,4,1,80,6,24,82,4,2,80,14,25,224],[80,0,221],[82,4,3,48,80,4,80,24,189,147],[145,4,141,137],[140,5],[144,5,8],[98,5,6,98,5,5,98,5,4,98,5,3,98,5,2,98,5,1],[80,8,80,13,82,5,3,26,24,98,5,7],[80,30,98,5,8],[82,5,2,80,2,25,98,5,2],[161],[82,5,1,82,5,7,24,82,5,2,224],[80,4210752,221],[80,0,82,5,8,226],[82,5,7,16,80,0,226],[80,10526880,221],[80,0,82,5,8,16,80,1,25,226],[82,5,7,80,0,226],[82,5,1,80,1,24,82,5,2,80,1,24,82,5,5,252],[82,5,1,80,8,24,82,5,2,80,2,25,224],[82,5,6,221],[82,5,4,80,0,80,22,189],[145,5,141,137],[140,6],[144,6,8],[98,6,6,98,6,5,98,6,4,98,6,3,98,6,2,98,6,1],[80,8,80,13,82,6,3,26,24,98,6,7],[80,24,98,6,8],[161],[82,6,1,82,6,7,24,82,6,2,224],[80,4210752,221],[80,0,82,6,8,226],[82,6,7,16,80,0,226],[80,10526880,221],[80,0,82,6,8,16,80,1,25,226],[82,6,7,80,0,226],[82,6,1,80,1,24,82,6,2,80,1,24,82,6,5,252],[82,6,1,80,4,24,82,6,2,80,1,25,224],[82,6,6,221],[82,6,4,80,0,80,18,189],[145,6,141,137],[140,7],[144,7,8],[98,7,8,98,7,7,98,7,6,98,7,5,98,7,4,98,7,3,98,7,2,98,7,1],[161],[82,7,8,80,1,64,129,133],[82,7,1,80,1,24,82,7,2,80,1,24,224],[82,7,1,80,2,25,82,7,3,24,82,7,2,80,1,24,224],[82,7,1,80,2,25,82,7,3,24,82,7,2,80,2,25,82,7,4,24,224],[82,7,1,80,1,24,82,7,2,80,2,25,82,7,4,24,224],[82,7,7,221],[80,4,241],[82,7,1,82,7,3,24,82,7,2,224],[82,7,6,221],[80,0,82,7,4,226],[82,7,3,16,80,0,226],[82,7,5,221],[80,0,82,7,4,16,80,1,25,226],[82,7,3,80,0,226],[145,7,141,137],[140,8],[144,8,13],[98,8,10,98,8,9,98,8,8,98,8,7,98,8,6,98,8,5,98,8,4,98,8,3,98,8,2,98,8,1],[80,34,98,8,13],[80,8,82,8,5,82,8,13,26,24,98,8,12],[80,8,82,8,3,82,8,4,24,80,6,24,80,13,26,24,98,8,11],[82,8,9,80,1,64,129,150],[82,8,1,82,8,2,82,8,11,82,8,12,82,8,6,82,8,7,80,12632256,80,0,136,122],[82,8,1,80,2,24,82,8,2,80,2,24,82,8,11,80,4,25,82,8,12,80,4,25,82,8,7,82,8,6,80,12632256,80,0,136,122],[82,8,10,80,1,64,129,163],[82,8,9,80,0,64,129,155],[82,8,1,80,2,25,98,8,1],[82,8,2,80,8,25,98,8,2],[128,157],[82,8,1,80,2,24,98,8,1],[82,8,2,80,2,24,98,8,2],[82,8,1,82,8,2,224],[82,8,1,80,6,25,82,8,11,24,82,8,2,224],[82,8,1,80,6,25,82,8,11,24,82,8,2,80,6,25,82,8,12,24,224],[82,8,1,82,8,2,80,6,25,82,8,12,24,224],[82,8,8,221],[80,4,241],[145,8,141,137],[140,9],[144,9,17],[98,9,12,98,9,11,98,9,10,98,9,9,98,9,8,98,9,7,98,9,6,98,9,5,98,9,4,98,9,3,98,9,2,98,9,1],[80,34,98,9,17],[80,13,98,9,13],[80,30,98,9,15],[82,9,13,82,9,6,26,98,9,14],[80,18,82,9,13,82,9,7,26,24,98,9,16],[82,9,5,82,9,1,80,1,25,82,9,17,26,24,98,9,5],[82,9,4,82,9,5,82,9,3,82,9,10,82,9,8,146,136,22],[82,9,2,80,2,64,129,176],[82,9,4,82,9,14,24,82,9,5,80,60,82,9,12,136,67],[82,9,2,80,0,65,129,178],[82,9,4,82,9,14,24,82,9,15,24,82,9,5,82,9,7,82,9,9,82,9,11,136,36],[82,9,2,80,2,64,129,180],[82,9,4,82,9,14,24,82,9,15,24,82,9,16,24,82,9,5,80,62,82,9,12,136,67],[145,9,141,137],[140,10],[144,10,14],[98,10,9,98,10,8,98,10,7,102,10,6,98,10,5,98,10,4,98,10,3,98,10,2,98,10,1],[80,34,98,10,14],[80,13,98,10,10],[80,30,98,10,12],[82,10,10,82,10,4,26,98,10,11],[80,18,82,10,10,82,10,5,26,24,98,10,13],[82,10,3,82,10,1,80,1,25,82,10,14,26,24,98,10,3],[80,-7,184,82,10,2,82,10,11,24,67,80,-7,184,82,10,2,82,10,11,24,82,10,12,24,66,9,80,-8,184,82,10,3,67,9,80,-8,184,82,10,3,82,10,14,24,66,9,129,193],[83,10,6,82,10,7,82,10,9,24,69,129,193],[83,10,6,82,10,9,25,99,10,6],[80,-7,184,82,10,2,82,10,11,24,82,10,12,24,82,10,13,24,67,80,-7,184,82,10,2,82,10,11,24,80,2,82,10,12,26,24,82,10,13,24,66,9,80,-8,184,82,10,3,67,9,80,-8,184,82,10,3,82,10,14,24,66,9,129,196],[83,10,6,82,10,8,82,10,9,25,68,129,196],[83,10,6,82,10,9,24,99,10,6],[145,10,141,137],[140,11],[144,11,3],[98,11,1],[80,1],[98,11,2,80,60],[82,11,2,69,129,205],[81,264,82,11,2,80,1,25,2,120,24,4,80,100,2,113],[82,11,2,4,128,201],[80,2],[98,11,2,80,60],[82,11,2,69,129,214],[82,11,2],[98,11,3,80,60],[82,11,3,69,129,213],[81,264,82,11,3,80,1,25,2,120,24,4,80,100,82,11,1,25,81,264,82,11,3,80,1,25,2,120,24,4,112,26,80,100,27,2,113],[82,11,3,4,128,209],[82,11,2,4,128,206],[145,11,141,137],[140,12],[144,12,16],[98,12,9,98,12,8,98,12,7,102,12,6,98,12,5,98,12,4,98,12,3,98,12,2,98,12,1],[80,34,98,12,14],[80,13,98,12,10],[80,30,98,12,12],[82,12,10,82,12,4,26,98,12,11],[80,18,82,12,10,82,12,5,26,24,98,12,13],[82,12,3,82,12,1,80,1,25,82,12,14,26,24,98,12,3],[80,-7,184,82,12,2,82,12,11,24,67,80,-7,184,82,12,2,82,12,11,24,82,12,12,24,66,9,80,-8,184,82,12,3,67,9,80,-8,184,82,12,3,82,12,14,24,66,9,129,227],[83,12,6,82,12,7,82,12,9,24,69,129,227],[83,12,6,82,12,9,25,99,12,6],[80,-7,184,82,12,2,82,12,11,24,82,12,12,24,82,12,13,24,67,80,-7,184,82,12,2,82,12,11,24,80,2,82,12,12,26,24,82,12,13,24,66,9,80,-8,184,82,12,3,67,9,80,-8,184,82,12,3,82,12,14,24,66,9,129,230],[83,12,6,82,12,8,82,12,9,25,68,129,230],[83,12,6,82,12,9,24,99,12,6],[81,71,136,197],[145,12,141,137],[140,13],[144,13,16],[98,13,9,98,13,8,98,13,7,102,13,6,98,13,5,98,13,4,98,13,3,98,13,2,98,13,1],[80,34,98,13,14],[80,13,98,13,10],[80,30,98,13,12],[82,13,10,82,13,4,26,98,13,11],[80,18,82,13,10,82,13,5,26,24,98,13,13],[82,13,3,82,13,1,80,1,25,82,13,14,26,24,98,13,3],[80,-7,184,82,13,2,82,13,11,24,67,80,-7,184,82,13,2,82,13,11,24,82,13,12,24,66,9,80,-8,184,82,13,3,67,9,80,-8,184,82,13,3,82,13,14,24,66,9,129,253],[83,13,6,82,13,7,82,13,9,24,69,129,253],[83,13,6,82,13,9,25,99,13,6],[87,68,105,118,105,100,101,32,98,121,0,97,76,146],[80,1],[98,13,15,80,60],[82,13,15,69,129,253],[82,13,15,81,73,29,80,0,64,129,251],[81,202,82,13,15,80,1,25,2,120,24,4,80,1,2,113],[128,252],[81,202,82,13,15,80,1,25,2,120,24,4,80,0,2,113],[82,13,15,4,128,246],[80,-7,184,82,13,2,82,13,11,24,82,13,12,24,82,13,13,24,67,80,-7,184,82,13,2,82,13,11,24,80,2,82,13,12,26,24,82,13,13,24,66,9,80,-8,184,82,13,3,67,9,80,-8,184,82,13,3,82,13,14,24,66,9,129,265],[83,13,6,82,13,8,82,13,9,25,68,129,265],[83,13,6,82,13,9,24,99,13,6],[87,68,105,118,105,100,101,32,98,121,0,97,76,146],[80,1],[98,13,15,80,60],[82,13,15,69,129,265],[82,13,15,81,73,29,80,0,64,129,263],[81,202,82,13,15,80,1,25,2,120,24,4,80,1,2,113],[128,264],[81,202,82,13,15,80,1,25,2,120,24,4,80,0,2,113],[82,13,15,4,128,258],[81,71,136,197],[145,13,141,137],[140,14],[144,14,8],[98,14,6,98,14,5,102,14,4,98,14,3,98,14,2,98,14,1],[80,8,80,13,82,14,3,26,24,98,14,7],[82,14,6,80,1,64,129,274],[80,30,98,14,8],[128,275],[80,22,98,14,8],[80,-7,184,82,14,1,67,80,-7,184,82,14,1,82,14,7,24,66,9,80,-8,184,82,14,2,67,9,80,-8,184,82,14,2,82,14,8,24,66,9,129,277],[82,14,5,99,14,4],[145,14,141,137],[140,15],[144,15,7],[98,15,5,102,15,4,98,15,3,98,15,2,98,15,1],[80,8,80,13,82,15,3,26,24,98,15,6],[82,15,5,80,1,64,129,285],[80,30,98,15,7],[128,286],[80,22,98,15,7],[80,-7,184,82,15,1,67,80,-7,184,82,15,1,82,15,6,24,66,9,80,-8,184,82,15,2,67,9,80,-8,184,82,15,2,82,15,7,24,66,9,129,291],[83,15,4,80,0,64,129,290],[80,1,99,15,4],[128,291],[80,0,99,15,4],[145,15,141,137],[140,16],[144,16,6],[98,16,4,98,16,3,98,16,2,98,16,1],[80,8,80,13,82,16,3,26,24,98,16,5],[82,16,4,80,1,64,129,299],[80,30,98,16,6],[128,300],[80,34,98,16,6],[80,-7,184,82,16,1,67,80,-7,184,82,16,1,82,16,5,24,66,9,80,-8,184,82,16,2,67,9,80,-8,184,82,16,2,82,16,6,24,66,9,129,303],[81,78,81,69,80,1,25,2,120,24,4,80,100,2,113],[81,140,81,69,80,1,25,2,120,24,4,80,0,2,113],[145,16,141,137],[140,17],[144,17,1],[80,1],[98,17,1,80,60],[82,17,1,69,129,313],[81,78,82,17,1,80,1,25,2,120,24,4,80,100,2,113],[81,140,82,17,1,80,1,25,2,120,24,4,80,0,2,113],[81,202,82,17,1,80,1,25,2,120,24,4,80,1,2,113],[82,17,1,4,128,307],[80,10,97,71],[81,71,136,197],[80,1,97,70],[145,17,141,137],[140,18],[144,18,6],[98,18,4,98,18,3,98,18,2,98,18,1],[80,8,80,13,82,18,3,26,24,98,18,5],[82,18,4,80,1,64,129,324],[80,30,98,18,6],[128,325],[80,34,98,18,6],[80,-7,184,82,18,1,67,80,-7,184,82,18,1,82,18,5,24,66,9,80,-8,184,82,18,2,67,9,80,-8,184,82,18,2,82,18,6,24,66,9,129,328],[136,304],[87,65,108,108,32,119,97,118,101,115,0,97,76,146],[145,18,141,137],[140,19],[144,19,10],[98,19,5,98,19,4,98,19,3,98,19,2,98,19,1],[80,8,80,13,82,19,4,26,24,98,19,6],[82,19,5,80,1,64,129,336],[80,30,98,19,7],[128,337],[80,22,98,19,7],[80,-7,184,82,19,2,67,80,-7,184,82,19,2,82,19,6,24,66,9,80,-8,184,82,19,3,67,9,80,-8,184,82,19,3,82,19,7,24,66,9,129,387],[82,19,1,80,1,64,129,345],[87,65,108,108,32,119,97,118,101,115,0,97,76,146],[80,1],[98,19,8,80,60],[82,19,8,69,129,345],[81,202,82,19,8,80,1,25,2,120,24,4,80,1,2,113],[82,19,8,4,128,341],[82,19,1,80,2,64,129,355],[87,69,118,101,110,115,0,97,76,146],[80,1],[98,19,8,80,60],[82,19,8,69,129,355],[82,19,8,80,2,29,80,0,64,129,353],[81,202,82,19,8,80,1,25,2,120,24,4,80,1,2,113],[128,354],[81,202,82,19,8,80,1,25,2,120,24,4,80,0,2,113],[82,19,8,4,128,348],[82,19,1,80,3,64,129,365],[87,79,100,100,115,0,97,76,146],[80,1],[98,19,8,80,60],[82,19,8,69,129,365],[82,19,8,80,2,29,80,0,64,129,363],[81,202,82,19,8,80,1,25,2,120,24,4,80,0,2,113],[128,364],[81,202,82,19,8,80,1,25,2,120,24,4,80,1,2,113],[82,19,8,4,128,358],[82,19,1,80,4,64,129,380],[87,70,105,98,111,110,97,99,99,105,0,97,76,146],[80,1],[98,19,8,80,60],[82,19,8,69,129,372],[81,202,82,19,8,80,1,25,2,120,24,4,80,0,2,113],[82,19,8,4,128,368],[81,202,80,1,80,1,25,2,120,24,4,80,1,2,113],[80,2,98,19,8],[80,1,98,19,9],[81,202,82,19,8,80,1,25,2,120,24,4,80,1,2,113],[82,19,8,98,19,10],[82,19,8,82,19,9,24,98,19,8],[82,19,10,98,19,9],[82,19,8,80,60,67,129,375],[82,19,1,80,5,64,129,387],[87,78,111,110,101,0,97,76,146],[80,1],[98,19,8,80,60],[82,19,8,69,129,387],[81,202,82,19,8,80,1,25,2,120,24,4,80,0,2,113],[82,19,8,4,128,383],[145,19,141,137],[140,20],[144,20,3],[80,1],[98,20,1,80,60],[82,20,1,69,129,395],[81,202,82,20,1,80,1,25,2,120,24,4,80,0,2,113],[82,20,1,4,128,391],[81,202,80,1,80,1,25,2,120,24,4,80,1,2,113],[80,2,98,20,1],[80,1,98,20,2],[81,202,82,20,1,80,1,25,2,120,24,4,80,1,2,113],[82,20,1,98,20,3],[82,20,1,82,20,2,24,98,20,1],[82,20,3,98,20,2],[82,20,1,80,60,67,129,398],[145,20,141,137],[140,21],[144,21,10],[98,21,5,98,21,4,98,21,3,98,21,2,98,21,1],[80,8,80,13,82,21,4,26,24,98,21,6],[82,21,5,80,1,64,129,411],[80,30,98,21,7],[128,412],[80,26,98,21,7],[80,-7,184,82,21,2,67,80,-7,184,82,21,2,82,21,6,24,66,9,80,-8,184,82,21,3,67,9,80,-8,184,82,21,3,82,21,7,24,66,9,129,562],[136,304],[82,21,1,80,0,64,129,432],[80,1],[98,21,8,81,69,80,1,25],[82,21,8,69,129,420],[81,202,82,21,8,80,1,25,2,120,24,4,80,0,2,113],[82,21,8,4,128,416],[81,202,81,69,80,1,25,2,120,24,4,80,1,2,113],[81,69,80,1,24],[98,21,8,80,60],[82,21,8,69,129,429],[82,21,8,81,69,25,81,73,29,80,0,64,129,427],[81,202,82,21,8,80,1,25,2,120,24,4,80,1,2,113],[128,428],[81,202,82,21,8,80,1,25,2,120,24,4,80,0,2,113],[82,21,8,4,128,422],[87,76,105,109,32,68,105,118,105,100,101,0,97,76,146],[81,71,136,197],[80,1,97,70],[82,21,1,80,1,64,129,448],[136,304],[80,1],[98,21,8,80,60],[82,21,8,69,129,443],[82,21,8,80,2,29,80,0,64,129,440],[81,202,82,21,8,80,1,25,2,120,24,4,80,1,2,113],[128,441],[81,202,82,21,8,80,1,25,2,120,24,4,80,0,2,113],[81,78,82,21,8,80,1,25,2,120,24,4,80,200,2,113],[82,21,8,4,128,435],[87,83,97,119,116,111,111,116,104,0,97,76,146],[80,30,97,71],[81,71,136,197],[80,12,97,68],[80,1,97,70],[82,21,1,80,2,64,129,468],[136,304],[80,1],[98,21,8,80,60],[82,21,8,69,129,459],[82,21,8,80,2,29,80,0,64,129,456],[81,202,82,21,8,80,1,25,2,120,24,4,80,0,2,113],[128,457],[81,202,82,21,8,80,1,25,2,120,24,4,80,1,2,113],[81,78,82,21,8,80,1,25,2,120,24,4,80,150,2,113],[82,21,8,4,128,451],[87,83,113,117,97,114,101,0,97,76,146],[80,40,97,71],[81,71,136,197],[80,11,97,68],[81,78,80,3,80,1,25,2,120,24,4,80,115,2,113],[81,78,80,5,80,1,25,2,120,24,4,80,130,2,113],[81,78,80,7,80,1,25,2,120,24,4,80,130,2,113],[81,78,80,9,80,1,25,2,120,24,4,80,190,2,113],[80,1,97,70],[82,21,1,80,3,64,129,477],[136,304],[136,388],[87,83,104,111,114,116,115,116,111,99,107,0,97,76,146],[80,3,97,71],[81,71,136,197],[80,40,97,68],[80,1,97,70],[80,1,97,74],[82,21,1,80,4,64,129,490],[136,304],[136,388],[87,76,111,110,103,115,116,111,99,107,0,97,76,146],[80,3,97,71],[81,71,136,197],[80,60,97,68],[80,1,97,70],[80,1,97,74],[81,202,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,202,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,202,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,202,80,5,80,1,25,2,120,24,4,80,0,2,113],[82,21,1,80,5,64,129,507],[136,304],[80,1],[98,21,8,80,60],[82,21,8,69,129,501],[82,21,8,80,2,29,80,0,64,129,498],[81,202,82,21,8,80,1,25,2,120,24,4,80,0,2,113],[128,499],[81,202,82,21,8,80,1,25,2,120,24,4,80,1,2,113],[81,78,82,21,8,80,1,25,2,120,24,4,80,100,2,113],[82,21,8,4,128,493],[87,80,117,108,115,101,0,97,76,146],[80,3,97,71],[81,71,136,197],[80,60,97,68],[81,202,80,3,80,1,25,2,120,24,4,80,0,2,113],[80,3,97,70],[82,21,1,80,6,64,129,529],[136,304],[80,1],[98,21,8,80,60],[82,21,8,69,129,518],[82,21,8,80,2,29,80,0,64,129,515],[81,202,82,21,8,80,1,25,2,120,24,4,80,1,2,113],[128,516],[81,202,82,21,8,80,1,25,2,120,24,4,80,0,2,113],[81,78,82,21,8,80,1,25,2,120,24,4,80,100,2,113],[82,21,8,4,128,510],[87,82,101,108,97,120,101,100,0,97,76,146],[80,2,97,71],[81,71,136,197],[80,60,97,68],[81,202,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,202,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,202,80,5,80,1,25,2,120,24,4,80,0,2,113],[81,202,80,7,80,1,25,2,120,24,4,80,0,2,113],[81,202,80,9,80,1,25,2,120,24,4,80,0,2,113],[81,140,80,2,80,1,25,2,120,24,4,80,90,2,113],[80,4,97,70],[82,21,1,80,7,64,129,545],[136,304],[80,1],[98,21,8,80,60],[82,21,8,69,129,537],[81,202,82,21,8,80,1,25,2,120,24,4,80,0,2,113],[81,78,82,21,8,80,1,25,2,120,24,4,80,100,2,113],[82,21,8,4,128,532],[87,79,110,101,32,98,101,97,116,0,97,76,146],[80,1,97,71],[81,71,136,197],[80,40,97,68],[81,202,80,28,80,1,25,2,120,24,4,80,1,2,113],[81,202,80,30,80,1,25,2,120,24,4,80,1,2,113],[80,1,97,74],[80,1,97,70],[82,21,1,80,8,64,129,562],[136,304],[80,1],[98,21,8,80,60],[82,21,8,69,129,553],[81,202,82,21,8,80,1,25,2,120,24,4,80,0,2,113],[81,78,82,21,8,80,1,25,2,120,24,4,80,100,2,113],[82,21,8,4,128,548],[87,84,119,111,32,98,101,97,116,115,0,97,76,146],[80,1,97,71],[81,71,136,197],[80,40,97,68],[81,202,80,34,80,1,25,2,120,24,4,80,1,2,113],[81,202,80,36,80,1,25,2,120,24,4,80,1,2,113],[81,202,80,38,80,1,25,2,120,24,4,80,1,2,113],[80,1,97,74],[80,1,97,70],[145,21,141,137],[140,22],[144,22,9],[98,22,7,98,22,6,98,22,5,98,22,4,98,22,3,98,22,2,98,22,1],[82,22,1,82,22,2,82,22,3,82,22,4,82,22,5,80,16762880,80,6045747,80,12628016,82,22,6,82,22,7,136,141],[82,22,6,80,1,64,129,570],[82,22,1,80,4,24,98,22,1],[82,22,2,80,8,24,98,22,2],[87,78,111,46,32,87,97,118,101,115,0,98,22,8,146],[80,1,80,2,80,1,82,22,1,82,22,2,82,22,3,82,22,4,82,22,8,81,68,80,0,80,16777215,80,16711680,146,136,164],[87,32,50,0,98,22,9,146],[82,22,1,80,10,24,82,22,2,80,34,24,80,2,82,22,9,80,16711680,80,0,146,136,104],[87,49,48,0,98,22,9,146],[82,22,1,80,54,24,82,22,2,80,34,24,80,2,82,22,9,80,16711680,80,0,146,136,104],[87,50,48,0,98,22,9,146],[82,22,1,80,98,24,82,22,2,80,34,24,80,2,82,22,9,80,16711680,80,0,146,136,104],[87,52,48,0,98,22,9,146],[82,22,1,80,142,24,82,22,2,80,34,24,80,2,82,22,9,80,16711680,80,0,146,136,104],[87,54,48,0,98,22,9,146],[82,22,1,80,186,24,82,22,2,80,34,24,80,2,82,22,9,80,16711680,80,0,146,136,104],[87,73,110,105,116,105,97,108,105,115,101,32,97,108,108,32,119,97,118,101,115,0,98,22,9,146],[82,22,1,80,8,24,82,22,2,80,68,24,80,16,82,22,9,80,10025880,80,0,146,136,104],[145,22,141,137],[140,23],[144,23,9],[98,23,7,98,23,6,98,23,5,98,23,4,98,23,3,98,23,2,98,23,1],[82,23,1,82,23,2,82,23,3,82,23,4,82,23,5,80,16762880,80,6045747,80,12628016,82,23,6,82,23,7,136,141],[82,23,6,80,1,64,129,592],[82,23,1,80,4,24,98,23,1],[82,23,2,80,8,24,98,23,2],[87,83,101,108,101,99,116,32,87,97,118,101,0,98,23,8,146],[87,0,98,23,9,146],[80,1,80,2,80,1,82,23,1,82,23,2,82,23,3,82,23,4,82,23,8,81,69,80,0,80,16777215,80,65280,146,136,164],[80,2,80,1,80,0,82,23,1,82,23,2,82,23,3,82,23,4,82,23,9,81,202,81,69,80,1,25,2,120,24,4,112,80,0,80,16777215,80,51543,146,136,164],[87,87,97,118,101,32,79,110,47,79,102,102,0,98,23,9,146],[82,23,1,80,28,24,82,23,2,80,34,24,80,11,82,23,9,80,51543,80,0,146,136,104],[145,23,141,137],[140,24],[144,24,9],[98,24,7,98,24,6,98,24,5,98,24,4,98,24,3,98,24,2,98,24,1],[82,24,1,82,24,2,82,24,3,82,24,4,82,24,5,80,16762880,80,6045747,80,12628016,82,24,6,82,24,7,136,141],[82,24,6,80,1,64,129,606],[82,24,1,80,4,24,98,24,1],[82,24,2,80,8,24,98,24,2],[87,32,65,109,112,108,105,116,117,100,101,0,98,24,8,146],[87,32,32,32,32,32,32,32,80,104,97,115,101,0,98,24,9,146],[80,1,80,2,80,0,82,24,1,82,24,2,82,24,3,82,24,4,82,24,8,81,78,81,69,80,1,25,2,120,24,4,112,80,0,80,16777215,80,10025880,146,136,164],[80,2,80,2,80,0,82,24,1,82,24,2,82,24,3,82,24,4,82,24,9,81,140,81,69,80,1,25,2,120,24,4,112,80,0,80,16777215,80,10025880,146,136,164],[80,88,48,98,24,9,146],[82,24,1,80,14,24,82,24,2,80,34,24,80,1,82,24,9,80,10025880,80,0,146,136,104],[145,24,141,137],[140,25],[144,25,9],[98,25,7,98,25,6,98,25,5,98,25,4,98,25,3,98,25,2,98,25,1],[82,25,1,82,25,2,82,25,3,82,25,4,82,25,5,80,16762880,80,6045747,80,12628016,82,25,6,82,25,7,136,141],[82,25,6,80,1,64,129,620],[82,25,1,80,4,24,98,25,1],[82,25,2,80,8,24,98,25,2],[80,32,98,25,9],[87,65,108,108,0,98,25,8,146],[82,25,1,82,25,9,24,82,25,2,80,2,82,25,8,80,51543,80,0,146,136,104],[87,69,118,101,110,115,0,98,25,8,146],[82,25,1,82,25,9,24,80,55,24,82,25,2,80,5,82,25,8,80,51543,80,0,146,136,104],[87,79,100,100,115,0,98,25,8,146],[82,25,1,82,25,9,24,80,150,24,82,25,2,80,5,82,25,8,80,51543,80,0,146,136,104],[87,70,105,98,111,110,97,99,99,105,0,98,25,8,146],[82,25,1,82,25,9,24,80,245,24,82,25,2,80,8,82,25,8,80,51543,80,0,146,136,104],[87,78,111,110,101,0,98,25,8,146],[82,25,1,82,25,9,24,80,380,24,82,25,2,80,5,82,25,8,80,51543,80,0,146,136,104],[145,25,141,137],[140,26],[144,26,10],[98,26,7,98,26,6,98,26,5,98,26,4,98,26,3,98,26,2,98,26,1],[82,26,1,82,26,2,82,26,3,82,26,4,82,26,5,80,16762880,80,6045747,80,12628016,82,26,6,82,26,7,136,141],[82,26,6,80,1,64,129,639],[82,26,1,80,4,24,98,26,1],[82,26,2,80,8,24,98,26,2],[87,68,101,99,97,121,32,82,97,116,101,0,98,26,9,146],[80,37,48,98,26,10,146],[80,1,80,0,80,1,82,26,1,82,26,2,82,26,3,82,26,4,82,26,9,82,26,8,80,0,80,16777215,80,128,146,136,164],[80,2,80,2,80,1,82,26,1,82,26,2,82,26,3,82,26,4,82,26,10,81,71,80,0,80,16777215,80,45311,146,136,164],[145,26,141,137],[140,27],[144,27,9],[98,27,7,98,27,6,98,27,5,98,27,4,98,27,3,98,27,2,98,27,1],[82,27,1,82,27,2,82,27,3,82,27,4,82,27,5,80,12628016,80,6045747,80,12628016,82,27,6,82,27,7,136,141],[82,27,6,80,1,64,129,651],[82,27,1,80,4,24,98,27,1],[82,27,2,80,8,24,98,27,2],[87,83,104,114,105,110,107,32,89,0,98,27,9,146],[80,1,80,2,80,0,82,27,1,82,27,2,82,27,3,82,27,4,82,27,9,81,70,80,0,80,16777215,80,12628016,146,136,164],[145,27,141,137],[140,28],[144,28,9],[98,28,7,98,28,6,98,28,5,98,28,4,98,28,3,98,28,2,98,28,1],[82,28,1,82,28,2,82,28,3,82,28,4,82,28,5,80,12628016,80,6045747,80,16762880,82,28,6,82,28,7,136,141],[82,28,6,80,1,64,129,661],[82,28,1,80,4,24,98,28,1],[82,28,2,80,8,24,98,28,2],[87,32,32,83,117,112,101,114,112,111,115,101,100,32,87,97,118,101,0,98,28,9,146],[80,1,80,0,80,1,82,28,1,82,28,2,82,28,3,82,28,4,82,28,9,82,28,8,80,0,80,16777215,80,12628016,146,136,164],[145,28,141,137],[140,29],[144,29,9],[98,29,7,98,29,6,98,29,5,98,29,4,98,29,3,98,29,2,98,29,1],[82,29,1,82,29,2,82,29,3,82,29,4,82,29,5,80,12628016,80,6045747,80,16762880,82,29,6,82,29,7,136,141],[82,29,6,80,1,64,129,671],[82,29,1,80,4,24,98,29,1],[82,29,2,80,8,24,98,29,2],[87,32,67,111,109,112,111,110,101,110,116,32,87,97,118,101,115,0,98,29,9,146],[80,1,80,0,80,1,82,29,1,82,29,2,82,29,3,82,29,4,82,29,9,82,29,8,80,0,80,16777215,80,12628016,146,136,164],[145,29,141,137],[140,30],[144,30,8],[98,30,7,98,30,6,98,30,5,98,30,4,98,30,3,98,30,2,98,30,1],[82,30,1,82,30,2,82,30,3,82,30,4,82,30,5,80,16762880,80,6045747,80,12628016,82,30,6,82,30,7,136,141],[82,30,6,80,1,64,129,681],[82,30,1,80,4,24,98,30,1],[82,30,2,80,8,24,98,30,2],[87,67,111,97,114,115,101,0,98,30,8,146],[82,30,1,80,22,24,82,30,2,80,2,24,80,6,82,30,8,80,12628016,80,0,146,136,104],[87,70,105,110,101,0,98,30,8,146],[82,30,1,80,130,24,82,30,2,80,2,24,80,4,82,30,8,80,12628016,80,0,146,136,104],[145,30,141,137],[140,31],[144,31,10],[98,31,7,98,31,6,98,31,5,98,31,4,98,31,3,98,31,2,98,31,1],[82,31,1,82,31,2,82,31,3,82,31,4,82,31,5,80,16762880,80,255,80,12628016,82,31,6,82,31,7,136,141],[82,31,6,80,1,64,129,693],[82,31,1,80,4,24,98,31,1],[82,31,2,80,8,24,98,31,2],[87,83,104,111,119,105,110,103,58,32,32,0,81,76,54,98,31,9,146],[87,32,32,32,32,32,32,32,32,68,105,118,105,100,101,32,98,121,0,98,31,10,146],[80,1,80,0,80,1,82,31,1,82,31,2,82,31,3,82,31,4,82,31,9,82,31,8,80,0,80,16777215,80,51543,146,136,164],[80,2,80,2,80,0,82,31,1,82,31,2,82,31,3,82,31,4,82,31,10,81,73,80,0,80,16777215,80,51543,146,136,164],[87,76,105,109,0,98,31,10,146],[82,31,1,80,8,24,82,31,2,80,1,80,34,26,24,80,3,82,31,10,80,51543,80,0,146,136,104],[87,32,32,83,113,117,97,114,101,0,98,31,10,146],[82,31,1,80,8,24,82,31,2,80,2,80,34,26,24,80,9,82,31,10,80,51543,80,0,146,136,104],[87,32,32,32,32,80,117,108,115,101,0,98,31,10,146],[82,31,1,80,8,24,82,31,2,80,3,80,34,26,24,80,9,82,31,10,80,51543,80,0,146,136,104],[87,79,110,101,32,98,101,97,116,0,98,31,10,146],[82,31,1,80,8,24,82,31,2,80,4,80,34,26,24,80,9,82,31,10,80,51543,80,0,146,136,104],[87,83,104,111,114,116,115,116,111,99,107,0,98,31,10,146],[82,31,1,80,8,24,82,31,2,80,5,80,34,26,24,80,9,82,31,10,80,51543,80,0,146,136,104],[87,32,83,97,119,116,111,111,116,104,0,98,31,10,146],[82,31,1,80,142,24,82,31,2,80,2,80,34,26,24,80,9,82,31,10,80,51543,80,0,146,136,104],[87,32,32,82,101,108,97,120,101,100,0,98,31,10,146],[82,31,1,80,142,24,82,31,2,80,3,80,34,26,24,80,9,82,31,10,80,51543,80,0,146,136,104],[87,84,119,111,32,98,101,97,116,115,0,98,31,10,146],[82,31,1,80,142,24,82,31,2,80,4,80,34,26,24,80,9,82,31,10,80,51543,80,0,146,136,104],[87,76,111,110,103,115,116,111,99,107,0,98,31,10,146],[82,31,1,80,142,24,82,31,2,80,5,80,34,26,24,80,9,82,31,10,80,51543,80,0,146,136,104],[145,31,141,137],[140,32],[144,32,8],[98,32,7,98,32,6,98,32,5,98,32,4,98,32,3,98,32,2,98,32,1],[82,32,1,82,32,2,82,32,3,82,32,4,82,32,5,80,16762880,80,6045747,80,12628016,82,32,6,82,32,7,136,141],[82,32,6,80,1,64,129,723],[82,32,1,80,4,24,98,32,1],[82,32,2,80,8,24,98,32,2],[87,32,77,101,110,117,0,98,32,8,146],[82,32,1,80,3,24,82,32,2,80,5,82,32,8,80,255,80,16777147,146,136,104],[87,32,69,120,105,116,0,98,32,8,146],[82,32,1,80,81,24,82,32,2,80,4,82,32,8,80,16711680,80,16777215,146,136,104],[145,32,141,137],[140,33],[144,33,5],[98,33,5,98,33,4,98,33,3,98,33,2,98,33,1],[82,33,5,80,0,64,129,734],[82,33,1,80,4,25,98,33,1],[82,33,2,80,8,25,98,33,2],[80,1,82,33,1,82,33,2,82,33,3,82,33,4,84,68,80,1,80,60,80,1,136,181],[82,33,1,80,10,24,82,33,2,80,40,24,80,2,84,68,80,2,80,0,136,267],[82,33,1,80,54,24,82,33,2,80,40,24,80,2,84,68,80,10,80,0,136,267],[82,33,1,80,98,24,82,33,2,80,40,24,80,2,84,68,80,20,80,0,136,267],[82,33,1,80,142,24,82,33,2,80,40,24,80,2,84,68,80,40,80,0,136,267],[82,33,1,80,186,24,82,33,2,80,40,24,80,2,84,68,80,60,80,0,136,267],[82,33,1,80,8,24,82,33,2,80,68,24,80,16,80,0,136,317],[145,33,141,137],[140,34],[144,34,5],[98,34,5,98,34,4,98,34,3,98,34,2,98,34,1],[82,34,5,80,0,64,129,748],[82,34,1,80,4,25,98,34,1],[82,34,2,80,8,25,98,34,2],[80,1,82,34,1,82,34,2,82,34,3,82,34,4,84,69,80,1,80,60,80,1,136,181],[82,34,1,80,28,24,82,34,2,80,34,24,80,11,81,202,81,69,80,1,25,2,120,24,4,80,0,136,278],[145,34,141,137],[140,35],[144,35,5],[98,35,5,98,35,4,98,35,3,98,35,2,98,35,1],[82,35,5,80,0,64,129,757],[82,35,1,80,4,25,98,35,1],[82,35,2,80,8,25,98,35,2],[80,1,82,35,1,82,35,2,82,35,3,82,35,4,81,78,81,69,80,1,25,2,120,24,4,80,500,16,80,500,80,5,136,181],[80,2,82,35,1,82,35,2,82,35,3,82,35,4,81,140,81,69,80,1,25,2,120,24,4,80,360,16,80,360,80,2,136,181],[82,35,1,80,14,24,82,35,2,80,34,24,80,1,80,0,136,292],[145,35,141,137],[140,36],[144,36,6],[98,36,5,98,36,4,98,36,3,98,36,2,98,36,1],[82,36,5,80,0,64,129,767],[82,36,1,80,4,25,98,36,1],[82,36,2,80,8,25,98,36,2],[80,32,98,36,6],[80,1,82,36,1,82,36,6,24,82,36,2,80,2,80,0,136,329],[80,2,82,36,1,82,36,6,24,80,55,24,82,36,2,80,5,80,0,136,329],[80,3,82,36,1,82,36,6,24,80,150,24,82,36,2,80,5,80,0,136,329],[80,4,82,36,1,82,36,6,24,80,245,24,82,36,2,80,8,80,0,136,329],[80,5,82,36,1,82,36,6,24,80,380,24,82,36,2,80,5,80,0,136,329],[145,36,141,137],[140,37],[144,37,6],[98,37,5,98,37,4,98,37,3,98,37,2,98,37,1],[82,37,5,80,0,64,129,780],[82,37,1,80,4,25,98,37,1],[82,37,2,80,8,25,98,37,2],[80,2,82,37,1,82,37,2,82,37,3,82,37,4,84,71,80,0,80,100,80,1,25,80,1,136,215],[145,37,141,137],[140,38],[144,38,5],[98,38,5,98,38,4,98,38,3,98,38,2,98,38,1],[82,38,5,80,0,64,129,788],[82,38,1,80,4,25,98,38,1],[82,38,2,80,8,25,98,38,2],[80,1,82,38,1,82,38,2,82,38,3,82,38,4,84,70,80,1,80,20,80,1,136,181],[145,38,141,137],[140,39],[144,39,5],[98,39,5,98,39,4,98,39,3,98,39,2,98,39,1],[82,39,5,80,0,64,129,796],[82,39,1,80,4,25,98,39,1],[82,39,2,80,8,25,98,39,2],[82,39,1,80,22,24,82,39,2,80,8,24,80,6,84,74,80,0,80,0,136,267],[82,39,1,80,130,24,82,39,2,80,8,24,80,4,84,74,80,1,80,0,136,267],[145,39,141,137],[140,40],[144,40,6],[98,40,5,98,40,4,98,40,3,98,40,2,98,40,1],[82,40,5,80,0,64,129,805],[82,40,1,80,4,25,98,40,1],[82,40,2,80,8,25,98,40,2],[80,2,82,40,1,82,40,2,82,40,3,82,40,4,84,73,80,1,80,20,80,1,136,232],[80,0,82,40,1,80,8,24,82,40,2,80,1,80,36,26,24,80,3,80,0,136,404],[80,2,82,40,1,80,8,24,82,40,2,80,2,80,36,26,24,80,9,80,0,136,404],[80,5,82,40,1,80,8,24,82,40,2,80,3,80,36,26,24,80,9,80,0,136,404],[80,7,82,40,1,80,8,24,82,40,2,80,4,80,36,26,24,80,9,80,0,136,404],[80,3,82,40,1,80,8,24,82,40,2,80,5,80,36,26,24,80,9,80,0,136,404],[80,1,82,40,1,80,142,24,82,40,2,80,2,80,36,26,24,80,9,80,0,136,404],[80,6,82,40,1,80,142,24,82,40,2,80,3,80,36,26,24,80,9,80,0,136,404],[80,8,82,40,1,80,142,24,82,40,2,80,4,80,36,26,24,80,9,80,0,136,404],[80,4,82,40,1,80,142,24,82,40,2,80,5,80,36,26,24,80,9,80,0,136,404],[145,40,141,137],[140,41],[144,41,6],[98,41,5,98,41,4,98,41,3,98,41,2,98,41,1],[82,41,5,80,0,64,129,822],[82,41,1,80,4,25,98,41,1],[82,41,2,80,8,25,98,41,2],[82,41,1,80,8,24,82,41,2,80,4,84,72,80,0,136,278],[82,41,1,80,76,24,82,41,2,80,4,84,66,80,1,80,0,136,267],[145,41,141,137],[140,42],[80,36,80,6,80,10,80,2,80,3,80,1,80,1,136,563],[80,280,80,2,80,34,80,0,80,2,80,16762880,80,6045747,80,12628016,80,1,80,1,136,141],[80,286,80,10,80,12,80,2,80,3,80,0,80,0,136,585],[80,546,80,10,80,10,80,4,80,3,80,0,80,0,136,599],[80,280,80,74,80,33,80,1,80,1,80,1,80,1,136,613],[80,810,80,40,80,2,80,3,80,2,80,1,80,1,136,632],[80,34,80,954,80,8,80,2,80,1,80,1,80,1,136,644],[80,372,80,956,80,11,80,2,80,1,80,1,80,1,136,654],[80,372,80,414,80,11,80,2,80,1,80,1,80,1,136,664],[80,750,80,954,80,10,80,0,80,1,80,1,80,1,136,674],[80,810,80,2,80,5,80,0,80,1,80,1,80,1,136,716],[81,72,80,1,64,129,839],[80,684,80,122,80,13,80,2,80,6,80,1,80,1,136,686],[141,137],[140,43],[80,36,80,6,80,10,80,2,80,1,136,728],[80,286,80,14,80,12,80,2,80,0,136,742],[80,546,80,14,80,10,80,4,80,0,136,751],[80,280,80,80,80,33,80,1,80,1,136,761],[80,810,80,36,80,2,80,3,80,1,136,774],[80,34,80,954,80,8,80,2,80,1,136,782],[80,750,80,954,80,10,80,0,80,1,136,790],[80,810,80,7,80,5,80,0,80,1,136,816],[81,72,80,1,64,129,851],[80,684,80,122,80,13,80,2,80,1,136,799],[141,137],[140,44],[144,44,10],[98,44,5,98,44,4,98,44,3,98,44,2,98,44,1],[81,202,82,44,1,80,1,25,2,120,24,4,112,80,1,64,129,887],[81,74,80,1,64,129,862],[80,180,98,44,8],[80,5,98,44,9],[80,2,98,44,10],[82,44,4,80,4,24,98,44,4],[128,865],[80,90,98,44,8],[80,10,98,44,9],[80,1,98,44,10],[82,44,3,221],[82,44,4,82,44,5,224],[80,90,219],[80,0,98,44,6],[80,0],[98,44,6,82,44,8],[82,44,6,69,129,882],[160],[82,44,9,227],[80,1,237],[80,90,229],[81,264,82,44,1,80,1,25,2,120,24,4,112,80,4,82,44,6,26,82,44,10,27,81,140,82,44,1,80,1,25,2,120,24,4,112,24,82,44,1,26,80,1,81,78,82,44,1,80,1,25,2,120,24,4,112,41,26,80,100,27,98,44,7],[82,44,7,227],[82,44,7,228],[80,1,237],[80,90,230],[82,44,6,4,128,870],[82,44,1,81,69,64,129,884],[80,4,220],[82,44,8,80,1,24,240],[82,44,1,81,69,64,129,887],[80,2,220],[145,44,141,137],[140,45],[144,45,12],[98,45,6,98,45,5,98,45,4,98,45,3,98,45,2,98,45,1],[82,45,4,221],[81,74,80,1,64,129,900],[80,180,98,45,10],[80,5,98,45,11],[80,2,98,45,12],[82,45,5,80,4,24,98,45,5],[80,2,220],[80,0,221],[128,904],[80,90,98,45,10],[80,10,98,45,11],[80,1,98,45,12],[80,2,220],[82,45,5,82,45,6,224],[80,90,219],[80,0,98,45,7],[80,0],[98,45,7,82,45,10],[82,45,7,69,129,935],[160],[82,45,11,227],[80,1,237],[161],[80,90,229],[80,0,98,45,9],[80,1],[98,45,8,82,45,1],[82,45,8,69,129,922],[81,202,82,45,8,80,1,25,2,120,24,4,112,80,1,64,129,921],[82,45,9,81,264,82,45,8,80,1,25,2,120,24,4,112,80,4,82,45,7,26,82,45,12,27,81,140,82,45,8,80,1,25,2,120,24,4,112,24,82,45,8,26,80,1,81,78,82,45,8,80,1,25,2,120,24,4,112,41,26,80,100,27,24,98,45,9],[82,45,8,4,128,917],[81,70,80,0,67,129,925],[82,45,9,81,70,27,98,45,9],[128,927],[81,70,80,0,66,129,927],[82,45,9,81,70,17,26,98,45,9],[81,74,80,1,64,129,929],[160],[82,45,9,227],[82,45,9,228],[161],[80,1,237],[80,90,230],[82,45,7,4,128,908],[82,45,10,80,1,24,240],[145,45,141,137],[140,46],[144,46,5],[98,46,4,98,46,3,98,46,2,98,46,1],[82,46,1,82,46,2,82,46,4,24,224],[80,10526880,221],[80,0,219],[80,1],[98,46,5,80,9],[82,46,5,69,129,961],[161],[82,46,5,80,1,64,129,950],[80,4,220],[128,951],[80,2,220],[80,2,82,46,4,26,227],[80,2,82,46,4,26,228],[80,90,230],[160],[82,46,3,80,8,27,227],[82,46,5,80,2,29,80,1,64,129,958],[80,1,227],[161],[80,90,229],[82,46,5,4,128,944],[145,46,141,137],[140,47],[144,47,6],[98,47,4,98,47,3,98,47,2,98,47,1],[80,50,98,47,6],[82,47,1,82,47,2,82,47,4,25,224],[80,10526880,221],[80,90,219],[80,1],[98,47,5,80,2,82,47,4,82,47,6,27,26,80,1,24],[82,47,5,69,129,985],[82,47,5,82,47,4,82,47,6,27,80,1,24,64,129,975],[80,4,220],[128,976],[80,2,220],[161],[82,47,3,227],[82,47,3,228],[80,90,230],[160],[82,47,6,227],[161],[80,90,229],[82,47,5,4,128,970],[145,47,141,137],[140,48],[144,48,1],[80,0,164],[80,2,97,68],[80,1,97,69],[80,1,97,70],[80,10,97,71],[80,0,97,72],[80,1,97,73],[80,0,97,74],[87,65,108,108,32,119,97,118,101,115,0,97,76,146],[81,71,136,197],[80,1],[98,48,1,80,60],[82,48,1,69,129,1005],[81,78,82,48,1,80,1,25,2,120,24,4,80,100,2,113],[81,140,82,48,1,80,1,25,2,120,24,4,80,0,2,113],[81,202,82,48,1,80,1,25,2,120,24,4,80,1,2,113],[82,48,1,4,128,999],[145,48,141,137],[140,49],[144,49,1],[80,30,80,460,80,940,80,540,80,12628016,80,0,80,12632256,80,1,136,122],[80,32,80,462,80,936,80,536,80,0,80,12628016,80,16777215,80,1,136,122],[80,50,80,730,80,900,80,250,136,937],[80,50,80,730,80,900,80,250,136,962],[81,68,80,100,80,0,80,4210752,80,40,80,730,136,888],[80,30,80,118,80,940,80,340,80,12628016,80,6045747,80,12632256,80,0,136,122],[80,32,80,120,80,936,80,336,80,6045747,80,12628016,80,16777147,80,1,136,122],[80,50,80,288,80,900,80,150,136,937],[80,50,80,288,80,900,80,150,136,962],[80,1],[98,49,1,81,68],[82,49,1,69,129,1022],[82,49,1,80,900,82,49,1,80,40,80,288,136,852],[82,49,1,4,128,1018],[145,49,141,137],[136,986],[80,0,97,66],[163],[80,9596735,248],[136,1006],[136,825],[162],[80,30,178],[80,-4,184,80,0,67,129,1030],[136,840],[81,66,80,1,64,129,1025],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Young's two-slit experiment",author:"University of Oxford",date:"22/09/2016",time:"22:54:23",code:"PROGRAM TwoSlits;\nCONST sectors=7;\n      wavelength=100;\n      sourcey=730;\n      source1x=275;\n      source2x=725;\nVAR lampx: integer;\n    x,y: integer;\n    disty,dist1,dist2: integer;\n    wave1,wave2: integer;\n    waveaddi,waveaddj,waveadd: integer;\n    angleadd: integer;\n    sectcol: array[0..sectors] of integer;\n    boundary: array[0..sectors] of integer;\n\n  Procedure colsetup;\n  Var n: integer;\n  Begin\n    sectcol[0]:=violet;\n    sectcol[1]:=blue;\n    sectcol[2]:=cyan;\n    sectcol[3]:=lime;\n    sectcol[4]:=yellow;\n    sectcol[5]:=orange;\n    sectcol[6]:=red;\n    sectcol[7]:=violet;\n    for n:=0 to sectors do\n      boundary[n]:=divmult(360,sectors,n)\n  End;\n\n  Function wavecolour(n: integer): integer;\n  Var col1,col2: integer;\n      mix1,mix2: integer;\n  Begin\n    col2:=0;\n    repeat\n      inc(col2)\n    until boundary[col2]>=n;\n    col1:=col2-1;\n    result:=mixcols(sectcol[col1],sectcol[col2],boundary[col2]-n,n-boundary[col1])\n  End;\n\n  Procedure background;\n  Var n: integer;\n      diagx,diag: integer;\n  Begin\n    lampx:=(source1x+source2x)/2;\n    blank(black);\n    colour(white);\n    thickness(5);  \n    setxy(0,733);\n    drawxy(1000,0);\n    setxy(source1x,732);\n    for dist1:=1 to 4 do\n      begin\n        colour(wavecolour(wavelength-dist1));\n        drawxy(0,1)\n      end;\n    diagx:=lampx-source1x;\n    diag:=hypot(diagx,250,1);\n    for n:=1 to 250 do\n      begin\n        dist1:=divmult(diag,250,n);\n        wave1:=wavelength-((dist1+5) mod wavelength);\n        colour(wavecolour(divmult(wave1,wavelength,360)));\n        drawxy(source1x+divmult(diagx,250,n)-turtx,1)    \n      end;\n    setxy(source2x,732);\n    for dist2:=1 to 4 do\n      begin\n        colour(wavecolour(wavelength-dist2));\n        drawxy(0,1)\n      end;\n    diagx:=source2x-lampx;\n    diag:=hypot(diagx,250,1);\n    for n:=1 to 250 do\n      begin\n        dist2:=divmult(diag,250,n);\n        wave2:=wavelength-((dist2+5) mod wavelength);\n        colour(wavecolour(divmult(wave2,wavelength,360)));\n        drawxy(source2x-divmult(diagx,250,n)-turtx,1)    \n      end;\n    colour(yellow);\n    setxy(lampx,984);\n    blot(10);\n  End;\n\nBEGIN\n  colsetup;\n  background;\n  noupdate;\n  for y:=0 to sourcey do\n   begin\n    disty:=sourcey-y;\n    for x:=0 to 999 do\n      begin\n        dist1:=hypot(x-source1x,disty,1);\n        dist2:=hypot(x-source2x,disty,1);\n        wave1:=dist1 mod wavelength;\n        wave2:=dist2 mod wavelength;\n        waveaddi:=sin(wave1*360,wavelength,500)+sin(wave2*360,wavelength,500);\n        waveaddj:=cos(wave1*360,wavelength,500)+cos(wave2*360,wavelength,500);\n        waveadd:=hypot(waveaddi,waveaddj,1);\n        angleadd:=(arctan(waveaddi,waveaddj,1)+360)mod 360;\n        pixset(x,y,mixcols(wavecolour(angleadd),black,\n                           waveadd,1000-waveadd))\n     end\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:5,lines:"52 57 66 72 81"}],total:5},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:4,lines:"51 53 68 84"}],total:4},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"85"}],total:1},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:6,lines:"49 56 65 71 80 83"},{name:"thickness",level:1,count:1,lines:"50"},{name:"mixcols",level:3,count:2,lines:"40 105"}],total:9},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"48"},{name:"noupdate",level:1,count:1,lines:"91"},{name:"pixset",level:3,count:1,lines:"105"}],total:3},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:1,lines:"37"},{name:"hypot",level:2,count:5,lines:"60 75 97 98 103"},{name:"divmult",level:3,count:7,lines:"28 63 65 66 78 80 81"}],total:13},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:2,lines:"102"},{name:"sin",level:2,count:2,lines:"101"},{name:"arctan",level:3,count:1,lines:"104"}],total:5},{category:"Command structures",expressions:[{name:"for",level:1,count:7,lines:"27 54 61 69 76 92 95"},{name:"repeat",level:1,count:1,lines:"36"},{name:"procedure",level:2,count:2,lines:"16 43"},{name:"function",level:3,count:1,lines:"31"}],total:11},{category:"Subroutine calls",expressions:[{name:"wavecolour",level:0,count:5,lines:"56 65 71 80 105"},{name:"colsetup",level:0,count:1,lines:"89"},{name:"background",level:0,count:1,lines:"90"}],total:7}],pcode:[[80,14,1,1,80,0,113,80,5,2,113,4,80,37,115,80,51,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,33,97,32,80,8,97,33],[84,43,97,42,80,8,97,43],[128,81],[140,1],[144,1,1],[81,32,80,0,2,120,24,4,80,9055202,2,113],[81,32,80,1,2,120,24,4,80,255,2,113],[81,32,80,2,2,120,24,4,80,65535,2,113],[81,32,80,3,2,120,24,4,80,65280,2,113],[81,32,80,4,2,120,24,4,80,16776960,2,113],[81,32,80,5,2,120,24,4,80,16755200,2,113],[81,32,80,6,2,120,24,4,80,16711680,2,113],[81,32,80,7,2,120,24,4,80,9055202,2,113],[80,0],[98,1,1,80,7],[82,1,1,69,129,21],[81,42,82,1,1,2,120,24,4,80,360,80,7,82,1,1,32,2,113],[82,1,1,4,128,17],[145,1,141,137],[140,2],[144,2,6],[98,2,2],[80,0,98,2,4],[85,2,4,1,112,4,2,113],[81,42,82,2,4,2,120,24,4,112,82,2,2,69,129,26],[82,2,4,80,1,25,98,2,3],[81,32,82,2,3,2,120,24,4,112,81,32,82,2,4,2,120,24,4,112,81,42,82,2,4,2,120,24,4,112,82,2,2,25,82,2,2,81,42,82,2,3,2,120,24,4,112,25,223,98,2,1],[89,2,105,4,145,2,141,137],[140,3],[144,3,3],[80,275,80,725,24,80,2,27,97,20],[80,0,248],[80,16777215,221],[80,5,220],[80,0,80,733,224],[80,1e3,80,0,226],[80,275,80,732,224],[80,1],[97,24,80,4],[81,24,69,129,47],[80,100,81,24,25,136,22],[82,4,1,221],[80,0,80,1,226],[81,24,4,128,41],[81,20,80,275,25,98,3,2],[82,3,2,80,250,80,1,34,98,3,3],[80,1],[98,3,1,80,250],[82,3,1,69,129,58],[82,3,3,80,250,82,3,1,32,97,24],[80,100,81,24,80,5,24,80,100,29,25,97,26],[81,26,80,100,80,360,32,136,22],[82,4,1,221],[80,275,82,3,2,80,250,82,3,1,32,24,81,15,25,80,1,226],[82,3,1,4,128,50],[80,725,80,732,224],[80,1],[97,25,80,4],[81,25,69,129,66],[80,100,81,25,25,136,22],[82,4,1,221],[80,0,80,1,226],[81,25,4,128,60],[80,725,81,20,25,98,3,2],[82,3,2,80,250,80,1,34,98,3,3],[80,1],[98,3,1,80,250],[82,3,1,69,129,77],[82,3,3,80,250,82,3,1,32,97,25],[80,100,81,25,80,5,24,80,100,29,25,97,27],[81,27,80,100,80,360,32,136,22],[82,4,1,221],[80,725,82,3,2,80,250,82,3,1,32,25,81,15,25,80,1,226],[82,3,1,4,128,69],[80,16776960,221],[81,20,80,984,224],[80,10,243],[145,3,141,137],[136,6],[136,31],[163],[80,0],[97,22,80,730],[81,22,69,129,103],[80,730,81,22,25,97,23],[80,0],[97,21,80,999],[81,21,69,129,102],[81,21,80,275,25,81,23,80,1,34,97,24],[81,21,80,725,25,81,23,80,1,34,97,25],[81,24,80,100,29,97,26],[81,25,80,100,29,97,27],[81,26,80,360,26,80,100,80,500,41,81,27,80,360,26,80,100,80,500,41,24,97,28],[81,26,80,360,26,80,100,80,500,42,81,27,80,360,26,80,100,80,500,42,24,97,29],[81,28,81,29,80,1,34,97,30],[81,28,81,29,80,1,46,80,360,24,80,360,29,97,31],[81,21,81,22,81,31,136,22],[82,4,1,80,0,81,30,80,1e3,81,30,25,223,211],[81,21,4,128,89],[81,22,4,128,85],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Moving ball (using the Turtle)",author:"University of Oxford",date:"22/09/2016",time:"22:51:58",code:"PROGRAM TurtleMove;\nVAR count: integer;\nBEGIN\n  setxy(100,700);\n  for count:=1 to 100 do\n    begin\n      noupdate;\n      colour(white);\n      blot(51);\n      movexy(8,-4);\n      colour(red);\n      blot(50);\n      update;\n      pause(10)\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"movexy",level:2,count:1,lines:"10"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:1,lines:"4"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"9 12"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"8 11"}],total:2},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"7"},{name:"update",level:1,count:1,lines:"13"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"14"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"5"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,100,80,700,224],[80,1],[97,16,80,100],[81,16,69,129,16],[163],[80,16777215,221],[80,51,243],[80,8,80,4,16,225],[80,16711680,221],[80,50,243],[162],[80,10,178],[81,16,4,128,5],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Bouncing ball (using the Turtle)",author:"University of Oxford",date:"22/09/2016",time:"22:51:21",code:"PROGRAM TurtleBounce;\nVAR xvel,yvel: integer;\nBEGIN\n  setxy(100,700);\n  xvel:=8;\n  yvel:=-4;\n  while 0<1 do\n    begin\n      noupdate;\n      colour(white);\n      blot(51);\n      movexy(xvel,yvel);\n      colour(red);\n      blot(50);\n      update;\n      pause(10);\n      if (turtx<50) or (turtx>949) then\n        xvel:=-xvel;\n      if (turty<50) or (turty>949) then\n        yvel:=-yvel;\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"movexy",level:2,count:1,lines:"12"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:1,lines:"4"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"11 14"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"10 13"}],total:2},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"9"},{name:"update",level:1,count:1,lines:"15"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"16"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"17 19"},{name:"while",level:2,count:1,lines:"7"}],total:3}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,7,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,100,80,700,224],[80,8,97,16],[80,4,16,97,17],[80,0,80,1,66,129,20],[163],[80,16777215,221],[80,51,243],[81,16,81,17,225],[80,16711680,221],[80,50,243],[162],[80,10,178],[81,11,80,50,66,81,11,80,949,67,10,129,17],[81,16,16,97,16],[81,12,80,50,66,81,12,80,949,67,10,129,19],[81,17,16,97,17],[128,6],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Trigonometric graphs",author:"University of Oxford",date:"22/09/2016",time:"22:50:09",code:"PROGRAM TrigGraphs;\nCONST xorigin=500;\n      yorigin=500;\n      halfwidth=400;\n      yscale=200;\nVAR degrees: integer;\n    x,y: integer;\n\n  Procedure axes;\n  Begin\n    thickness(3);\n    setxy(xorigin-halfwidth,yorigin);\n    drawxy(halfwidth*2,0);\n    setxy(xorigin,0);\n    drawxy(0,1000);\n    setxy(xorigin,yorigin);\n    circle(15);\n    thickness(2);\n    setxy(xorigin-halfwidth,yorigin-yscale);\n    drawxy(halfwidth*2,0);\n    setxy(xorigin-halfwidth,yorigin+yscale);\n    drawxy(halfwidth*2,0);\n    setxy(xorigin+halfwidth+10,yorigin-yscale-18);\n    print('+1',0,20);\n    setxy(xorigin+halfwidth+10,yorigin+yscale-18);\n    print('-1',0,20);\n    setxy(xorigin-halfwidth-60,yorigin);\n    print('-180',0,20);\n    setxy(xorigin-halfwidth/2,yorigin);\n    print('-90',0,20);\n    setxy(xorigin+halfwidth/2-30,yorigin);\n    print('90',0,20);\n    setxy(xorigin+halfwidth,yorigin);\n    print('180',0,20)\n  End;\n\n  Procedure sinecurve;\n  Begin\n    for degrees:=-180 to 180 do\n      begin\n        x:=xorigin+divmult(degrees,180,halfwidth);\n        y:=yorigin-sin(degrees,1,yscale);\n        setxy(x,y)\n      end;\n    polyline(361)\n  End;\n\n  Procedure cosinecurve;\n  Begin\n    for degrees:=-180 to 180 do\n      begin\n        x:=xorigin+divmult(degrees,180,halfwidth);\n        y:=yorigin-cos(degrees,1,yscale);\n        setxy(x,y)\n      end;\n    polyline(361)\n  End;\n\n  Procedure tancurve;\n  Begin\n    for degrees:=-180 to 180 do\n      if degrees=-90 then\n        polyline(90)\n      else\n        if degrees=90 then\n        polyline(179)\n      else\n        begin\n          x:=xorigin+divmult(degrees,180,halfwidth);\n          y:=yorigin-tan(degrees,1,yscale);\n          setxy(x,y)\n        end;\n    polyline(90)\n  End;\n\nBEGIN\n  axes;\n  noupdate;\n  thickness(4);\n  colour(green);\n  setxy(20,800);\n  print('sine',16,40);\n  sinecurve;\n  colour(red);\n  setxy(20,860);\n  print('cosine',16,40);\n  cosinecurve;\n  colour(blue);\n  setxy(20,920);\n  print('tangent',16,40);\n  tancurve\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:4,lines:"13 15 20 22"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:17,lines:"12 14 16 19 21 23 25 27 29 31 33 43 54 71 81 85 89"}],total:17},{category:"Turtle: drawing shapes",expressions:[{name:"circle",level:1,count:1,lines:"17"},{name:"polyline",level:2,count:5,lines:"45 56 63 66 73"}],total:6},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"80 84 88"},{name:"thickness",level:1,count:3,lines:"11 18 79"}],total:6},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"78"}],total:1},{category:"General arithmetic functions",expressions:[{name:"divmult",level:3,count:3,lines:"41 52 69"}],total:3},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:1,lines:"53"},{name:"sin",level:2,count:1,lines:"42"},{name:"tan",level:2,count:1,lines:"70"}],total:3},{category:"String operations",expressions:[{name:"print",level:1,count:9,lines:"24 26 28 30 32 34 82 86 90"}],total:9},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"62 65"},{name:"else",level:1,count:2,lines:"64 67"},{name:"for",level:1,count:3,lines:"39 50 61"},{name:"procedure",level:2,count:4,lines:"9 37 48 59"}],total:11},{category:"Subroutine calls",expressions:[{name:"axes",level:0,count:1,lines:"77"},{name:"sinecurve",level:0,count:1,lines:"83"},{name:"cosinecurve",level:0,count:1,lines:"87"},{name:"tancurve",level:0,count:1,lines:"91"}],total:4}],pcode:[[80,14,1,1,80,0,113,80,5,2,113,4,80,8,115,80,22,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,66],[140,1],[80,3,220],[80,500,80,400,25,80,500,224],[80,400,80,2,26,80,0,226],[80,500,80,0,224],[80,0,80,1e3,226],[80,500,80,500,224],[80,15,242],[80,2,220],[80,500,80,400,25,80,500,80,200,25,224],[80,400,80,2,26,80,0,226],[80,500,80,400,25,80,500,80,200,24,224],[80,400,80,2,26,80,0,226],[80,500,80,400,24,80,10,24,80,500,80,200,25,80,18,25,224],[87,43,49,0,80,0,80,20,189],[80,500,80,400,24,80,10,24,80,500,80,200,24,80,18,25,224],[87,45,49,0,80,0,80,20,189],[80,500,80,400,25,80,60,25,80,500,224],[87,45,49,56,48,0,80,0,80,20,189],[80,500,80,400,80,2,27,25,80,500,224],[87,45,57,48,0,80,0,80,20,189],[80,500,80,400,80,2,27,24,80,30,25,80,500,224],[87,57,48,0,80,0,80,20,189],[80,500,80,400,24,80,500,224],[87,49,56,48,0,80,0,80,20,189],[141,137],[140,2],[80,180,16],[97,20,80,180],[81,20,69,129,38],[80,500,81,20,80,180,80,400,32,24,97,21],[80,500,81,20,80,1,80,200,41,25,97,22],[81,21,81,22,224],[81,20,4,128,32],[80,361,240],[141,137],[140,3],[80,180,16],[97,20,80,180],[81,20,69,129,48],[80,500,81,20,80,180,80,400,32,24,97,21],[80,500,81,20,80,1,80,200,42,25,97,22],[81,21,81,22,224],[81,20,4,128,42],[80,361,240],[141,137],[140,4],[80,180,16],[97,20,80,180],[81,20,69,129,64],[81,20,80,90,16,64,129,57],[80,90,240],[128,63],[81,20,80,90,64,129,60],[80,179,240],[128,63],[80,500,81,20,80,180,80,400,32,24,97,21],[80,500,81,20,80,1,80,200,43,25,97,22],[81,21,81,22,224],[81,20,4,128,52],[80,90,240],[141,137],[136,4],[163],[80,4,220],[80,2263842,221],[80,20,80,800,224],[87,115,105,110,101,0,80,16,80,40,189],[136,30],[80,16711680,221],[80,20,80,860,224],[87,99,111,115,105,110,101,0,80,16,80,40,189],[136,40],[80,255,221],[80,20,80,920,224],[87,116,97,110,103,101,110,116,0,80,16,80,40,189],[136,50],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Recursive triangles",author:"University of Oxford",date:"22/09/2016",time:"22:49:20",code:"PROGRAM Triangles;\n\n  Procedure triangle(size: integer);\n  Begin\n    if size>1 then\n      begin\n        forward(size);\n        triangle(size/2);\n        right(120);\n        forward(size);\n        triangle(size/2);\n        right(120);\n        forward(size);\n        triangle(size/2);\n        right(120)\n      end\n  End;\n\nBEGIN\n  movexy(-100,150);\n  triangle(256)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:3,lines:"7 10 13"},{name:"right",level:1,count:3,lines:"9 12 15"},{name:"movexy",level:2,count:1,lines:"20"}],total:7},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"5"},{name:"procedure",level:2,count:1,lines:"3"}],total:2},{category:"Subroutine calls",expressions:[{name:"triangle",level:0,count:4,lines:"8 11 14 21"}],total:4}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,18],[140,1],[144,1,1],[98,1,1],[82,1,1,80,1,67,129,17],[82,1,1,227],[82,1,1,80,2,27,136,4],[80,120,230],[82,1,1,227],[82,1,1,80,2,27,136,4],[80,120,230],[82,1,1,227],[82,1,1,80,2,27,136,4],[80,120,230],[145,1,141,137],[80,100,16,80,150,225],[80,256,136,4],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Tree IFS",author:"University of Oxford",date:"22/09/2016",time:"22:48:36",code:"PROGRAM TreeIFS;\nCONST xleft=0;\n      xright=999;\n      ytop=0;\n      ybottom=999;\n      scaledown=4;\n      mappings=5;\n      title='Tree';\n      live=green;\n      copied=emerald;\n      pauseval=2000;\nVAR xl,xr,yt,yb: integer;\n    coeffdiv: integer;\n    mapxx,mapxy,mapxc: array[1..mappings] of integer;\n    mapyx,mapyy,mapyc: array[1..mappings] of integer;\n    iteration,starttime: integer;\n    count,numborn,numkilled: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv:=1000;\n    mapxx[1]:=195;\n    mapyx[1]:=344;\n    mapxy[1]:=-488;\n    mapyy[1]:=443;\n    mapxc[1]:=443;\n    mapyc[1]:=245;\n    mapxx[2]:=462;\n    mapyx[2]:=-252;\n    mapxy[2]:=414;\n    mapyy[2]:=361;\n    mapxc[2]:=251;\n    mapyc[2]:=569;\n    mapxx[3]:=-58;\n    mapyx[3]:=453;\n    mapxy[3]:=-70;\n    mapyy[3]:=-111;\n    mapxc[3]:=598;\n    mapyc[3]:=97;\n    mapxx[4]:=-35;\n    mapyx[4]:=-469;\n    mapxy[4]:=70;\n    mapyy[4]:=-22;\n    mapxc[4]:=488;\n    mapyc[4]:=507;\n    mapxx[5]:=-637;\n    mapyx[5]:=0;\n    mapxy[5]:=0;\n    mapyy[5]:=501;\n    mapxc[5]:=856;\n    mapyc[5]:=251\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl:=xleft/scaledown;\n    xr:=xright/scaledown;\n    yt:=ytop/scaledown;\n    yb:=ybottom/scaledown;\n    for i:=1 to mappings do\n      begin\n        mapxc[i]:=mapxc[i]/scaledown;\n        mapyc[i]:=mapyc[i]/scaledown\n      end\n  End;\n\n  Procedure map(a,x,y: integer;var newx,newy: integer);\n  Begin\n    newx:=divmult(x,coeffdiv,mapxx[a])+divmult(y,coeffdiv,mapxy[a])+mapxc[a];\n    newy:=divmult(x,coeffdiv,mapyx[a])+divmult(y,coeffdiv,mapyy[a])+mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x,y,newx,newy: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        if pixcol(x,y)<>white then\n          begin\n            map(mapnum,x,y,newx,newy);\n            if pixcol(newx,newy)=white then\n              inc(numborn);\n            pixset(newx,newy,copied)\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x,y: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        if pixcol(x,y)=live then\n          begin\n            pixset(x,y,white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x,y)=copied then\n          pixset(x,y,live);\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl,yt,xr-xl+1,yb-yt+1);\n  resolution(xr-xl+1,yb-yt+1);\n  pixset(1,1,live);\n  iteration:=0;\n  writeln(title+' by iterative mapping');\n  timeset(0);\n  repeat\n    starttime:=time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration '+str(iteration)+':');\n    numborn:=0;\n    for count:=1 to mappings do\n      domap(count);\n    numkilled:=0;\n    cleanup;\n    writeln('  '+str(numborn)+' pixels born; '+str(numkilled)+' pixels killed');\n    writeln('  (took '+str((time-starttime)/1000)+' seconds - total '+str(time/1000)+' seconds so far)');\n    if (numborn+numkilled>0) and (pauseval>=1000) then\n      begin\n        write('  (now pausing '+qstr(pauseval,1000,1)+' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn+numkilled=0;\n  writeln('FINISH - fixed point of iterative mapping has been reached')\nEND.",usage:[{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:2,lines:"77 93"},{name:"update",level:1,count:2,lines:"87 104"},{name:"canvas",level:2,count:1,lines:"110"},{name:"resolution",level:2,count:1,lines:"111"},{name:"pixcol",level:3,count:4,lines:"80 83 96 102"},{name:"pixset",level:3,count:4,lines:"85 98 103 112"}],total:14},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:3,lines:"84 99 118"},{name:"divmult",level:3,count:4,lines:"70 71"}],total:7},{category:"String operations",expressions:[{name:"write",level:1,count:1,lines:"130"},{name:"writeln",level:1,count:7,lines:"114 119 120 126 127 132 135"}],total:8},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:5,lines:"120 126 127"},{name:"qstr",level:2,count:1,lines:"130"}],total:6},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"131"},{name:"time",level:2,count:3,lines:"117 127"},{name:"timeset",level:2,count:1,lines:"115"}],total:5},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"80 83 96 102 128"},{name:"else",level:1,count:1,lines:"101"},{name:"for",level:1,count:6,lines:"61 78 79 94 95 122"},{name:"repeat",level:1,count:1,lines:"116"},{name:"procedure",level:2,count:5,lines:"19 54 68 74 90"}],total:18},{category:"Subroutine calls",expressions:[{name:"map",level:0,count:1,lines:"82"},{name:"setmaps",level:0,count:1,lines:"108"},{name:"setscale",level:0,count:1,lines:"109"},{name:"domap",level:0,count:1,lines:"123"},{name:"cleanup",level:0,count:1,lines:"125"}],total:5}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,57,115,80,72,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,27,97,26,80,5,97,27],[84,34,97,33,80,5,97,34],[84,41,97,40,80,5,97,41],[84,48,97,47,80,5,97,48],[84,55,97,54,80,5,97,55],[84,62,97,61,80,5,97,62],[128,100],[140,1],[80,1e3,97,25],[81,26,80,1,80,1,25,2,120,24,4,80,195,2,113],[81,47,80,1,80,1,25,2,120,24,4,80,344,2,113],[81,33,80,1,80,1,25,2,120,24,4,80,488,16,2,113],[81,54,80,1,80,1,25,2,120,24,4,80,443,2,113],[81,40,80,1,80,1,25,2,120,24,4,80,443,2,113],[81,61,80,1,80,1,25,2,120,24,4,80,245,2,113],[81,26,80,2,80,1,25,2,120,24,4,80,462,2,113],[81,47,80,2,80,1,25,2,120,24,4,80,252,16,2,113],[81,33,80,2,80,1,25,2,120,24,4,80,414,2,113],[81,54,80,2,80,1,25,2,120,24,4,80,361,2,113],[81,40,80,2,80,1,25,2,120,24,4,80,251,2,113],[81,61,80,2,80,1,25,2,120,24,4,80,569,2,113],[81,26,80,3,80,1,25,2,120,24,4,80,58,16,2,113],[81,47,80,3,80,1,25,2,120,24,4,80,453,2,113],[81,33,80,3,80,1,25,2,120,24,4,80,70,16,2,113],[81,54,80,3,80,1,25,2,120,24,4,80,111,16,2,113],[81,40,80,3,80,1,25,2,120,24,4,80,598,2,113],[81,61,80,3,80,1,25,2,120,24,4,80,97,2,113],[81,26,80,4,80,1,25,2,120,24,4,80,35,16,2,113],[81,47,80,4,80,1,25,2,120,24,4,80,469,16,2,113],[81,33,80,4,80,1,25,2,120,24,4,80,70,2,113],[81,54,80,4,80,1,25,2,120,24,4,80,22,16,2,113],[81,40,80,4,80,1,25,2,120,24,4,80,488,2,113],[81,61,80,4,80,1,25,2,120,24,4,80,507,2,113],[81,26,80,5,80,1,25,2,120,24,4,80,637,16,2,113],[81,47,80,5,80,1,25,2,120,24,4,80,0,2,113],[81,33,80,5,80,1,25,2,120,24,4,80,0,2,113],[81,54,80,5,80,1,25,2,120,24,4,80,501,2,113],[81,40,80,5,80,1,25,2,120,24,4,80,856,2,113],[81,61,80,5,80,1,25,2,120,24,4,80,251,2,113],[141,137],[140,2],[144,2,1],[80,0,80,4,27,97,21],[80,999,80,4,27,97,22],[80,0,80,4,27,97,23],[80,999,80,4,27,97,24],[80,1],[98,2,1,80,5],[82,2,1,69,129,55],[81,40,82,2,1,80,1,25,2,120,24,4,81,40,82,2,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[81,61,82,2,1,80,1,25,2,120,24,4,81,61,82,2,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[82,2,1,4,128,50],[145,2,141,137],[140,3],[144,3,5],[102,3,5,102,3,4,98,3,3,98,3,2,98,3,1],[82,3,2,81,25,81,26,82,3,1,80,1,25,2,120,24,4,112,32,82,3,3,81,25,81,33,82,3,1,80,1,25,2,120,24,4,112,32,24,81,40,82,3,1,80,1,25,2,120,24,4,112,24,99,3,4],[82,3,2,81,25,81,47,82,3,1,80,1,25,2,120,24,4,112,32,82,3,3,81,25,81,54,82,3,1,80,1,25,2,120,24,4,112,32,24,81,61,82,3,1,80,1,25,2,120,24,4,112,24,99,3,5],[145,3,141,137],[140,4],[144,4,5],[98,4,1],[163],[81,23],[98,4,3,81,24],[82,4,3,69,129,79],[81,21],[98,4,2,81,22],[82,4,2,69,129,78],[82,4,2,82,4,3,210,80,16777215,65,129,77],[82,4,1,82,4,2,82,4,3,85,4,4,85,4,5,136,56],[82,4,4,82,4,5,210,80,16777215,64,129,76],[84,71,1,112,4,2,113],[82,4,4,82,4,5,80,51543,211],[82,4,2,4,128,70],[82,4,3,4,128,67],[162],[145,4,141,137],[140,5],[144,5,2],[163],[81,23],[98,5,2,81,24],[82,5,2,69,129,98],[81,21],[98,5,1,81,22],[82,5,1,69,129,97],[82,5,1,82,5,2,210,80,2263842,64,129,94],[82,5,1,82,5,2,80,16777215,211],[84,72,1,112,4,2,113],[128,96],[82,5,1,82,5,2,210,80,51543,64,129,96],[82,5,1,82,5,2,80,2263842,211],[82,5,1,4,128,88],[82,5,2,4,128,85],[162],[145,5,141,137],[136,10],[136,43],[81,21,81,23,81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,208],[81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,209],[80,1,80,1,80,2263842,211],[80,0,97,68],[87,84,114,101,101,0,87,32,98,121,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,0,54,190,191],[80,0,177],[176,97,69],[84,68,1,112,4,2,113],[87,0,190,191],[87,73,116,101,114,97,116,105,111,110,32,0,81,68,49,54,80,58,48,54,190,191,147],[80,0,97,71],[80,1],[97,70,80,5],[81,70,69,129,118],[81,70,136,62],[81,70,4,128,114],[80,0,97,72],[136,81],[87,32,32,0,81,71,49,54,87,32,112,105,120,101,108,115,32,98,111,114,110,59,32,0,54,81,72,49,54,87,32,112,105,120,101,108,115,32,107,105,108,108,101,100,0,54,190,191,147],[87,32,32,40,116,111,111,107,32,0,176,81,69,25,80,1e3,27,49,54,87,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,0,54,176,80,1e3,27,49,54,87,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,0,54,190,191,147],[81,71,81,72,24,80,0,67,80,2e3,80,1e3,69,9,129,126],[87,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,0,80,2e3,80,1e3,80,1,52,54,87,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,0,54,190,147],[80,2e3,178],[87,0,190,191],[81,71,81,72,24,80,0,64,129,108],[87,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,0,190,191],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"The plough",author:"University of Oxford",date:"22/09/2016",time:"22:44:05",code:"PROGRAM ThePlough;\nBEGIN\n  blank(black);\n  colour(lightblue);\n  setxy(100,200);\n  blot(10);\n  setxy(300,250);\n  blot(10);\n  setxy(420,350);\n  blot(10);\n  setxy(570,490);\n  blot(10);\n  setxy(900,560);\n  blot(10);\n  setxy(840,720);\n  blot(10);\n  setxy(590,660);\n  blot(10);\n  setxy(570,490);\n  colour(silver);\n  polyline(8)\nEND.",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:8,lines:"5 7 9 11 13 15 17 19"}],total:8},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:7,lines:"6 8 10 12 14 16 18"},{name:"polyline",level:2,count:1,lines:"21"}],total:8},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"4 20"}],total:2},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"3"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,5,115,80,15,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,0,248],[80,10075135,221],[80,100,80,200,224],[80,10,243],[80,300,80,250,224],[80,10,243],[80,420,80,350,224],[80,10,243],[80,570,80,490,224],[80,10,243],[80,900,80,560,224],[80,10,243],[80,840,80,720,224],[80,10,243],[80,590,80,660,224],[80,10,243],[80,570,80,490,224],[80,12632256,221],[80,8,240],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"String functions",author:"University of Oxford",date:"22/09/2016",time:"22:43:30",code:"PROGRAM StringFunctions;\nCONST delay=500;\nVAR s1,s2,s3,s4,s5: string;\n    posn,n: integer;\nBEGIN\n  output(true,cream,true);\n  s1:='Turtle Pascal';\n  s2:=copy(s1,1,6);\n  writeln(s2+' is the name of a small animal.');\n  pause(delay);\n  s3:=copy(s1,8,6);\n  writeln(s3+' was a French philosopher.');\n  pause(delay);\n  s4:=insert('eter R',s3,2);\n  writeln(''''+s4+''' is a silly name.');\n  pause(delay);\n  writeln('\"'+s1+'\" has '+str(length(s1))+' characters.');\n  pause(delay);\n  writeln('In lower case it is \"'+lowercase(s1)+'\".');\n  writeln('In upper case it is \"'+uppercase(s1)+'\".');\n  pause(delay);\n  posn:=pos(s3,s1);\n  if posn>0 then\n    writeln('\"'+s3+'\" occurs within \"'+s1+'\" at position '+str(posn)+'.');\n  pause(delay);\n  s5:='3.14159';\n  writeln(s5+' times 100000 = '+str(qval(s5,100000,-1))+'.');\n  pause(delay);\n  n:=qval(s5,100000,-1);\n  writeln(str(n)+' divided by 100000 = '+qstr(n,100000,5)+'.');\n  writeln('');\n  pause(delay*5);\n  writeln('Now back to the Canvas and Console ...');\n  output(false,peach,true);\n  pause(delay*5);\n  output(false,lightred,false);\n  pause(delay*5);\n  console(true,lightblue);\n  writeln('You will see this on a clear light blue Console')\nEND.",usage:[{category:"Other Turtle commands",expressions:[{name:"console",level:2,count:1,lines:"38"},{name:"output",level:2,count:3,lines:"6 34 36"}],total:4},{category:"String operations",expressions:[{name:"writeln",level:1,count:12,lines:"9 12 15 17 19 20 24 27 30 31 33 39"},{name:"length",level:2,count:1,lines:"17"},{name:"lowercase",level:2,count:1,lines:"19"},{name:"uppercase",level:2,count:1,lines:"20"},{name:"copy",level:3,count:2,lines:"8 11"},{name:"insert",level:3,count:1,lines:"14"},{name:"pos",level:3,count:1,lines:"22"}],total:19},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:4,lines:"17 24 27 30"},{name:"qstr",level:2,count:1,lines:"30"},{name:"qval",level:2,count:2,lines:"27 29"}],total:7},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:10,lines:"10 13 16 18 21 25 28 32 35 37"}],total:10},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"23"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,12,115,80,22,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,-1,80,16777147,80,-1,166],[87,84,117,114,116,108,101,32,80,97,115,99,97,108,0,97,16,146],[81,16,80,1,80,6,57,97,17,146],[81,17,87,32,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,97,32,115,109,97,108,108,32,97,110,105,109,97,108,46,0,54,190,191],[80,500,178],[81,16,80,8,80,6,57,97,18,146],[81,18,87,32,119,97,115,32,97,32,70,114,101,110,99,104,32,112,104,105,108,111,115,111,112,104,101,114,46,0,54,190,191],[80,500,178],[87,101,116,101,114,32,82,0,81,18,80,2,59,97,19,146],[80,39,48,81,19,54,87,39,32,105,115,32,97,32,115,105,108,108,121,32,110,97,109,101,46,0,54,190,191,147],[80,500,178],[80,34,48,81,16,54,87,34,32,104,97,115,32,0,54,81,16,55,49,54,87,32,99,104,97,114,97,99,116,101,114,115,46,0,54,190,191,147],[80,500,178],[87,73,110,32,108,111,119,101,114,32,99,97,115,101,32,105,116,32,105,115,32,34,0,81,16,80,-1,56,54,87,34,46,0,54,190,191,147],[87,73,110,32,117,112,112,101,114,32,99,97,115,101,32,105,116,32,105,115,32,34,0,81,16,80,1,56,54,87,34,46,0,54,190,191,147],[80,500,178],[81,18,81,16,60,97,21],[81,21,80,0,67,129,22],[80,34,48,81,18,54,87,34,32,111,99,99,117,114,115,32,119,105,116,104,105,110,32,34,0,54,81,16,54,87,34,32,97,116,32,112,111,115,105,116,105,111,110,32,0,54,81,21,49,54,80,46,48,54,190,191,147],[80,500,178],[87,51,46,49,52,49,53,57,0,97,20,146],[81,20,87,32,116,105,109,101,115,32,49,48,48,48,48,48,32,61,32,0,54,81,20,80,1e5,80,1,16,53,49,54,80,46,48,54,190,191,147],[80,500,178],[81,20,80,1e5,80,1,16,53,97,22],[81,22,49,87,32,100,105,118,105,100,101,100,32,98,121,32,49,48,48,48,48,48,32,61,32,0,54,81,22,80,1e5,80,5,52,54,80,46,48,54,190,191,147],[87,0,190,191],[80,500,80,5,26,178],[87,78,111,119,32,98,97,99,107,32,116,111,32,116,104,101,32,67,97,110,118,97,115,32,97,110,100,32,67,111,110,115,111,108,101,32,46,46,46,0,190,191],[80,0,80,16764080,80,-1,166],[80,500,80,5,26,178],[80,0,80,13458524,80,0,166],[80,500,80,5,26,178],[80,-1,80,10075135,167],[87,89,111,117,32,119,105,108,108,32,115,101,101,32,116,104,105,115,32,111,110,32,97,32,99,108,101,97,114,32,108,105,103,104,116,32,98,108,117,101,32,67,111,110,115,111,108,101,0,190,191],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Stars (using ANGLES and FORGET)",author:"University of Oxford",date:"22/09/2016",time:"22:42:27",code:"PROGRAM Stars;\nVAR n: integer;\n\n  Procedure star(points,col: integer);\n  Var count: integer;\n  Begin\n    angles(points*2);\n    for count:=1 to points do\n      begin\n        forward(450);\n        back(450);\n        forget(1);\n        right(1);\n        forward(200);\n        back(200);\n        forget(1);\n        right(1)\n      end;\n    colour(col);\n    polygon(points*2)\n  End;\n\nBEGIN\n  penup;\n  for n:=3 to 12 do\n    begin\n      star(n,rgb(n-2));\n      pause(500)\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:2,lines:"11 15"},{name:"forward",level:1,count:2,lines:"10 14"},{name:"right",level:1,count:2,lines:"13 17"}],total:6},{category:"Turtle: drawing shapes",expressions:[{name:"forget",level:2,count:2,lines:"12 16"},{name:"polygon",level:2,count:1,lines:"20"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:1,lines:"19"},{name:"penup",level:1,count:1,lines:"24"},{name:"rgb",level:3,count:1,lines:"27"}],total:3},{category:"Canvas operations",expressions:[{name:"angles",level:2,count:1,lines:"7"}],total:1},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"28"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:2,lines:"8 25"},{name:"procedure",level:2,count:1,lines:"4"}],total:3},{category:"Subroutine calls",expressions:[{name:"star",level:0,count:1,lines:"27"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,6,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,23],[140,1],[144,1,3],[98,1,2,98,1,1],[82,1,1,80,2,26,212],[80,1],[98,1,3,82,1,1],[82,1,3,69,129,20],[80,450,227],[80,450,228],[80,1,237],[80,1,230],[80,200,227],[80,200,228],[80,1,237],[80,1,230],[82,1,3,4,128,9],[82,1,2,221],[82,1,1,80,2,26,241],[145,1,141,137],[160],[80,3],[97,17,80,12],[81,17,69,129,30],[81,17,81,17,80,2,25,222,136,4],[80,500,178],[81,17,4,128,25],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Solar system (using ARRAY)",author:"University of Oxford",date:"22/09/2016",time:"22:41:27",code:"PROGRAM SolarSystem;\nCONST sunradius=50000;\nVAR radius,distancefromsun,design,rotation,speed: array[1..8] of integer;\nVAR i: integer;\nBEGIN\n  radius[1]:=2433;\n  distancefromsun[1]:=5795;\n  speed[1]:=1607;\n  design[1]:=white;\n  radius[2]:=6053;\n  distancefromsun[2]:=10811;\n  speed[2]:=1174;\n  design[2]:=ochre;\n  radius[3]:=6371;\n  distancefromsun[3]:=14957;\n  speed[3]:=1000;\n  design[3]:=blue;\n  radius[4]:=3380;\n  distancefromsun[4]:=22784;\n  speed[4]:=802;\n  design[4]:=orangered;\n  radius[5]:=71492;\n  distancefromsun[5]:=77814;\n  speed[5]:=434;\n  design[5]:=lightred;\n  radius[6]:=58219;\n  distancefromsun[6]:=142700;\n  speed[6]:=323;\n  design[6]:=cream;\n  radius[7]:=23470;\n  distancefromsun[7]:=287030;\n  speed[7]:=182;\n  design[7]:=cyan;\n  radius[8]:=23716;\n  distancefromsun[8]:=449990;\n  speed[8]:=159;\n  design[8]:=royal;\n  angles(360000);\n  canvas(0,0,1000000,1000000);\n  resolution(500,500);\n  thickness(1);\n  penup;\n  while true do\n    begin\n      blank(black);\n      home;\n      colour(yellow);\n      blot(sunradius);\n      for i:=1 to 8 do\n        begin\n          home;\n          colour(white);\n          circle(distancefromsun[i]+sunradius);\n          right(rotation[i]);\n          forward(distancefromsun[i]+sunradius);\n          rotation[i]:=(rotation[i]+speed[i]) mod 360000;\n          colour(design[i]);\n          if i<=4 then\n            blot(radius[i]*2)\n          else\n            blot(radius[i]/2)\n        end;\n      update;\n      noupdate\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:1,lines:"55"},{name:"right",level:1,count:1,lines:"54"}],total:2},{category:"Turtle: absolute movement",expressions:[{name:"home",level:1,count:2,lines:"46 51"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:3,lines:"48 59 61"},{name:"circle",level:1,count:1,lines:"53"}],total:4},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"47 52 57"},{name:"penup",level:1,count:1,lines:"42"},{name:"thickness",level:1,count:1,lines:"41"}],total:5},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"45"},{name:"noupdate",level:1,count:1,lines:"64"},{name:"update",level:1,count:1,lines:"63"},{name:"angles",level:2,count:1,lines:"38"},{name:"canvas",level:2,count:1,lines:"39"},{name:"resolution",level:2,count:1,lines:"40"}],total:6},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"58"},{name:"else",level:1,count:1,lines:"60"},{name:"for",level:1,count:1,lines:"49"},{name:"while",level:2,count:1,lines:"43"}],total:4}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,56,115,80,66,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,17,97,16,80,8,97,17],[84,27,97,26,80,8,97,27],[84,37,97,36,80,8,97,37],[84,47,97,46,80,8,97,47],[84,57,97,56,80,8,97,57],[81,16,80,1,80,1,25,2,120,24,4,80,2433,2,113],[81,26,80,1,80,1,25,2,120,24,4,80,5795,2,113],[81,56,80,1,80,1,25,2,120,24,4,80,1607,2,113],[81,36,80,1,80,1,25,2,120,24,4,80,16777215,2,113],[81,16,80,2,80,1,25,2,120,24,4,80,6053,2,113],[81,26,80,2,80,1,25,2,120,24,4,80,10811,2,113],[81,56,80,2,80,1,25,2,120,24,4,80,1174,2,113],[81,36,80,2,80,1,25,2,120,24,4,80,12628016,2,113],[81,16,80,3,80,1,25,2,120,24,4,80,6371,2,113],[81,26,80,3,80,1,25,2,120,24,4,80,14957,2,113],[81,56,80,3,80,1,25,2,120,24,4,80,1e3,2,113],[81,36,80,3,80,1,25,2,120,24,4,80,255,2,113],[81,16,80,4,80,1,25,2,120,24,4,80,3380,2,113],[81,26,80,4,80,1,25,2,120,24,4,80,22784,2,113],[81,56,80,4,80,1,25,2,120,24,4,80,802,2,113],[81,36,80,4,80,1,25,2,120,24,4,80,16737792,2,113],[81,16,80,5,80,1,25,2,120,24,4,80,71492,2,113],[81,26,80,5,80,1,25,2,120,24,4,80,77814,2,113],[81,56,80,5,80,1,25,2,120,24,4,80,434,2,113],[81,36,80,5,80,1,25,2,120,24,4,80,13458524,2,113],[81,16,80,6,80,1,25,2,120,24,4,80,58219,2,113],[81,26,80,6,80,1,25,2,120,24,4,80,142700,2,113],[81,56,80,6,80,1,25,2,120,24,4,80,323,2,113],[81,36,80,6,80,1,25,2,120,24,4,80,16777147,2,113],[81,16,80,7,80,1,25,2,120,24,4,80,23470,2,113],[81,26,80,7,80,1,25,2,120,24,4,80,287030,2,113],[81,56,80,7,80,1,25,2,120,24,4,80,182,2,113],[81,36,80,7,80,1,25,2,120,24,4,80,65535,2,113],[81,16,80,8,80,1,25,2,120,24,4,80,23716,2,113],[81,26,80,8,80,1,25,2,120,24,4,80,449990,2,113],[81,56,80,8,80,1,25,2,120,24,4,80,159,2,113],[81,36,80,8,80,1,25,2,120,24,4,80,4286945,2,113],[80,36e4,212],[80,0,80,0,80,1e6,80,1e6,208],[80,500,80,500,209],[80,1,220],[160],[80,-1,129,68],[80,0,248],[216],[80,16776960,221],[80,5e4,243],[80,1],[97,66,80,8],[81,66,69,129,65],[216],[80,16777215,221],[81,26,81,66,80,1,25,2,120,24,4,112,80,5e4,24,242],[81,46,81,66,80,1,25,2,120,24,4,112,230],[81,26,81,66,80,1,25,2,120,24,4,112,80,5e4,24,227],[81,46,81,66,80,1,25,2,120,24,4,81,46,81,66,80,1,25,2,120,24,4,112,81,56,81,66,80,1,25,2,120,24,4,112,24,80,36e4,29,2,113],[81,36,81,66,80,1,25,2,120,24,4,112,221],[81,66,80,4,68,129,63],[81,16,81,66,80,1,25,2,120,24,4,112,80,2,26,243],[128,64],[81,16,81,66,80,1,25,2,120,24,4,112,80,2,27,243],[81,66,4,128,51],[162],[163],[128,45],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Snake (classic game)",author:"University of Oxford",date:"22/09/2016",time:"22:40:42",code:"PROGRAM SnakeGame;\nCONST boardsize=30;\n      snakecolour=purple;\n      applecolour=green;\nVAR snakelength: integer;\n    crash: boolean;\n\n  Procedure newapple;\n  Var x,y: integer;\n  Begin\n    repeat\n      x:=random(boardsize);\n      y:=random(boardsize)\n    until (pixcol(x,y)<>snakecolour);\n    pixset(x,y,applecolour)\n  End;\n\nBEGIN\n  canvas(0,0,boardsize,boardsize);\n  resolution(boardsize,boardsize);\n  angles(4);\n  blank(lightblue);\n  cursor(0);\n  colour(snakecolour);\n  thickness(1);\n  penup;\n  forward(1);\n  snakelength:=2;\n  newapple;\n  crash:=false;\n  repeat\n    noupdate;\n    if (abs(?key)=\\up) and (turtd<>2) then\n      direction(0);\n    if (abs(?key)=\\right) and (turtd<>3) then\n      direction(1);\n    if (abs(?key)=\\down) and (turtd<>0) then\n      direction(2);\n    if (abs(?key)=\\left) and (turtd<>1) then\n      direction(3);\n    forward(1);\n    if (turtx<0) or (turtx>=boardsize) or (turty<0) or (turty>=boardsize) then\n      crash:=true;\n    if pixcol(turtx,turty)=snakecolour then\n      crash:=true;\n    if pixcol(turtx,turty)=applecolour then\n      begin\n        inc(snakelength);\n        pixset(turtx,turty,snakecolour);\n       newapple\n      end;\n    colour(lightblue);\n    polyline(snakelength+2);\n    colour(snakecolour);\n    polyline(snakelength);\n    update;\n    pause(250-(snakelength*3))\n  until crash;\n  resolution(1000,1000);\n  blank(lilac);\n  setxy(boardsize/4,2*boardsize/5);\n  print('Score '+str(snakelength-2),20,100)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:2,lines:"27 41"}],total:2},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:4,lines:"34 36 38 40"},{name:"setxy",level:1,count:1,lines:"61"}],total:5},{category:"Turtle: drawing shapes",expressions:[{name:"polyline",level:2,count:2,lines:"53 55"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"24 52 54"},{name:"penup",level:1,count:1,lines:"26"},{name:"thickness",level:1,count:1,lines:"25"}],total:5},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:2,lines:"22 60"},{name:"noupdate",level:1,count:1,lines:"32"},{name:"update",level:1,count:1,lines:"56"},{name:"angles",level:2,count:1,lines:"21"},{name:"canvas",level:2,count:1,lines:"19"},{name:"resolution",level:2,count:2,lines:"20 59"},{name:"pixcol",level:3,count:3,lines:"14 44 46"},{name:"pixset",level:3,count:2,lines:"15 49"}],total:13},{category:"General arithmetic functions",expressions:[{name:"abs",level:1,count:4,lines:"33 35 37 39"},{name:"inc",level:1,count:1,lines:"48"},{name:"random",level:2,count:2,lines:"12 13"}],total:7},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"62"}],total:1},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:1,lines:"62"}],total:1},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"57"},{name:"cursor",level:2,count:1,lines:"23"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:7,lines:"33 35 37 39 42 44 46"},{name:"repeat",level:1,count:2,lines:"11 31"},{name:"procedure",level:2,count:1,lines:"8"}],total:10},{category:"Subroutine calls",expressions:[{name:"newapple",level:0,count:2,lines:"29 50"}],total:2}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,7,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,11],[140,1],[144,1,2],[80,30,19,98,1,1],[80,30,19,98,1,2],[82,1,1,82,1,2,210,80,8388736,65,129,6],[82,1,1,82,1,2,80,2263842,211],[145,1,141,137],[80,0,80,0,80,30,80,30,208],[80,30,80,30,209],[80,4,212],[80,10075135,248],[80,0,213],[80,8388736,221],[80,1,220],[160],[80,1,227],[80,2,97,17],[136,4],[80,0,97,18],[163],[80,-9,184,17,80,38,64,81,14,80,2,65,9,129,26],[80,0,219],[80,-9,184,17,80,39,64,81,14,80,3,65,9,129,28],[80,1,219],[80,-9,184,17,80,40,64,81,14,80,0,65,9,129,30],[80,2,219],[80,-9,184,17,80,37,64,81,14,80,1,65,9,129,32],[80,3,219],[80,1,227],[81,12,80,0,66,81,12,80,30,69,10,81,13,80,0,66,10,81,13,80,30,69,10,129,35],[80,-1,97,18],[81,12,81,13,210,80,8388736,64,129,37],[80,-1,97,18],[81,12,81,13,210,80,2263842,64,129,41],[84,17,1,112,4,2,113],[81,12,81,13,80,8388736,211],[136,4],[80,10075135,221],[81,17,80,2,24,240],[80,8388736,221],[81,17,240],[162],[80,250,81,17,80,3,26,25,178],[81,18,129,23],[80,1e3,80,1e3,209],[80,11572223,248],[80,30,80,4,27,80,2,80,30,26,80,5,27,224],[87,83,99,111,114,101,32,0,81,17,80,2,25,49,54,80,20,80,100,189,147],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Simple procedure",author:"University of Oxford",date:"22/09/2016",time:"22:39:30",code:"PROGRAM SimpleProc;\n\n  Procedure prong;\n  Begin\n    forward(400);\n    blot(20);\n    back(400)\n  End;\n\nBEGIN\n  repeat\n    randcol(10);\n    prong;\n    right(61)\n  until turtd=0\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:1,lines:"7"},{name:"forward",level:1,count:1,lines:"5"},{name:"right",level:1,count:1,lines:"14"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"6"}],total:1},{category:"Other Turtle commands",expressions:[{name:"randcol",level:1,count:1,lines:"12"}],total:1},{category:"Command structures",expressions:[{name:"repeat",level:1,count:1,lines:"11"},{name:"procedure",level:2,count:1,lines:"3"}],total:2},{category:"Subroutine calls",expressions:[{name:"prong",level:0,count:1,lines:"13"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,9],[140,1],[80,400,227],[80,20,243],[80,400,228],[141,137],[80,10,19,4,222,221],[136,4],[80,61,230],[81,14,80,0,64,129,9],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Drawing to the mouse",author:"University of Oxford",date:"22/09/2016",time:"22:38:40",code:"PROGRAM SimpleDraw;\n\n  Procedure palette;\n  Var colcode: integer;\n  Begin\n    for colcode:=1 to 10 do\n      begin\n        setxy(colcode*100-50,950);\n        colour(rgb(colcode));\n        blot(50)\n      end\n  End;\n\nBEGIN\n  palette;\n  home;\n  thickness(10);\n  blot(2);\n  repeat\n    repeat\n    until (?lmouse>0) or (?rmouse>0);\n    if ?mousey>900 then\n      colour(rgb(?mousex div 100+1))\n    else\n      if ?lmouse>0 then\n      drawxy(?mousex-turtx,?mousey-turty)\n    else\n      setxy(?mousex,?mousey)\n  until false\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:1,lines:"26"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"home",level:1,count:1,lines:"16"},{name:"setxy",level:1,count:2,lines:"8 28"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"10 18"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"9 23"},{name:"thickness",level:1,count:1,lines:"17"},{name:"rgb",level:3,count:2,lines:"9 23"}],total:5},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"22 25"},{name:"else",level:1,count:2,lines:"24 27"},{name:"for",level:1,count:1,lines:"6"},{name:"repeat",level:1,count:2,lines:"19 20"},{name:"procedure",level:2,count:1,lines:"3"}],total:8},{category:"Subroutine calls",expressions:[{name:"palette",level:0,count:1,lines:"15"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,14],[140,1],[144,1,1],[80,1],[98,1,1,80,10],[82,1,1,69,129,13],[82,1,1,80,100,26,80,50,25,80,950,224],[82,1,1,222,221],[80,50,243],[82,1,1,4,128,7],[145,1,141,137],[136,4],[216],[80,10,220],[80,2,243],[80,-1,184,80,0,67,80,-2,184,80,0,67,10,129,18],[80,-8,184,80,900,67,129,22],[80,-7,184,80,100,28,80,1,24,222,221],[128,26],[80,-1,184,80,0,67,129,25],[80,-7,184,81,12,25,80,-8,184,81,13,25,226],[128,26],[80,-7,184,80,-8,184,224],[80,0,129,18],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Sierpinski IFS",author:"University of Oxford",date:"22/09/2016",time:"22:37:16",code:"PROGRAM SierpinskiIFS;\nCONST xleft=0;\n      xright=999;\n      ytop=0;\n      ybottom=999;\n      scaledown=4;\n      mappings=3;\n      title='Sierpinski triangle';\n      live=black;\n      copied=darkgrey; \n      pauseval=2000;\nVAR xl,xr,yt,yb: integer;\n    coeffdiv: integer;\n    mapxx,mapxy,mapxc: array[1..mappings] of integer;\n    mapyx,mapyy,mapyc: array[1..mappings] of integer;\n    iteration,starttime: integer;\n    count,numborn,numkilled: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv:=100;\n    mapxx[1]:=50;\n    mapyx[1]:=0;\n    mapxy[1]:=0;\n    mapyy[1]:=50;\n    mapxc[1]:=250;\n    mapyc[1]:=0;\n    mapxx[2]:=50;\n    mapyx[2]:=0;\n    mapxy[2]:=0;\n    mapyy[2]:=50;\n    mapxc[2]:=0;\n    mapyc[2]:=500;\n    mapxx[3]:=50;\n    mapyx[3]:=0;\n    mapxy[3]:=0;\n    mapyy[3]:=50;\n    mapxc[3]:=500;\n    mapyc[3]:=500\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl:=xleft/scaledown;\n    xr:=xright/scaledown;\n    yt:=ytop/scaledown;\n    yb:=ybottom/scaledown;\n    for i:=1 to mappings do\n      begin\n        mapxc[i]:=mapxc[i]/scaledown;\n        mapyc[i]:=mapyc[i]/scaledown\n      end\n  End;\n\n  Procedure map(a,x,y: integer;var newx,newy: integer);\n  Begin\n    newx:=divmult(x,coeffdiv,mapxx[a])+divmult(y,coeffdiv,mapxy[a])+mapxc[a];\n    newy:=divmult(x,coeffdiv,mapyx[a])+divmult(y,coeffdiv,mapyy[a])+mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x,y,newx,newy: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        if pixcol(x,y)<>white then\n          begin\n            map(mapnum,x,y,newx,newy);\n            if pixcol(newx,newy)=white then\n              inc(numborn);\n            pixset(newx,newy,copied)\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x,y: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        if pixcol(x,y)=live then\n          begin\n            pixset(x,y,white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x,y)=copied then\n          pixset(x,y,live);\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl,yt,xr-xl+1,yb-yt+1);\n  resolution(xr-xl+1,yb-yt+1);\n  blank(live);\n  iteration:=0;\n  writeln(title+' by iterative mapping');\n  timeset(0);\n  repeat\n    starttime:=time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration '+str(iteration)+':');\n    numborn:=0;\n    for count:=1 to mappings do\n      domap(count);\n    numkilled:=0;\n    cleanup;\n    writeln('  '+str(numborn)+' pixels born; '+str(numkilled)+' pixels killed');\n    writeln('  (took '+str((time-starttime)/1000)+' seconds - total '+str(time/1000)+' seconds so far)');\n    if (numborn+numkilled>0) and (pauseval>=1000) then\n      begin\n        write('  (now pausing '+qstr(pauseval,1000,1)+' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn+numkilled=0;\n  writeln('FINISH - fixed point of iterative mapping has been reached')\nEND.",usage:[{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"100"},{name:"noupdate",level:1,count:2,lines:"65 81"},{name:"update",level:1,count:2,lines:"75 92"},{name:"canvas",level:2,count:1,lines:"98"},{name:"resolution",level:2,count:1,lines:"99"},{name:"pixcol",level:3,count:4,lines:"68 71 84 90"},{name:"pixset",level:3,count:3,lines:"73 86 91"}],total:14},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:3,lines:"72 87 106"},{name:"divmult",level:3,count:4,lines:"58 59"}],total:7},{category:"String operations",expressions:[{name:"write",level:1,count:1,lines:"118"},{name:"writeln",level:1,count:7,lines:"102 107 108 114 115 120 123"}],total:8},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:5,lines:"108 114 115"},{name:"qstr",level:2,count:1,lines:"118"}],total:6},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"119"},{name:"time",level:2,count:3,lines:"105 115"},{name:"timeset",level:2,count:1,lines:"103"}],total:5},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"68 71 84 90 116"},{name:"else",level:1,count:1,lines:"89"},{name:"for",level:1,count:6,lines:"49 66 67 82 83 110"},{name:"repeat",level:1,count:1,lines:"104"},{name:"procedure",level:2,count:5,lines:"19 42 56 62 78"}],total:18},{category:"Subroutine calls",expressions:[{name:"map",level:0,count:1,lines:"70"},{name:"setmaps",level:0,count:1,lines:"96"},{name:"setscale",level:0,count:1,lines:"97"},{name:"domap",level:0,count:1,lines:"111"},{name:"cleanup",level:0,count:1,lines:"113"}],total:5}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,45,115,80,60,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,27,97,26,80,3,97,27],[84,32,97,31,80,3,97,32],[84,37,97,36,80,3,97,37],[84,42,97,41,80,3,97,42],[84,47,97,46,80,3,97,47],[84,52,97,51,80,3,97,52],[128,88],[140,1],[80,100,97,25],[81,26,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,41,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,31,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,46,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,36,80,1,80,1,25,2,120,24,4,80,250,2,113],[81,51,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,26,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,41,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,31,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,46,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,36,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,51,80,2,80,1,25,2,120,24,4,80,500,2,113],[81,26,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,41,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,31,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,46,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,36,80,3,80,1,25,2,120,24,4,80,500,2,113],[81,51,80,3,80,1,25,2,120,24,4,80,500,2,113],[141,137],[140,2],[144,2,1],[80,0,80,4,27,97,21],[80,999,80,4,27,97,22],[80,0,80,4,27,97,23],[80,999,80,4,27,97,24],[80,1],[98,2,1,80,3],[82,2,1,69,129,43],[81,36,82,2,1,80,1,25,2,120,24,4,81,36,82,2,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[81,51,82,2,1,80,1,25,2,120,24,4,81,51,82,2,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[82,2,1,4,128,38],[145,2,141,137],[140,3],[144,3,5],[102,3,5,102,3,4,98,3,3,98,3,2,98,3,1],[82,3,2,81,25,81,26,82,3,1,80,1,25,2,120,24,4,112,32,82,3,3,81,25,81,31,82,3,1,80,1,25,2,120,24,4,112,32,24,81,36,82,3,1,80,1,25,2,120,24,4,112,24,99,3,4],[82,3,2,81,25,81,41,82,3,1,80,1,25,2,120,24,4,112,32,82,3,3,81,25,81,46,82,3,1,80,1,25,2,120,24,4,112,32,24,81,51,82,3,1,80,1,25,2,120,24,4,112,24,99,3,5],[145,3,141,137],[140,4],[144,4,5],[98,4,1],[163],[81,23],[98,4,3,81,24],[82,4,3,69,129,67],[81,21],[98,4,2,81,22],[82,4,2,69,129,66],[82,4,2,82,4,3,210,80,16777215,65,129,65],[82,4,1,82,4,2,82,4,3,85,4,4,85,4,5,136,44],[82,4,4,82,4,5,210,80,16777215,64,129,64],[84,59,1,112,4,2,113],[82,4,4,82,4,5,80,4210752,211],[82,4,2,4,128,58],[82,4,3,4,128,55],[162],[145,4,141,137],[140,5],[144,5,2],[163],[81,23],[98,5,2,81,24],[82,5,2,69,129,86],[81,21],[98,5,1,81,22],[82,5,1,69,129,85],[82,5,1,82,5,2,210,80,0,64,129,82],[82,5,1,82,5,2,80,16777215,211],[84,60,1,112,4,2,113],[128,84],[82,5,1,82,5,2,210,80,4210752,64,129,84],[82,5,1,82,5,2,80,0,211],[82,5,1,4,128,76],[82,5,2,4,128,73],[162],[145,5,141,137],[136,10],[136,31],[81,21,81,23,81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,208],[81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,209],[80,0,248],[80,0,97,56],[87,83,105,101,114,112,105,110,115,107,105,32,116,114,105,97,110,103,108,101,0,87,32,98,121,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,0,54,190,191],[80,0,177],[176,97,57],[84,56,1,112,4,2,113],[87,0,190,191],[87,73,116,101,114,97,116,105,111,110,32,0,81,56,49,54,80,58,48,54,190,191,147],[80,0,97,59],[80,1],[97,58,80,3],[81,58,69,129,106],[81,58,136,50],[81,58,4,128,102],[80,0,97,60],[136,69],[87,32,32,0,81,59,49,54,87,32,112,105,120,101,108,115,32,98,111,114,110,59,32,0,54,81,60,49,54,87,32,112,105,120,101,108,115,32,107,105,108,108,101,100,0,54,190,191,147],[87,32,32,40,116,111,111,107,32,0,176,81,57,25,80,1e3,27,49,54,87,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,0,54,176,80,1e3,27,49,54,87,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,0,54,190,191,147],[81,59,81,60,24,80,0,67,80,2e3,80,1e3,69,9,129,114],[87,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,0,80,2e3,80,1e3,80,1,52,54,87,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,0,54,190,147],[80,2e3,178],[87,0,190,191],[81,59,81,60,24,80,0,64,129,96],[87,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,0,190,191],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Sierpinski dots",author:"University of Oxford",date:"22/09/2016",time:"22:32:11",code:"PROGRAM SierpinskiDots;\nVAR x: array[0..2] of integer;\n    y: array[0..2] of integer;\n    thisx,thisy,thisc: integer;\nBEGIN\n  x[0]:=400;\n  y[0]:=138;\n  x[1]:=843;\n  y[1]:=650;\n  x[2]:=179;\n  y[2]:=778;\n  thisx:=random(200)+400;\n  thisy:=random(200)+400;\n  repeat\n    thisc:=random(3);\n    thisx:=(thisx+x[thisc])/2;\n    thisy:=(thisy+y[thisc])/2;\n    pixset(thisx,thisy,purple)\n  until 0=1  \nEND.",usage:[{category:"Canvas operations",expressions:[{name:"pixset",level:3,count:1,lines:"18"}],total:1},{category:"General arithmetic functions",expressions:[{name:"random",level:2,count:3,lines:"12 13 15"}],total:3},{category:"Command structures",expressions:[{name:"repeat",level:1,count:1,lines:"14"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,18,115,80,28,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,17,97,16,80,3,97,17],[84,22,97,21,80,3,97,22],[81,16,80,0,2,120,24,4,80,400,2,113],[81,21,80,0,2,120,24,4,80,138,2,113],[81,16,80,1,2,120,24,4,80,843,2,113],[81,21,80,1,2,120,24,4,80,650,2,113],[81,16,80,2,2,120,24,4,80,179,2,113],[81,21,80,2,2,120,24,4,80,778,2,113],[80,200,19,80,400,24,97,26],[80,200,19,80,400,24,97,27],[80,3,19,97,28],[81,26,81,16,81,28,2,120,24,4,112,24,80,2,27,97,26],[81,27,81,21,81,28,2,120,24,4,112,24,80,2,27,97,27],[81,26,81,27,80,8388736,211],[80,0,80,1,64,129,13],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Sierpinski colour",author:"University of Oxford",date:"22/09/2016",time:"23:37:16",code:"PROGRAM SierpinskiColour;\nCONST xleft=0;\n      xright=999;\n      ytop=0;\n      ybottom=999;\n      scaledown=4;\n      mappings=3;\n      title='Sierpinski triangle';\n      gridlines=5;\n      gridthick=64;\nVAR xl,xr,yt,yb,gt: integer;\n    coeffdiv: integer;\n    mapxx,mapxy,mapxc: array[1..mappings] of integer;\n    mapyx,mapyy,mapyc: array[1..mappings] of integer;\n    count: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv:=100;\n    mapxx[1]:=50;\n    mapyx[1]:=0;\n    mapxy[1]:=0;\n    mapyy[1]:=50;\n    mapxc[1]:=250;\n    mapyc[1]:=0;\n    mapxx[2]:=50;\n    mapyx[2]:=0;\n    mapxy[2]:=0;\n    mapyy[2]:=50;\n    mapxc[2]:=0;\n    mapyc[2]:=500;\n    mapxx[3]:=50;\n    mapyx[3]:=0;\n    mapxy[3]:=0;\n    mapyy[3]:=50;\n    mapxc[3]:=500;\n    mapyc[3]:=500\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl:=xleft/scaledown;\n    xr:=xright/scaledown;\n    yt:=ytop/scaledown;\n    yb:=ybottom/scaledown;\n    for i:=1 to mappings do\n      begin\n        mapxc[i]:=mapxc[i]/scaledown;\n        mapyc[i]:=mapyc[i]/scaledown\n      end;\n    gt:=gridthick/scaledown\n  End;\n\n  Procedure background(rad: integer);\n  Var x,y: integer;\n  Begin\n    thickness(gt);\n    colour(darkgrey);\n    for x:=1 to gridlines-1 do\n      begin\n        setxy(xl+divmult(xr-xl,gridlines,x),yt);\n        drawxy(0,yb-yt)\n      end;   \n    for y:=1 to gridlines-1 do\n      begin\n        setxy(xl+gt/2,yt+divmult(yb-yt,gridlines,y));\n        drawxy(xr-xl-gt,0)\n      end;\n    colour(black);\n    setxy(xl,yt);\n    drawxy(xr-xl,0);\n    drawxy(0,yb-yt);\n    drawxy(xl-xr,0);\n    drawxy(0,yt-yb);\n    for x:=0 to gridlines-1 do\n      for y:=0 to gridlines-1 do\n        recolour(xl+divmult(xr-xl,gridlines,x)+gt,\n                 yt+divmult(yb-yt,gridlines,y)+gt,\n                 divmult(255,gridlines-1,x)*#10000\n                 +divmult(255,gridlines-1,y)*#100\n                 +divmult(255,2*gridlines-2,2*gridlines-2-x-y)*#1)\n  End;\n\n  Procedure map(a,x,y: integer;var newx,newy: integer);\n  Begin\n    newx:=divmult(x,coeffdiv,mapxx[a])+divmult(y,coeffdiv,mapxy[a])+mapxc[a];\n    newy:=divmult(x,coeffdiv,mapyx[a])+divmult(y,coeffdiv,mapyy[a])+mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x,y,newx,newy: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        begin\n          map(mapnum,x,y,newx,newy);\n          pixset(newx,newy,pixcol(x,y))\n        end;\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl,yt,xr-xl+1,yb-yt+1);\n  resolution(xr-xl+1,yb-yt+1);\n  background(6);\n  writeln(title+' mappings in colour');\n  for count:=1 to mappings do\n    domap(count)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:6,lines:"63 68 72 73 74 75"}],total:6},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:3,lines:"62 67 71"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"59 70"},{name:"thickness",level:1,count:1,lines:"58"}],total:3},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"94"},{name:"update",level:1,count:1,lines:"101"},{name:"canvas",level:2,count:1,lines:"107"},{name:"resolution",level:2,count:1,lines:"108"},{name:"pixcol",level:3,count:1,lines:"99"},{name:"pixset",level:3,count:1,lines:"99"},{name:"recolour",level:3,count:1,lines:"78"}],total:7},{category:"General arithmetic functions",expressions:[{name:"divmult",level:3,count:11,lines:"62 67 78 79 80 81 82 87 88"}],total:11},{category:"String operations",expressions:[{name:"writeln",level:1,count:1,lines:"110"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:8,lines:"47 60 65 76 77 95 96 111"},{name:"procedure",level:2,count:5,lines:"17 40 55 85 91"}],total:13},{category:"Subroutine calls",expressions:[{name:"map",level:0,count:1,lines:"98"},{name:"setmaps",level:0,count:1,lines:"105"},{name:"setscale",level:0,count:1,lines:"106"},{name:"background",level:0,count:1,lines:"109"},{name:"domap",level:0,count:1,lines:"112"}],total:5}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,42,115,80,57,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,28,97,27,80,3,97,28],[84,33,97,32,80,3,97,33],[84,38,97,37,80,3,97,38],[84,43,97,42,80,3,97,43],[84,48,97,47,80,3,97,48],[84,53,97,52,80,3,97,53],[128,100],[140,1],[80,100,97,26],[81,27,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,42,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,32,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,47,80,1,80,1,25,2,120,24,4,80,50,2,113],[81,37,80,1,80,1,25,2,120,24,4,80,250,2,113],[81,52,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,27,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,42,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,32,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,47,80,2,80,1,25,2,120,24,4,80,50,2,113],[81,37,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,52,80,2,80,1,25,2,120,24,4,80,500,2,113],[81,27,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,42,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,32,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,47,80,3,80,1,25,2,120,24,4,80,50,2,113],[81,37,80,3,80,1,25,2,120,24,4,80,500,2,113],[81,52,80,3,80,1,25,2,120,24,4,80,500,2,113],[141,137],[140,2],[144,2,1],[80,0,80,4,27,97,21],[80,999,80,4,27,97,22],[80,0,80,4,27,97,23],[80,999,80,4,27,97,24],[80,1],[98,2,1,80,3],[82,2,1,69,129,43],[81,37,82,2,1,80,1,25,2,120,24,4,81,37,82,2,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[81,52,82,2,1,80,1,25,2,120,24,4,81,52,82,2,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[82,2,1,4,128,38],[80,64,80,4,27,97,25],[145,2,141,137],[140,3],[144,3,3],[98,3,1],[81,25,220],[80,4210752,221],[80,1],[98,3,2,80,5,80,1,25],[82,3,2,69,129,56],[81,21,81,22,81,21,25,80,5,82,3,2,32,24,81,23,224],[80,0,81,24,81,23,25,226],[82,3,2,4,128,51],[80,1],[98,3,3,80,5,80,1,25],[82,3,3,69,129,62],[81,21,81,25,80,2,27,24,81,23,81,24,81,23,25,80,5,82,3,3,32,24,224],[81,22,81,21,25,81,25,25,80,0,226],[82,3,3,4,128,57],[80,0,221],[81,21,81,23,224],[81,22,81,21,25,80,0,226],[80,0,81,24,81,23,25,226],[81,21,81,22,25,80,0,226],[80,0,81,23,81,24,25,226],[80,0],[98,3,2,80,5,80,1,25],[82,3,2,69,129,77],[80,0],[98,3,3,80,5,80,1,25],[82,3,3,69,129,76],[81,21,81,22,81,21,25,80,5,82,3,2,32,24,81,25,24,81,23,81,24,81,23,25,80,5,82,3,3,32,24,81,25,24,80,255,80,5,80,1,25,82,3,2,32,80,65536,26,80,255,80,5,80,1,25,82,3,3,32,80,256,26,24,80,255,80,2,80,5,26,80,2,25,80,2,80,5,26,80,2,25,82,3,2,25,82,3,3,25,32,80,1,26,24,252],[82,3,3,4,128,72],[82,3,2,4,128,69],[145,3,141,137],[140,4],[144,4,5],[102,4,5,102,4,4,98,4,3,98,4,2,98,4,1],[82,4,2,81,26,81,27,82,4,1,80,1,25,2,120,24,4,112,32,82,4,3,81,26,81,32,82,4,1,80,1,25,2,120,24,4,112,32,24,81,37,82,4,1,80,1,25,2,120,24,4,112,24,99,4,4],[82,4,2,81,26,81,42,82,4,1,80,1,25,2,120,24,4,112,32,82,4,3,81,26,81,47,82,4,1,80,1,25,2,120,24,4,112,32,24,81,52,82,4,1,80,1,25,2,120,24,4,112,24,99,4,5],[145,4,141,137],[140,5],[144,5,5],[98,5,1],[163],[81,23],[98,5,3,81,24],[82,5,3,69,129,98],[81,21],[98,5,2,81,22],[82,5,2,69,129,97],[82,5,1,82,5,2,82,5,3,85,5,4,85,5,5,136,78],[82,5,4,82,5,5,82,5,2,82,5,3,210,211],[82,5,2,4,128,92],[82,5,3,4,128,89],[162],[145,5,141,137],[136,10],[136,31],[81,21,81,23,81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,208],[81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,209],[80,6,136,45],[87,83,105,101,114,112,105,110,115,107,105,32,116,114,105,97,110,103,108,101,0,87,32,109,97,112,112,105,110,103,115,32,105,110,32,99,111,108,111,117,114,0,54,190,191],[80,1],[97,57,80,3],[81,57,69,129,111],[81,57,136,84],[81,57,4,128,107],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Sierpinski triangle",author:"University of Oxford",date:"22/09/2016",time:"22:22:28",code:"PROGRAM Sierpinski;\n\n  Procedure triangle(x1,y1,x2,y2,x3,y3: integer);\n  var x12,y12,x23,y23,x31,y31: integer;\n  Begin\n    setxy(x1,y1);\n    setxy(x2,y2);\n    setxy(x3,y3);\n    setxy(x1,y1);\n    colour(black);\n    polyline(4);\n    if hypot(x2-x1,y2-y1,1)>3 then\n      begin\n        x12:=(x1+x2)/2;\n        y12:=(y1+y2)/2;\n        x23:=(x2+x3)/2;\n        y23:=(y2+y3)/2;\n        x31:=(x3+x1)/2;\n        y31:=(y3+y1)/2;\n        setxy(x12,y12);\n        setxy(x23,y23);\n        setxy(x31,y31);\n        colour(white);\n        polygon(3);\n        triangle(x1,y1,x12,y12,x31,y31);\n        triangle(x2,y2,x23,y23,x12,y12);\n        triangle(x3,y3,x31,y31,x23,y23)   \n      end\n  End;\n \nBEGIN\n  blank(cream);\n  thickness(1);\n  triangle(400,138,843,650,179,778)\nEND.",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:7,lines:"6 7 8 9 20 21 22"}],total:7},{category:"Turtle: drawing shapes",expressions:[{name:"polygon",level:2,count:1,lines:"24"},{name:"polyline",level:2,count:1,lines:"11"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"10 23"},{name:"thickness",level:1,count:1,lines:"33"}],total:3},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"32"}],total:1},{category:"General arithmetic functions",expressions:[{name:"hypot",level:2,count:1,lines:"12"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"12"},{name:"procedure",level:2,count:1,lines:"3"}],total:2},{category:"Subroutine calls",expressions:[{name:"triangle",level:0,count:4,lines:"25 26 27 34"}],total:4}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,29],[140,1],[144,1,12],[98,1,6,98,1,5,98,1,4,98,1,3,98,1,2,98,1,1],[82,1,1,82,1,2,224],[82,1,3,82,1,4,224],[82,1,5,82,1,6,224],[82,1,1,82,1,2,224],[80,0,221],[80,4,240],[82,1,3,82,1,1,25,82,1,4,82,1,2,25,80,1,34,80,3,67,129,28],[82,1,1,82,1,3,24,80,2,27,98,1,7],[82,1,2,82,1,4,24,80,2,27,98,1,8],[82,1,3,82,1,5,24,80,2,27,98,1,9],[82,1,4,82,1,6,24,80,2,27,98,1,10],[82,1,5,82,1,1,24,80,2,27,98,1,11],[82,1,6,82,1,2,24,80,2,27,98,1,12],[82,1,7,82,1,8,224],[82,1,9,82,1,10,224],[82,1,11,82,1,12,224],[80,16777215,221],[80,3,241],[82,1,1,82,1,2,82,1,7,82,1,8,82,1,11,82,1,12,136,4],[82,1,3,82,1,4,82,1,9,82,1,10,82,1,7,82,1,8,136,4],[82,1,5,82,1,6,82,1,11,82,1,12,82,1,9,82,1,10,136,4],[145,1,141,137],[80,16777147,248],[80,1,220],[80,400,80,138,80,843,80,650,80,179,80,778,136,4],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Arcade shooting game",author:"University of Oxford",date:"22/09/2016",time:"22:21:26",code:"PROGRAM Shoot;\nCONST targets=10;\nVAR facex,facey: integer;\n    facexspeed,faceyspeed: integer;\n    hits,i: integer;\n\n  Procedure bottle(x,y: integer);\n  Begin\n    setxy(x,y);\n    colour(cyan);\n    movexy(0,-15);\n    thickness(40);\n    drawxy(0,-50);\n    thickness(10);\n    drawxy(0,-40);\n    thickness(2);\n    movexy(-20,90);\n    movexy(40,0);\n    movexy(0,-20);\n    movexy(-40,0);\n    colour(purple);\n    polygon(4);\n    movexy(20,35)\n  End;\n\n  Procedure addhat;\n  Begin\n    setxy(facex,facey-80);\n    colour(darkgrey);\n    ellblot(90,30);\n    thickness(2);\n    colour(black);\n    ellipse(90,30);\n    movexy(-70,0);\n    thickness(4);\n    drawxy(35,-70);\n    drawxy(70,0);\n    drawxy(35,70);\n    colour(darkgrey);\n    thickness(1);\n    polygon(4)\n  End;\n\n  Procedure face;\n  Begin\n    thickness(1);\n    colour(#ff8899);\n    blot(100);\n    colour(white);\n    setxy(facex-20,facey-20);\n    blot(10);\n    colour(black);\n    blot(4);\n    thickness(4);\n    movexy(0,-22);\n    colour(#663300);\n    drawxy(15,15);\n    thickness(1);\n    colour(white);\n    setxy(facex+20,facey-20);\n    blot(10);\n    colour(black);\n    blot(4);\n    thickness(4);\n    movexy(0,-22);\n    colour(#663300);\n    drawxy(-15,15);\n    addhat;\n    setxy(facex,facey+13);\n    colour(red);\n    blot(10);\n    movexy(0,32);\n    ellblot(30,6);\n    colour(white);\n    ellblot(20,4)\n  End;\n\n  Procedure background;\n  Begin\n    blank(coffee);\n    bottle(100,500);\n    bottle(200,500);\n    bottle(450,500);\n    bottle(500,500);\n    bottle(565,500);\n    bottle(865,500);\n    colour(darkbrown);\n    thickness(20);\n    setxy(0,125);\n    drawxy(1000,0);\n    setxy(0,325);\n    drawxy(1000,0);\n    setxy(0,525);\n    drawxy(1000,0);\n    colour(brown);\n    thickness(30);\n    setxy(0,100);\n    drawxy(1000,0);\n    setxy(0,300);\n    drawxy(1000,0);\n    setxy(0,500);\n    drawxy(1000,0)\n  End;\n\n  Procedure gunsight;\n  Begin\n    colour(black);\n    thickness(6);\n    setxy(?mousex-50,?mousey);\n    drawxy(100,0);\n    setxy(?mousex,?mousey-50);\n    drawxy(0,100)\n  End;\n\nBEGIN\n  facex:=-100;\n  facey:=625;\n  facexspeed:=5;\n  faceyspeed:=0;\n  hits:=0;\n  cursor(0);\n  while hits<targets do\n    begin\n      noupdate;\n      background;\n      setxy(facex,facey);\n      face;\n      for i:=1 to hits do\n        bottle(50*i-35,740);\n      colour(brown);\n      thickness(272);\n      setxy(0,863);\n      drawxy(1000,0);\n      gunsight;\n      thickness(2);\n      update;\n      facex:=facex+facexspeed;\n      facey:=facey+faceyspeed;\n      if facex>1100 then\n        facex:=-100;\n      if facex<-100 then\n        facex:=1100;\n      if (facey<100) or (facey>625) then\n        faceyspeed:=faceyspeed*-1;\n      if ((?lmouse>0) and (((?mousex-facex)*(?mousex-facex))+((?mousey-facey)*(?mousey-facey))<10000)) then\n        begin\n          facex:=-100;\n          facexspeed:=random(5)+2;\n          faceyspeed:=random(9)-4;\n          facey:=random(550)+50;\n          inc(hits)\n        end\n    end;\n  blank(black);\n  setxy(200,450);\n  colour(green);\n  print('  Well done!  ',4,75)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:16,lines:"13 15 36 37 38 57 67 90 92 94 98 100 102 110 112 133"},{name:"movexy",level:2,count:10,lines:"11 17 18 19 20 23 34 55 65 72"}],total:26},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:16,lines:"9 28 50 60 69 89 91 93 97 99 101 109 111 126 132 155"}],total:16},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:6,lines:"48 51 53 61 63 71"},{name:"ellblot",level:1,count:3,lines:"30 73 75"},{name:"ellipse",level:1,count:1,lines:"33"},{name:"polygon",level:2,count:2,lines:"22 41"}],total:12},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:19,lines:"10 21 29 32 39 47 49 52 56 59 62 66 70 74 87 95 107 130 156"},{name:"thickness",level:1,count:15,lines:"12 14 16 31 35 40 46 54 58 64 88 96 108 131 135"}],total:34},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:2,lines:"80 154"},{name:"noupdate",level:1,count:1,lines:"124"},{name:"update",level:1,count:1,lines:"136"}],total:4},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:1,lines:"151"},{name:"random",level:2,count:3,lines:"148 149 150"}],total:4},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"157"}],total:1},{category:"Input and timing routines",expressions:[{name:"cursor",level:2,count:1,lines:"121"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:4,lines:"139 141 143 145"},{name:"for",level:1,count:1,lines:"128"},{name:"while",level:2,count:1,lines:"122"},{name:"procedure",level:2,count:5,lines:"7 26 44 78 105"}],total:11},{category:"Subroutine calls",expressions:[{name:"addhat",level:0,count:1,lines:"68"},{name:"bottle",level:0,count:7,lines:"81 82 83 84 85 86 129"},{name:"background",level:0,count:1,lines:"125"},{name:"face",level:0,count:1,lines:"127"},{name:"gunsight",level:0,count:1,lines:"134"}],total:11}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,11,115,80,26,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,104],[140,1],[144,1,2],[98,1,2,98,1,1],[82,1,1,82,1,2,224],[80,65535,221],[80,0,80,15,16,225],[80,40,220],[80,0,80,50,16,226],[80,10,220],[80,0,80,40,16,226],[80,2,220],[80,20,16,80,90,225],[80,40,80,0,225],[80,0,80,20,16,225],[80,40,16,80,0,225],[80,8388736,221],[80,4,241],[80,20,80,35,225],[145,1,141,137],[140,2],[81,21,81,22,80,80,25,224],[80,4210752,221],[80,90,80,30,245],[80,2,220],[80,0,221],[80,90,80,30,244],[80,70,16,80,0,225],[80,4,220],[80,35,80,70,16,226],[80,70,80,0,226],[80,35,80,70,226],[80,4210752,221],[80,1,220],[80,4,241],[141,137],[140,3],[80,1,220],[80,16746649,221],[80,100,243],[80,16777215,221],[81,21,80,20,25,81,22,80,20,25,224],[80,10,243],[80,0,221],[80,4,243],[80,4,220],[80,0,80,22,16,225],[80,6697728,221],[80,15,80,15,226],[80,1,220],[80,16777215,221],[81,21,80,20,24,81,22,80,20,25,224],[80,10,243],[80,0,221],[80,4,243],[80,4,220],[80,0,80,22,16,225],[80,6697728,221],[80,15,16,80,15,226],[136,23],[81,21,81,22,80,13,24,224],[80,16711680,221],[80,10,243],[80,0,80,32,225],[80,30,80,6,245],[80,16777215,221],[80,20,80,4,245],[141,137],[140,4],[80,9596735,248],[80,100,80,500,136,4],[80,200,80,500,136,4],[80,450,80,500,136,4],[80,500,80,500,136,4],[80,565,80,500,136,4],[80,865,80,500,136,4],[80,6045747,221],[80,20,220],[80,0,80,125,224],[80,1e3,80,0,226],[80,0,80,325,224],[80,1e3,80,0,226],[80,0,80,525,224],[80,1e3,80,0,226],[80,9849600,221],[80,30,220],[80,0,80,100,224],[80,1e3,80,0,226],[80,0,80,300,224],[80,1e3,80,0,226],[80,0,80,500,224],[80,1e3,80,0,226],[141,137],[140,5],[80,0,221],[80,6,220],[80,-7,184,80,50,25,80,-8,184,224],[80,100,80,0,226],[80,-7,184,80,-8,184,80,50,25,224],[80,0,80,100,226],[141,137],[80,100,16,97,21],[80,625,97,22],[80,5,97,23],[80,0,97,24],[80,0,97,25],[80,0,213],[81,25,80,10,66,129,142],[163],[136,71],[81,21,81,22,224],[136,39],[80,1],[97,26,81,25],[81,26,69,129,120],[80,50,81,26,26,80,35,25,80,740,136,4],[81,26,4,128,116],[80,9849600,221],[80,272,220],[80,0,80,863,224],[80,1e3,80,0,226],[136,96],[80,2,220],[162],[81,21,81,23,24,97,21],[81,22,81,24,24,97,22],[81,21,80,1100,67,129,131],[80,100,16,97,21],[81,21,80,100,16,66,129,133],[80,1100,97,21],[81,22,80,100,66,81,22,80,625,67,10,129,135],[81,24,80,1,16,26,97,24],[80,-1,184,80,0,67,80,-7,184,81,21,25,80,-7,184,81,21,25,26,80,-8,184,81,22,25,80,-8,184,81,22,25,26,24,80,1e4,66,9,129,141],[80,100,16,97,21],[80,5,19,80,2,24,97,23],[80,9,19,80,4,25,97,24],[80,550,19,80,50,24,97,22],[84,25,1,112,4,2,113],[128,110],[80,0,248],[80,200,80,450,224],[80,2263842,221],[87,32,32,87,101,108,108,32,100,111,110,101,33,32,32,0,80,4,80,75,189],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Sex ratio",author:"University of Oxford",date:"22/09/2016",time:"22:17:45",code:"PROGRAM SexRatio;\nCONST population=1000;\n      matepergen=400;\n      randomvar=1; {%}\n      leftmargin=70;\n      topmargin=20;\nVAR female: array[1..population] of boolean;\n    fop: array[1..population] of integer;\n    generation: integer;\n    n: integer;\n\n  Procedure axes;\n  Var i: integer;\n  Begin\n    for i:=1 to 9 do\n      begin\n        setxy(leftmargin+i*100-25,topmargin+800);\n        print(str(i*100),4,20)\n      end;\n    for i:=2 to 10 do\n      begin\n        setxy(0,1000-i*100);\n        colour(black);\n        print(str(i*10)+'%',4,20);\n        movexy(leftmargin,topmargin);\n        colour(lightgrey);\n        drawxy(1000-leftmargin,0)\n      end;\n    setxy(leftmargin,topmargin);\n    colour(black);\n    drawxy(0,800);\n    drawxy(1000-leftmargin,0);\n    colour(red);\n    setxy(50,880);\n    print('Proportion of Females in Population, over 900 Generations',4,25);\n    setxy(50,930);\n    print('with Female Offspring Probability genes initially set 90%+',4,25)\n  End;\n\n  Procedure graph;\n  VAR females,n: integer;\n  Begin\n    females:=0;\n    for n:=1 to population do\n      if female[n] then\n        inc(females);\n    colour(red);\n    setxy(leftmargin+generation,topmargin+1000-females);\n    if generation>0 then\n      polyline(2)\n  End;\n\n  Procedure domating;\n  Var A,B,replace: integer;\n      inheritA: boolean;\n  Begin\n    repeat\n      A:=random(population)+1;\n      B:=random(population)+1\n    until female[A]<>female[B];\n    inheritA:=(random(2)=0);\n    replace:=random(population)+1;\n    if inheritA then\n      fop[replace]:=fop[A]\n    else\n      fop[replace]:=fop[B];\n    female[replace]:=fop[replace]>random(1000);\n    fop[replace]:=fop[replace]\n                  +random(randomvar*20+1)-randomvar*10;\n    fop[replace]:=max(0,min(1000,fop[replace]))\n  End;\n\nBEGIN\n  axes;\n  for n:=1 to population do\n    begin\n      female[n]:=(random(2)=0);\n      fop[n]:=900+random(101) {900/1000 minimum}\n    end;\n  generation:=0;\n  repeat\n    graph;\n    inc(generation);\n    for n:=1 to matepergen do\n      domating;\n  until generation=900\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:3,lines:"27 31 32"},{name:"movexy",level:2,count:1,lines:"25"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:6,lines:"17 22 29 34 36 48"}],total:6},{category:"Turtle: drawing shapes",expressions:[{name:"polyline",level:2,count:1,lines:"50"}],total:1},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:5,lines:"23 26 30 33 47"}],total:5},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:2,lines:"46 83"},{name:"max",level:2,count:1,lines:"70"},{name:"min",level:2,count:1,lines:"70"},{name:"random",level:2,count:8,lines:"58 59 61 62 67 69 77 78"}],total:12},{category:"String operations",expressions:[{name:"print",level:1,count:4,lines:"18 24 35 37"}],total:4},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:2,lines:"18 24"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:3,lines:"45 49 63"},{name:"else",level:1,count:1,lines:"65"},{name:"for",level:1,count:5,lines:"15 20 44 75 84"},{name:"repeat",level:1,count:2,lines:"57 81"},{name:"procedure",level:2,count:3,lines:"12 40 53"}],total:14},{category:"Subroutine calls",expressions:[{name:"axes",level:0,count:1,lines:"74"},{name:"graph",level:0,count:1,lines:"82"},{name:"domating",level:0,count:1,lines:"85"}],total:3}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,2011,115,80,2024,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,20,97,19,80,1e3,97,20],[84,1022,97,1021,80,1e3,97,1022],[128,63],[140,1],[144,1,1],[80,1],[98,1,1,80,9],[82,1,1,69,129,14],[80,70,82,1,1,80,100,26,24,80,25,25,80,20,80,800,24,224],[82,1,1,80,100,26,49,80,4,80,20,189,147],[82,1,1,4,128,9],[80,2],[98,1,1,80,10],[82,1,1,69,129,24],[80,0,80,1e3,82,1,1,80,100,26,25,224],[80,0,221],[82,1,1,80,10,26,49,80,37,48,54,80,4,80,20,189,147],[80,70,80,20,225],[80,10526880,221],[80,1e3,80,70,25,80,0,226],[82,1,1,4,128,15],[80,70,80,20,224],[80,0,221],[80,0,80,800,226],[80,1e3,80,70,25,80,0,226],[80,16711680,221],[80,50,80,880,224],[87,80,114,111,112,111,114,116,105,111,110,32,111,102,32,70,101,109,97,108,101,115,32,105,110,32,80,111,112,117,108,97,116,105,111,110,44,32,111,118,101,114,32,57,48,48,32,71,101,110,101,114,97,116,105,111,110,115,0,80,4,80,25,189],[80,50,80,930,224],[87,119,105,116,104,32,70,101,109,97,108,101,32,79,102,102,115,112,114,105,110,103,32,80,114,111,98,97,98,105,108,105,116,121,32,103,101,110,101,115,32,105,110,105,116,105,97,108,108,121,32,115,101,116,32,57,48,37,43,0,80,4,80,25,189],[145,1,141,137],[140,2],[144,2,2],[80,0,98,2,1],[80,1],[98,2,2,80,1e3],[82,2,2,69,129,43],[81,19,82,2,2,80,1,25,2,120,24,4,112,129,42],[85,2,1,1,112,4,2,113],[82,2,2,4,128,38],[80,16711680,221],[80,70,81,2023,24,80,20,80,1e3,24,82,2,1,25,224],[81,2023,80,0,67,129,47],[80,2,240],[145,2,141,137],[140,3],[144,3,4],[80,1e3,19,80,1,24,98,3,1],[80,1e3,19,80,1,24,98,3,2],[81,19,82,3,1,80,1,25,2,120,24,4,112,81,19,82,3,2,80,1,25,2,120,24,4,112,65,129,50],[80,2,19,80,0,64,98,3,4],[80,1e3,19,80,1,24,98,3,3],[82,3,4,129,58],[81,1021,82,3,3,80,1,25,2,120,24,4,81,1021,82,3,1,80,1,25,2,120,24,4,112,2,113],[128,59],[81,1021,82,3,3,80,1,25,2,120,24,4,81,1021,82,3,2,80,1,25,2,120,24,4,112,2,113],[81,19,82,3,3,80,1,25,2,120,24,4,81,1021,82,3,3,80,1,25,2,120,24,4,112,80,1e3,19,67,2,113],[81,1021,82,3,3,80,1,25,2,120,24,4,81,1021,82,3,3,80,1,25,2,120,24,4,112,80,1,80,20,26,80,1,24,19,24,80,1,80,10,26,25,2,113],[81,1021,82,3,3,80,1,25,2,120,24,4,80,0,80,1e3,81,1021,82,3,3,80,1,25,2,120,24,4,112,71,70,2,113],[145,3,141,137],[136,6],[80,1],[97,2024,80,1e3],[81,2024,69,129,70],[81,19,81,2024,80,1,25,2,120,24,4,80,2,19,80,0,64,2,113],[81,1021,81,2024,80,1,25,2,120,24,4,80,900,80,101,19,24,2,113],[81,2024,4,128,65],[80,0,97,2023],[136,34],[84,2023,1,112,4,2,113],[80,1],[97,2024,80,400],[81,2024,69,129,78],[136,48],[81,2024,4,128,74],[81,2023,80,900,64,129,71],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Schelling's segregation model",author:"University of Oxford",date:"04/11/2017",time:"16:55:03",code:"PROGRAM schelling;\nCONST width=32;\n      height=32;\n      empty=green;\nVAR test,tryi,tryj: integer;\n    this,i,j: integer;\n\n Function happy(x,y,c: integer): boolean;\n Var like,unlike,neighbour,i,j: integer;\n Begin\n  like:=0;\n  unlike:=0;\n  for i:=-1 to 1 do\n   for j:=-1 to 1 do\n    if (i<>0) or (j<>0) then\n     begin\n      neighbour:=pixcol(x+i,y+j);\n      if neighbour<>empty then\n       begin\n        if neighbour=c then\n         inc(like)\n        else\n         inc(unlike)\n       end\n     end;\n  result:=(like>=unlike-1)\n End;\n\nBEGIN\n canvas(-1,-1,width+2,height+2);\n resolution(width+2,height+2);\n noupdate;\n blank(empty);\n for i:=0 to width-1 do\n  for j:=0 to height-1 do\n   begin\n    test:=random(25);\n    if test=0 then\n     pixset(i,j,empty)\n    else\n     begin\n      if (i+j) mod 2=0 then\n       pixset(i,j,red)\n      else\n       pixset(i,j,blue)\n     end\n   end;\n pause(2000);\n while ?key<>\\escape do\n  begin\n   noupdate;\n   repeat\n    tryi:=random(width);\n    tryj:=random(height);\n    this:=pixcol(tryi,tryj)\n   until (this<>empty) and (not(happy(tryi,tryj,this)));\n   pixset(tryi,tryj,empty);\n   repeat\n    tryi:=random(width);\n    tryj:=random(height)\n   until (pixcol(tryi,tryj)=empty) and happy(tryi,tryj,this);\n   pixset(tryi,tryj,this);\n   update\n  end\nEND.",usage:[{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"33"},{name:"noupdate",level:1,count:2,lines:"32 51"},{name:"update",level:1,count:1,lines:"63"},{name:"canvas",level:2,count:1,lines:"30"},{name:"resolution",level:2,count:1,lines:"31"},{name:"pixcol",level:3,count:3,lines:"17 55 61"},{name:"pixset",level:3,count:5,lines:"39 43 45 57 62"}],total:14},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:2,lines:"21 23"},{name:"random",level:2,count:5,lines:"37 53 54 59 60"}],total:7},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"48"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"15 18 20 38 42"},{name:"else",level:1,count:3,lines:"22 40 44"},{name:"for",level:1,count:4,lines:"13 14 34 35"},{name:"repeat",level:1,count:2,lines:"52 58"},{name:"while",level:2,count:1,lines:"49"},{name:"function",level:3,count:1,lines:"8"}],total:16},{category:"Subroutine calls",expressions:[{name:"happy",level:0,count:2,lines:"56 61"}],total:2}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,11,115,80,23,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,26],[140,1],[144,1,9],[98,1,4,98,1,3,98,1,2],[80,0,98,1,5],[80,0,98,1,6],[80,1,16],[98,1,8,80,1],[82,1,8,69,129,24],[80,1,16],[98,1,9,80,1],[82,1,9,69,129,23],[82,1,8,80,0,65,82,1,9,80,0,65,10,129,22],[82,1,2,82,1,8,24,82,1,3,82,1,9,24,210,98,1,7],[82,1,7,80,2263842,65,129,22],[82,1,7,82,1,4,64,129,21],[85,1,5,1,112,4,2,113],[128,22],[85,1,6,1,112,4,2,113],[82,1,9,4,128,13],[82,1,8,4,128,10],[82,1,5,82,1,6,80,1,25,69,98,1,1],[89,1,105,2,145,1,141,137],[80,1,16,80,1,16,80,32,80,2,24,80,32,80,2,24,208],[80,32,80,2,24,80,32,80,2,24,209],[163],[80,2263842,248],[80,0],[97,22,80,32,80,1,25],[81,22,69,129,46],[80,0],[97,23,80,32,80,1,25],[81,23,69,129,45],[80,25,19,97,18],[81,18,80,0,64,129,40],[81,22,81,23,80,2263842,211],[128,44],[81,22,81,23,24,80,2,29,80,0,64,129,43],[81,22,81,23,80,16711680,211],[128,44],[81,22,81,23,80,255,211],[81,23,4,128,34],[81,22,4,128,31],[80,2e3,178],[80,-9,184,80,27,65,129,62],[163],[80,32,19,97,19],[80,32,19,97,20],[81,19,81,20,210,97,21],[81,21,80,2263842,65,81,19,81,20,81,21,136,4],[82,2,1,8,9,129,49],[81,19,81,20,80,2263842,211],[80,32,19,97,19],[80,32,19,97,20],[81,19,81,20,210,80,2263842,64,81,19,81,20,81,21,136,4],[82,2,1,9,129,55],[81,19,81,20,81,21,211],[162],[128,47],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Reference parameters",author:"University of Oxford",date:"22/09/2016",time:"22:14:48",code:"PROGRAM RefParams;\n\n  Procedure lines(var style: integer; convert: boolean);\n  Var count: integer;\n  Begin\n    for count:=1 to 8 do\n      begin\n        if convert then\n          style:=rgb(count)\n        else\n          style:=count;\n        forward(50);\n        pause(100)\n      end\n  End;\n\n  Procedure dots(var coord: integer);\n  Var count: integer;\n  Begin\n    for count:=1 to 8 do\n      begin\n        coord:=coord+100;\n        blot(40);\n        pause(100)\n      end\n  End;\n\nBEGIN\n  setxy(100,900);\n  lines(turtt, false);\n  lines(turtc, true);\n  dots(turtx);\n  dots(turty)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:1,lines:"12"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:1,lines:"29"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"23"}],total:1},{category:"Other Turtle commands",expressions:[{name:"rgb",level:3,count:1,lines:"9"}],total:1},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:2,lines:"13 24"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"8"},{name:"else",level:1,count:1,lines:"10"},{name:"for",level:1,count:2,lines:"6 20"},{name:"procedure",level:2,count:2,lines:"3 17"}],total:6},{category:"Subroutine calls",expressions:[{name:"lines",level:0,count:2,lines:"30 31"},{name:"dots",level:0,count:2,lines:"32 33"}],total:4}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,29],[140,1],[144,1,3],[98,1,2,102,1,1],[80,1],[98,1,3,80,8],[82,1,3,69,129,17],[82,1,2,129,13],[82,1,3,222,99,1,1],[128,14],[82,1,3,99,1,1],[80,50,227],[80,100,178],[82,1,3,4,128,8],[145,1,141,137],[140,2],[144,2,2],[102,2,1],[80,1],[98,2,2,80,8],[82,2,2,69,129,28],[83,2,1,80,100,24,99,2,1],[80,40,243],[80,100,178],[82,2,2,4,128,22],[145,2,141,137],[80,100,80,900,224],[84,16,80,0,136,4],[84,17,80,-1,136,4],[84,13,136,18],[84,14,136,18],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Quine (self-replicating) program",author:"University of Oxford",date:"22/09/2016",time:"22:13:27",code:"PROGRAM Quine;\nVAR lines: array[0..14] of string;\n    i: integer;\nBEGIN\n  output(true,cream,true);\n  lines[0]:='PROGRAM Quine;';\n  lines[1]:='VAR lines: array[0..14] of string;';\n  lines[2]:='    i: integer;';\n  lines[3]:='BEGIN';\n  lines[4]:='  output(true,cream,true);';\n  lines[5]:='  for i:=0 to 4 do';\n  lines[6]:='    writeln(lines[i]);';\n  lines[7]:='  for i:=0 to 14 do';\n  lines[8]:='    writeln(chr(32)+chr(32)+lines[12]+str(i)+lines[13]+chr(39)+lines[i]+chr(39)+lines[14]);';\n  lines[9]:='  for i:=5 to 11 do';\n  lines[10]:='    writeln(lines[i])';\n  lines[11]:='END.';\n  lines[12]:='lines[';\n  lines[13]:=']:=';\n  lines[14]:=';';\n  for i:=0 to 4 do\n    writeln(lines[i]);\n  for i:=0 to 14 do\n    writeln(chr(32)+chr(32)+lines[12]+str(i)+lines[13]+chr(39)+lines[i]+chr(39)+lines[14]);\n  for i:=5 to 11 do\n    writeln(lines[i])\nEND.",usage:[{category:"Other Turtle commands",expressions:[{name:"output",level:2,count:1,lines:"5"}],total:1},{category:"String operations",expressions:[{name:"writeln",level:1,count:3,lines:"22 24 26"}],total:3},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:1,lines:"24"},{name:"chr",level:3,count:4,lines:"24"}],total:5},{category:"Command structures",expressions:[{name:"for",level:1,count:3,lines:"21 23 25"}],total:3}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,23,115,80,33,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,17,97,16,80,15,97,17],[80,-1,80,16777147,80,-1,166],[81,16,80,0,2,120,24,4,87,80,82,79,71,82,65,77,32,81,117,105,110,101,59,0,2,113,146],[81,16,80,1,2,120,24,4,87,86,65,82,32,108,105,110,101,115,58,32,97,114,114,97,121,91,48,46,46,49,52,93,32,111,102,32,115,116,114,105,110,103,59,0,2,113,146],[81,16,80,2,2,120,24,4,87,32,32,32,32,105,58,32,105,110,116,101,103,101,114,59,0,2,113,146],[81,16,80,3,2,120,24,4,87,66,69,71,73,78,0,2,113,146],[81,16,80,4,2,120,24,4,87,32,32,111,117,116,112,117,116,40,116,114,117,101,44,99,114,101,97,109,44,116,114,117,101,41,59,0,2,113,146],[81,16,80,5,2,120,24,4,87,32,32,102,111,114,32,105,58,61,48,32,116,111,32,52,32,100,111,0,2,113,146],[81,16,80,6,2,120,24,4,87,32,32,32,32,119,114,105,116,101,108,110,40,108,105,110,101,115,91,105,93,41,59,0,2,113,146],[81,16,80,7,2,120,24,4,87,32,32,102,111,114,32,105,58,61,48,32,116,111,32,49,52,32,100,111,0,2,113,146],[81,16,80,8,2,120,24,4,87,32,32,32,32,119,114,105,116,101,108,110,40,99,104,114,40,51,50,41,43,99,104,114,40,51,50,41,43,108,105,110,101,115,91,49,50,93,43,115,116,114,40,105,41,43,108,105,110,101,115,91,49,51,93,43,99,104,114,40,51,57,41,43,108,105,110,101,115,91,105,93,43,99,104,114,40,51,57,41,43,108,105,110,101,115,91,49,52,93,41,59,0,2,113,146],[81,16,80,9,2,120,24,4,87,32,32,102,111,114,32,105,58,61,53,32,116,111,32,49,49,32,100,111,0,2,113,146],[81,16,80,10,2,120,24,4,87,32,32,32,32,119,114,105,116,101,108,110,40,108,105,110,101,115,91,105,93,41,0,2,113,146],[81,16,80,11,2,120,24,4,87,69,78,68,46,0,2,113,146],[81,16,80,12,2,120,24,4,87,108,105,110,101,115,91,0,2,113,146],[81,16,80,13,2,120,24,4,87,93,58,61,0,2,113,146],[81,16,80,14,2,120,24,4,80,59,48,2,113,146],[80,0],[97,33,80,4],[81,33,69,129,25],[81,16,81,33,2,120,24,4,112,190,191],[81,33,4,128,21],[80,0],[97,33,80,14],[81,33,69,129,30],[80,32,48,80,32,48,54,81,16,80,12,2,120,24,4,112,54,81,33,49,54,81,16,80,13,2,120,24,4,112,54,80,39,48,54,81,16,81,33,2,120,24,4,112,54,80,39,48,54,81,16,80,14,2,120,24,4,112,54,190,191],[81,33,4,147,128,26],[80,5],[97,33,80,11],[81,33,69,129,35],[81,16,81,33,2,120,24,4,112,190,191],[81,33,4,128,31],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"POLYGON and POLYLINE",author:"University of Oxford",date:"22/09/2016",time:"22:10:51",code:"PROGRAM Polygons;\n\n  Procedure poly(points,col: integer);\n  Var count: integer;\n  Begin\n    direction(90);\n    for count:=1 to points do\n      begin\n        forward(600 div points);\n        left(360 div points)\n      end;\n    colour(col);\n    polygon(points);\n    colour(black);\n    polyline(points+1)\n  End;\n\nBEGIN\n  penup;\n  thickness(4);\n  setxy(100,400);\n  poly(3,blue);\n  setxy(400,400);\n  poly(4,red);\n  setxy(700,400);\n  poly(5,yellow);\n  setxy(150,750);\n  poly(6,pink);\n  setxy(440,750);\n  poly(7,green);\n  setxy(740,750);\n  poly(8,turquoise)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:1,lines:"9"},{name:"left",level:1,count:1,lines:"10"}],total:2},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:1,lines:"6"},{name:"setxy",level:1,count:6,lines:"21 23 25 27 29 31"}],total:7},{category:"Turtle: drawing shapes",expressions:[{name:"polygon",level:2,count:1,lines:"13"},{name:"polyline",level:2,count:1,lines:"15"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"12 14"},{name:"penup",level:1,count:1,lines:"19"},{name:"thickness",level:1,count:1,lines:"20"}],total:4},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"7"},{name:"procedure",level:2,count:1,lines:"3"}],total:2},{category:"Subroutine calls",expressions:[{name:"poly",level:0,count:6,lines:"22 24 26 28 30 32"}],total:6}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,19],[140,1],[144,1,3],[98,1,2,98,1,1],[80,90,219],[80,1],[98,1,3,82,1,1],[82,1,3,69,129,14],[80,600,82,1,1,28,227],[80,360,82,1,1,28,229],[82,1,3,4,128,9],[82,1,2,221],[82,1,1,241],[80,0,221],[82,1,1,80,1,24,240],[145,1,141,137],[160],[80,4,220],[80,100,80,400,224],[80,3,80,255,136,4],[80,400,80,400,224],[80,4,80,16711680,136,4],[80,700,80,400,224],[80,5,80,16776960,136,4],[80,150,80,750,224],[80,6,80,15602313,136,4],[80,440,80,750,224],[80,7,80,2263842,136,4],[80,740,80,750,224],[80,8,80,48833,136,4],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Polygon rings",author:"University of Oxford",date:"22/09/2016",time:"22:09:55",code:"PROGRAM PolygonRings;\n\n  Procedure annulus(inner,width,angle: integer);\n  Var count: integer;\n  Begin\n    for count:=0 to 360 div angle do\n      begin\n        forward(inner+width);\n        back(width);\n        back(inner);\n        forget(1);\n        right(angle);\n        forward(inner);\n        forward(width);\n        colour(rgb(count mod 20+1));\n        polygon(4);\n        back(inner+width)\n      end\n  End;\n\nBEGIN\n  penup;\n  blot(500);\n  randcol(6);\n  annulus(410,80,2);\n  annulus(310,80,3);\n  annulus(210,80,5);\n  annulus(110,80,7);\n  annulus(10,80,1)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:3,lines:"9 10 17"},{name:"forward",level:1,count:3,lines:"8 13 14"},{name:"right",level:1,count:1,lines:"12"}],total:7},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"23"},{name:"forget",level:2,count:1,lines:"11"},{name:"polygon",level:2,count:1,lines:"16"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:1,lines:"15"},{name:"penup",level:1,count:1,lines:"22"},{name:"randcol",level:1,count:1,lines:"24"},{name:"rgb",level:3,count:1,lines:"15"}],total:4},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"6"},{name:"procedure",level:2,count:1,lines:"3"}],total:2},{category:"Subroutine calls",expressions:[{name:"annulus",level:0,count:5,lines:"25 26 27 28 29"}],total:5}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,22],[140,1],[144,1,4],[98,1,3,98,1,2,98,1,1],[80,0],[98,1,4,80,360,82,1,3,28],[82,1,4,69,129,21],[82,1,1,82,1,2,24,227],[82,1,2,228],[82,1,1,228],[80,1,237],[82,1,3,230],[82,1,1,227],[82,1,2,227],[82,1,4,80,20,29,80,1,24,222,221],[80,4,241],[82,1,1,82,1,2,24,228],[82,1,4,4,128,8],[145,1,141,137],[160],[80,500,243],[80,6,19,4,222,221],[80,410,80,80,80,2,136,4],[80,310,80,80,80,3,136,4],[80,210,80,80,80,5,136,4],[80,110,80,80,80,7,136,4],[80,10,80,80,80,1,136,4],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Procedure with parameter",author:"University of Oxford",date:"22/09/2016",time:"22:08:23",code:"PROGRAM ParameterProc;\nVAR count: integer;\n\n  Procedure prong(len: integer);\n  Begin\n    forward(len);\n    blot(len div 20);\n    back(len)\n  End;\n\nBEGIN\n  for count:=360 downto 1 do\n    begin\n      randcol(10);\n      prong(count+100);\n      right(61)\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:1,lines:"8"},{name:"forward",level:1,count:1,lines:"6"},{name:"right",level:1,count:1,lines:"16"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"7"}],total:1},{category:"Other Turtle commands",expressions:[{name:"randcol",level:1,count:1,lines:"14"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"12"},{name:"procedure",level:2,count:1,lines:"4"}],total:2},{category:"Subroutine calls",expressions:[{name:"prong",level:0,count:1,lines:"15"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,6,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,11],[140,1],[144,1,1],[98,1,1],[82,1,1,227],[82,1,1,80,20,28,243],[82,1,1,228],[145,1,141,137],[80,360],[97,17,80,1],[81,17,68,129,18],[80,10,19,4,222,221],[81,17,80,100,24,136,4],[80,61,230],[81,17,5,128,12],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Painting application",author:"University of Oxford",date:"22/09/2016",time:"22:07:34",code:"PROGRAM PaintApp;\nVAR brushwidth: integer;\n    brushcolour: integer;\n\n  Procedure setbrushwidth(wdth: integer);\n  Var count: integer;\n  Begin\n    brushwidth:=wdth;\n    noupdate;\n    colour(black);\n    for count:=0 to 4 do\n      begin\n        setxy(625+count*50,875);\n        blot(8+count*2)\n      end;\n    colour(brushcolour);\n    recolour(((brushwidth+16)*25)+25,875,lightred);\n    update\n  End;\n\n  Procedure setbrushcolour(clr: integer);\n  Begin\n    brushcolour:=clr;\n    colour(clr);\n    setxy(975,875);\n    blot(16)\n  End;\n\n  Procedure paintbrush(x: integer;y: integer);\n  Begin\n    setxy(x,y);\n    blot(brushwidth)\n  End;\n\n  Procedure paintcan(x: integer;y: integer);\n  Begin\n    recolour(x,y,brushcolour)\n  End;\n\n  Procedure setup;\n  Var count: integer;\n\n    procedure square(col: integer);\n    begin\n      movexy(50,0);\n      movexy(0,50);\n      movexy(-50,0);\n      movexy(0,-50);\n      colour(col);\n      polygon(4)\n    end;\n\n    procedure text(input: string);\n    begin\n      colour(black);\n      print(input,0,20)\n    end;\n\n  Begin\n    colour(lightred);\n    setxy(0,850);\n    drawxy(1000,0);\n    setxy(0,900);\n    drawxy(1000,0);\n    setxy(450,850);\n    drawxy(0,50);\n    setxy(850,850);\n    drawxy(0,50);\n    setxy(10,858);\n    text('Left-click to draw, right-click to fill');\n    setxy(450+10,858);\n    text('Brush width:');\n    setxy(850+10,858);\n    text('Colour:');\n    setxy(0,900);\n    for count:=1 to 20 do\n      begin\n        square(rgb(count));\n        movexy(0,50);\n        square(rgb(count+30));\n        movexy(50,-50)\n      end;\n    setbrushwidth(8);\n    setbrushcolour(black)\n  End;\n\nBEGIN\n  setup;\n  repeat\n    if ?lmouse>0 then\n      begin\n        if ?mousey>900 then\n          setbrushcolour(pixcol(?mousex,?mousey))\n        else\n          if (?mousey>850) and ((?mousex>600) and (?mousex<850)) then\n          setbrushwidth(((?mousex div 50)*2)-16)\n        else\n          if ?mousey<850-brushwidth then\n          paintbrush(?mousex,?mousey)\n      end;\n    if (?rmouse>0) and (?mousey<850) then\n      paintcan(?mousex,?mousey);\n  until false\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:4,lines:"62 64 66 68"},{name:"movexy",level:2,count:6,lines:"45 46 47 48 79 81"}],total:10},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:11,lines:"13 25 31 61 63 65 67 69 71 73 75"}],total:11},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:3,lines:"14 26 32"},{name:"polygon",level:2,count:1,lines:"50"}],total:4},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:6,lines:"10 16 24 49 55 60"},{name:"rgb",level:3,count:2,lines:"78 80"}],total:8},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"9"},{name:"update",level:1,count:1,lines:"18"},{name:"pixcol",level:3,count:1,lines:"93"},{name:"recolour",level:3,count:2,lines:"17 37"}],total:5},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"56"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"90 92 95 98 101"},{name:"else",level:1,count:2,lines:"94 97"},{name:"for",level:1,count:2,lines:"11 76"},{name:"repeat",level:1,count:1,lines:"89"},{name:"procedure",level:2,count:7,lines:"5 21 29 35 40 43 53"}],total:17},{category:"Subroutine calls",expressions:[{name:"text",level:0,count:3,lines:"70 72 74"},{name:"square",level:0,count:2,lines:"78 80"},{name:"setbrushwidth",level:0,count:2,lines:"83 96"},{name:"setbrushcolour",level:0,count:2,lines:"84 93"},{name:"setup",level:0,count:1,lines:"88"},{name:"paintbrush",level:0,count:1,lines:"99"},{name:"paintcan",level:0,count:1,lines:"102"}],total:12}],pcode:[[80,17,1,1,80,0,113,80,5,2,113,4,80,7,115,80,24,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,84],[140,1],[144,1,2],[98,1,1],[82,1,1,97,23],[163],[80,0,221],[80,0],[98,1,2,80,4],[82,1,2,69,129,16],[80,625,82,1,2,80,50,26,24,80,875,224],[80,8,82,1,2,80,2,26,24,243],[82,1,2,4,128,11],[81,24,221],[81,23,80,16,24,80,25,26,80,25,24,80,875,80,13458524,252],[162],[145,1,141,137],[140,2],[144,2,1],[98,2,1],[82,2,1,97,24],[82,2,1,221],[80,975,80,875,224],[80,16,243],[145,2,141,137],[140,3],[144,3,2],[98,3,2,98,3,1],[82,3,1,82,3,2,224],[81,23,243],[145,3,141,137],[140,4],[144,4,2],[98,4,2,98,4,1],[82,4,1,82,4,2,81,24,252],[145,4,141,137],[140,6],[144,6,1],[98,6,1],[80,50,80,0,225],[80,0,80,50,225],[80,50,16,80,0,225],[80,0,80,50,16,225],[82,6,1,221],[80,4,241],[145,6,141,137],[140,7],[144,7,1],[98,7,1],[80,0,221],[82,7,1,80,0,80,20,189],[145,7,141,137],[140,5],[144,5,1],[80,13458524,221],[80,0,80,850,224],[80,1e3,80,0,226],[80,0,80,900,224],[80,1e3,80,0,226],[80,450,80,850,224],[80,0,80,50,226],[80,850,80,850,224],[80,0,80,50,226],[80,10,80,858,224],[87,76,101,102,116,45,99,108,105,99,107,32,116,111,32,100,114,97,119,44,32,114,105,103,104,116,45,99,108,105,99,107,32,116,111,32,102,105,108,108,0,146,136,49],[80,450,80,10,24,80,858,224],[87,66,114,117,115,104,32,119,105,100,116,104,58,0,146,136,49],[80,850,80,10,24,80,858,224],[87,67,111,108,111,117,114,58,0,146,136,49],[80,0,80,900,224],[80,1],[98,5,1,80,20],[82,5,1,69,129,81],[82,5,1,222,136,39],[80,0,80,50,225],[82,5,1,80,30,24,222,136,39],[80,50,80,50,16,225],[82,5,1,4,128,74],[80,8,136,4],[80,0,136,20],[145,5,141,137],[136,55],[80,-1,184,80,0,67,129,94],[80,-8,184,80,900,67,129,89],[80,-7,184,80,-8,184,210,136,20],[128,94],[80,-8,184,80,850,67,80,-7,184,80,600,67,80,-7,184,80,850,66,9,9,129,92],[80,-7,184,80,50,28,80,2,26,80,16,25,136,4],[128,94],[80,-8,184,80,850,81,23,25,66,129,94],[80,-7,184,80,-8,184,136,28],[80,-2,184,80,0,67,80,-8,184,80,850,66,9,129,96],[80,-7,184,80,-8,184,136,34],[80,0,129,85],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Olympic rings 2 (with variable)",author:"University of Oxford",date:"22/09/2016",time:"19:47:46",code:"PROGRAM OlympicRings2;\nVAR ringsize: integer;\nBEGIN\n  ringsize:=130;\n  thickness(20);\n  penup;\n  forward(50);\n  circle(ringsize);\n  left(90);\n  forward(300);\n  colour(blue);\n  circle(ringsize);\n  back(600);\n  colour(red);\n  circle(ringsize);\n  forward(150);\n  right(90);\n  back(125);\n  colour(lime);\n  circle(ringsize);\n  left(90);\n  forward(300);\n  colour(yellow);\n  circle(ringsize)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:2,lines:"13 18"},{name:"forward",level:1,count:4,lines:"7 10 16 22"},{name:"left",level:1,count:2,lines:"9 21"},{name:"right",level:1,count:1,lines:"17"}],total:9},{category:"Turtle: drawing shapes",expressions:[{name:"circle",level:1,count:5,lines:"8 12 15 20 24"}],total:5},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:4,lines:"11 14 19 23"},{name:"penup",level:1,count:1,lines:"6"},{name:"thickness",level:1,count:1,lines:"5"}],total:6}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,130,97,16],[80,20,220],[160],[80,50,227],[81,16,242],[80,90,229],[80,300,227],[80,255,221],[81,16,242],[80,600,228],[80,16711680,221],[81,16,242],[80,150,227],[80,90,230],[80,125,228],[80,65280,221],[81,16,242],[80,90,229],[80,300,227],[80,16776960,221],[81,16,242],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Olympic rings 1 (using PENUP)",author:"University of Oxford",date:"22/09/2016",time:"19:47:19",code:"PROGRAM OlympicRings1;\nBEGIN\n  thickness(20);\n  penup;\n  forward(50);\n  circle(130);\n  left(90);\n  forward(300);\n  colour(blue);\n  circle(130);\n  back(600);\n  colour(red);\n  circle(130);\n  forward(150);\n  right(90);\n  back(125);\n  colour(lime);\n  circle(130);\n  left(90);\n  forward(300);\n  colour(yellow);\n  circle(130)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:2,lines:"11 16"},{name:"forward",level:1,count:4,lines:"5 8 14 20"},{name:"left",level:1,count:2,lines:"7 19"},{name:"right",level:1,count:1,lines:"15"}],total:9},{category:"Turtle: drawing shapes",expressions:[{name:"circle",level:1,count:5,lines:"6 10 13 18 22"}],total:5},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:4,lines:"9 12 17 21"},{name:"penup",level:1,count:1,lines:"4"},{name:"thickness",level:1,count:1,lines:"3"}],total:6}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,5,115,80,15,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,20,220],[160],[80,50,227],[80,130,242],[80,90,229],[80,300,227],[80,255,221],[80,130,242],[80,600,228],[80,16711680,221],[80,130,242],[80,150,227],[80,90,230],[80,125,228],[80,65280,221],[80,130,242],[80,90,229],[80,300,227],[80,16776960,221],[80,130,242],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Noughts and crosses",author:"University of Oxford",date:"22/09/2016",time:"19:46:41",code:"PROGRAM NoughtsAndCrosses;\nCONST cross=royal;\n      nought=red;\nVAR board: array[0..11] of integer;\n    numgames: integer;\n    randfirst: boolean;\n    i,column,row: integer;\n\n  Procedure doblot(x,y,col: integer);\n  Begin\n    setxy(x*250+250,y*250+175);\n    colour(col);\n    blot(70)\n  End;\n\n  Procedure copy(var fromarray,toarray: array of integer);\n  Var i: integer;\n  Begin\n    for i:=0 to fromarray.length-1 do\n      toarray[i]:=fromarray[i]\n  End;\n\n  Procedure evaluate(var b1: array of integer;jm,depth: integer);\n  Var mover: integer;\n      replyscore: integer;\n      b2: array[0..11] of integer;\n      m: integer;\n  Begin\n    mover:=cross+nought-jm;\n    replyscore:=-2;\n    b1[9]:=0;\n    b1[10]:=-1;\n    b1[11]:=depth;\n    if (((b1[0]=jm) and (b1[1]=jm) and (b1[2]=jm)) or ((b1[3]=jm) and (b1[4]=jm) and (b1[5]=jm)) or ((b1[6]=jm)\n       and (b1[7]=jm) and (b1[8]=jm)) or ((b1[0]=jm) and (b1[3]=jm) and (b1[6]=jm)) or ((b1[1]=jm) and (b1[4]=jm)\n       and (b1[7]=jm)) or ((b1[2]=jm) and (b1[5]=jm) and (b1[8]=jm)) or ((b1[0]=jm) and (b1[4]=jm) and (b1[8]=jm))\n       or ((b1[2]=jm) and (b1[4]=jm) and (b1[6]=jm))) then\n      b1[9]:=1\n    else\n      begin\n        m:=0;\n        repeat\n          if (b1[m]=0) then\n            begin\n              copy(b1,b2);\n              b2[m]:=mover;\n              evaluate(b2,mover,depth+1);\n              if (b2[9]>replyscore) then\n                begin\n                  replyscore:=b2[9];\n                  b1[10]:=m;\n                  b1[11]:=b2[11]\n                end\n            end;\n          m:=m+1\n        until (m>8) or (replyscore>0);\n        if (replyscore<>-2) then\n          b1[9]:=-replyscore\n      end\n  End;\n\nBEGIN\n  numgames:=0;\n  repeat\n    numgames:=numgames+1;\n    randfirst:=(numgames mod 2=1);\n    blank(lightgreen);\n    thickness(10);\n    colour(black);\n    setxy(375,50);\n    drawxy(0,750);\n    setxy(625,50);\n    drawxy(0,750);\n    setxy(125,300);\n    drawxy(750,0);\n    setxy(125,550);\n    drawxy(750,0);\n    for i:=0 to 10 do\n      board[i]:=0;\n    board[11]:=8;\n    repeat\n      if (randfirst) then\n        begin\n          randcol(9);\n          board[10]:=turtc-1;\n          randfirst:=false\n        end\n      else\n        begin\n          cursor(2);\n          repeat\n            repeat\n              repeat\n              until ?lmouse>0;\n              pause(200)\n            until ((?clickx>=125) and (?clickx<=875) and (?clicky>=50) and (?clicky<=800));\n            column:=(?clickx-125) div 250;\n            row:=(?clicky-50) div 250\n          until board[column+row*3]=0;\n          doblot(column,row,cross);\n          board[column+row*3]:=cross;\n          cursor(11);\n          evaluate(board,cross,0)\n        end;\n      if (board[10]<>-1) then\n        begin\n          doblot(board[10] mod 3,board[10] div 3,nought);\n          board[board[10]]:=nought\n        end\n    until (board[11]<=1);\n    setxy(350,850);\n    colour(black);\n    if (board[9]=0) then\n      print('  Draw!  ',4,60)\n    else\n      print('  I win!  ',4,60);\n    pause(2500)\n  until (1<>1)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:4,lines:"71 73 75 77"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:6,lines:"11 70 72 74 76 111"}],total:6},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"13"}],total:1},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"12 69 112"},{name:"randcol",level:1,count:1,lines:"84"},{name:"thickness",level:1,count:1,lines:"68"}],total:5},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"67"}],total:1},{category:"String operations",expressions:[{name:"print",level:1,count:2,lines:"114 116"},{name:"copy",level:3,count:1,lines:"45"}],total:3},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:2,lines:"95 117"},{name:"cursor",level:2,count:2,lines:"90 102"}],total:4},{category:"Command structures",expressions:[{name:"if",level:1,count:7,lines:"34 43 48 57 82 105 113"},{name:"else",level:1,count:3,lines:"39 88 115"},{name:"for",level:1,count:2,lines:"19 78"},{name:"repeat",level:1,count:6,lines:"42 64 81 91 92 93"},{name:"procedure",level:2,count:3,lines:"9 16 23"}],total:21},{category:"Subroutine calls",expressions:[{name:"evaluate",level:0,count:2,lines:"47 103"},{name:"doblot",level:0,count:2,lines:"100 107"}],total:4}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,24,115,80,37,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,20,97,19,80,12,97,20],[128,47],[140,1],[144,1,3],[98,1,3,98,1,2,98,1,1],[82,1,1,80,250,26,80,250,24,82,1,2,80,250,26,80,175,24,224],[82,1,3,221],[80,70,243],[145,1,141,137],[140,2],[144,2,3],[98,2,2,98,2,1],[80,0],[98,2,3,82,2,1,112,80,1,25],[82,2,3,69,129,20],[82,2,2,82,2,3,2,120,24,4,82,2,1,82,2,3,2,120,24,4,112,2,113],[82,2,3,4,128,16],[145,2,141,137],[140,3],[144,3,20],[98,3,3,98,3,2,98,3,1],[85,3,7,102,3,6,80,12,98,3,7],[80,4286945,80,16711680,24,82,3,2,25,98,3,4],[80,2,16,98,3,5],[82,3,1,80,9,2,120,24,4,80,0,2,113],[82,3,1,80,10,2,120,24,4,80,1,16,2,113],[82,3,1,80,11,2,120,24,4,82,3,3,2,113],[82,3,1,80,0,2,120,24,4,112,82,3,2,64,82,3,1,80,1,2,120,24,4,112,82,3,2,64,9,82,3,1,80,2,2,120,24,4,112,82,3,2,64,9,82,3,1,80,3,2,120,24,4,112,82,3,2,64,82,3,1,80,4,2,120,24,4,112,82,3,2,64,9,82,3,1,80,5,2,120,24,4,112,82,3,2,64,9,10,82,3,1,80,6,2,120,24,4,112,82,3,2,64,82,3,1,80,7,2,120,24,4,112,82,3,2,64,9,82,3,1,80,8,2,120,24,4,112,82,3,2,64,9,10,82,3,1,80,0,2,120,24,4,112,82,3,2,64,82,3,1,80,3,2,120,24,4,112,82,3,2,64,9,82,3,1,80,6,2,120,24,4,112,82,3,2,64,9,10,82,3,1,80,1,2,120,24,4,112,82,3,2,64,82,3,1,80,4,2,120,24,4,112,82,3,2,64,9,82,3,1,80,7,2,120,24,4,112,82,3,2,64,9,10,82,3,1,80,2,2,120,24,4,112,82,3,2,64,82,3,1,80,5,2,120,24,4,112,82,3,2,64,9,82,3,1,80,8,2,120,24,4,112,82,3,2,64,9,10,82,3,1,80,0,2,120,24,4,112,82,3,2,64,82,3,1,80,4,2,120,24,4,112,82,3,2,64,9,82,3,1,80,8,2,120,24,4,112,82,3,2,64,9,10,82,3,1,80,2,2,120,24,4,112,82,3,2,64,82,3,1,80,4,2,120,24,4,112,82,3,2,64,9,82,3,1,80,6,2,120,24,4,112,82,3,2,64,9,10,129,33],[82,3,1,80,9,2,120,24,4,80,1,2,113],[128,46],[80,0,98,3,20],[82,3,1,82,3,20,2,120,24,4,112,80,0,64,129,42],[82,3,1,82,3,6,136,12],[82,3,6,82,3,20,2,120,24,4,82,3,4,2,113],[82,3,6,82,3,4,82,3,3,80,1,24,136,21],[82,3,6,80,9,2,120,24,4,112,82,3,5,67,129,42],[82,3,6,80,9,2,120,24,4,112,98,3,5],[82,3,1,80,10,2,120,24,4,82,3,20,2,113],[82,3,1,80,11,2,120,24,4,82,3,6,80,11,2,120,24,4,112,2,113],[82,3,20,80,1,24,98,3,20],[82,3,20,80,8,67,82,3,5,80,0,67,10,129,34],[82,3,5,80,2,16,65,129,46],[82,3,1,80,9,2,120,24,4,82,3,5,16,2,113],[145,3,141,137],[80,0,97,33],[81,33,80,1,24,97,33],[81,33,80,2,29,80,1,64,97,34],[80,10025880,248],[80,10,220],[80,0,221],[80,375,80,50,224],[80,0,80,750,226],[80,625,80,50,224],[80,0,80,750,226],[80,125,80,300,224],[80,750,80,0,226],[80,125,80,550,224],[80,750,80,0,226],[80,0],[97,35,80,10],[81,35,69,129,66],[81,19,81,35,2,120,24,4,80,0,2,113],[81,35,4,128,62],[81,19,80,11,2,120,24,4,80,8,2,113],[81,34,129,72],[80,9,19,4,221],[81,19,80,10,2,120,24,4,81,18,80,1,25,2,113],[80,0,97,34],[128,83],[80,2,213],[80,-1,184,80,0,67,129,73],[80,200,178],[80,-5,184,80,125,69,80,-5,184,80,875,68,9,80,-6,184,80,50,69,9,80,-6,184,80,800,68,9,129,73],[80,-5,184,80,125,25,80,250,28,97,36],[80,-6,184,80,50,25,80,250,28,97,37],[81,19,81,36,81,37,80,3,26,24,2,120,24,4,112,80,0,64,129,73],[81,36,81,37,80,4286945,136,5],[81,19,81,36,81,37,80,3,26,24,2,120,24,4,80,4286945,2,113],[80,11,213],[81,19,80,4286945,80,0,136,21],[81,19,80,10,2,120,24,4,112,80,1,16,65,129,86],[81,19,80,10,2,120,24,4,112,80,3,29,81,19,80,10,2,120,24,4,112,80,3,28,80,16711680,136,5],[81,19,81,19,80,10,2,120,24,4,112,2,120,24,4,80,16711680,2,113],[81,19,80,11,2,120,24,4,112,80,1,68,129,67],[80,350,80,850,224],[80,0,221],[81,19,80,9,2,120,24,4,112,80,0,64,129,92],[87,32,32,68,114,97,119,33,32,32,0,80,4,80,60,189],[128,93],[87,32,32,73,32,119,105,110,33,32,32,0,80,4,80,60,189],[80,2500,178],[80,1,80,1,65,129,48],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Nim",author:"University of Oxford",date:"22/09/2016",time:"23:29:27",code:"PROGRAM Nim;\nCONST piles=5;\n      maxheight=8;\n      margin=20;\nVAR pile: array[1..piles] of integer;\n    xgap,ygap,left,bottom,radius: integer;\n    totalcoins: integer;\n    xorscore: integer;\n    showmaths: boolean;\n    thiscolour,thispile,thiscoin: integer;\n    autopile,autocoin: integer;\n\n  Procedure setup;\n  Begin\n    xgap:=(1000-2*margin) div piles;\n    ygap:=(800-margin) div maxheight;\n    if ygap*maxheight>800 then\n      ygap:=800 div maxheight;\n    radius:=(ygap-margin) div 2;\n    left:=margin+radius-xgap;\n    bottom:=800-radius+ygap;\n    showmaths:=false\n  End;\n\n  Procedure fixpiles;\n  Var p: integer;\n  Begin\n    for p:=1 to piles do\n      pile[p]:=random(maxheight)+1\n  End;\n\n  Procedure domaths;\n  Var p: integer;\n  Begin\n    totalcoins:=0;\n    xorscore:=0;\n    for p:=1 to piles do\n      begin\n        totalcoins:=totalcoins+pile[p];\n        xorscore:=xorscore xor pile[p]\n      end\n  End;\n\n Procedure drawpiles;\n Var p,c,autocount: integer;\n Begin\n  blank(white);\n  autocount:=random(totalcoins)+1;\n  for p:=1 to piles do\n   begin\n    c:=pile[p];\n    while c>0 do\n     begin\n      dec(autocount);\n      if autocount=0 then\n       begin\n        autopile:=p;\n        autocoin:=c\n       end;\n      setxy(left+xgap*p,bottom-ygap*c);\n      colour(rgb(p));\n      blot(radius);\n      if xorscore xor pile[p] xor (c-1)=0 then\n       begin\n        autopile:=p;\n        autocoin:=c;\n        autocount:=0\n       end;\n      if showmaths then\n       begin\n        movexy(radius+margin,-radius+15);\n        colour(black);\n        print(str(xorscore xor pile[p] xor (c-1)),4,20)\n       end;\n      dec(c)\n     end\n   end;\n  colour(black);\n  setxy(margin,900);\n  print('Total Coins:  '+str(totalcoins),4,30);\n  if showmaths then\n   begin\n    colour(black);\n    setxy(450,900);\n    print('XOR score:  '+str(xorscore),4,30);\n    setxy(850,890);\n    colour(maroon);\n    box(140,100,red,true);\n    print(' HIDE',4,25);\n    setxy(850,940);\n    print(' MATHS',4,25)\n   end\n  else\n   begin\n    colour(maroon);\n    setxy(850,890);\n    box(140,100,red,true);\n    print(' SHOW',4,25);\n    setxy(850,940);\n    print(' MATHS',4,25)\n   end\n End;\n\n  Procedure blackout(p,c: integer);\n  Begin\n    setxy(left+xgap*p,bottom-ygap*c);\n    colour(black);\n    blot(radius)\n  End; \n \nBEGIN\n  setup;\n  repeat {start new game}\n    fixpiles;\n    repeat {present current position}\n      domaths;\n      drawpiles;\n      repeat\n        cursor(2); {handpoint}\n        repeat\n          repeat\n          until ?lmouse>0; {wait for mouse click}\n          pause(200);\n          thiscolour:=pixcol(?clickx,?clicky);\n        until (thiscolour<>rgb(white)) and (thiscolour<>rgb(black));\n        cursor(11); {waiting cursor}\n        if ?clicky>=800 then\n          begin\n            thiscoin:=maxheight+1; {choose illegal move}\n            showmaths:=not(showmaths);\n            domaths;\n            drawpiles\n          end\n        else\n          begin\n            thispile:=(?clickx-margin+radius) div xgap+1;\n            thiscoin:=(bottom-radius-?clicky) div ygap+1\n          end\n      until (?clicky<800);\n      pile[thispile]:=thiscoin-1;\n      domaths;\n      if totalcoins=0 then\n        begin\n          blank(white);\n          setxy(330,850);\n          colour(blue);\n          print('You Win!',4,60);\n          pause(5000)\n        end\n      else\n        begin\n          drawpiles;\n          pause(1000);\n          blackout(autopile,autocoin);\n          pile[autopile]:=autocoin-1;\n          domaths;\n          if (xorscore=0) and not(showmaths) then\n            begin\n              colour(pink);\n              setxy(400,900);\n              print('I''m going to win!',4,30)\n            end;\n          pause(2500);\n          if totalcoins=0 then\n            begin\n              blank(white);\n              setxy(330,850);\n              colour(red);\n              print('I Win!',4,60);\n              pause(5000)\n            end\n        end;   \n    until totalcoins=0\n  until 0=1\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"movexy",level:2,count:1,lines:"71"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:11,lines:"60 79 84 86 90 96 99 106 145 160 167"}],total:11},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"62 108"},{name:"box",level:2,count:2,lines:"88 97"}],total:4},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:10,lines:"61 72 78 83 87 95 107 146 159 168"},{name:"rgb",level:3,count:3,lines:"61 125"}],total:13},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:3,lines:"47 144 166"},{name:"pixcol",level:3,count:1,lines:"124"}],total:4},{category:"General arithmetic functions",expressions:[{name:"dec",level:1,count:2,lines:"54 75"},{name:"random",level:2,count:2,lines:"29 48"}],total:4},{category:"String operations",expressions:[{name:"print",level:1,count:10,lines:"73 80 85 89 91 98 100 147 161 169"}],total:10},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:3,lines:"73 80 85"}],total:3},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:5,lines:"123 148 153 163 170"},{name:"cursor",level:2,count:2,lines:"119 126"}],total:7},{category:"Command structures",expressions:[{name:"if",level:1,count:9,lines:"17 55 63 69 81 127 142 157 164"},{name:"else",level:1,count:3,lines:"93 134 150"},{name:"for",level:1,count:3,lines:"28 37 49"},{name:"repeat",level:1,count:5,lines:"113 115 118 120 121"},{name:"while",level:2,count:1,lines:"52"},{name:"procedure",level:2,count:5,lines:"13 25 32 44 104"}],total:26},{category:"Subroutine calls",expressions:[{name:"setup",level:0,count:1,lines:"112"},{name:"fixpiles",level:0,count:1,lines:"114"},{name:"domaths",level:0,count:4,lines:"116 131 141 156"},{name:"drawpiles",level:0,count:3,lines:"117 132 152"},{name:"blackout",level:0,count:1,lines:"154"}],total:10}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,25,115,80,40,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,22,97,21,80,5,97,22],[128,89],[140,1],[80,1e3,80,2,80,20,26,25,80,5,28,97,28],[80,800,80,20,25,80,8,28,97,29],[81,29,80,8,26,80,800,67,129,10],[80,800,80,8,28,97,29],[81,29,80,20,25,80,2,28,97,32],[80,20,81,32,24,81,28,25,97,30],[80,800,81,32,25,81,29,24,97,31],[80,0,97,35],[141,137],[140,2],[144,2,1],[80,1],[98,2,1,80,5],[82,2,1,69,129,22],[81,21,82,2,1,80,1,25,2,120,24,4,80,8,19,80,1,24,2,113],[82,2,1,4,128,18],[145,2,141,137],[140,3],[144,3,1],[80,0,97,33],[80,0,97,34],[80,1],[98,3,1,80,5],[82,3,1,69,129,33],[81,33,81,21,82,3,1,80,1,25,2,120,24,4,112,24,97,33],[81,34,81,21,82,3,1,80,1,25,2,120,24,4,112,11,97,34],[82,3,1,4,128,28],[145,3,141,137],[140,4],[144,4,3],[80,16777215,248],[81,33,19,80,1,24,98,4,3],[80,1],[98,4,1,80,5],[82,4,1,69,129,61],[81,21,82,4,1,80,1,25,2,120,24,4,112,98,4,2],[82,4,2,80,0,67,129,60],[85,4,3,1,112,5,2,113],[82,4,3,80,0,64,129,47],[82,4,1,97,39],[82,4,2,97,40],[81,30,81,28,82,4,1,26,24,81,31,81,29,82,4,2,26,25,224],[82,4,1,222,221],[81,32,243],[81,34,81,21,82,4,1,80,1,25,2,120,24,4,112,11,82,4,2,80,1,25,11,80,0,64,129,54],[82,4,1,97,39],[82,4,2,97,40],[80,0,98,4,3],[81,35,129,58],[81,32,80,20,24,81,32,16,80,15,24,225],[80,0,221],[81,34,81,21,82,4,1,80,1,25,2,120,24,4,112,11,82,4,2,80,1,25,11,49,80,4,80,20,189,147],[85,4,2,1,112,5,2,113],[128,42],[82,4,1,4,128,39],[80,0,221],[80,20,80,900,224],[87,84,111,116,97,108,32,67,111,105,110,115,58,32,32,0,81,33,49,54,80,4,80,30,189,147],[81,35,129,75],[80,0,221],[80,450,80,900,224],[87,88,79,82,32,115,99,111,114,101,58,32,32,0,81,34,49,54,80,4,80,30,189,147],[80,850,80,890,224],[80,8388608,221],[80,140,80,100,80,16711680,80,-1,246],[87,32,72,73,68,69,0,80,4,80,25,189],[80,850,80,940,224],[87,32,77,65,84,72,83,0,80,4,80,25,189],[128,81],[80,8388608,221],[80,850,80,890,224],[80,140,80,100,80,16711680,80,-1,246],[87,32,83,72,79,87,0,80,4,80,25,189],[80,850,80,940,224],[87,32,77,65,84,72,83,0,80,4,80,25,189],[145,4,141,137],[140,5],[144,5,2],[98,5,2,98,5,1],[81,30,81,28,82,5,1,26,24,81,31,81,29,82,5,2,26,25,224],[80,0,221],[81,32,243],[145,5,141,137],[136,5],[136,15],[136,23],[136,34],[80,2,213],[80,-1,184,80,0,67,129,94],[80,200,178],[80,-5,184,80,-6,184,210,97,36],[81,36,80,16777215,222,65,81,36,80,0,222,65,9,129,94],[80,11,213],[80,-6,184,80,800,69,129,105],[80,8,80,1,24,97,38],[81,35,8,97,35],[136,23],[136,34],[128,107],[80,-5,184,80,20,25,81,32,24,81,28,28,80,1,24,97,37],[81,31,81,32,25,80,-6,184,25,81,29,28,80,1,24,97,38],[80,-6,184,80,800,66,129,93],[81,21,81,37,80,1,25,2,120,24,4,81,38,80,1,25,2,113],[136,23],[81,33,80,0,64,129,117],[80,16777215,248],[80,330,80,850,224],[80,255,221],[87,89,111,117,32,87,105,110,33,0,80,4,80,60,189],[80,5e3,178],[128,133],[136,34],[80,1e3,178],[81,39,81,40,136,82],[81,21,81,39,80,1,25,2,120,24,4,81,40,80,1,25,2,113],[136,23],[81,34,80,0,64,81,35,8,9,129,126],[80,15602313,221],[80,400,80,900,224],[87,73,39,109,32,103,111,105,110,103,32,116,111,32,119,105,110,33,0,80,4,80,30,189],[80,2500,178],[81,33,80,0,64,129,133],[80,16777215,248],[80,330,80,850,224],[80,16711680,221],[87,73,32,87,105,110,33,0,80,4,80,60,189],[80,5e3,178],[81,33,80,0,64,129,91],[80,0,80,1,64,129,90],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Nested FOR loops",author:"University of Oxford",date:"22/09/2016",time:"19:36:40",code:"PROGRAM NestedLoops;\nVAR countblot: integer;\n    countcirc: integer;\nBEGIN\n  penup;\n  for countblot:=1 to 10 do\n    begin\n      forward(260);\n      colour(black);\n      blot(150);\n      colour(rgb(countblot));\n      for countcirc:=1 to 25 do\n        circle(countcirc*8);\n      back(260);\n      right(36)\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:1,lines:"14"},{name:"forward",level:1,count:1,lines:"8"},{name:"right",level:1,count:1,lines:"15"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"10"},{name:"circle",level:1,count:1,lines:"13"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"9 11"},{name:"penup",level:1,count:1,lines:"5"},{name:"rgb",level:3,count:1,lines:"11"}],total:4},{category:"Command structures",expressions:[{name:"for",level:1,count:2,lines:"6 12"}],total:2}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,7,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[160],[80,1],[97,16,80,10],[81,16,69,129,19],[80,260,227],[80,0,221],[80,150,243],[81,16,222,221],[80,1],[97,17,80,25],[81,17,69,129,16],[81,17,80,8,26,242],[81,17,4,128,12],[80,260,228],[80,36,230],[81,16,4,128,5],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Multiple bouncing balls",author:"University of Oxford",date:"22/09/2016",time:"19:35:46",code:"PROGRAM MultiBounce;\nVAR xpos1,xvel1: integer;\n    ypos1,yvel1: integer;\n    xpos2,xvel2: integer;\n    ypos2,yvel2: integer;\n\n  Procedure doball(size,col: integer;var xp,xv,yp,yv: integer);\n  Begin\n    setxy(xp,yp);\n    colour(white);\n    blot(size+1);\n    xp:=xp+xv;\n    yp:=yp+yv;\n    setxy(xp,yp);\n    colour(col);\n    blot(size);\n    update;\n    noupdate;\n    if (xp<size) or (xp>1000-size) then\n      xv:=-xv;\n    if (yp<size) or (yp>1000-size) then\n      yv:=-yv\n  End;\n\nBEGIN\n  xpos1:=20;\n  xvel1:=2;\n  ypos1:=200;\n  yvel1:=-3;\n  xpos2:=400;\n  xvel2:=-4;\n  ypos2:=800;\n  yvel2:=1;\n  repeat\n    doball(20,blue,xpos1,xvel1,ypos1,yvel1);\n    doball(30,red,xpos2,xvel2,ypos2,yvel2)\n  until 1=0\nEND.",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:2,lines:"9 14"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"11 16"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"10 15"}],total:2},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"18"},{name:"update",level:1,count:1,lines:"17"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"19 21"},{name:"repeat",level:1,count:1,lines:"34"},{name:"procedure",level:2,count:1,lines:"7"}],total:4},{category:"Subroutine calls",expressions:[{name:"doball",level:0,count:2,lines:"35 36"}],total:2}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,13,115,80,24,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,22],[140,1],[144,1,6],[102,1,6,102,1,5,102,1,4,102,1,3,98,1,2,98,1,1],[83,1,3,83,1,5,224],[80,16777215,221],[82,1,1,80,1,24,243],[83,1,3,83,1,4,24,99,1,3],[83,1,5,83,1,6,24,99,1,5],[83,1,3,83,1,5,224],[82,1,2,221],[82,1,1,243],[162],[163],[83,1,3,82,1,1,66,83,1,3,80,1e3,82,1,1,25,67,10,129,19],[83,1,4,16,99,1,4],[83,1,5,82,1,1,66,83,1,5,80,1e3,82,1,1,25,67,10,129,21],[83,1,6,16,99,1,6],[145,1,141,137],[80,20,97,17],[80,2,97,18],[80,200,97,19],[80,3,16,97,20],[80,400,97,21],[80,4,16,97,22],[80,800,97,23],[80,1,97,24],[80,20,80,255,84,17,84,18,84,19,84,20,136,4],[80,30,80,16711680,84,21,84,22,84,23,84,24,136,4],[80,1,80,0,64,129,30],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Moving ball (using variables)",author:"University of Oxford",date:"22/09/2016",time:"19:34:56",code:"PROGRAM MovingBall;\nVAR x,y,count: integer;\nBEGIN\n  x:=100;\n  y:=700;\n  for count:=1 to 100 do\n    begin\n      noupdate;\n      colour(white);\n      blot(51);\n      x:=x+8;\n      y:=y-4;\n      setxy(x,y);\n      colour(red);\n      blot(50);\n      update;\n      pause(10)\n    end\nEND.",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:1,lines:"13"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"10 15"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"9 14"}],total:2},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"8"},{name:"update",level:1,count:1,lines:"16"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"17"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"6"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,8,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,100,97,16],[80,700,97,17],[80,1],[97,18,80,100],[81,18,69,129,19],[163],[80,16777215,221],[80,51,243],[81,16,80,8,24,97,16],[81,17,80,4,25,97,17],[81,16,81,17,224],[80,16711680,221],[80,50,243],[162],[80,10,178],[81,18,4,128,6],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Mathematical functions",author:"University of Oxford",date:"22/09/2016",time:"19:33:47",code:"PROGRAM MathFunctions;\nCONST decimals=4;\n      denominator=1000000;\nVAR count: integer;\n    a,b,c: integer;\n\n  Procedure show(s: string;n: integer);\n  Begin\n    writeln(s+'('+str(a)+'/'+str(b)+') = '+qstr(n,denominator,decimals))\n  End;\n\n  Procedure selectab;\n  Begin\n    a:=random(900)+100;\n    b:=random(900)+100\n  End;\n\nBEGIN\n  output(true,white,true);\n  writeln('This program selects two random numbers a and b, in the');\n  writeln('range 100-999, and then outputs various mathematical');\n  writeln('functions of the fraction a/b. The results are expressed');\n  writeln('to '+str(decimals)+' decimal places, and a denominator of '+str(denominator)+' is');\n  writeln('used in the calculations to provide precision, even');\n  writeln('though the Turtle functions strictly operate only on');\n  writeln('integers and produce integer results.');\n  writeln('');\n  selectab;\n  writeln('a='+str(a)+'; b='+str(b));\n  writeln('a/b = '+str(a)+'/'+str(b)+' = '+qstr(a,b,decimals));\n  writeln('');\n  show('square',power(a,b,2,denominator));\n  show('square root',root(a,b,2,denominator));\n  show('cube',power(a,b,3,denominator));\n  show('cube root',root(a,b,3,denominator));\n  writeln('');\n  show('hypot',hypot(a,b,denominator));\n  show('calculated hypot',sqrt(a*a+b*b,denominator));\n  writeln('');\n  show('sin',sin(a,b,denominator));\n  show('cos',cos(a,b,denominator));\n  show('tan',tan(a,b,denominator));\n  writeln('');\n  show('ln',ln(a,b,denominator));\n  if divmult(a,b,1000)+ln(denominator,1,1000)>ln(maxint,1,1000) then\n    begin\n      writeln('EXP('+str(a)+'/'+str(b)+') would give numerical overflow, because');\n      writeln('the result*'+str(denominator)+' would be greater than '+str(maxint))\n    end\n  else\n    show('exp',exp(a,b,denominator));\n  show('log10',log10(a,b,denominator));\n  if divmult(a,b,1000)+log10(denominator,1,1000)>log10(maxint,1,1000) then\n    begin\n      writeln('ANTILOG('+str(a)+'/'+str(b)+') would give numerical overflow, because');\n      writeln('the result*'+str(denominator)+' would be greater than '+str(maxint))\n    end\n  else\n    show('antilog',antilog(a,b,denominator));\n  writeln('');\n  if a>b then\n    writeln('ARCCOS and ARCSIN are not defined for '+str(a)+'/'+str(b)+' = '+qstr(a,b,decimals))\n  else\n    begin\n      show('arccos',arccos(a,b,denominator));\n      show('arcsin',arcsin(a,b,denominator))\n    end;\n  show('arctan',arctan(a,b,denominator))\nEND.",usage:[{category:"Other Turtle commands",expressions:[{name:"output",level:2,count:1,lines:"19"}],total:1},{category:"General arithmetic functions",expressions:[{name:"hypot",level:2,count:1,lines:"37"},{name:"random",level:2,count:2,lines:"14 15"},{name:"sqrt",level:2,count:1,lines:"38"},{name:"divmult",level:3,count:2,lines:"45 53"},{name:"maxint",level:3,count:4,lines:"45 48 53 56"},{name:"power",level:3,count:2,lines:"32 34"},{name:"root",level:3,count:2,lines:"33 35"}],total:14},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:1,lines:"41"},{name:"exp",level:2,count:1,lines:"51"},{name:"ln",level:2,count:3,lines:"44 45"},{name:"sin",level:2,count:1,lines:"40"},{name:"tan",level:2,count:1,lines:"42"},{name:"antilog",level:3,count:1,lines:"59"},{name:"arccos",level:3,count:1,lines:"65"},{name:"arcsin",level:3,count:1,lines:"66"},{name:"arctan",level:3,count:1,lines:"68"},{name:"log10",level:3,count:3,lines:"52 53"}],total:14},{category:"String operations",expressions:[{name:"writeln",level:1,count:21,lines:"9 20 21 22 23 24 25 26 27 29 30 31 36 39 43 47 48 55 56 60 62"}],total:21},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:18,lines:"9 23 29 30 47 48 55 56 62"},{name:"qstr",level:2,count:3,lines:"9 30 62"}],total:21},{category:"Command structures",expressions:[{name:"if",level:1,count:3,lines:"45 53 61"},{name:"else",level:1,count:3,lines:"50 58 63"},{name:"procedure",level:2,count:2,lines:"7 12"}],total:8},{category:"Subroutine calls",expressions:[{name:"selectab",level:0,count:1,lines:"28"},{name:"show",level:0,count:16,lines:"32 33 34 35 37 38 40 41 42 44 51 52 59 65 66 68"}],total:17}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,9,115,80,21,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,13],[140,1],[144,1,2],[98,1,2,98,1,1],[82,1,1,80,40,48,54,81,19,49,54,80,47,48,54,81,20,49,54,87,41,32,61,32,0,54,82,1,2,80,1e6,80,4,52,54,190,191,147],[145,1,141,137],[140,2],[80,900,19,80,100,24,97,19],[80,900,19,80,100,24,97,20],[141,137],[80,-1,80,16777215,80,-1,166],[87,84,104,105,115,32,112,114,111,103,114,97,109,32,115,101,108,101,99,116,115,32,116,119,111,32,114,97,110,100,111,109,32,110,117,109,98,101,114,115,32,97,32,97,110,100,32,98,44,32,105,110,32,116,104,101,0,190,191],[87,114,97,110,103,101,32,49,48,48,45,57,57,57,44,32,97,110,100,32,116,104,101,110,32,111,117,116,112,117,116,115,32,118,97,114,105,111,117,115,32,109,97,116,104,101,109,97,116,105,99,97,108,0,190,191],[87,102,117,110,99,116,105,111,110,115,32,111,102,32,116,104,101,32,102,114,97,99,116,105,111,110,32,97,47,98,46,32,84,104,101,32,114,101,115,117,108,116,115,32,97,114,101,32,101,120,112,114,101,115,115,101,100,0,190,191],[87,116,111,32,0,80,4,49,54,87,32,100,101,99,105,109,97,108,32,112,108,97,99,101,115,44,32,97,110,100,32,97,32,100,101,110,111,109,105,110,97,116,111,114,32,111,102,32,0,54,80,1e6,49,54,87,32,105,115,0,54,190,191,147],[87,117,115,101,100,32,105,110,32,116,104,101,32,99,97,108,99,117,108,97,116,105,111,110,115,32,116,111,32,112,114,111,118,105,100,101,32,112,114,101,99,105,115,105,111,110,44,32,101,118,101,110,0,190,191],[87,116,104,111,117,103,104,32,116,104,101,32,84,117,114,116,108,101,32,102,117,110,99,116,105,111,110,115,32,115,116,114,105,99,116,108,121,32,111,112,101,114,97,116,101,32,111,110,108,121,32,111,110,0,190,191],[87,105,110,116,101,103,101,114,115,32,97,110,100,32,112,114,111,100,117,99,101,32,105,110,116,101,103,101,114,32,114,101,115,117,108,116,115,46,0,190,191],[87,0,190,191],[136,9],[87,97,61,0,81,19,49,54,87,59,32,98,61,0,54,81,20,49,54,190,191,147],[87,97,47,98,32,61,32,0,81,19,49,54,80,47,48,54,81,20,49,54,87,32,61,32,0,54,81,19,81,20,80,4,52,54,190,191,147],[87,0,190,191],[87,115,113,117,97,114,101,0,81,19,81,20,80,2,80,1e6,36,146,136,4],[87,115,113,117,97,114,101,32,114,111,111,116,0,81,19,81,20,80,2,80,1e6,35,146,136,4],[87,99,117,98,101,0,81,19,81,20,80,3,80,1e6,36,146,136,4],[87,99,117,98,101,32,114,111,111,116,0,81,19,81,20,80,3,80,1e6,35,146,136,4],[87,0,190,191],[87,104,121,112,111,116,0,81,19,81,20,80,1e6,34,146,136,4],[87,99,97,108,99,117,108,97,116,101,100,32,104,121,112,111,116,0,81,19,81,19,26,81,20,81,20,26,24,80,1e6,33,146,136,4],[87,0,190,191],[87,115,105,110,0,81,19,81,20,80,1e6,41,146,136,4],[87,99,111,115,0,81,19,81,20,80,1e6,42,146,136,4],[87,116,97,110,0,81,19,81,20,80,1e6,43,146,136,4],[87,0,190,191],[87,108,110,0,81,19,81,20,80,1e6,39,146,136,4],[81,19,81,20,80,1e3,32,80,1e6,80,1,80,1e3,39,24,255,80,1,80,1e3,39,67,129,43],[87,69,88,80,40,0,81,19,49,54,80,47,48,54,81,20,49,54,87,41,32,119,111,117,108,100,32,103,105,118,101,32,110,117,109,101,114,105,99,97,108,32,111,118,101,114,102,108,111,119,44,32,98,101,99,97,117,115,101,0,54,190,191,147],[87,116,104,101,32,114,101,115,117,108,116,42,0,80,1e6,49,54,87,32,119,111,117,108,100,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,0,54,255,49,54,190,191,147],[128,44],[87,101,120,112,0,81,19,81,20,80,1e6,40,146,136,4],[87,108,111,103,49,48,0,81,19,81,20,80,1e6,37,146,136,4],[81,19,81,20,80,1e3,32,80,1e6,80,1,80,1e3,37,24,255,80,1,80,1e3,37,67,129,49],[87,65,78,84,73,76,79,71,40,0,81,19,49,54,80,47,48,54,81,20,49,54,87,41,32,119,111,117,108,100,32,103,105,118,101,32,110,117,109,101,114,105,99,97,108,32,111,118,101,114,102,108,111,119,44,32,98,101,99,97,117,115,101,0,54,190,191,147],[87,116,104,101,32,114,101,115,117,108,116,42,0,80,1e6,49,54,87,32,119,111,117,108,100,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,0,54,255,49,54,190,191,147],[128,50],[87,97,110,116,105,108,111,103,0,81,19,81,20,80,1e6,38,146,136,4],[87,0,190,191],[81,19,81,20,67,129,54],[87,65,82,67,67,79,83,32,97,110,100,32,65,82,67,83,73,78,32,97,114,101,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,0,81,19,49,54,80,47,48,54,81,20,49,54,87,32,61,32,0,54,81,19,81,20,80,4,52,54,190,191],[147,128,56],[87,97,114,99,99,111,115,0,81,19,81,20,80,1e6,45,146,136,4],[87,97,114,99,115,105,110,0,81,19,81,20,80,1e6,44,146,136,4],[87,97,114,99,116,97,110,0,81,19,81,20,80,1e6,46,146,136,4],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Mandelbrot spectrum",author:"University of Oxford",date:"22/09/2016",time:"19:31:54",code:"PROGRAM MandelbrotSpectrum;\nCONST maxcol=40;\n      scale=250;\n      pixels=750;\n      xcentre=-500000; {millionths}\n      ycentre=0; {millionths}\n      spectrum=7;\nVAR xstart,xfinish,ystart,yfinish: integer;\n    a,b,x,y: integer;\n    iterations,temp: integer;\n    spectcol: array[0..spectrum] of integer;\n    boundary: array[0..spectrum] of integer;\n\n  Procedure colsetup;\n  Var n: integer;\n  Begin\n    spectcol[0]:=violet;\n    spectcol[1]:=blue;\n    spectcol[2]:=cyan;\n    spectcol[3]:=lime;\n    spectcol[4]:=yellow;\n    spectcol[5]:=orange;\n    spectcol[6]:=red;\n    spectcol[7]:=violet;\n    for n:=0 to spectrum do\n      boundary[n]:=divmult(maxcol,spectrum,n)\n  End;\n\n  Function mixcolour(n: integer): integer;\n  Var col1,col2: integer;\n      mix1,mix2: integer;\n  Begin\n    col2:=0;\n    repeat\n      inc(col2)\n    until (boundary[col2]>=n) or (col2=spectrum);\n    col1:=col2-1;\n    result:=mixcols(spectcol[col1],spectcol[col2],boundary[col2]-n,n-boundary[col1])\n  End;\n\nBEGIN\n  colsetup;\n  xstart:=divmult(xcentre,1000000,scale)-pixels/2;\n  ystart:=divmult(ycentre,1000000,scale)-pixels/2;\n  xfinish:=xstart+pixels-1;\n  yfinish:=ystart+pixels-1;\n  canvas(xstart,ystart,pixels,pixels);\n  resolution(pixels,pixels);\n  timeset(0);\n  for a:=xstart to xfinish do\n    begin\n      noupdate;\n      for b:=ystart to yfinish do\n        begin\n          x:=a;\n          y:=b;\n          iterations:=0;\n          while (hypot(x,y,1)<2*scale) and (iterations<=maxcol) do\n            begin\n              temp:=divmult(x+y,scale,x-y);\n              y:=divmult(2*x,scale,y)+b;\n              x:=temp+a;\n              inc(iterations)\n            end;\n          if iterations>maxcol then\n            pixset(a,b,black)\n          else\n            pixset(a,b,mixcolour(iterations))\n        end;\n      update\n    end;\n  writeln('Resolution: '+str(scale*3)+'; Time taken: '+qstr(time,1000,1)+' seconds.')\nEND.",usage:[{category:"Other Turtle commands",expressions:[{name:"mixcols",level:3,count:1,lines:"38"}],total:1},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"52"},{name:"update",level:1,count:1,lines:"70"},{name:"canvas",level:2,count:1,lines:"47"},{name:"resolution",level:2,count:1,lines:"48"},{name:"pixset",level:3,count:2,lines:"66 68"}],total:6},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:2,lines:"35 63"},{name:"hypot",level:2,count:1,lines:"58"},{name:"divmult",level:3,count:5,lines:"26 43 44 60 61"}],total:8},{category:"String operations",expressions:[{name:"writeln",level:1,count:1,lines:"72"}],total:1},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:1,lines:"72"},{name:"qstr",level:2,count:1,lines:"72"}],total:2},{category:"Input and timing routines",expressions:[{name:"time",level:2,count:1,lines:"72"},{name:"timeset",level:2,count:1,lines:"49"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"65"},{name:"else",level:1,count:1,lines:"67"},{name:"for",level:1,count:3,lines:"25 50 53"},{name:"repeat",level:1,count:1,lines:"34"},{name:"while",level:2,count:1,lines:"58"},{name:"procedure",level:2,count:1,lines:"14"},{name:"function",level:3,count:1,lines:"29"}],total:9},{category:"Subroutine calls",expressions:[{name:"colsetup",level:0,count:1,lines:"42"},{name:"mixcolour",level:0,count:1,lines:"68"}],total:2}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,35,115,80,48,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,30,97,29,80,8,97,30],[84,40,97,39,80,8,97,40],[128,31],[140,1],[144,1,1],[81,29,80,0,2,120,24,4,80,9055202,2,113],[81,29,80,1,2,120,24,4,80,255,2,113],[81,29,80,2,2,120,24,4,80,65535,2,113],[81,29,80,3,2,120,24,4,80,65280,2,113],[81,29,80,4,2,120,24,4,80,16776960,2,113],[81,29,80,5,2,120,24,4,80,16755200,2,113],[81,29,80,6,2,120,24,4,80,16711680,2,113],[81,29,80,7,2,120,24,4,80,9055202,2,113],[80,0],[98,1,1,80,7],[82,1,1,69,129,21],[81,39,82,1,1,2,120,24,4,80,40,80,7,82,1,1,32,2,113],[82,1,1,4,128,17],[145,1,141,137],[140,2],[144,2,6],[98,2,2],[80,0,98,2,4],[85,2,4,1,112,4,2,113],[81,39,82,2,4,2,120,24,4,112,82,2,2,69,82,2,4,80,7,64,10,129,26],[82,2,4,80,1,25,98,2,3],[81,29,82,2,3,2,120,24,4,112,81,29,82,2,4,2,120,24,4,112,81,39,82,2,4,2,120,24,4,112,82,2,2,25,82,2,2,81,39,82,2,3,2,120,24,4,112,25,223,98,2,1],[89,2,105,3,145,2,141,137],[136,6],[80,-5e5,80,1e6,80,250,32,80,750,80,2,27,25,97,19],[80,0,80,1e6,80,250,32,80,750,80,2,27,25,97,21],[81,19,80,750,24,80,1,25,97,20],[81,21,80,750,24,80,1,25,97,22],[81,19,81,21,80,750,80,750,208],[80,750,80,750,209],[80,0,177],[81,19],[97,23,81,20],[81,23,69,129,63],[163],[81,21],[97,24,81,22],[81,24,69,129,61],[81,23,97,25],[81,24,97,26],[80,0,97,27],[81,25,81,26,80,1,34,80,2,80,250,26,66,81,27,80,40,68,9,129,55],[81,25,81,26,24,80,250,81,25,81,26,25,32,97,28],[80,2,81,25,26,80,250,81,26,32,81,24,24,97,26],[81,28,81,23,24,97,25],[84,27,1,112,4,2,113],[128,49],[81,27,80,40,67,129,58],[81,23,81,24,80,0,211],[128,60],[81,23,81,24,81,27,136,22],[82,3,1,211],[81,24,4,128,44],[162],[81,23,4,128,40],[87,82,101,115,111,108,117,116,105,111,110,58,32,0,80,250,80,3,26,49,54,87,59,32,84,105,109,101,32,116,97,107,101,110,58,32,0,54,176,80,1e3,80,1,52,54,87,32,115,101,99,111,110,100,115,46,0,54,190,191,147],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Mandelbrot mini spectrum",author:"University of Oxford",date:"22/09/2016",time:"23:25:31",code:"PROGRAM MandelbrotMiniSpectrum;\nCONST maxcol=100;\n      scale=10000;\n      pixels=300;\n      xcentre=-159200;\n      ycentre=-1033000; \n      spectrum=7;\nVAR xstart,xfinish,ystart,yfinish: integer;\n    a,b,x,y: integer;\n    iterations,temp: integer;\n    spectcol: array[0..spectrum] of integer;\n    boundary: array[0..spectrum] of integer;\n\n  Procedure colsetup;\n  Var n: integer;\n  Begin\n    spectcol[0]:=violet;\n    spectcol[1]:=blue;\n    spectcol[2]:=cyan;\n    spectcol[3]:=lime;\n    spectcol[4]:=yellow;\n    spectcol[5]:=orange;\n    spectcol[6]:=red;\n    spectcol[7]:=violet;\n    for n:=0 to spectrum do\n      boundary[n]:=divmult(maxcol,spectrum,n)\n  End;\n\n  Function mixcolour(n: integer): integer;\n  Var col1,col2: integer;\n      mix1,mix2: integer;\n  Begin\n    col2:=0;\n    repeat\n      inc(col2)\n    until (boundary[col2]>=n) or (col2=spectrum);\n    col1:=col2-1;\n    result:=mixcols(spectcol[col1],spectcol[col2],boundary[col2]-n,n-boundary[col1])\n  End;\n\nBEGIN\n  colsetup;\n  xstart:=divmult(xcentre,1000000,scale)-pixels/2;\n  ystart:=divmult(ycentre,1000000,scale)-pixels/2;\n  xfinish:=xstart+pixels-1;\n  yfinish:=ystart+pixels-1;\n  canvas(xstart,ystart,pixels,pixels);\n  resolution(pixels,pixels);\n  timeset(0);\n  for a:=xstart to xfinish do\n    begin\n      noupdate;\n      for b:=ystart to yfinish do\n        begin\n          x:=a;\n          y:=b;\n          iterations:=0;\n          while (hypot(x,y,1)<2*scale) and (iterations<=maxcol) do\n            begin\n              temp:=divmult(x+y,scale,x-y);\n              y:=divmult(2*x,scale,y)+b;\n              x:=temp+a;\n              inc(iterations)\n            end;\n          if iterations>maxcol then\n            pixset(a,b,black)\n          else\n            pixset(a,b,mixcolour(iterations))\n        end;\n      update\n    end;\n  writeln('Resolution: '+str(scale*3)+'; Time taken: '+qstr(time,1000,1)+' seconds.')\nEND.",usage:[{category:"Other Turtle commands",expressions:[{name:"mixcols",level:3,count:1,lines:"38"}],total:1},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"52"},{name:"update",level:1,count:1,lines:"70"},{name:"canvas",level:2,count:1,lines:"47"},{name:"resolution",level:2,count:1,lines:"48"},{name:"pixset",level:3,count:2,lines:"66 68"}],total:6},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:2,lines:"35 63"},{name:"hypot",level:2,count:1,lines:"58"},{name:"divmult",level:3,count:5,lines:"26 43 44 60 61"}],total:8},{category:"String operations",expressions:[{name:"writeln",level:1,count:1,lines:"72"}],total:1},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:1,lines:"72"},{name:"qstr",level:2,count:1,lines:"72"}],total:2},{category:"Input and timing routines",expressions:[{name:"time",level:2,count:1,lines:"72"},{name:"timeset",level:2,count:1,lines:"49"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"65"},{name:"else",level:1,count:1,lines:"67"},{name:"for",level:1,count:3,lines:"25 50 53"},{name:"repeat",level:1,count:1,lines:"34"},{name:"while",level:2,count:1,lines:"58"},{name:"procedure",level:2,count:1,lines:"14"},{name:"function",level:3,count:1,lines:"29"}],total:9},{category:"Subroutine calls",expressions:[{name:"colsetup",level:0,count:1,lines:"42"},{name:"mixcolour",level:0,count:1,lines:"68"}],total:2}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,35,115,80,48,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,30,97,29,80,8,97,30],[84,40,97,39,80,8,97,40],[128,31],[140,1],[144,1,1],[81,29,80,0,2,120,24,4,80,9055202,2,113],[81,29,80,1,2,120,24,4,80,255,2,113],[81,29,80,2,2,120,24,4,80,65535,2,113],[81,29,80,3,2,120,24,4,80,65280,2,113],[81,29,80,4,2,120,24,4,80,16776960,2,113],[81,29,80,5,2,120,24,4,80,16755200,2,113],[81,29,80,6,2,120,24,4,80,16711680,2,113],[81,29,80,7,2,120,24,4,80,9055202,2,113],[80,0],[98,1,1,80,7],[82,1,1,69,129,21],[81,39,82,1,1,2,120,24,4,80,100,80,7,82,1,1,32,2,113],[82,1,1,4,128,17],[145,1,141,137],[140,2],[144,2,6],[98,2,2],[80,0,98,2,4],[85,2,4,1,112,4,2,113],[81,39,82,2,4,2,120,24,4,112,82,2,2,69,82,2,4,80,7,64,10,129,26],[82,2,4,80,1,25,98,2,3],[81,29,82,2,3,2,120,24,4,112,81,29,82,2,4,2,120,24,4,112,81,39,82,2,4,2,120,24,4,112,82,2,2,25,82,2,2,81,39,82,2,3,2,120,24,4,112,25,223,98,2,1],[89,2,105,3,145,2,141,137],[136,6],[80,-159200,80,1e6,80,1e4,32,80,300,80,2,27,25,97,19],[80,-1033e3,80,1e6,80,1e4,32,80,300,80,2,27,25,97,21],[81,19,80,300,24,80,1,25,97,20],[81,21,80,300,24,80,1,25,97,22],[81,19,81,21,80,300,80,300,208],[80,300,80,300,209],[80,0,177],[81,19],[97,23,81,20],[81,23,69,129,63],[163],[81,21],[97,24,81,22],[81,24,69,129,61],[81,23,97,25],[81,24,97,26],[80,0,97,27],[81,25,81,26,80,1,34,80,2,80,1e4,26,66,81,27,80,100,68,9,129,55],[81,25,81,26,24,80,1e4,81,25,81,26,25,32,97,28],[80,2,81,25,26,80,1e4,81,26,32,81,24,24,97,26],[81,28,81,23,24,97,25],[84,27,1,112,4,2,113],[128,49],[81,27,80,100,67,129,58],[81,23,81,24,80,0,211],[128,60],[81,23,81,24,81,27,136,22],[82,3,1,211],[81,24,4,128,44],[162],[81,23,4,128,40],[87,82,101,115,111,108,117,116,105,111,110,58,32,0,80,1e4,80,3,26,49,54,87,59,32,84,105,109,101,32,116,97,107,101,110,58,32,0,54,176,80,1e3,80,1,52,54,87,32,115,101,99,111,110,100,115,46,0,54,190,191,147],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Mandelbrot mini",author:"University of Oxford",date:"22/09/2016",time:"23:24:56",code:"PROGRAM MandelbrotMini;\nCONST maxcol=40;\n      scale=10000;\n      pixels=300;\n      xcentre=-159200;\n      ycentre=-1033000; \nVAR xstart,xfinish,ystart,yfinish: integer;\n    a,b,x,y: integer;\n    iterations,temp: integer;\n\nBEGIN\n  xstart:=divmult(xcentre,1000000,scale)-pixels/2;\n  ystart:=divmult(ycentre,1000000,scale)-pixels/2;\n  xfinish:=xstart+pixels-1;\n  yfinish:=ystart+pixels-1;\n  canvas(xstart,ystart,pixels,pixels);\n  resolution(pixels,pixels);\n  timeset(0);\n  for a:=xstart to xfinish do\n    begin\n      noupdate;\n      for b:=ystart to yfinish do\n        begin\n          x:=a;\n          y:=b;\n          iterations:=0;\n          while (hypot(x,y,1)<2*scale) and (iterations<=maxcol) do\n            begin\n              temp:=divmult(x+y,scale,x-y);\n              y:=divmult(2*x,scale,y)+b;\n              x:=temp+a;\n              inc(iterations)\n            end;\n          if iterations>maxcol then\n            pixset(a,b,black)\n          else\n            pixset(a,b,rgb(iterations+1))\n        end;\n      update\n    end;\n  writeln('Resolution: '+str(scale*3)+'; Time taken: '+qstr(time,1000,1)+' seconds.')\nEND.",usage:[{category:"Other Turtle commands",expressions:[{name:"rgb",level:3,count:1,lines:"37"}],total:1},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"21"},{name:"update",level:1,count:1,lines:"39"},{name:"canvas",level:2,count:1,lines:"16"},{name:"resolution",level:2,count:1,lines:"17"},{name:"pixset",level:3,count:2,lines:"35 37"}],total:6},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:1,lines:"32"},{name:"hypot",level:2,count:1,lines:"27"},{name:"divmult",level:3,count:4,lines:"12 13 29 30"}],total:6},{category:"String operations",expressions:[{name:"writeln",level:1,count:1,lines:"41"}],total:1},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:1,lines:"41"},{name:"qstr",level:2,count:1,lines:"41"}],total:2},{category:"Input and timing routines",expressions:[{name:"time",level:2,count:1,lines:"41"},{name:"timeset",level:2,count:1,lines:"18"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"34"},{name:"else",level:1,count:1,lines:"36"},{name:"for",level:1,count:2,lines:"19 22"},{name:"while",level:2,count:1,lines:"27"}],total:5}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,15,115,80,25,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,-159200,80,1e6,80,1e4,32,80,300,80,2,27,25,97,16],[80,-1033e3,80,1e6,80,1e4,32,80,300,80,2,27,25,97,18],[81,16,80,300,24,80,1,25,97,17],[81,18,80,300,24,80,1,25,97,19],[81,16,81,18,80,300,80,300,208],[80,300,80,300,209],[80,0,177],[81,16],[97,20,81,17],[81,20,69,129,33],[163],[81,18],[97,21,81,19],[81,21,69,129,31],[81,20,97,22],[81,21,97,23],[80,0,97,24],[81,22,81,23,80,1,34,80,2,80,1e4,26,66,81,24,80,40,68,9,129,26],[81,22,81,23,24,80,1e4,81,22,81,23,25,32,97,25],[80,2,81,22,26,80,1e4,81,23,32,81,21,24,97,23],[81,25,81,20,24,97,22],[84,24,1,112,4,2,113],[128,20],[81,24,80,40,67,129,29],[81,20,81,21,80,0,211],[128,30],[81,20,81,21,81,24,80,1,24,222,211],[81,21,4,128,15],[162],[81,20,4,128,11],[87,82,101,115,111,108,117,116,105,111,110,58,32,0,80,1e4,80,3,26,49,54,87,59,32,84,105,109,101,32,116,97,107,101,110,58,32,0,54,176,80,1e3,80,1,52,54,87,32,115,101,99,111,110,100,115,46,0,54,190,191,147],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Mandelbrot set",author:"University of Oxford",date:"22/09/2016",time:"19:25:20",code:"PROGRAM Mandelbrot;\nCONST maxcol=40;\n      scale=250;\n      pixels=750;\n      xcentre=-500000; {millionths}\n      ycentre=0; {millionths}\nVAR xstart,xfinish,ystart,yfinish: integer;\n    a,b,x,y: integer;\n    iterations,temp: integer;\n\nBEGIN\n  xstart:=divmult(xcentre,1000000,scale)-pixels/2;\n  ystart:=divmult(ycentre,1000000,scale)-pixels/2;\n  xfinish:=xstart+pixels-1;\n  yfinish:=ystart+pixels-1;\n  canvas(xstart,ystart,pixels,pixels);\n  resolution(pixels,pixels);\n  timeset(0);\n  for a:=xstart to xfinish do\n    begin\n      noupdate;\n      for b:=ystart to yfinish do\n        begin\n          x:=a;\n          y:=b;\n          iterations:=0;\n          while (hypot(x,y,1)<2*scale) and (iterations<=maxcol) do\n            begin\n              temp:=divmult(x+y,scale,x-y);\n              y:=divmult(2*x,scale,y)+b;\n              x:=temp+a;\n              inc(iterations)\n            end;\n          if iterations>maxcol then\n            pixset(a,b,black)\n          else\n            pixset(a,b,rgb(iterations+1))\n        end;\n      update\n    end;\n  writeln('Resolution: '+str(scale*3)+'; Time taken: '+qstr(time,1000,1)+' seconds.')\nEND.",usage:[{category:"Other Turtle commands",expressions:[{name:"rgb",level:3,count:1,lines:"37"}],total:1},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"21"},{name:"update",level:1,count:1,lines:"39"},{name:"canvas",level:2,count:1,lines:"16"},{name:"resolution",level:2,count:1,lines:"17"},{name:"pixset",level:3,count:2,lines:"35 37"}],total:6},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:1,lines:"32"},{name:"hypot",level:2,count:1,lines:"27"},{name:"divmult",level:3,count:4,lines:"12 13 29 30"}],total:6},{category:"String operations",expressions:[{name:"writeln",level:1,count:1,lines:"41"}],total:1},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:1,lines:"41"},{name:"qstr",level:2,count:1,lines:"41"}],total:2},{category:"Input and timing routines",expressions:[{name:"time",level:2,count:1,lines:"41"},{name:"timeset",level:2,count:1,lines:"18"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"34"},{name:"else",level:1,count:1,lines:"36"},{name:"for",level:1,count:2,lines:"19 22"},{name:"while",level:2,count:1,lines:"27"}],total:5}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,15,115,80,25,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,-5e5,80,1e6,80,250,32,80,750,80,2,27,25,97,16],[80,0,80,1e6,80,250,32,80,750,80,2,27,25,97,18],[81,16,80,750,24,80,1,25,97,17],[81,18,80,750,24,80,1,25,97,19],[81,16,81,18,80,750,80,750,208],[80,750,80,750,209],[80,0,177],[81,16],[97,20,81,17],[81,20,69,129,33],[163],[81,18],[97,21,81,19],[81,21,69,129,31],[81,20,97,22],[81,21,97,23],[80,0,97,24],[81,22,81,23,80,1,34,80,2,80,250,26,66,81,24,80,40,68,9,129,26],[81,22,81,23,24,80,250,81,22,81,23,25,32,97,25],[80,2,81,22,26,80,250,81,23,32,81,21,24,97,23],[81,25,81,20,24,97,22],[84,24,1,112,4,2,113],[128,20],[81,24,80,40,67,129,29],[81,20,81,21,80,0,211],[128,30],[81,20,81,21,81,24,80,1,24,222,211],[81,21,4,128,15],[162],[81,20,4,128,11],[87,82,101,115,111,108,117,116,105,111,110,58,32,0,80,250,80,3,26,49,54,87,59,32,84,105,109,101,32,116,97,107,101,110,58,32,0,54,176,80,1e3,80,1,52,54,87,32,115,101,99,111,110,100,115,46,0,54,190,191,147],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Logistic spider",author:"University of Oxford",date:"22/09/2016",time:"19:20:24",code:"PROGRAM LogisticSpider;\nCONST maxpop=100000;\n      maxgen=100;\n      lmargin=60;\n      rmargin=40;\n      tmargin=150;\n      bmargin=200;\n      output=true;\n   \nVAR gen,pop: integer;\n    r: integer;\n\n  Procedure axes;\n  Var i: integer;\n  Begin\n    colour(black);\n    for i:=0 to 10 do\n      begin\n        setxy(i*100-25,1000);\n        print(qstr(i,10,1),4,20)\n      end;\n    for i:=1 to 10 do\n      begin\n        setxy(-lmargin+5,1000-i*100-20);\n        print(qstr(i,10,1),4,20)\n      end;\n    setxy(0,0);\n    drawxy(0,1000);\n    drawxy(1000,0);\n    colour(red);\n    setxy(0,1060);\n    print('Population over '+str(maxgen)+' generations, where P (population/'+str(maxpop)+')',4,25);\n    setxy(0,1110);\n    print('is determined by the logistic equation P'' = rP(1 - P), with r = '+qstr(r,10,1),4,25)\n  End;\n\n  Procedure menu;\n  Var i: integer;\n  Begin\n    colour(black);\n    setxy(10,-tmargin+20);\n    print('Set k:',4,25);\n    for i:=21 to 40 do\n      begin\n        setxy(((i-1) mod 10)*90+130,((i-1) div 10)*50-100-tmargin);\n        if i=r then\n          box(90,50,red,true)\n        else\n          box(90,50,cream,true);\n        print('  '+qstr(i,10,1),4,25)\n      end\n  End;\n\n  Procedure curve;\n  Var i,pop,nextpop: integer;\n  Begin\n    noupdate;\n    colour(black);\n    setxy(0,1000);\n    drawxy(1000,-1000);\n    colour(blue);\n    setxy(0,1000);\n    for i:=1 to 1000 do\n      begin\n        pop:=divmult(i,1000,maxpop);\n        nextpop:=divmult(pop,10*maxpop,r*(maxpop-pop));\n        setxy(divmult(pop,maxpop,1000),1000-divmult(nextpop,maxpop,1000));\n        polyline(2);\n      end;\n    update   \n  End;\n\nBEGIN\n  canvas(-lmargin,-tmargin,1000+lmargin+rmargin,1000+tmargin+bmargin);\n  resolution(1000+lmargin+rmargin,1000+tmargin+bmargin);\n  thickness(3);\n  r:=30;\n  repeat\n    noupdate;\n    blank(white);\n    axes;\n    menu;\n    curve;\n    pop:=random(maxpop-9)+10;\n    if output then\n      begin\n        writeln('');\n        writeln('r = '+qstr(r,10,1)+'; Initial population = '+str(pop))\n      end;\n    setxy(divmult(pop,maxpop,1000),1000);\n    for gen:=1 to maxgen do\n      begin\n        pop:=divmult(pop,10*maxpop,r*(maxpop-pop));\n        colour(mixcols(lightgreen,green,maxgen-gen,gen));\n        drawxy(0,1000-divmult(pop,maxpop,1000)-turty);\n        drawxy(divmult(pop,maxpop,1000)-turtx,0);\n        if output then\n          begin\n            write(str(pop)+' ');\n            if gen mod 10 = 0 then\n              writeln('')\n          end\n      end;\n    blot(3);\n    heapreset;\n    update;\n    repeat\n    until (?lmouse>0) and (?clicky<(100-tmargin)) and (?clickx>=130) and (?clickx<1030);\n    r:=((?clickx-130) div 90) + ((?clicky+tmargin+100) div 50)*10 + 1\n  until 0=1\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:5,lines:"28 29 60 95 96"}],total:5},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:11,lines:"19 24 27 31 33 41 45 59 62 67 90"}],total:11},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"104"},{name:"box",level:2,count:2,lines:"47 49"},{name:"polyline",level:2,count:1,lines:"68"}],total:4},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:6,lines:"16 30 40 58 61 94"},{name:"thickness",level:1,count:1,lines:"76"},{name:"mixcols",level:3,count:1,lines:"94"}],total:8},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"80"},{name:"noupdate",level:1,count:2,lines:"57 79"},{name:"update",level:1,count:2,lines:"70 106"},{name:"canvas",level:2,count:1,lines:"74"},{name:"resolution",level:2,count:1,lines:"75"}],total:7},{category:"General arithmetic functions",expressions:[{name:"random",level:2,count:1,lines:"84"},{name:"divmult",level:3,count:8,lines:"65 66 67 90 93 95 96"}],total:9},{category:"String operations",expressions:[{name:"print",level:1,count:6,lines:"20 25 32 34 42 50"},{name:"write",level:1,count:1,lines:"99"},{name:"writeln",level:1,count:3,lines:"87 88 101"}],total:10},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:4,lines:"32 88 99"},{name:"qstr",level:2,count:5,lines:"20 25 34 50 88"}],total:9},{category:"Turtle Machine monitoring",expressions:[{name:"heapreset",level:3,count:1,lines:"105"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:4,lines:"46 85 97 100"},{name:"else",level:1,count:1,lines:"48"},{name:"for",level:1,count:5,lines:"17 22 43 63 91"},{name:"repeat",level:1,count:2,lines:"78 107"},{name:"procedure",level:2,count:3,lines:"13 37 54"}],total:15},{category:"Subroutine calls",expressions:[{name:"axes",level:0,count:1,lines:"81"},{name:"menu",level:0,count:1,lines:"82"},{name:"curve",level:0,count:1,lines:"83"}],total:3}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,8,115,80,21,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,62],[140,1],[144,1,1],[80,0,221],[80,0],[98,1,1,80,10],[82,1,1,69,129,13],[82,1,1,80,100,26,80,25,25,80,1e3,224],[82,1,1,80,10,80,1,52,80,4,80,20,189,147],[82,1,1,4,128,8],[80,1],[98,1,1,80,10],[82,1,1,69,129,19],[80,60,16,80,5,24,80,1e3,82,1,1,80,100,26,25,80,20,25,224],[82,1,1,80,10,80,1,52,80,4,80,20,189,147],[82,1,1,4,128,14],[80,0,80,0,224],[80,0,80,1e3,226],[80,1e3,80,0,226],[80,16711680,221],[80,0,80,1060,224],[87,80,111,112,117,108,97,116,105,111,110,32,111,118,101,114,32,0,80,100,49,54,87,32,103,101,110,101,114,97,116,105,111,110,115,44,32,119,104,101,114,101,32,80,32,40,112,111,112,117,108,97,116,105,111,110,47,0,54,80,1e5,49,54,80,41,48,54,80,4,80,25,189,147],[80,0,80,1110,224],[87,105,115,32,100,101,116,101,114,109,105,110,101,100,32,98,121,32,116,104,101,32,108,111,103,105,115,116,105,99,32,101,113,117,97,116,105,111,110,32,80,39,32,61,32,114,80,40,49,32,45,32,80,41,44,32,119,105,116,104,32,114,32,61,32,0,81,21,80,10,80,1,52,54,80,4,80,25,189,147],[145,1,141,137],[140,2],[144,2,1],[80,0,221],[80,10,80,150,16,80,20,24,224],[87,83,101,116,32,107,58,0,80,4,80,25,189],[80,21],[98,2,1,80,40],[82,2,1,69,129,43],[82,2,1,80,1,25,80,10,29,80,90,26,80,130,24,82,2,1,80,1,25,80,10,28,80,50,26,80,100,25,80,150,25,224],[82,2,1,81,21,64,129,40],[80,90,80,50,80,16711680,80,-1,246],[128,41],[80,90,80,50,80,16777147,80,-1,246],[87,32,32,0,82,2,1,80,10,80,1,52,54,80,4,80,25,189,147],[82,2,1,4,128,34],[145,2,141,137],[140,3],[144,3,3],[163],[80,0,221],[80,0,80,1e3,224],[80,1e3,80,1e3,16,226],[80,255,221],[80,0,80,1e3,224],[80,1],[98,3,1,80,1e3],[82,3,1,69,129,60],[82,3,1,80,1e3,80,1e5,32,98,3,2],[82,3,2,80,10,80,1e5,26,81,21,80,1e5,82,3,2,25,26,32,98,3,3],[82,3,2,80,1e5,80,1e3,32,80,1e3,82,3,3,80,1e5,80,1e3,32,25,224],[80,2,240],[82,3,1,4,128,53],[162],[145,3,141,137],[80,60,16,80,150,16,80,1e3,80,60,24,80,40,24,80,1e3,80,150,24,80,200,24,208],[80,1e3,80,60,24,80,40,24,80,1e3,80,150,24,80,200,24,209],[80,3,220],[80,30,97,21],[163],[80,16777215,248],[136,4],[136,28],[136,44],[80,1e5,80,9,25,19,80,10,24,97,20],[80,-1,129,75],[87,0,190,191],[87,114,32,61,32,0,81,21,80,10,80,1,52,54,87,59,32,73,110,105,116,105,97,108,32,112,111,112,117,108,97,116,105,111,110,32,61,32,0,54,81,20,49,54,190,191,147],[81,20,80,1e5,80,1e3,32,80,1e3,224],[80,1],[97,19,80,100],[81,19,69,129,88],[81,20,80,10,80,1e5,26,81,21,80,1e5,81,20,25,26,32,97,20],[80,10025880,80,2263842,80,100,81,19,25,81,19,223,221],[80,0,80,1e3,81,20,80,1e5,80,1e3,32,25,81,15,25,226],[81,20,80,1e5,80,1e3,32,81,14,25,80,0,226],[80,-1,129,87],[81,20,49,80,32,48,54,190,147],[81,19,80,10,29,80,0,64,129,87],[87,0,190,191],[81,19,4,128,77],[80,3,243],[148],[162],[80,-1,184,80,0,67,80,-6,184,80,100,80,150,25,66,9,80,-5,184,80,130,69,9,80,-5,184,80,1030,66,9,129,91],[80,-5,184,80,130,25,80,90,28,80,-6,184,80,150,24,80,100,24,80,50,28,80,10,26,24,80,1,24,97,21],[80,0,80,1,64,129,66],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Logistic equation",author:"University of Oxford",date:"22/09/2016",time:"19:16:47",code:"PROGRAM Logistic;\nCONST maxpop=100000;\n      maxgen=100;\n      lmargin=105;\n      rmargin=40;\n      tmargin=150;\n      bmargin=200;\n      output=false;\n   \nVAR gen,pop: integer;\n    r: integer;\n\n  Procedure axes;\n  Var i: integer;\n  Begin\n    colour(black);\n    for i:=0 to 10 do\n      begin\n        setxy(i*100-25,1000);\n        print(str(i*maxgen/10),4,20)\n      end;\n    for i:=1 to 10 do\n      begin\n        setxy(-lmargin+5,1000-i*100-20);\n        print(str(i*maxpop/10),4,20)\n      end;\n    setxy(0,0);\n    drawxy(0,1000);\n    drawxy(1000,0);\n    colour(red);\n    setxy(0,1060);\n    print('Population over '+str(maxgen)+' generations, where P (population/'+str(maxpop)+')',4,25);\n    setxy(0,1110);\n    print('is determined by the logistic equation P'' = rP(1 - P), with r = '+qstr(r,10,1),4,25)\n  End;\n\n  Procedure menu;\n  Var i: integer;\n  Begin\n    colour(black);\n    setxy(10,-tmargin+20);\n    print('Set r:',4,25);\n    for i:=21 to 40 do\n      begin\n        setxy(((i-1) mod 10)*90+130,((i-1) div 10)*50-100-tmargin);\n        if i=r then\n          box(90,50,red,true)\n        else\n          box(90,50,cream,true);\n        print('  '+qstr(i,10,1),4,25)\n      end\n  End;\n\nBEGIN\n  canvas(-lmargin,-tmargin,1000+lmargin+rmargin,1000+tmargin+bmargin);\n  resolution(1000+lmargin+rmargin,1000+tmargin+bmargin);\n  thickness(3);\n  r:=30;\n  repeat\n    noupdate;\n    blank(white);\n    axes;\n    menu;\n    colour(blue);\n    pop:=random(maxpop-9)+10;\n    if output then\n      begin\n        writeln('');\n        writeln('r = '+qstr(r,10,1)+'; Initial population = '+str(pop))\n      end;\n    setxy(0,1000-divmult(pop,maxpop,1000));\n    for gen:=1 to maxgen do\n      begin\n        pop:=divmult(pop,10*maxpop,r*(maxpop-pop));\n        setxy(divmult(gen,maxgen,1000),1000-divmult(pop,maxpop,1000));\n        polyline(2);\n        if output then\n          begin\n            write(str(pop)+' ');\n            if gen mod 10 = 0 then\n              writeln('')\n          end\n      end;\n    heapreset;\n    update;\n    repeat\n    until (?lmouse>0) and (?clicky<(100-tmargin)) and (?clickx>=130) and (?clickx<1030);\n    r:=((?clickx-130) div 90) + ((?clicky+tmargin+100) div 50)*10 + 1\n  until 0=1\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:2,lines:"28 29"}],total:2},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:9,lines:"19 24 27 31 33 41 45 71 75"}],total:9},{category:"Turtle: drawing shapes",expressions:[{name:"box",level:2,count:2,lines:"47 49"},{name:"polyline",level:2,count:1,lines:"76"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:4,lines:"16 30 40 64"},{name:"thickness",level:1,count:1,lines:"57"}],total:5},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"61"},{name:"noupdate",level:1,count:1,lines:"60"},{name:"update",level:1,count:1,lines:"85"},{name:"canvas",level:2,count:1,lines:"55"},{name:"resolution",level:2,count:1,lines:"56"}],total:5},{category:"General arithmetic functions",expressions:[{name:"random",level:2,count:1,lines:"65"},{name:"divmult",level:3,count:4,lines:"71 74 75"}],total:5},{category:"String operations",expressions:[{name:"print",level:1,count:6,lines:"20 25 32 34 42 50"},{name:"write",level:1,count:1,lines:"79"},{name:"writeln",level:1,count:3,lines:"68 69 81"}],total:10},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:6,lines:"20 25 32 69 79"},{name:"qstr",level:2,count:3,lines:"34 50 69"}],total:9},{category:"Turtle Machine monitoring",expressions:[{name:"heapreset",level:3,count:1,lines:"84"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:4,lines:"46 66 77 80"},{name:"else",level:1,count:1,lines:"48"},{name:"for",level:1,count:4,lines:"17 22 43 72"},{name:"repeat",level:1,count:2,lines:"59 86"},{name:"procedure",level:2,count:2,lines:"13 37"}],total:13},{category:"Subroutine calls",expressions:[{name:"axes",level:0,count:1,lines:"62"},{name:"menu",level:0,count:1,lines:"63"}],total:2}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,8,115,80,20,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,44],[140,1],[144,1,1],[80,0,221],[80,0],[98,1,1,80,10],[82,1,1,69,129,13],[82,1,1,80,100,26,80,25,25,80,1e3,224],[82,1,1,80,100,26,80,10,27,49,80,4,80,20,189,147],[82,1,1,4,128,8],[80,1],[98,1,1,80,10],[82,1,1,69,129,19],[80,105,16,80,5,24,80,1e3,82,1,1,80,100,26,25,80,20,25,224],[82,1,1,80,1e5,26,80,10,27,49,80,4,80,20,189,147],[82,1,1,4,128,14],[80,0,80,0,224],[80,0,80,1e3,226],[80,1e3,80,0,226],[80,16711680,221],[80,0,80,1060,224],[87,80,111,112,117,108,97,116,105,111,110,32,111,118,101,114,32,0,80,100,49,54,87,32,103,101,110,101,114,97,116,105,111,110,115,44,32,119,104,101,114,101,32,80,32,40,112,111,112,117,108,97,116,105,111,110,47,0,54,80,1e5,49,54,80,41,48,54,80,4,80,25,189,147],[80,0,80,1110,224],[87,105,115,32,100,101,116,101,114,109,105,110,101,100,32,98,121,32,116,104,101,32,108,111,103,105,115,116,105,99,32,101,113,117,97,116,105,111,110,32,80,39,32,61,32,114,80,40,49,32,45,32,80,41,44,32,119,105,116,104,32,114,32,61,32,0,81,20,80,10,80,1,52,54,80,4,80,25,189,147],[145,1,141,137],[140,2],[144,2,1],[80,0,221],[80,10,80,150,16,80,20,24,224],[87,83,101,116,32,114,58,0,80,4,80,25,189],[80,21],[98,2,1,80,40],[82,2,1,69,129,43],[82,2,1,80,1,25,80,10,29,80,90,26,80,130,24,82,2,1,80,1,25,80,10,28,80,50,26,80,100,25,80,150,25,224],[82,2,1,81,20,64,129,40],[80,90,80,50,80,16711680,80,-1,246],[128,41],[80,90,80,50,80,16777147,80,-1,246],[87,32,32,0,82,2,1,80,10,80,1,52,54,80,4,80,25,189,147],[82,2,1,4,128,34],[145,2,141,137],[80,105,16,80,150,16,80,1e3,80,105,24,80,40,24,80,1e3,80,150,24,80,200,24,208],[80,1e3,80,105,24,80,40,24,80,1e3,80,150,24,80,200,24,209],[80,3,220],[80,30,97,20],[163],[80,16777215,248],[136,4],[136,28],[80,255,221],[80,1e5,80,9,25,19,80,10,24,97,19],[80,0,129,57],[87,0,190,191],[87,114,32,61,32,0,81,20,80,10,80,1,52,54,87,59,32,73,110,105,116,105,97,108,32,112,111,112,117,108,97,116,105,111,110,32,61,32,0,54,81,19,49,54,190,191,147],[80,0,80,1e3,81,19,80,1e5,80,1e3,32,25,224],[80,1],[97,18,80,100],[81,18,69,129,69],[81,19,80,10,80,1e5,26,81,20,80,1e5,81,19,25,26,32,97,19],[81,18,80,100,80,1e3,32,80,1e3,81,19,80,1e5,80,1e3,32,25,224],[80,2,240],[80,0,129,68],[81,19,49,80,32,48,54,190,147],[81,18,80,10,29,80,0,64,129,68],[87,0,190,191],[81,18,4,128,59],[148],[162],[80,-1,184,80,0,67,80,-6,184,80,100,80,150,25,66,9,80,-5,184,80,130,69,9,80,-5,184,80,1030,66,9,129,71],[80,-5,184,80,130,25,80,90,28,80,-6,184,80,150,24,80,100,24,80,50,28,80,10,26,24,80,1,24,97,20],[80,0,80,1,64,129,48],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Initialising Conway's Game of Life",author:"University of Oxford",date:"22/09/2016",time:"19:13:41",code:"PROGRAM LifeStart;\nCONST width=32;\n      height=32;\nVAR x,y: integer;\nBEGIN\n  canvas(0,0,width,height);\n  resolution(width,height);\n  for x:=0 to width-1 do\n    for y:=0 to height-1 do\n      if random(7)=0 then\n        pixset(x,y,black)\n      else\n        pixset(x,y,white)\nEND.",usage:[{category:"Canvas operations",expressions:[{name:"canvas",level:2,count:1,lines:"6"},{name:"resolution",level:2,count:1,lines:"7"},{name:"pixset",level:3,count:2,lines:"11 13"}],total:4},{category:"General arithmetic functions",expressions:[{name:"random",level:2,count:1,lines:"10"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"10"},{name:"else",level:1,count:1,lines:"12"},{name:"for",level:1,count:2,lines:"8 9"}],total:4}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,7,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,0,80,0,80,32,80,32,208],[80,32,80,32,209],[80,0],[97,16,80,32,80,1,25],[81,16,69,129,17],[80,0],[97,17,80,32,80,1,25],[81,17,69,129,16],[80,7,19,80,0,64,129,14],[81,16,81,17,80,0,211],[128,15],[81,16,81,17,80,16777215,211],[81,17,4,128,9],[81,16,4,128,6],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Launching a rocket into orbit",author:"University of Oxford",date:"22/09/2016",time:"19:13:00",code:"PROGRAM Launch;\nCONST earthradius=6371000; {m}\n      earthGM=398600442; {km3/s2*1000}\n      initdirection=2000; {seconds of arc}\n      initthrust=20000; {milliN per kg}\n      thrusttime=500;\n      angleprecision=1296000; {seconds of arc}\nVAR x,y,d,xvel,yvel: integer;\n    thrust,xthrust,ythrust: integer;\n    gravity,xgravity,ygravity: integer;\n    xacc,yacc: integer;\n    dist,prevdist,prevdiff,t: integer;\n    explosion: integer;\n\n  Procedure drawrocket;\n  Begin\n    noupdate;\n    blank(black);\n    colour(teal);\n    setxy(0,0);\n    blot(earthradius/1000);\n    setxy(x/1000,y/1000);\n    direction(d);\n    thickness(4);\n    colour(silver);\n    forward(200);\n    back(200);\n    if thrust>0 then\n      begin\n        thickness(8);\n        colour(yellow);\n        back(200);\n        forward(200)\n      end;\n    update\n  End;\n\n  Procedure report;\n  Begin\n    writeln('');\n    writeln('TIME = '+str(t));\n    writeln(' Xposition = '+str(x)+' metres');\n    writeln(' Yposition = '+str(y)+' metres');\n    writeln(' Height = '+qstr(dist-earthradius,1000,2)+' km');\n    writeln(' Direction = '+qstr(d,3600,1)+' degrees');\n    writeln(' Thrust = '+qstr(thrust,1000,1)+' newtons per kg');\n    writeln('  Xthrust = '+qstr(xthrust,1000,1)+' newtons per kg');\n    writeln('  Ythrust = '+qstr(ythrust,1000,1)+' newtons per kg');\n    writeln(' Gravity = '+qstr(gravity,1000,1)+' newtons per kg');\n    writeln('  Xgravity = '+qstr(xgravity,1000,1)+' newtons per kg');\n    writeln('  Ygravity = '+qstr(ygravity,1000,1)+' newtons per kg');\n    writeln(' Xvelocity = '+qstr(xvel,1000,1)+' metres per s');\n    writeln(' Yvelocity = '+qstr(yvel,1000,1)+' metres per s')\n  End;\n\nBEGIN\n  canvas(-20000,-20000,40000,40000);\n  angles(angleprecision);\n  x:=0;\n  y:=-earthradius; {metres}\n  xvel:=0;\n  yvel:=0;\n  d:=initdirection;\n  t:=0;\n  prevdiff:=1; {so first apogee will report}\n  thrust:=initthrust;\n  repeat\n    drawrocket;\n    prevdist:=dist;\n    dist:=hypot(x,y,1);\n    if (dist-prevdist)*prevdiff<=0 then\n      report;\n    prevdiff:=dist-prevdist;\n    gravity:=divmult(earthGM,divmult(dist,1000000,dist),1000);\n    xgravity:=divmult(gravity,dist,-x);\n    ygravity:=divmult(gravity,dist,-y);\n    xthrust:=sin(d,1,thrust);\n    ythrust:=-cos(d,1,thrust);\n    xvel:=xvel+xgravity+xthrust;\n    yvel:=yvel+ygravity+ythrust;\n    x:=x+xvel/1000;\n    y:=y+yvel/1000;\n    {report;}\n    if yvel>0 then\n      d:=angleprecision/2-arctan(xvel,yvel,1)\n    else\n      d:=arctan(xvel,-yvel,1);\n    inc(t);\n    if t=thrusttime then\n      thrust:=0\n  until (0=1) or (dist<earthradius) or (dist>40000000);\n  if dist<earthradius then\n    begin\n      colour(yellow);\n      for explosion:=100 to 200 do\n        begin\n          blot(explosion);\n          pause(3)\n        end;\n      colour(black);\n      blot(200)\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:2,lines:"27 32"},{name:"forward",level:1,count:2,lines:"26 33"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:1,lines:"23"},{name:"setxy",level:1,count:2,lines:"20 22"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:3,lines:"21 97 101"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:5,lines:"19 25 31 94 100"},{name:"thickness",level:1,count:2,lines:"24 30"}],total:7},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"18"},{name:"noupdate",level:1,count:1,lines:"17"},{name:"update",level:1,count:1,lines:"35"},{name:"angles",level:2,count:1,lines:"58"},{name:"canvas",level:2,count:1,lines:"57"}],total:5},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:1,lines:"88"},{name:"hypot",level:2,count:1,lines:"70"},{name:"divmult",level:3,count:4,lines:"74 75 76"}],total:6},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:1,lines:"78"},{name:"sin",level:2,count:1,lines:"77"},{name:"arctan",level:3,count:2,lines:"85 87"}],total:4},{category:"String operations",expressions:[{name:"writeln",level:1,count:14,lines:"40 41 42 43 44 45 46 47 48 49 50 51 52 53"}],total:14},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:3,lines:"41 42 43"},{name:"qstr",level:2,count:10,lines:"44 45 46 47 48 49 50 51 52 53"}],total:13},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"98"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"28 71 84 89 92"},{name:"else",level:1,count:1,lines:"86"},{name:"for",level:1,count:1,lines:"95"},{name:"repeat",level:1,count:1,lines:"67"},{name:"procedure",level:2,count:2,lines:"15 38"}],total:10},{category:"Subroutine calls",expressions:[{name:"drawrocket",level:0,count:1,lines:"68"},{name:"report",level:0,count:1,lines:"72"}],total:2}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,23,115,80,35,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,39],[140,1],[163],[80,0,248],[80,32896,221],[80,0,80,0,224],[80,6371e3,80,1e3,27,243],[81,18,80,1e3,27,81,19,80,1e3,27,224],[81,20,219],[80,4,220],[80,12632256,221],[80,200,227],[80,200,228],[81,23,80,0,67,129,21],[80,8,220],[80,16776960,221],[80,200,228],[80,200,227],[162],[141,137],[140,2],[87,0,190,191],[87,84,73,77,69,32,61,32,0,81,34,49,54,190,191,147],[87,32,88,112,111,115,105,116,105,111,110,32,61,32,0,81,18,49,54,87,32,109,101,116,114,101,115,0,54,190,191,147],[87,32,89,112,111,115,105,116,105,111,110,32,61,32,0,81,19,49,54,87,32,109,101,116,114,101,115,0,54,190,191,147],[87,32,72,101,105,103,104,116,32,61,32,0,81,31,80,6371e3,25,80,1e3,80,2,52,54,87,32,107,109,0,54,190,191,147],[87,32,68,105,114,101,99,116,105,111,110,32,61,32,0,81,20,80,3600,80,1,52,54,87,32,100,101,103,114,101,101,115,0,54,190,191,147],[87,32,84,104,114,117,115,116,32,61,32,0,81,23,80,1e3,80,1,52,54,87,32,110,101,119,116,111,110,115,32,112,101,114,32,107,103,0,54,190,191,147],[87,32,32,88,116,104,114,117,115,116,32,61,32,0,81,24,80,1e3,80,1,52,54,87,32,110,101,119,116,111,110,115,32,112,101,114,32,107,103,0,54,190,191,147],[87,32,32,89,116,104,114,117,115,116,32,61,32,0,81,25,80,1e3,80,1,52,54,87,32,110,101,119,116,111,110,115,32,112,101,114,32,107,103,0,54,190,191,147],[87,32,71,114,97,118,105,116,121,32,61,32,0,81,26,80,1e3,80,1,52,54,87,32,110,101,119,116,111,110,115,32,112,101,114,32,107,103,0,54,190,191,147],[87,32,32,88,103,114,97,118,105,116,121,32,61,32,0,81,27,80,1e3,80,1,52,54,87,32,110,101,119,116,111,110,115,32,112,101,114,32,107,103,0,54,190,191,147],[87,32,32,89,103,114,97,118,105,116,121,32,61,32,0,81,28,80,1e3,80,1,52,54,87,32,110,101,119,116,111,110,115,32,112,101,114,32,107,103,0,54,190,191,147],[87,32,88,118,101,108,111,99,105,116,121,32,61,32,0,81,21,80,1e3,80,1,52,54,87,32,109,101,116,114,101,115,32,112,101,114,32,115,0,54,190,191,147],[87,32,89,118,101,108,111,99,105,116,121,32,61,32,0,81,22,80,1e3,80,1,52,54,87,32,109,101,116,114,101,115,32,112,101,114,32,115,0,54,190,191,147],[141,137],[80,2e4,16,80,2e4,16,80,4e4,80,4e4,208],[80,1296e3,212],[80,0,97,18],[80,6371e3,16,97,19],[80,0,97,21],[80,0,97,22],[80,2e3,97,20],[80,0,97,34],[80,1,97,33],[80,2e4,97,23],[136,4],[81,31,97,32],[81,18,81,19,80,1,34,97,31],[81,31,81,32,25,81,33,26,80,0,68,129,54],[136,23],[81,31,81,32,25,97,33],[80,398600442,81,31,80,1e6,81,31,32,80,1e3,32,97,26],[81,26,81,31,81,18,16,32,97,27],[81,26,81,31,81,19,16,32,97,28],[81,20,80,1,81,23,41,97,24],[81,20,80,1,81,23,42,16,97,25],[81,21,81,27,24,81,24,24,97,21],[81,22,81,28,24,81,25,24,97,22],[81,18,81,21,80,1e3,27,24,97,18],[81,19,81,22,80,1e3,27,24,97,19],[81,22,80,0,67,129,67],[80,1296e3,80,2,27,81,21,81,22,80,1,46,25,97,20],[128,68],[81,21,81,22,16,80,1,46,97,20],[84,34,1,112,4,2,113],[81,34,80,500,64,129,71],[80,0,97,23],[80,0,80,1,64,81,31,80,6371e3,66,10,81,31,80,4e7,67,10,129,49],[81,31,80,6371e3,66,129,82],[80,16776960,221],[80,100],[97,35,80,200],[81,35,69,129,80],[81,35,243],[80,3,178],[81,35,4,128,75],[80,0,221],[80,200,243],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Knight's tour",author:"University of Oxford",date:"22/09/2016",time:"19:11:51",code:"PROGRAM KnightsTour;\n\nCONST width=10;  {width of board}\n      height=10; {height of board}\n      maxlast=255; {must be at least width*height-1}\n      delay=0;\n      margin=20;\n      timelimit=500;\n      pauseonbest=1000;\n      drawall=false;\n      \nVAR vectorx,vectory: array[0..8] of integer; {vectors for 8 directions}\n    squarestatus,cleverrank: array[0..maxlast] of integer;\n    lastsquare: integer;\n    xgap,ygap,radius: integer;\n    countsquares,attempts,total,best: integer;\n    clever,pausenow: boolean;\n\n  Procedure setup;\n  Begin\n    vectorx[0]:=1;\n    vectory[0]:=-2;\n    vectorx[1]:=2;\n    vectory[1]:=-1;\n    vectorx[2]:=2;\n    vectory[2]:=1;\n    vectorx[3]:=1;\n    vectory[3]:=2;\n    vectorx[4]:=-1;\n    vectory[4]:=2;\n    vectorx[5]:=-2;\n    vectory[5]:=1;\n    vectorx[6]:=-2;\n    vectory[6]:=-1;\n    vectorx[7]:=-1;\n    vectory[7]:=-2;\n    xgap:=(1000-2*margin)/width;\n    ygap:=(1000-2*margin)/height;\n    if xgap<=ygap then\n      radius:=xgap*2/5\n    else\n      radius:=ygap*2/5;\n    lastsquare:=width*height-1\n  End;\n\n  Function findx(s: integer): integer;\n  Begin\n    result:=s mod width\n  End;\n \n  Function findy(s: integer): integer;\n  Begin\n    result:=s div width\n  End;\n\n  Function findsquare(x,y: integer): integer;\n  Begin\n    result:=y*width+x\n  End; \n\n  Procedure drawsquare(s: integer);\n  Begin\n    setxy(margin+xgap*findx(s)+xgap/2,margin+ygap*findy(s)+ygap/2);\n    if squarestatus[s]=0 then\n      begin\n        colour(salmon);\n        blot(radius)\n      end\n    else\n      begin\n        colour(white);\n        blot(radius);\n        if width>10 then\n          begin\n            if squarestatus[s]<10 then\n              movexy(-8,-20) {only one digit}\n            else\n            if squarestatus[s]<100 then\n              movexy(-15,-20) {two digits}\n            else\n              movexy(-22,-20); {three digits}\n            colour(black);\n            print(str(squarestatus[s]),4,20)\n          end\n        else\n          begin\n            if squarestatus[s]<10 then\n              movexy(-10,-24) {only one digit}\n            else\n            if squarestatus[s]<100 then\n              movexy(-20,-24) {two digits}\n            else\n              movexy(-30,-24); {three digits}\n            colour(black);\n            print(str(squarestatus[s]),4,25)\n          end\n      end\n  End; \n\n  Procedure drawboard;\n  Var s: integer;\n  Begin\n    blank(darkgreen);\n    for s:=0 to lastsquare do\n      drawsquare(s)\n  End; \n\n  Function goodmove(s,direction: integer): integer;\n  Var newx,newy: integer;\n  Begin\n    newx:=findx(s)+vectorx[direction];\n    newy:=findy(s)+vectory[direction];\n    if (newx>=0) and (newx<width) and (newy>=0) and (newy<height) then\n      begin\n        result:=findsquare(newx,newy);\n        if squarestatus[result]>0 then\n          result:=-1\n      end\n    else\n      result:=-1\n  End;\n\n  Function moveto(s, direction: integer): integer;\n  Var newx,newy: integer;\n      newn: integer; {neighbours of moveto square}\n      d: integer;\n  Begin\n    newx:=findx(s)+vectorx[direction];\n    newy:=findy(s)+vectory[direction];\n    result:=findsquare(newx,newy); {will give error if off the board!}\n    if clever then\n      for d:=0 to 7 do\n        begin\n          newn:=goodmove(result,d);\n          if newn>-1 then\n            dec(cleverrank[newn])\n        end\n  End;\n\n  Procedure clearboard;\n  Var s,d: integer;\n  Begin\n    for s:=0 to lastsquare do\n      squarestatus[s]:=0;\n    if clever then\n      for s:=0 to lastsquare do\n        begin\n          cleverrank[s]:=0;\n          for d:=0 to 7 do\n            if goodmove(s,d)>-1 then\n              inc(cleverrank[s])\n        end  \n  End;\n\n  Function randommove(s: integer): integer;\n  Var d: integer;\n  Begin\n    repeat\n      d:=random(8) {find legal move}\n    until (goodmove(s,d)>-1) or (time>=timelimit);\n    result:=d\n  End;\n\n  Function clevermove(s: integer): integer;\n  Var chosen,d,news: integer;\n      bestrank,numbest: integer;\n  Begin\n    chosen:=-1;\n    bestrank:=9;\n    for d:=0 to 8 do\n      begin\n       news:=goodmove(s,d);\n        if news>-1 then\n          if cleverrank[news]<bestrank then\n            begin\n              chosen:=d;\n              bestrank:=cleverrank[news];\n              numbest:=1\n            end\n          else\n          if cleverrank[news]=bestrank then\n            begin\n              inc(numbest);\n              if random(numbest)=0 then\n                chosen:=d\n            end\n      end;\n    result:=chosen  \n  End;\n\n  Procedure findroute;\n  Var thiss,s,d: integer;\n  Begin\n    countsquares:=1;\n    thiss:=random(lastsquare+1);\n    squarestatus[thiss]:=countsquares;\n    timeset(0);\n    while time<timelimit do\n      begin\n        if clever then\n          d:=clevermove(thiss)\n        else\n          d:=randommove(thiss);\n        if (time<timelimit) and (d>-1) then\n          begin\n           thiss:=moveto(thiss,d);\n           inc(countsquares);\n           squarestatus[thiss]:=countsquares;\n           if drawall then\n             drawsquare(thiss)\n          end    \n      end\n  End;\n\nBEGIN\n  write('Random search or Clever search? (R/C) ');\n  repeat\n  until (abs(?key)=\\r) or (abs(?key)=\\c);\n  clever:=(abs(?key)=\\c);\n  if clever then\n    writeln('  Clever ...')\n  else\n    writeln('  Random ...');\n  setup;\n  if lastsquare>maxlast then\n    writeln('Error: maximum board size is '+str(maxlast+1)+' squares')\n  else\n    begin\n      attempts:=0;\n      total:=0;\n      best:=0;\n      repeat\n        inc(attempts);\n        clearboard;\n        if drawall then\n         drawboard;\n        findroute;\n        total:=total+countsquares;\n        pausenow:=(countsquares>best);\n        if countsquares>best then\n          begin\n            drawboard;\n            best:=countsquares;\n            write('Attempt ');\n            write(str(attempts));\n            write(', score: ');\n            write(str(countsquares));\n            if attempts>1 then\n              begin\n                write('   (average of all attempts: ');\n                write(qstr(total,attempts,2));\n                writeln(')')\n              end\n            else\n              writeln('');\n            update\n          end;\n        if pausenow then\n          pause(pauseonbest);\n        noupdate\n      until best=width*height\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"movexy",level:2,count:6,lines:"76 79 81 88 91 93"}],total:6},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:1,lines:"63"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"67 72"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:4,lines:"66 71 82 94"}],total:4},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"103"},{name:"noupdate",level:1,count:1,lines:"260"},{name:"update",level:1,count:1,lines:"256"}],total:3},{category:"General arithmetic functions",expressions:[{name:"abs",level:1,count:3,lines:"218 219"},{name:"dec",level:1,count:1,lines:"136"},{name:"inc",level:1,count:4,lines:"151 183 207 233"},{name:"random",level:2,count:3,lines:"159 184 195"}],total:11},{category:"String operations",expressions:[{name:"print",level:1,count:2,lines:"83 95"},{name:"write",level:1,count:7,lines:"216 244 245 246 247 250 251"},{name:"writeln",level:1,count:5,lines:"221 223 226 252 255"}],total:14},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:5,lines:"83 95 226 245 247"},{name:"qstr",level:2,count:1,lines:"251"}],total:6},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"259"},{name:"time",level:2,count:3,lines:"160 198 204"},{name:"timeset",level:2,count:1,lines:"197"}],total:5},{category:"Command structures",expressions:[{name:"if",level:1,count:26,lines:"39 64 73 75 78 87 90 113 116 131 135 145 150 173 174 181 184 200 204 209 220 225 235 240 248 258"},{name:"else",level:1,count:13,lines:"41 69 77 80 85 89 92 119 180 202 222 227 254"},{name:"for",level:1,count:6,lines:"104 132 143 146 149 170"},{name:"repeat",level:1,count:3,lines:"158 217 232"},{name:"while",level:2,count:1,lines:"198"},{name:"procedure",level:2,count:5,lines:"19 61 100 140 191"},{name:"function",level:3,count:7,lines:"46 51 56 108 123 155 164"}],total:61},{category:"Subroutine calls",expressions:[{name:"findx",level:0,count:3,lines:"63 111 128"},{name:"findy",level:0,count:3,lines:"63 112 129"},{name:"drawsquare",level:0,count:2,lines:"105 210"},{name:"findsquare",level:0,count:2,lines:"115 130"},{name:"goodmove",level:0,count:4,lines:"134 150 160 172"},{name:"clevermove",level:0,count:1,lines:"201"},{name:"randommove",level:0,count:1,lines:"203"},{name:"moveto",level:0,count:1,lines:"206"},{name:"setup",level:0,count:1,lines:"224"},{name:"clearboard",level:0,count:1,lines:"234"},{name:"drawboard",level:0,count:2,lines:"236 242"},{name:"findroute",level:0,count:1,lines:"237"}],total:22}],pcode:[[80,23,1,1,80,0,113,80,5,2,113,4,80,553,115,80,576,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,30,97,29,80,9,97,30],[84,41,97,40,80,9,97,41],[84,52,97,51,80,256,97,52],[84,310,97,309,80,256,97,310],[128,198],[140,1],[81,29,80,0,2,120,24,4,80,1,2,113],[81,40,80,0,2,120,24,4,80,2,16,2,113],[81,29,80,1,2,120,24,4,80,2,2,113],[81,40,80,1,2,120,24,4,80,1,16,2,113],[81,29,80,2,2,120,24,4,80,2,2,113],[81,40,80,2,2,120,24,4,80,1,2,113],[81,29,80,3,2,120,24,4,80,1,2,113],[81,40,80,3,2,120,24,4,80,2,2,113],[81,29,80,4,2,120,24,4,80,1,16,2,113],[81,40,80,4,2,120,24,4,80,2,2,113],[81,29,80,5,2,120,24,4,80,2,16,2,113],[81,40,80,5,2,120,24,4,80,1,2,113],[81,29,80,6,2,120,24,4,80,2,16,2,113],[81,40,80,6,2,120,24,4,80,1,16,2,113],[81,29,80,7,2,120,24,4,80,1,16,2,113],[81,40,80,7,2,120,24,4,80,2,16,2,113],[80,1e3,80,2,80,20,26,25,80,10,27,97,568],[80,1e3,80,2,80,20,26,25,80,10,27,97,569],[81,568,81,569,68,129,30],[81,568,80,2,26,80,5,27,97,570],[128,31],[81,569,80,2,26,80,5,27,97,570],[80,10,80,10,26,80,1,25,97,567],[141,137],[140,2],[144,2,2],[98,2,2],[82,2,2,80,10,29,98,2,1],[89,2,105,13,145,2,141,137],[140,3],[144,3,2],[98,3,2],[82,3,2,80,10,28,98,3,1],[89,3,105,13,145,3,141,137],[140,4],[144,4,3],[98,4,3,98,4,2],[82,4,3,80,10,26,82,4,2,24,98,4,1],[89,4,105,13,145,4,141,137],[140,5],[144,5,1],[98,5,1],[80,20,81,568,82,5,1,136,33],[82,13,1,26,24,81,568,80,2,27,24,80,20,81,569,82,5,1,136,38],[82,13,1,26,24,81,569,80,2,27,24,224],[81,51,82,5,1,2,120,24,4,112,80,0,64,129,58],[80,16416882,221],[81,570,243],[128,80],[80,16777215,221],[81,570,243],[80,10,80,10,67,129,71],[81,51,82,5,1,2,120,24,4,112,80,10,66,129,64],[80,8,16,80,20,16,225],[128,68],[81,51,82,5,1,2,120,24,4,112,80,100,66,129,67],[80,15,16,80,20,16,225],[128,68],[80,22,16,80,20,16,225],[80,0,221],[81,51,82,5,1,2,120,24,4,112,49,80,4,80,20,189,147],[128,80],[81,51,82,5,1,2,120,24,4,112,80,10,66,129,74],[80,10,16,80,24,16,225],[128,78],[81,51,82,5,1,2,120,24,4,112,80,100,66,129,77],[80,20,16,80,24,16,225],[128,78],[80,30,16,80,24,16,225],[80,0,221],[81,51,82,5,1,2,120,24,4,112,49,80,4,80,25,189,147],[145,5,141,137],[140,6],[144,6,1],[80,25600,248],[80,0],[98,6,1,81,567],[82,6,1,69,129,89],[82,6,1,136,48],[82,6,1,4,128,85],[145,6,141,137],[140,7],[144,7,5],[98,7,3,98,7,2],[82,7,2,136,33],[82,13,1,81,29,82,7,3,2,120,24,4,112,24,98,7,4],[82,7,2,136,38],[82,13,1,81,40,82,7,3,2,120,24,4,112,24,98,7,5],[82,7,4,80,0,69,82,7,4,80,10,66,9,82,7,5,80,0,69,9,82,7,5,80,10,66,9,129,103],[82,7,4,82,7,5,136,43],[82,13,1,98,7,1],[81,51,82,7,1,2,120,24,4,112,80,0,67,129,102],[80,1,16,98,7,1],[128,104],[80,1,16,98,7,1],[89,7,105,13,145,7,141,137],[140,8],[144,8,7],[98,8,3,98,8,2],[82,8,2,136,33],[82,13,1,81,29,82,8,3,2,120,24,4,112,24,98,8,4],[82,8,2,136,38],[82,13,1,81,40,82,8,3,2,120,24,4,112,24,98,8,5],[82,8,4,82,8,5,136,43],[82,13,1,98,8,1],[81,575,129,123],[80,0],[98,8,7,80,7],[82,8,7,69,129,123],[82,8,1,82,8,7,136,90],[82,13,1,98,8,6],[82,8,6,80,1,16,67,129,122],[81,309,82,8,6,2,120,24,4,1,112,5,2,113],[82,8,7,4,128,116],[89,8,105,13,145,8,141,137],[140,9],[144,9,2],[80,0],[98,9,1,81,567],[82,9,1,69,129,131],[81,51,82,9,1,2,120,24,4,80,0,2,113],[82,9,1,4,128,127],[81,575,129,144],[80,0],[98,9,1,81,567],[82,9,1,69,129,144],[81,309,82,9,1,2,120,24,4,80,0,2,113],[80,0],[98,9,2,80,7],[82,9,2,69,129,143],[82,9,1,82,9,2,136,90],[82,13,1,80,1,16,67,129,142],[81,309,82,9,1,2,120,24,4,1,112,4,2,113],[82,9,2,4,128,137],[82,9,1,4,128,133],[145,9,141,137],[140,10],[144,10,3],[98,10,2],[80,8,19,98,10,3],[82,10,2,82,10,3,136,90],[82,13,1,80,1,16,67,176,80,500,69,10,129,148],[82,10,3,98,10,1],[89,10,105,13,145,10,141,137],[140,11],[144,11,7],[98,11,2],[80,1,16,98,11,3],[80,9,98,11,6],[80,0],[98,11,4,80,8],[82,11,4,69,129,174],[82,11,2,82,11,4,136,90],[82,13,1,98,11,5],[82,11,5,80,1,16,67,129,173],[81,309,82,11,5,2,120,24,4,112,82,11,6,66,129,169],[82,11,4,98,11,3],[81,309,82,11,5,2,120,24,4,112,98,11,6],[80,1,98,11,7],[128,173],[81,309,82,11,5,2,120,24,4,112,82,11,6,64,129,173],[85,11,7,1,112,4,2,113],[82,11,7,19,80,0,64,129,173],[82,11,4,98,11,3],[82,11,4,4,128,159],[82,11,3,98,11,1],[89,11,105,13,145,11,141,137],[140,12],[144,12,3],[80,1,97,571],[81,567,80,1,24,19,98,12,1],[81,51,82,12,1,2,120,24,4,81,571,2,113],[80,0,177],[176,80,500,66,129,197],[81,575,129,187],[82,12,1,136,153],[82,13,1,98,12,3],[128,189],[82,12,1,136,145],[82,13,1,98,12,3],[176,80,500,66,82,12,3,80,1,16,67,9,129,196],[82,12,1,82,12,3,136,105],[82,13,1,98,12,1],[84,571,1,112,4,2,113],[81,51,82,12,1,2,120,24,4,81,571,2,113],[80,0,129,196],[82,12,1,136,48],[128,182],[145,12,141,137],[87,82,97,110,100,111,109,32,115,101,97,114,99,104,32,111,114,32,67,108,101,118,101,114,32,115,101,97,114,99,104,63,32,40,82,47,67,41,32,0,190],[80,-9,184,17,80,82,64,80,-9,184,17,80,67,64,10,129,199],[80,-9,184,17,80,67,64,97,575],[81,575,129,204],[87,32,32,67,108,101,118,101,114,32,46,46,46,0,190,191],[128,205],[87,32,32,82,97,110,100,111,109,32,46,46,46,0,190,191],[136,8],[81,567,80,255,67,129,209],[87,69,114,114,111,114,58,32,109,97,120,105,109,117,109,32,98,111,97,114,100,32,115,105,122,101,32,105,115,32,0,80,255,80,1,24,49,54,87,32,115,113,117,97,114,101,115,0,54,190,191],[147,128,237],[80,0,97,572],[80,0,97,573],[80,0,97,574],[84,572,1,112,4,2,113],[136,124],[80,0,129,216],[136,81],[136,176],[81,573,81,571,24,97,573],[81,571,81,574,67,97,576],[81,571,81,574,67,129,233],[136,81],[81,571,97,574],[87,65,116,116,101,109,112,116,32,0,190],[81,572,49,190,147],[87,44,32,115,99,111,114,101,58,32,0,190],[81,571,49,190,147],[81,572,80,1,67,129,231],[87,32,32,32,40,97,118,101,114,97,103,101,32,111,102,32,97,108,108,32,97,116,116,101,109,112,116,115,58,32,0,190],[81,573,81,572,80,2,52,190,147],[80,41,48,190,191,147],[128,232],[87,0,190,191],[162],[81,576,129,235],[80,1e3,178],[163],[81,574,80,10,80,10,26,64,129,212],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Iterated Prisoner's Dilemma",author:"University of Oxford",date:"04/11/2017",time:"16:54:21",code:"PROGRAM iteratedpd;\nCONST width=32;\n      height=32;\n      n=10;\nVAR i,j: integer;\n    util: array[1..14] of integer;\n\n Procedure utility(x,y: integer);\n Var this,utot,i,j,flag: integer;\n Begin\n  this:=pixcol(x,y) and #7;\n  utot:=0;\n  for i:=-1 to 1 do\n   for j:=-1 to 1 do\n    if (i<>0) or (j<>0) then\n     begin\n      flag:=this or (pixcol((x+width+i) mod width,(y+height+j) mod height)) and #f;\n      utot:=utot+util[flag]\n     end;\n  pixset(x,y,utot*#100+pixcol(x,y) and #f)\n End;\n\n Procedure pickbest(x,y: integer);\n Var i,j,bestsofar: integer;\n Begin\n  bestsofar:=pixcol(x,y);\n  if random(5)>0 then\n   for i:=-1 to 1 do\n    for j:=-1 to 1 do\n     if (pixcol((x+width+i) mod width,(y+height+j) mod height) and #ffff00)>(bestsofar and #ffff00) then\n      bestsofar:=pixcol((x+width+i) mod width,(y+height+j) mod height);\n  pixset(x,y,(pixcol(x,y) and #ffff0f)+(bestsofar and #f)*#10)\n End;\n\n Procedure fixbest(x,y: integer);\n Begin\n  if (pixcol(x,y) and #10)>0 then\n   pixset(x,y,#ff0001)\n  else\n   if (pixcol(x,y) and #20)>0 then\n   pixset(x,y,#00ff02)\n  else\n   pixset(x,y,#0000fc)\n End;\n\n Procedure setutilities;\n Begin\n  util[1]:=3*n;\n  util[2]:=3*n;\n  util[3]:=3*n;\n  util[5]:=5*n;\n  util[6]:=n+4;\n  util[12]:=n;\n  util[13]:=0;\n  util[14]:=n-1\n End;\n\nBEGIN\n canvas(0,0,width,height);\n resolution(width,height);\n setutilities;\n noupdate;\n for i:=0 to width-1 do\n  for j:=0 to height-1 do\n   if random(50)=0 then\n    pixset(i,j,#0000fc)\n   else\n    if random(7)=0 then\n    pixset(i,j,#00ff02)\n   else\n    pixset(i,j,#ff0001);\n pause(1000);\n while ?key<>\\escape do\n  begin\n   timeset(0);\n   noupdate;\n   for i:=0 to width-1 do\n    for j:=0 to height-1 do\n     utility(i,j);\n   for i:=0 to width-1 do\n    for j:=0 to height-1 do\n     pickbest(i,j);\n   for i:=0 to width-1 do\n    for j:=0 to height-1 do\n     fixbest(i,j);\n   update;\n   noupdate\n  end\nEND.",usage:[{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:3,lines:"62 76 87"},{name:"update",level:1,count:1,lines:"86"},{name:"canvas",level:2,count:1,lines:"59"},{name:"resolution",level:2,count:1,lines:"60"},{name:"pixcol",level:3,count:9,lines:"11 17 20 26 30 31 32 37 40"},{name:"pixset",level:3,count:8,lines:"20 32 38 41 43 66 69 71"}],total:23},{category:"General arithmetic functions",expressions:[{name:"random",level:2,count:3,lines:"27 65 68"}],total:3},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"72"},{name:"timeset",level:2,count:1,lines:"75"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:7,lines:"15 27 30 37 40 65 68"},{name:"else",level:1,count:4,lines:"39 42 67 70"},{name:"for",level:1,count:12,lines:"13 14 28 29 63 64 77 78 80 81 83 84"},{name:"while",level:2,count:1,lines:"73"},{name:"procedure",level:2,count:4,lines:"8 23 35 46"}],total:28},{category:"Subroutine calls",expressions:[{name:"setutilities",level:0,count:1,lines:"61"},{name:"utility",level:0,count:1,lines:"79"},{name:"pickbest",level:0,count:1,lines:"82"},{name:"fixbest",level:0,count:1,lines:"85"}],total:4}],pcode:[[80,14,1,1,80,0,113,80,5,2,113,4,80,23,115,80,37,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,23,97,22,80,14,97,23],[128,61],[140,1],[144,1,7],[98,1,2,98,1,1],[82,1,1,82,1,2,210,80,7,9,98,1,3],[80,0,98,1,4],[80,1,16],[98,1,5,80,1],[82,1,5,69,129,21],[80,1,16],[98,1,6,80,1],[82,1,6,69,129,20],[82,1,5,80,0,65,82,1,6,80,0,65,10,129,19],[82,1,3,82,1,1,80,32,24,82,1,5,24,80,32,29,82,1,2,80,32,24,82,1,6,24,80,32,29,210,80,15,9,10,98,1,7],[82,1,4,81,22,82,1,7,80,1,25,2,120,24,4,112,24,98,1,4],[82,1,6,4,128,14],[82,1,5,4,128,11],[82,1,1,82,1,2,82,1,4,80,256,26,82,1,1,82,1,2,210,80,15,9,24,211],[145,1,141,137],[140,2],[144,2,5],[98,2,2,98,2,1],[82,2,1,82,2,2,210,98,2,5],[80,5,19,80,0,67,129,38],[80,1,16],[98,2,3,80,1],[82,2,3,69,129,38],[80,1,16],[98,2,4,80,1],[82,2,4,69,129,37],[82,2,1,80,32,24,82,2,3,24,80,32,29,82,2,2,80,32,24,82,2,4,24,80,32,29,210,80,16776960,9,82,2,5,80,16776960,9,67,129,36],[82,2,1,80,32,24,82,2,3,24,80,32,29,82,2,2,80,32,24,82,2,4,24,80,32,29,210,98,2,5],[82,2,4,4,128,32],[82,2,3,4,128,29],[82,2,1,82,2,2,82,2,1,82,2,2,210,80,16776975,9,82,2,5,80,15,9,80,16,26,24,211],[145,2,141,137],[140,3],[144,3,2],[98,3,2,98,3,1],[82,3,1,82,3,2,210,80,16,9,80,0,67,129,46],[82,3,1,82,3,2,80,16711681,211],[128,50],[82,3,1,82,3,2,210,80,32,9,80,0,67,129,49],[82,3,1,82,3,2,80,65282,211],[128,50],[82,3,1,82,3,2,80,252,211],[145,3,141,137],[140,4],[81,22,80,1,80,1,25,2,120,24,4,80,3,80,10,26,2,113],[81,22,80,2,80,1,25,2,120,24,4,80,3,80,10,26,2,113],[81,22,80,3,80,1,25,2,120,24,4,80,3,80,10,26,2,113],[81,22,80,5,80,1,25,2,120,24,4,80,5,80,10,26,2,113],[81,22,80,6,80,1,25,2,120,24,4,80,10,80,4,24,2,113],[81,22,80,12,80,1,25,2,120,24,4,80,10,2,113],[81,22,80,13,80,1,25,2,120,24,4,80,0,2,113],[81,22,80,14,80,1,25,2,120,24,4,80,10,80,1,25,2,113],[141,137],[80,0,80,0,80,32,80,32,208],[80,32,80,32,209],[136,51],[163],[80,0],[97,20,80,32,80,1,25],[81,20,69,129,80],[80,0],[97,21,80,32,80,1,25],[81,21,69,129,79],[80,50,19,80,0,64,129,74],[81,20,81,21,80,252,211],[128,78],[80,7,19,80,0,64,129,77],[81,20,81,21,80,65282,211],[128,78],[81,20,81,21,80,16711681,211],[81,21,4,128,69],[81,20,4,128,66],[80,1e3,178],[80,-9,184,80,27,65,129,114],[80,0,177],[163],[80,0],[97,20,80,32,80,1,25],[81,20,69,129,93],[80,0],[97,21,80,32,80,1,25],[81,21,69,129,92],[81,20,81,21,136,5],[81,21,4,128,88],[81,20,4,128,85],[80,0],[97,20,80,32,80,1,25],[81,20,69,129,102],[80,0],[97,21,80,32,80,1,25],[81,21,69,129,101],[81,20,81,21,136,23],[81,21,4,128,97],[81,20,4,128,94],[80,0],[97,20,80,32,80,1,25],[81,20,69,129,111],[80,0],[97,21,80,32,80,1,25],[81,21,69,129,110],[81,20,81,21,136,40],[81,21,4,128,106],[81,20,4,128,103],[162],[163],[128,81],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Interference",author:"University of Oxford",date:"22/09/2016",time:"18:56:25",code:"PROGRAM Interference;\nCONST sectors=7;\n      wavecol1=red;\n      wavecol2=skyblue;\n      waveaddcol=indigo;\n      clocks=16;\n      report=false;\nVAR x,y: integer;\n    sectcol: array[0..sectors] of integer;\n    boundary: array[0..sectors] of integer;\n    clockx: array[1..clocks] of integer;\n    cradius,hand: integer;\n    leftx,rightx: integer;\n    dimensions: integer;\n    wavelength1, wavelength2: integer;\n\n  Procedure colsetup;\n  Var n: integer;\n  Begin\n    sectcol[0]:=violet;\n    sectcol[1]:=blue;\n    sectcol[2]:=cyan;\n    sectcol[3]:=lime;\n    sectcol[4]:=yellow;\n    sectcol[5]:=orange;\n    sectcol[6]:=red;\n    sectcol[7]:=violet;\n    for n:=0 to sectors do\n      boundary[n]:=divmult(360,sectors,n)\n  End;\n\n  Function wavecolour(n: integer): integer;\n  Var col1,col2: integer;\n      mix1,mix2: integer;\n  Begin\n    col2:=0;\n    repeat\n      inc(col2)\n    until boundary[col2]>=n;\n    col1:=col2-1;\n    result:=mixcols(sectcol[col1],sectcol[col2],boundary[col2]-n,n-boundary[col1])\n  End;\n\n  Procedure clocksetup;\n  Var n: integer;\n  Begin\n    for n:=1 to clocks do\n      clockx[n]:=divmult(1000,clocks*2+2,n*2);\n    leftx:=clockx[1];\n    rightx:=clockx[clocks];\n    cradius:=(rightx-leftx)/clocks/2;\n    hand:=cradius*6/7\n  End;  \n\n  Procedure drawwave(s: string;top,wavelength,wavecol: integer);\n  Var n,turn: integer;\n  Begin\n    if dimensions=1 then\n      begin\n        setxy(leftx,top+25);\n        colour(black);\n        drawxy(rightx-leftx,0);\n        setxy(leftx,top);\n        colour(wavecol)\n      end;\n    for n:=0 to rightx-leftx do\n      if dimensions=1 then\n        begin\n          setxy(leftx+n,top+25-cos(divmult(n mod wavelength,wavelength,360),1,25));\n          polyline(2)\n        end\n      else\n        begin\n          setxy(leftx+n,top);\n          colour(wavecolour(divmult(n mod wavelength,wavelength,360)));\n          drawxy(0,50)\n        end;\n    for n:=1 to clocks do\n      begin\n        setxy(clockx[n],top+70+cradius);\n        colour(black);\n        circle(cradius);\n        blot(5);\n        turn:=divmult((clockx[n]-leftx) mod wavelength,wavelength,360);\n        if report then\n          writeln(s+', clock '+str(n)+': dist='+str(clockx[n])+'; turn='+str(turn));\n        turnxy(sin(turn,1,1000),-cos(turn,1,1000));\n        colour(wavecol);\n        forward(hand)\n      end\n  End;\n\n  Procedure drawresult(top: integer);\n  Var n: integer;\n      turn1,turn2: integer;\n      waveaddi,waveaddj,waveadd: integer;\n  Begin\n    if dimensions=1 then\n      begin\n        setxy(leftx,top+50);\n        colour(black);\n        drawxy(rightx-leftx,0);\n        setxy(leftx,top);\n        colour(waveaddcol)\n      end;\n    for n:=0 to rightx-leftx do\n      begin\n        turn1:=divmult(n mod wavelength1,wavelength1,360);\n        turn2:=divmult(n mod wavelength2,wavelength2,360);\n        waveaddi:=sin(turn1,1,500)+sin(turn2,1,500);\n        waveaddj:=cos(turn1,1,500)+cos(turn2,1,500);\n        waveadd:=hypot(waveaddi,waveaddj,1);\n        if dimensions=1 then\n          begin\n            setxy(leftx+n,top+50-divmult(waveaddj,1000,50));\n            polyline(2)\n          end  \n        else \n          begin\n            setxy(leftx+n,top);\n            turnxy(waveaddi,-waveaddj);\n            colour(mixcols(wavecolour(turtd),black,waveadd,1000-waveadd));\n            if mixcols(wavecolour(turtd),black,waveadd,1000-waveadd)<51 then\n              colour(black); {to avoid colour code problems}\n            drawxy(0,100)\n          end\n      end;\n    for n:=1 to clocks do\n      begin\n        setxy(clockx[n],top+280+2*cradius-(150*(n mod 2)));\n        colour(black);\n        circle(cradius*2);\n        blot(5);\n        turn1:=divmult((clockx[n]-leftx) mod wavelength1,wavelength1,360);\n        turn2:=divmult((clockx[n]-leftx) mod wavelength2,wavelength2,360);\n        waveaddi:=sin(turn1,1,500)+sin(turn2,1,500);\n        waveaddj:=cos(turn1,1,500)+cos(turn2,1,500);\n        waveadd:=hypot(waveaddi,waveaddj,1);\n        turnxy(waveaddi,-waveaddj);\n        thickness(6);\n        colour(waveaddcol);\n        forward(divmult(waveadd,1000,hand*2));\n        setxy(clockx[n],top+280+2*cradius-(150*(n mod 2)));\n        thickness(4);\n        direction(turn1);\n        colour(wavecol1);\n        forward(hand);\n        direction(turn2);\n        colour(wavecol2);\n        forward(hand);\n        thickness(2)\n      end\n  End;\n\n  Procedure randomwaves;\n  Begin\n    wavelength1:=random(30)*10+200;\n    wavelength2:=random(30)*10+200\n  End;\n\n  Procedure changeprompt;\n  Begin\n    console(true,white);\n    writeln('Press \"1\" or \"2\" for the dimensionality required,');\n    write('or press \"R\" to pick random new wavelengths: ');\n    repeat\n    until (abs(?key)=\\1) or (abs(?key)=\\2) or (abs(?key)=\\r);\n    if abs(?key)=\\1 then\n      dimensions:=1\n    else\n    if abs(?key)=\\2 then\n      dimensions:=2\n    else\n      randomwaves;\n    reset(?key);\n    reset(\\keybuffer)\n  End;\n\nBEGIN\n  colsetup;\n  clocksetup;\n  dimensions:=1;\n  wavelength1:=300;\n  wavelength2:=420;\n  repeat\n    blank(white);\n    noupdate;\n    setxy(leftx,25);\n    colour(black);\n    print('Component waves (wavelengths '+str(wavelength1)+', '+str(wavelength2)+')',4,30);\n    drawwave('Wave 1',100,wavelength1,wavecol1);\n    drawwave('Wave 2',300,wavelength2,wavecol2);\n    setxy(leftx,505);\n    colour(black);\n    print('Resultant wave',4,30);\n    drawresult(580);\n    changeprompt\n  until 0=1\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:4,lines:"89 142 147 150"},{name:"drawxy",level:2,count:4,lines:"62 76 102 125"}],total:8},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:2,lines:"145 148"},{name:"setxy",level:1,count:13,lines:"60 63 69 74 80 100 103 115 120 130 143 188 193"},{name:"turnxy",level:2,count:3,lines:"87 121 139"}],total:18},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"83 133"},{name:"circle",level:1,count:2,lines:"82 132"},{name:"polyline",level:2,count:2,lines:"70 116"}],total:6},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:15,lines:"61 64 75 81 88 101 104 122 124 131 141 146 149 189 194"},{name:"thickness",level:1,count:3,lines:"140 144 151"},{name:"console",level:2,count:1,lines:"163"},{name:"mixcols",level:3,count:3,lines:"41 122 123"}],total:22},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"186"},{name:"noupdate",level:1,count:1,lines:"187"}],total:2},{category:"General arithmetic functions",expressions:[{name:"abs",level:1,count:5,lines:"167 168 171"},{name:"inc",level:1,count:1,lines:"38"},{name:"hypot",level:2,count:2,lines:"112 138"},{name:"random",level:2,count:2,lines:"157 158"},{name:"divmult",level:3,count:11,lines:"29 48 69 75 84 108 109 115 134 135 142"}],total:21},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:6,lines:"69 87 111 137"},{name:"sin",level:2,count:5,lines:"87 110 136"}],total:11},{category:"String operations",expressions:[{name:"print",level:1,count:2,lines:"190 195"},{name:"write",level:1,count:1,lines:"165"},{name:"writeln",level:1,count:2,lines:"86 164"}],total:5},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:5,lines:"86 190"}],total:5},{category:"Input and timing routines",expressions:[{name:"reset",level:3,count:2,lines:"175 176"}],total:2},{category:"Command structures",expressions:[{name:"if",level:1,count:8,lines:"58 67 85 98 113 123 168 171"},{name:"else",level:1,count:4,lines:"72 118 170 173"},{name:"for",level:1,count:6,lines:"28 47 66 78 106 128"},{name:"repeat",level:1,count:3,lines:"37 166 185"},{name:"procedure",level:2,count:6,lines:"17 44 55 93 155 161"},{name:"function",level:3,count:1,lines:"32"}],total:28},{category:"Subroutine calls",expressions:[{name:"wavecolour",level:0,count:3,lines:"75 122 123"},{name:"randomwaves",level:0,count:1,lines:"174"},{name:"colsetup",level:0,count:1,lines:"180"},{name:"clocksetup",level:0,count:1,lines:"181"},{name:"drawwave",level:0,count:2,lines:"191 192"},{name:"drawresult",level:0,count:1,lines:"196"},{name:"changeprompt",level:0,count:1,lines:"197"}],total:10}],pcode:[[80,18,1,1,80,0,113,80,5,2,113,4,80,52,115,80,70,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,27,97,26,80,8,97,27],[84,37,97,36,80,8,97,37],[84,47,97,46,80,16,97,47],[128,156],[140,1],[144,1,1],[81,26,80,0,2,120,24,4,80,9055202,2,113],[81,26,80,1,2,120,24,4,80,255,2,113],[81,26,80,2,2,120,24,4,80,65535,2,113],[81,26,80,3,2,120,24,4,80,65280,2,113],[81,26,80,4,2,120,24,4,80,16776960,2,113],[81,26,80,5,2,120,24,4,80,16755200,2,113],[81,26,80,6,2,120,24,4,80,16711680,2,113],[81,26,80,7,2,120,24,4,80,9055202,2,113],[80,0],[98,1,1,80,7],[82,1,1,69,129,22],[81,36,82,1,1,2,120,24,4,80,360,80,7,82,1,1,32,2,113],[82,1,1,4,128,18],[145,1,141,137],[140,2],[144,2,6],[98,2,2],[80,0,98,2,4],[85,2,4,1,112,4,2,113],[81,36,82,2,4,2,120,24,4,112,82,2,2,69,129,27],[82,2,4,80,1,25,98,2,3],[81,26,82,2,3,2,120,24,4,112,81,26,82,2,4,2,120,24,4,112,81,36,82,2,4,2,120,24,4,112,82,2,2,25,82,2,2,81,36,82,2,3,2,120,24,4,112,25,223,98,2,1],[89,2,105,8,145,2,141,137],[140,3],[144,3,1],[80,1],[98,3,1,80,16],[82,3,1,69,129,39],[81,46,82,3,1,80,1,25,2,120,24,4,80,1e3,80,16,80,2,26,80,2,24,82,3,1,80,2,26,32,2,113],[82,3,1,4,128,35],[81,46,80,1,80,1,25,2,120,24,4,112,97,66],[81,46,80,16,80,1,25,2,120,24,4,112,97,67],[81,67,81,66,25,80,16,27,80,2,27,97,64],[81,64,80,6,26,80,7,27,97,65],[145,3,141,137],[140,4],[144,4,6],[98,4,4,98,4,3,98,4,2,98,4,1],[81,68,80,1,64,129,53],[81,66,82,4,2,80,25,24,224],[80,0,221],[81,67,81,66,25,80,0,226],[81,66,82,4,2,224],[82,4,4,221],[80,0],[98,4,5,81,67,81,66,25],[82,4,5,69,129,65],[81,68,80,1,64,129,60],[81,66,82,4,5,24,82,4,2,80,25,24,82,4,5,82,4,3,29,82,4,3,80,360,32,80,1,80,25,42,25,224],[80,2,240],[128,64],[81,66,82,4,5,24,82,4,2,224],[82,4,5,82,4,3,29,82,4,3,80,360,32,136,23],[82,8,1,221],[80,0,80,50,226],[82,4,5,4,128,54],[80,1],[98,4,5,80,16],[82,4,5,69,129,79],[81,46,82,4,5,80,1,25,2,120,24,4,112,82,4,2,80,70,24,81,64,24,224],[80,0,221],[81,64,242],[80,5,243],[81,46,82,4,5,80,1,25,2,120,24,4,112,81,66,25,82,4,3,29,82,4,3,80,360,32,98,4,6],[80,0,129,75],[82,4,1,87,44,32,99,108,111,99,107,32,0,54,82,4,5,49,54,87,58,32,100,105,115,116,61,0,54,81,46,82,4,5,80,1,25,2,120,24,4,112,49,54,87,59,32,116,117,114,110,61,0,54,82,4,6,49,54,190,191,147],[82,4,6,80,1,80,1e3,41,82,4,6,80,1,80,1e3,42,16,231],[82,4,4,221],[81,65,227],[82,4,5,4,128,66],[145,4,141,137],[140,5],[144,5,7],[98,5,1],[81,68,80,1,64,129,89],[81,66,82,5,1,80,50,24,224],[80,0,221],[81,67,81,66,25,80,0,226],[81,66,82,5,1,224],[80,4915330,221],[80,0],[98,5,2,81,67,81,66,25],[82,5,2,69,129,110],[82,5,2,81,69,29,81,69,80,360,32,98,5,3],[82,5,2,81,70,29,81,70,80,360,32,98,5,4],[82,5,3,80,1,80,500,41,82,5,4,80,1,80,500,41,24,98,5,5],[82,5,3,80,1,80,500,42,82,5,4,80,1,80,500,42,24,98,5,6],[82,5,5,82,5,6,80,1,34,98,5,7],[81,68,80,1,64,129,101],[81,66,82,5,2,24,82,5,1,80,50,24,82,5,6,80,1e3,80,50,32,25,224],[80,2,240],[128,109],[81,66,82,5,2,24,82,5,1,224],[82,5,5,82,5,6,16,231],[81,21,136,23],[82,8,1,80,0,82,5,7,80,1e3,82,5,7,25,223,221],[81,21,136,23],[82,8,1,80,0,82,5,7,80,1e3,82,5,7,25,223,80,51,66,129,108],[80,0,221],[80,0,80,100,226],[82,5,2,4,128,90],[80,1],[98,5,2,80,16],[82,5,2,69,129,136],[81,46,82,5,2,80,1,25,2,120,24,4,112,82,5,1,80,280,24,80,2,81,64,26,24,80,150,82,5,2,80,2,29,26,25,224],[80,0,221],[81,64,80,2,26,242],[80,5,243],[81,46,82,5,2,80,1,25,2,120,24,4,112,81,66,25,81,69,29,81,69,80,360,32,98,5,3],[81,46,82,5,2,80,1,25,2,120,24,4,112,81,66,25,81,70,29,81,70,80,360,32,98,5,4],[82,5,3,80,1,80,500,41,82,5,4,80,1,80,500,41,24,98,5,5],[82,5,3,80,1,80,500,42,82,5,4,80,1,80,500,42,24,98,5,6],[82,5,5,82,5,6,80,1,34,98,5,7],[82,5,5,82,5,6,16,231],[80,6,220],[80,4915330,221],[82,5,7,80,1e3,81,65,80,2,26,32,227],[81,46,82,5,2,80,1,25,2,120,24,4,112,82,5,1,80,280,24,80,2,81,64,26,24,80,150,82,5,2,80,2,29,26,25,224],[80,4,220],[82,5,3,219],[80,16711680,221],[81,65,227],[82,5,4,219],[80,45311,221],[81,65,227],[80,2,220],[82,5,2,4,128,111],[145,5,141,137],[140,6],[80,30,19,80,10,26,80,200,24,97,69],[80,30,19,80,10,26,80,200,24,97,70],[141,137],[140,7],[80,-1,80,16777215,167],[87,80,114,101,115,115,32,34,49,34,32,111,114,32,34,50,34,32,102,111,114,32,116,104,101,32,100,105,109,101,110,115,105,111,110,97,108,105,116,121,32,114,101,113,117,105,114,101,100,44,0,190,191],[87,111,114,32,112,114,101,115,115,32,34,82,34,32,116,111,32,112,105,99,107,32,114,97,110,100,111,109,32,110,101,119,32,119,97,118,101,108,101,110,103,116,104,115,58,32,0,190],[80,-9,184,17,80,49,64,80,-9,184,17,80,50,64,10,80,-9,184,17,80,82,64,10,129,145],[80,-9,184,17,80,49,64,129,149],[80,1,97,68],[128,153],[80,-9,184,17,80,50,64,129,152],[80,2,97,68],[128,153],[136,137],[80,-9,185],[80,0,185],[141,137],[136,7],[136,32],[80,1,97,68],[80,300,97,69],[80,420,97,70],[80,16777215,248],[163],[81,66,80,25,224],[80,0,221],[87,67,111,109,112,111,110,101,110,116,32,119,97,118,101,115,32,40,119,97,118,101,108,101,110,103,116,104,115,32,0,81,69,49,54,87,44,32,0,54,81,70,49,54,80,41,48,54,80,4,80,30,189,147],[87,87,97,118,101,32,49,0,80,100,81,69,80,16711680,146,136,44],[87,87,97,118,101,32,50,0,80,300,81,70,80,45311,146,136,44],[81,66,80,505,224],[80,0,221],[87,82,101,115,117,108,116,97,110,116,32,119,97,118,101,0,80,4,80,30,189],[80,580,136,80],[136,141],[80,0,80,1,64,129,161],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Iterated Function Systems (IFS) background",author:"University of Oxford",date:"22/09/2016",time:"23:54:50",code:"PROGRAM IFSBackground;\nCONST xleft=0;\n      xright=999;\n      ytop=0;\n      ybottom=999;\n      gridscale=5;\n      gridthick=64;\n\n  Procedure background(rad: integer);\n  Var x,y: integer;\n  Begin\n    thickness(gridthick);\n    colour(darkgrey);\n    for x:=1 to gridscale-1 do\n      begin\n        setxy(xleft+divmult(xright-xleft,gridscale,x),ytop);\n        drawxy(0,ybottom-ytop)\n      end;   \n    for y:=1 to gridscale-1 do\n      begin\n        setxy(xleft+gridthick/2,ytop+divmult(ybottom-ytop,gridscale,y));\n        drawxy(xright-xleft-gridthick,0)\n      end;\n    colour(black);\n    setxy(xleft,ytop);\n    drawxy(xright-xleft,0);\n    drawxy(0,ybottom-ytop);\n    drawxy(xleft-xright,0);\n    drawxy(0,ytop-ybottom);\n    for x:=0 to gridscale-1 do\n      for y:=0 to gridscale-1 do\n        recolour(xleft+divmult(xright-xleft,gridscale,x)+gridthick,\n                 ytop+divmult(ybottom-ytop,gridscale,y)+gridthick,\n                 divmult(255,gridscale-1,x)*#10000\n                 +divmult(255,gridscale-1,y)*#100\n                 +divmult(255,2*gridscale-2,2*gridscale-2-x-y)*#1)\n  End;\n\nBEGIN\n  canvas(xleft,ytop,xright-xleft+1,ybottom-ytop+1);\n  resolution(xright-xleft+1,ybottom-ytop+1);\n  background(6)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:6,lines:"17 22 26 27 28 29"}],total:6},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:3,lines:"16 21 25"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"13 24"},{name:"thickness",level:1,count:1,lines:"12"}],total:3},{category:"Canvas operations",expressions:[{name:"canvas",level:2,count:1,lines:"40"},{name:"resolution",level:2,count:1,lines:"41"},{name:"recolour",level:3,count:1,lines:"32"}],total:3},{category:"General arithmetic functions",expressions:[{name:"divmult",level:3,count:7,lines:"16 21 32 33 34 35 36"}],total:7},{category:"Command structures",expressions:[{name:"for",level:1,count:4,lines:"14 19 30 31"},{name:"procedure",level:2,count:1,lines:"9"}],total:5},{category:"Subroutine calls",expressions:[{name:"background",level:0,count:1,lines:"42"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,37],[140,1],[144,1,3],[98,1,1],[80,64,220],[80,4210752,221],[80,1],[98,1,2,80,5,80,1,25],[82,1,2,69,129,15],[80,0,80,999,80,0,25,80,5,82,1,2,32,24,80,0,224],[80,0,80,999,80,0,25,226],[82,1,2,4,128,10],[80,1],[98,1,3,80,5,80,1,25],[82,1,3,69,129,21],[80,0,80,64,80,2,27,24,80,0,80,999,80,0,25,80,5,82,1,3,32,24,224],[80,999,80,0,25,80,64,25,80,0,226],[82,1,3,4,128,16],[80,0,221],[80,0,80,0,224],[80,999,80,0,25,80,0,226],[80,0,80,999,80,0,25,226],[80,0,80,999,25,80,0,226],[80,0,80,0,80,999,25,226],[80,0],[98,1,2,80,5,80,1,25],[82,1,2,69,129,36],[80,0],[98,1,3,80,5,80,1,25],[82,1,3,69,129,35],[80,0,80,999,80,0,25,80,5,82,1,2,32,24,80,64,24,80,0,80,999,80,0,25,80,5,82,1,3,32,24,80,64,24,80,255,80,5,80,1,25,82,1,2,32,80,65536,26,80,255,80,5,80,1,25,82,1,3,32,80,256,26,24,80,255,80,2,80,5,26,80,2,25,80,2,80,5,26,80,2,25,82,1,2,25,82,1,3,25,32,80,1,26,24,252],[82,1,3,4,128,31],[82,1,2,4,128,28],[145,1,141,137],[80,0,80,0,80,999,80,0,25,80,1,24,80,999,80,0,25,80,1,24,208],[80,999,80,0,25,80,1,24,80,999,80,0,25,80,1,24,209],[80,6,136,4],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Movement under gravity",author:"University of Oxford",date:"22/09/2016",time:"18:49:12",code:"PROGRAM GravitySteps;\nVAR bounce: integer;\n\n  Procedure steps(s: integer);\n  Var size,count: integer;\n  Begin\n    size:=1000/s;\n    setxy(0,1000);\n    thickness(1);\n    for count:=1 to s*2 do\n      if count mod 2=0 then\n        movexy(0,-size)\n      else\n        movexy(size,0);\n    movexy(0,s*size);\n    movexy(-s*size,0);\n    colour(blue);\n    polygon(s*2+2)\n  End;\n\n  Procedure throwball(xvel,yvel,gravity,floor: integer);\n  Begin\n    repeat\n      colour(white);\n      blot(25);\n      movexy(xvel,yvel);\n      yvel:=yvel+gravity;\n      if turty>floor then\n        turty:=floor;\n      colour(red);\n      blot(24);\n      update;\n      pause(10);\n      noupdate\n    until turty=floor\n  End;\n\nBEGIN\n  steps(10);\n  setxy(950,75);\n  repeat\n    throwball(-2,-22,1,turty+100)\n  until turtx<75;\n  for bounce:=1 to 10 do\n    throwball(0,bounce*2-20,1,turty)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"movexy",level:2,count:5,lines:"12 14 15 16 26"}],total:5},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:2,lines:"8 40"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"25 31"},{name:"polygon",level:2,count:1,lines:"18"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"17 24 30"},{name:"thickness",level:1,count:1,lines:"9"}],total:4},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"34"},{name:"update",level:1,count:1,lines:"32"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"33"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"11 28"},{name:"else",level:1,count:1,lines:"13"},{name:"for",level:1,count:2,lines:"10 44"},{name:"repeat",level:1,count:2,lines:"23 41"},{name:"procedure",level:2,count:2,lines:"4 21"}],total:9},{category:"Subroutine calls",expressions:[{name:"steps",level:0,count:1,lines:"39"},{name:"throwball",level:0,count:2,lines:"42 45"}],total:3}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,6,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,39],[140,1],[144,1,3],[98,1,1],[80,1e3,82,1,1,27,98,1,2],[80,0,80,1e3,224],[80,1,220],[80,1],[98,1,3,82,1,1,80,2,26],[82,1,3,69,129,18],[82,1,3,80,2,29,80,0,64,129,16],[80,0,82,1,2,16,225],[128,17],[82,1,2,80,0,225],[82,1,3,4,128,11],[80,0,82,1,1,82,1,2,26,225],[82,1,1,16,82,1,2,26,80,0,225],[80,255,221],[82,1,1,80,2,26,80,2,24,241],[145,1,141,137],[140,2],[144,2,4],[98,2,4,98,2,3,98,2,2,98,2,1],[80,16777215,221],[80,25,243],[82,2,1,82,2,2,225],[82,2,2,82,2,3,24,98,2,2],[81,14,82,2,4,67,129,32],[82,2,4,97,14],[80,16711680,221],[80,24,243],[162],[80,10,178],[163],[81,14,82,2,4,64,129,26],[145,2,141,137],[80,10,136,4],[80,950,80,75,224],[80,2,16,80,22,16,80,1,81,14,80,100,24,136,23],[81,13,80,75,66,129,41],[80,1],[97,18,80,10],[81,18,69,129,48],[80,0,81,18,80,2,26,80,20,25,80,1,81,14,136,23],[81,18,4,128,44],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Conway's Game of Life",author:"University of Oxford",date:"22/09/2016",time:"18:46:59",code:"PROGRAM GameOfLife;\nCONST width=32;\n      height=32;\nVAR x,y,i,j,dn: integer;\nBEGIN\n  canvas(0,0,width,height);\n  resolution(width,height);\n  for x:=0 to width-1 do\n    for y:=0 to height-1 do\n      if random(7)=0 then\n        pixset(x,y,black);\n  while ?key<>\\escape do\n    begin\n      for x:=0 to width-1 do\n        for y:=0 to height-1 do\n          begin\n            dn:=0;\n            for i:=-1 to 1 do\n              for j:=-1 to 1 do\n                dn:=dn+pixcol((x+i+width) mod width,(y+j+height) mod height) and 1;\n            if ((pixcol(x,y) and 1=0) and ((dn<5) or (dn>6)))\n                or ((pixcol(x,y) and 1=1) and (dn=6)) then\n              pixset(x,y,pixcol(x,y) xor 2)\n          end;\n      for x:=0 to width do\n        for y:=0 to height do\n          if (pixcol(x,y) and 3) mod 3<>0 then\n            pixset(x,y,pixcol(x,y) xor #FFFFFD)\n    end\nEND.",usage:[{category:"Canvas operations",expressions:[{name:"canvas",level:2,count:1,lines:"6"},{name:"resolution",level:2,count:1,lines:"7"},{name:"pixcol",level:3,count:6,lines:"20 21 22 23 27 28"},{name:"pixset",level:3,count:3,lines:"11 23 28"}],total:11},{category:"General arithmetic functions",expressions:[{name:"random",level:2,count:1,lines:"10"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:3,lines:"10 21 27"},{name:"for",level:1,count:8,lines:"8 9 14 15 18 19 25 26"},{name:"while",level:2,count:1,lines:"12"}],total:12}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,10,115,80,20,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,0,80,0,80,32,80,32,208],[80,32,80,32,209],[80,0],[97,16,80,32,80,1,25],[81,16,69,129,15],[80,0],[97,17,80,32,80,1,25],[81,17,69,129,14],[80,7,19,80,0,64,129,13],[81,16,81,17,80,0,211],[81,17,4,128,9],[81,16,4,128,6],[80,-9,184,80,27,65,129,47],[80,0],[97,16,80,32,80,1,25],[81,16,69,129,36],[80,0],[97,17,80,32,80,1,25],[81,17,69,129,35],[80,0,97,20],[80,1,16],[97,18,80,1],[81,18,69,129,32],[80,1,16],[97,19,80,1],[81,19,69,129,31],[81,20,81,16,81,18,24,80,32,24,80,32,29,81,17,81,19,24,80,32,24,80,32,29,210,80,1,9,24,97,20],[81,19,4,128,27],[81,18,4,128,24],[81,16,81,17,210,80,1,9,80,0,64,81,20,80,5,66,81,20,80,6,67,10,9,81,16,81,17,210,80,1,9,80,1,64,81,20,80,6,64,9,10,129,34],[81,16,81,17,81,16,81,17,210,80,2,11,211],[81,17,4,128,20],[81,16,4,128,17],[80,0],[97,16,80,32],[81,16,69,129,46],[80,0],[97,17,80,32],[81,17,69,129,45],[81,16,81,17,210,80,3,9,80,3,29,80,0,65,129,44],[81,16,81,17,81,16,81,17,210,80,16777213,11,211],[81,17,4,128,40],[81,16,4,128,37],[128,15],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"FOR (counting) loop",author:"University of Oxford",date:"22/09/2016",time:"18:44:55",code:"PROGRAM ForLoop;\nVAR count: integer;\nBEGIN\n  for count:=1 to 200 do\n    begin\n      forward(count div 3);\n      right(5);\n      colour(red);\n      blot(200);\n      colour(black);\n      circle(200)\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:1,lines:"6"},{name:"right",level:1,count:1,lines:"7"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"9"},{name:"circle",level:1,count:1,lines:"11"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"8 10"}],total:2},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"4"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,1],[97,16,80,200],[81,16,69,129,13],[81,16,80,3,28,227],[80,5,230],[80,16711680,221],[80,200,243],[80,0,221],[80,200,242],[81,16,4,128,4],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Flocking behaviour",author:"University of Oxford",date:"22/09/2016",time:"18:44:16",code:"PROGRAM Flocking;\nCONST numboids=30;\n      boidradius=20;\n      maxspeed=50;\n      boidcolour=lightbrown;\n      halocolour=#FFFFFE;\n      delay=50;\n      posfactor=50;\n      velfactor=50;\n      neard=200;\n      nearfactor=10;\n      tgtradius=2000;\nVAR boidx,boidy,boidvx,boidvy: array[1..numboids] of integer;\n    avgx,avgy,avgvx,avgvy: integer;\n    tgtx,tgty,tgtangvel: integer;\n    n: integer;\n    cycle: integer;\n\n  Procedure setup;\n  Var n: integer;\n  Begin\n    penup;\n    colour(halocolour);\n    for n:=1 to numboids do\n      begin\n        repeat\n          boidx[n]:=random(5000-2*boidradius)+boidradius;\n          boidy[n]:=random(5000-2*boidradius)+boidradius\n        until pixcol(boidx[n],boidy[n])=white;\n        boidvx[n]:=random(maxspeed*2+1)-maxspeed;\n        boidvy[n]:=random(maxspeed*2+1)-maxspeed;\n        setxy(boidx[n],boidy[n]);\n        blot(2*boidradius)\n      end\n  End;\n\n  Procedure draw(positive: boolean);\n  Var n,radius: integer;\n  Begin\n    if positive then\n      begin\n        colour(boidcolour);\n        radius:=boidradius\n      end\n    else\n      begin\n        colour(white);\n        radius:=boidradius+10\n      end;\n    for n:=1 to numboids do\n      begin\n        setxy(boidx[n],boidy[n]);\n        blot(radius)\n      end\n  End;\n\n  Procedure averages;\n  Var totalx,totaly,totalvx,totalvy: integer;\n      n: integer;\n  Begin\n    totalx:=0;\n    totaly:=0;\n    totalvx:=0;\n    totalvy:=0;\n    for n:=1 to numboids do\n      begin\n        totalx:=totalx+boidx[n];\n        totaly:=totaly+boidy[n];\n        totalvx:=totalvx+boidvx[n];\n        totalvy:=totalvy+boidvy[n]\n      end;\n    avgx:=totalx/numboids;\n    avgy:=totaly/numboids;\n    avgvx:=totalvx/numboids;\n    avgvy:=totalvy/numboids\n  End;\n\n  Procedure settarget;\n  Begin\n    if cycle mod 100=0 then\n      tgtangvel:=random(7)-3;\n    tgtx:=divmult(sin(cycle*tgtangvel,1,1000),1000,tgtradius);\n    tgty:=-divmult(cos(cycle*tgtangvel,1,1000),1000,tgtradius);\n    inc(cycle)\n  End;\n\n  Procedure move(b: integer);\n  Var n: integer;\n      distx,disty,speed: integer;\n  Begin\n    boidvx[b]:=boidvx[b]+(avgx-boidx[b])/posfactor+(avgvx-boidvx[b])/velfactor;\n    boidvy[b]:=boidvy[b]+(avgy-boidy[b])/posfactor+(avgvy-boidvy[b])/velfactor;\n    for n:=1 to numboids do\n      if n<>b then\n        begin\n          distx:=boidx[n]-boidx[b];\n          disty:=boidy[n]-boidy[b];\n          if hypot(distx,disty,1)<neard then\n            begin\n              boidvx[b]:=boidvx[b]-sign(distx)*(neard-abs(distx))/nearfactor;\n              boidvy[b]:=boidvy[b]-sign(disty)*(neard-abs(disty))/nearfactor\n            end\n        end;\n    if random(10)=0 then\n      begin\n        boidvx[b]:=tgtx-boidx[b];\n        boidvy[b]:=tgty-boidy[b]\n      end;\n    speed:=hypot(boidvx[b],boidvy[b],1);\n    if speed>maxspeed then\n      begin\n        boidvx[b]:=divmult(boidvx[b],speed,maxspeed);\n        boidvy[b]:=divmult(boidvy[b],speed,maxspeed)\n      end;\n    boidx[b]:=boidx[b]+boidvx[b];\n    boidy[b]:=boidy[b]+boidvy[b]\n  End;\n\nBEGIN\n  canvas(-2500,-2500,5000,5000);\n  noupdate;\n  setup;\n  blank(white);\n  draw(true);\n  cycle:=0;\n  repeat\n    averages;\n    settarget;\n    noupdate;\n    draw(false);\n    for n:=1 to numboids do\n      move(n);\n    draw(true);\n    update;\n    pause(delay)\n  until 0=1\nEND.",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:2,lines:"32 52"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"33 53"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"23 42 47"},{name:"penup",level:1,count:1,lines:"22"}],total:4},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"123"},{name:"noupdate",level:1,count:2,lines:"121 129"},{name:"update",level:1,count:1,lines:"134"},{name:"canvas",level:2,count:1,lines:"120"},{name:"pixcol",level:3,count:1,lines:"29"}],total:6},{category:"General arithmetic functions",expressions:[{name:"abs",level:1,count:2,lines:"100 101"},{name:"inc",level:1,count:1,lines:"84"},{name:"hypot",level:2,count:2,lines:"98 109"},{name:"random",level:2,count:6,lines:"27 28 30 31 81 104"},{name:"sign",level:2,count:2,lines:"100 101"},{name:"divmult",level:3,count:4,lines:"82 83 112 113"}],total:17},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:1,lines:"83"},{name:"sin",level:2,count:1,lines:"82"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"135"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:6,lines:"40 80 94 98 104 110"},{name:"else",level:1,count:1,lines:"45"},{name:"for",level:1,count:5,lines:"24 50 65 93 131"},{name:"repeat",level:1,count:2,lines:"26 126"},{name:"procedure",level:2,count:5,lines:"19 37 57 78 87"}],total:19},{category:"Subroutine calls",expressions:[{name:"setup",level:0,count:1,lines:"122"},{name:"draw",level:0,count:3,lines:"124 130 133"},{name:"averages",level:0,count:1,lines:"127"},{name:"settarget",level:0,count:1,lines:"128"},{name:"move",level:0,count:1,lines:"132"}],total:7}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,142,115,80,157,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,22,97,21,80,30,97,22],[84,54,97,53,80,30,97,54],[84,86,97,85,80,30,97,86],[84,118,97,117,80,30,97,118],[128,91],[140,1],[144,1,1],[160],[80,16777214,221],[80,1],[98,1,1,80,30],[82,1,1,69,129,23],[81,21,82,1,1,80,1,25,2,120,24,4,80,5e3,80,2,80,20,26,25,19,80,20,24,2,113],[81,53,82,1,1,80,1,25,2,120,24,4,80,5e3,80,2,80,20,26,25,19,80,20,24,2,113],[81,21,82,1,1,80,1,25,2,120,24,4,112,81,53,82,1,1,80,1,25,2,120,24,4,112,210,80,16777215,64,129,15],[81,85,82,1,1,80,1,25,2,120,24,4,80,50,80,2,26,80,1,24,19,80,50,25,2,113],[81,117,82,1,1,80,1,25,2,120,24,4,80,50,80,2,26,80,1,24,19,80,50,25,2,113],[81,21,82,1,1,80,1,25,2,120,24,4,112,81,53,82,1,1,80,1,25,2,120,24,4,112,224],[80,2,80,20,26,243],[82,1,1,4,128,13],[145,1,141,137],[140,2],[144,2,3],[98,2,1],[82,2,1,129,31],[80,11567184,221],[80,20,98,2,3],[128,33],[80,16777215,221],[80,20,80,10,24,98,2,3],[80,1],[98,2,2,80,30],[82,2,2,69,129,39],[81,21,82,2,2,80,1,25,2,120,24,4,112,81,53,82,2,2,80,1,25,2,120,24,4,112,224],[82,2,3,243],[82,2,2,4,128,34],[145,2,141,137],[140,3],[144,3,5],[80,0,98,3,1],[80,0,98,3,2],[80,0,98,3,3],[80,0,98,3,4],[80,1],[98,3,5,80,30],[82,3,5,69,129,54],[82,3,1,81,21,82,3,5,80,1,25,2,120,24,4,112,24,98,3,1],[82,3,2,81,53,82,3,5,80,1,25,2,120,24,4,112,24,98,3,2],[82,3,3,81,85,82,3,5,80,1,25,2,120,24,4,112,24,98,3,3],[82,3,4,81,117,82,3,5,80,1,25,2,120,24,4,112,24,98,3,4],[82,3,5,4,128,47],[82,3,1,80,30,27,97,149],[82,3,2,80,30,27,97,150],[82,3,3,80,30,27,97,151],[82,3,4,80,30,27,97,152],[145,3,141,137],[140,4],[81,157,80,100,29,80,0,64,129,62],[80,7,19,80,3,25,97,155],[81,157,81,155,26,80,1,80,1e3,41,80,1e3,80,2e3,32,97,153],[81,157,81,155,26,80,1,80,1e3,42,80,1e3,80,2e3,32,16,97,154],[84,157,1,112,4,2,113],[141,137],[140,5],[144,5,5],[98,5,1],[81,85,82,5,1,80,1,25,2,120,24,4,81,85,82,5,1,80,1,25,2,120,24,4,112,81,149,81,21,82,5,1,80,1,25,2,120,24,4,112,25,80,50,27,24,81,151,81,85,82,5,1,80,1,25,2,120,24,4,112,25,80,50,27,24,2,113],[81,117,82,5,1,80,1,25,2,120,24,4,81,117,82,5,1,80,1,25,2,120,24,4,112,81,150,81,53,82,5,1,80,1,25,2,120,24,4,112,25,80,50,27,24,81,152,81,117,82,5,1,80,1,25,2,120,24,4,112,25,80,50,27,24,2,113],[80,1],[98,5,2,80,30],[82,5,2,69,129,81],[82,5,2,82,5,1,65,129,80],[81,21,82,5,2,80,1,25,2,120,24,4,112,81,21,82,5,1,80,1,25,2,120,24,4,112,25,98,5,3],[81,53,82,5,2,80,1,25,2,120,24,4,112,81,53,82,5,1,80,1,25,2,120,24,4,112,25,98,5,4],[82,5,3,82,5,4,80,1,34,80,200,66,129,80],[81,85,82,5,1,80,1,25,2,120,24,4,81,85,82,5,1,80,1,25,2,120,24,4,112,82,5,3,18,80,200,82,5,3,17,25,26,80,10,27,25,2,113],[81,117,82,5,1,80,1,25,2,120,24,4,81,117,82,5,1,80,1,25,2,120,24,4,112,82,5,4,18,80,200,82,5,4,17,25,26,80,10,27,25,2,113],[82,5,2,4,128,72],[80,10,19,80,0,64,129,84],[81,85,82,5,1,80,1,25,2,120,24,4,81,153,81,21,82,5,1,80,1,25,2,120,24,4,112,25,2,113],[81,117,82,5,1,80,1,25,2,120,24,4,81,154,81,53,82,5,1,80,1,25,2,120,24,4,112,25,2,113],[81,85,82,5,1,80,1,25,2,120,24,4,112,81,117,82,5,1,80,1,25,2,120,24,4,112,80,1,34,98,5,5],[82,5,5,80,50,67,129,88],[81,85,82,5,1,80,1,25,2,120,24,4,81,85,82,5,1,80,1,25,2,120,24,4,112,82,5,5,80,50,32,2,113],[81,117,82,5,1,80,1,25,2,120,24,4,81,117,82,5,1,80,1,25,2,120,24,4,112,82,5,5,80,50,32,2,113],[81,21,82,5,1,80,1,25,2,120,24,4,81,21,82,5,1,80,1,25,2,120,24,4,112,81,85,82,5,1,80,1,25,2,120,24,4,112,24,2,113],[81,53,82,5,1,80,1,25,2,120,24,4,81,53,82,5,1,80,1,25,2,120,24,4,112,81,117,82,5,1,80,1,25,2,120,24,4,112,24,2,113],[145,5,141,137],[80,2500,16,80,2500,16,80,5e3,80,5e3,208],[163],[136,8],[80,16777215,248],[80,-1,136,24],[80,0,97,157],[136,40],[136,59],[163],[80,0,136,24],[80,1],[97,156,80,30],[81,156,69,129,106],[81,156,136,66],[81,156,4,128,102],[80,-1,136,24],[162],[80,50,178],[80,0,80,1,64,129,97],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Using Booleans",author:"University of Oxford",date:"22/09/2016",time:"18:42:19",code:"PROGRAM Flashlights;\n\n  Procedure drawit(doblot: boolean);\n  Begin\n    if doblot then\n      begin\n        randcol(10);\n        blot(25)\n      end\n    else\n      begin\n        colour(black);\n        blot(30);\n        randcol(10);\n        circle(25)\n      end\n  End;\n\nBEGIN\n  blot(1000);\n  thickness(8);\n  repeat\n    setx((random(8)+1)*111);\n    sety((random(8)+1)*111);\n    drawit(random(2)=1)\n  until false\nEND.",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setx",level:1,count:1,lines:"23"},{name:"sety",level:1,count:1,lines:"24"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:3,lines:"8 13 20"},{name:"circle",level:1,count:1,lines:"15"}],total:4},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:1,lines:"12"},{name:"randcol",level:1,count:2,lines:"7 14"},{name:"thickness",level:1,count:1,lines:"21"}],total:4},{category:"General arithmetic functions",expressions:[{name:"random",level:2,count:3,lines:"23 24 25"}],total:3},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"5"},{name:"else",level:1,count:1,lines:"10"},{name:"repeat",level:1,count:1,lines:"22"},{name:"procedure",level:2,count:1,lines:"3"}],total:4},{category:"Subroutine calls",expressions:[{name:"drawit",level:0,count:1,lines:"25"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,16],[140,1],[144,1,1],[98,1,1],[82,1,1,129,11],[80,10,19,4,222,221],[80,25,243],[128,15],[80,0,221],[80,30,243],[80,10,19,4,222,221],[80,25,242],[145,1,141,137],[80,1e3,243],[80,8,220],[80,8,19,80,1,24,80,111,26,217],[80,8,19,80,1,24,80,111,26,218],[80,2,19,80,1,64,136,4],[80,0,129,18],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Five turtles moving to the mouse",author:"University of Oxford",date:"22/09/2016",time:"18:40:39",code:"PROGRAM FiveTurtles;\nVAR a,b,c,d,e: array[1..5] of integer;\n    i: integer;\nBEGIN\n  for i:=1 to 3 do\n    begin\n      a[i]:=random(601)+200;\n      b[i]:=random(601)+200;\n      c[i]:=random(601)+200;\n      d[i]:=random(601)+200;\n      e[i]:=random(601)+200\n    end;\n  a[4]:=2;\n  b[4]:=4;\n  c[4]:=6;\n  d[4]:=8;\n  e[4]:=10;\n  a[5]:=purple;\n  b[5]:=red;\n  c[5]:=skyblue;\n  d[5]:=emerald;\n  e[5]:=gold;\n  repeat\n    newturtle(a);\n    drawxy(random(11)-5,random(11)-5);\n    newturtle(b);\n    drawxy(random(21)-10,random(21)-10);\n    newturtle(c);\n    drawxy(random(31)-15,random(31)-15);\n    newturtle(d);\n    drawxy(random(41)-20,random(41)-20);\n    newturtle(e);\n    drawxy(random(51)-25,random(51)-25);\n    if ?click>128 then\n      begin\n        i:=random(5);\n        if i=0 then\n          begin\n            a[1]:=?mousex;\n            a[2]:=?mousey\n          end\n        else\n          if i=1 then\n          begin\n            b[1]:=?mousex;\n            b[2]:=?mousey\n          end\n        else\n          if i=2 then\n          begin\n            c[1]:=?mousex;\n            c[2]:=?mousey\n          end\n        else\n          if i=3 then\n          begin\n            d[1]:=?mousex;\n            d[2]:=?mousey\n          end\n        else\n          if i=4 then\n          begin\n            e[1]:=?mousex;\n            e[2]:=?mousey\n          end;\n        pause(200)\n      end\n  until ?key=\\escape\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:5,lines:"25 27 29 31 33"}],total:5},{category:"Other Turtle commands",expressions:[{name:"newturtle",level:3,count:5,lines:"24 26 28 30 32"}],total:5},{category:"General arithmetic functions",expressions:[{name:"random",level:2,count:16,lines:"7 8 9 10 11 25 27 29 31 33 36"}],total:16},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"66"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:6,lines:"34 37 43 49 55 61"},{name:"else",level:1,count:4,lines:"42 48 54 60"},{name:"for",level:1,count:1,lines:"5"},{name:"repeat",level:1,count:1,lines:"23"}],total:12}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,41,115,80,51,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,17,97,16,80,5,97,17],[84,24,97,23,80,5,97,24],[84,31,97,30,80,5,97,31],[84,38,97,37,80,5,97,38],[84,45,97,44,80,5,97,45],[80,1],[97,51,80,3],[81,51,69,129,17],[81,16,81,51,80,1,25,2,120,24,4,80,601,19,80,200,24,2,113],[81,23,81,51,80,1,25,2,120,24,4,80,601,19,80,200,24,2,113],[81,30,81,51,80,1,25,2,120,24,4,80,601,19,80,200,24,2,113],[81,37,81,51,80,1,25,2,120,24,4,80,601,19,80,200,24,2,113],[81,44,81,51,80,1,25,2,120,24,4,80,601,19,80,200,24,2,113],[81,51,4,128,9],[81,16,80,4,80,1,25,2,120,24,4,80,2,2,113],[81,23,80,4,80,1,25,2,120,24,4,80,4,2,113],[81,30,80,4,80,1,25,2,120,24,4,80,6,2,113],[81,37,80,4,80,1,25,2,120,24,4,80,8,2,113],[81,44,80,4,80,1,25,2,120,24,4,80,10,2,113],[81,16,80,5,80,1,25,2,120,24,4,80,8388736,2,113],[81,23,80,5,80,1,25,2,120,24,4,80,16711680,2,113],[81,30,80,5,80,1,25,2,120,24,4,80,45311,2,113],[81,37,80,5,80,1,25,2,120,24,4,80,51543,2,113],[81,44,80,5,80,1,25,2,120,24,4,80,16762880,2,113],[81,16,80,0,113],[80,11,19,80,5,25,80,11,19,80,5,25,226],[81,23,80,0,113],[80,21,19,80,10,25,80,21,19,80,10,25,226],[81,30,80,0,113],[80,31,19,80,15,25,80,31,19,80,15,25,226],[81,37,80,0,113],[80,41,19,80,20,25,80,41,19,80,20,25,226],[81,44,80,0,113],[80,51,19,80,25,25,80,51,19,80,25,25,226],[80,-4,184,80,128,67,129,59],[80,5,19,97,51],[81,51,80,0,64,129,43],[81,16,80,1,80,1,25,2,120,24,4,80,-7,184,2,113],[81,16,80,2,80,1,25,2,120,24,4,80,-8,184,2,113],[128,58],[81,51,80,1,64,129,47],[81,23,80,1,80,1,25,2,120,24,4,80,-7,184,2,113],[81,23,80,2,80,1,25,2,120,24,4,80,-8,184,2,113],[128,58],[81,51,80,2,64,129,51],[81,30,80,1,80,1,25,2,120,24,4,80,-7,184,2,113],[81,30,80,2,80,1,25,2,120,24,4,80,-8,184,2,113],[128,58],[81,51,80,3,64,129,55],[81,37,80,1,80,1,25,2,120,24,4,80,-7,184,2,113],[81,37,80,2,80,1,25,2,120,24,4,80,-8,184,2,113],[128,58],[81,51,80,4,64,129,58],[81,44,80,1,80,1,25,2,120,24,4,80,-7,184,2,113],[81,44,80,2,80,1,25,2,120,24,4,80,-8,184,2,113],[80,200,178],[80,-9,184,80,27,64,129,27],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Simple drawing with pauses",author:"University of Oxford",date:"22/09/2016",time:"18:35:14",code:"PROGRAM DrawPause;\nBEGIN\n  colour(green);\n  blot(100);\n  pause(1000);\n  colour(red);\n  forward(450);\n  pause(1000);\n  right(90);\n  thickness(9);\n  colour(blue);\n  pause(1000);\n  forward(300)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:2,lines:"7 13"},{name:"right",level:1,count:1,lines:"9"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"4"}],total:1},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:3,lines:"3 6 11"},{name:"thickness",level:1,count:1,lines:"10"}],total:4},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:3,lines:"5 8 12"}],total:3}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,5,115,80,15,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,2263842,221],[80,100,243],[80,1e3,178],[80,16711680,221],[80,450,227],[80,1e3,178],[80,90,230],[80,9,220],[80,255,221],[80,1e3,178],[80,300,227],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Dragon IFS",author:"University of Oxford",date:"22/09/2016",time:"18:34:38",code:"PROGRAM DragonIFS;\nCONST xleft=0;\n      xright=999;\n      ytop=0;\n      ybottom=999;\n      scaledown=4;\n      mappings=3;\n      title='Dragon curve';\n      live=black;\n      copied=silver; \n      pauseval=2000;\nVAR xl,xr,yt,yb: integer;\n    coeffdiv: integer;\n    mapxx,mapxy,mapxc: array[1..mappings] of integer;\n    mapyx,mapyy,mapyc: array[1..mappings] of integer;\n    iteration,starttime: integer;\n    count,numborn,numkilled: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv:=1000;\n    mapxx[1]:=0;\n    mapyx[1]:=-577;\n    mapxy[1]:=577;\n    mapyy[1]:=0;\n    mapxc[1]:=95;\n    mapyc[1]:=589;\n    mapxx[2]:=0;\n    mapyx[2]:=-577;\n    mapxy[2]:=577;\n    mapyy[2]:=0;\n    mapxc[2]:=441;\n    mapyc[2]:=789;\n    mapxx[3]:=0;\n    mapyx[3]:=-577;\n    mapxy[3]:=577;\n    mapyy[3]:=0;\n    mapxc[3]:=95;\n    mapyc[3]:=989;\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl:=xleft/scaledown;\n    xr:=xright/scaledown;\n    yt:=ytop/scaledown;\n    yb:=ybottom/scaledown;\n    for i:=1 to mappings do\n      begin\n        mapxc[i]:=mapxc[i]/scaledown;\n        mapyc[i]:=mapyc[i]/scaledown\n      end\n  End;\n\n  Procedure map(a,x,y: integer;var newx,newy: integer);\n  Begin\n    newx:=divmult(x,coeffdiv,mapxx[a])+divmult(y,coeffdiv,mapxy[a])+mapxc[a];\n    newy:=divmult(x,coeffdiv,mapyx[a])+divmult(y,coeffdiv,mapyy[a])+mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x,y,newx,newy: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        if pixcol(x,y)<>white then\n          begin\n            map(mapnum,x,y,newx,newy);\n            if pixcol(newx,newy)=white then\n              inc(numborn);\n            pixset(newx,newy,rgb(mapnum))\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x,y: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        if pixcol(x,y)=live then\n          begin\n            pixset(x,y,white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x,y)<>white then\n          pixset(x,y,live);\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl,yt,xr-xl+1,yb-yt+1);\n  resolution(xr-xl+1,yb-yt+1);\n  blank(live);\n  iteration:=0;\n  writeln(title+' by iterative mapping');\n  timeset(0);\n  repeat\n    starttime:=time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration '+str(iteration)+':');\n    numborn:=0;\n    for count:=1 to mappings do\n      domap(count);\n    numkilled:=0;\n    cleanup;\n    writeln('  '+str(numborn)+' pixels born; '+str(numkilled)+' pixels killed');\n    writeln('  (took '+str((time-starttime)/1000)+' seconds - total '+str(time/1000)+' seconds so far)');\n    if (numborn+numkilled>0) and (pauseval>=1000) then\n      begin\n        write('  (now pausing '+qstr(pauseval,1000,1)+' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn+numkilled=0;\n  writeln('FINISH - fixed point of iterative mapping has been reached');\n  for count:=1 to mappings do\n    domap(count)\nEND.",usage:[{category:"Other Turtle commands",expressions:[{name:"rgb",level:3,count:1,lines:"73"}],total:1},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"100"},{name:"noupdate",level:1,count:2,lines:"65 81"},{name:"update",level:1,count:2,lines:"75 92"},{name:"canvas",level:2,count:1,lines:"98"},{name:"resolution",level:2,count:1,lines:"99"},{name:"pixcol",level:3,count:4,lines:"68 71 84 90"},{name:"pixset",level:3,count:3,lines:"73 86 91"}],total:14},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:3,lines:"72 87 106"},{name:"divmult",level:3,count:4,lines:"58 59"}],total:7},{category:"String operations",expressions:[{name:"write",level:1,count:1,lines:"118"},{name:"writeln",level:1,count:7,lines:"102 107 108 114 115 120 123"}],total:8},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:5,lines:"108 114 115"},{name:"qstr",level:2,count:1,lines:"118"}],total:6},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"119"},{name:"time",level:2,count:3,lines:"105 115"},{name:"timeset",level:2,count:1,lines:"103"}],total:5},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"68 71 84 90 116"},{name:"else",level:1,count:1,lines:"89"},{name:"for",level:1,count:7,lines:"49 66 67 82 83 110 124"},{name:"repeat",level:1,count:1,lines:"104"},{name:"procedure",level:2,count:5,lines:"19 42 56 62 78"}],total:19},{category:"Subroutine calls",expressions:[{name:"map",level:0,count:1,lines:"70"},{name:"setmaps",level:0,count:1,lines:"96"},{name:"setscale",level:0,count:1,lines:"97"},{name:"domap",level:0,count:2,lines:"111 125"},{name:"cleanup",level:0,count:1,lines:"113"}],total:6}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,45,115,80,60,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,27,97,26,80,3,97,27],[84,32,97,31,80,3,97,32],[84,37,97,36,80,3,97,37],[84,42,97,41,80,3,97,42],[84,47,97,46,80,3,97,47],[84,52,97,51,80,3,97,52],[128,88],[140,1],[80,1e3,97,25],[81,26,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,41,80,1,80,1,25,2,120,24,4,80,577,16,2,113],[81,31,80,1,80,1,25,2,120,24,4,80,577,2,113],[81,46,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,36,80,1,80,1,25,2,120,24,4,80,95,2,113],[81,51,80,1,80,1,25,2,120,24,4,80,589,2,113],[81,26,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,41,80,2,80,1,25,2,120,24,4,80,577,16,2,113],[81,31,80,2,80,1,25,2,120,24,4,80,577,2,113],[81,46,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,36,80,2,80,1,25,2,120,24,4,80,441,2,113],[81,51,80,2,80,1,25,2,120,24,4,80,789,2,113],[81,26,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,41,80,3,80,1,25,2,120,24,4,80,577,16,2,113],[81,31,80,3,80,1,25,2,120,24,4,80,577,2,113],[81,46,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,36,80,3,80,1,25,2,120,24,4,80,95,2,113],[81,51,80,3,80,1,25,2,120,24,4,80,989,2,113],[141,137],[140,2],[144,2,1],[80,0,80,4,27,97,21],[80,999,80,4,27,97,22],[80,0,80,4,27,97,23],[80,999,80,4,27,97,24],[80,1],[98,2,1,80,3],[82,2,1,69,129,43],[81,36,82,2,1,80,1,25,2,120,24,4,81,36,82,2,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[81,51,82,2,1,80,1,25,2,120,24,4,81,51,82,2,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[82,2,1,4,128,38],[145,2,141,137],[140,3],[144,3,5],[102,3,5,102,3,4,98,3,3,98,3,2,98,3,1],[82,3,2,81,25,81,26,82,3,1,80,1,25,2,120,24,4,112,32,82,3,3,81,25,81,31,82,3,1,80,1,25,2,120,24,4,112,32,24,81,36,82,3,1,80,1,25,2,120,24,4,112,24,99,3,4],[82,3,2,81,25,81,41,82,3,1,80,1,25,2,120,24,4,112,32,82,3,3,81,25,81,46,82,3,1,80,1,25,2,120,24,4,112,32,24,81,51,82,3,1,80,1,25,2,120,24,4,112,24,99,3,5],[145,3,141,137],[140,4],[144,4,5],[98,4,1],[163],[81,23],[98,4,3,81,24],[82,4,3,69,129,67],[81,21],[98,4,2,81,22],[82,4,2,69,129,66],[82,4,2,82,4,3,210,80,16777215,65,129,65],[82,4,1,82,4,2,82,4,3,85,4,4,85,4,5,136,44],[82,4,4,82,4,5,210,80,16777215,64,129,64],[84,59,1,112,4,2,113],[82,4,4,82,4,5,82,4,1,222,211],[82,4,2,4,128,58],[82,4,3,4,128,55],[162],[145,4,141,137],[140,5],[144,5,2],[163],[81,23],[98,5,2,81,24],[82,5,2,69,129,86],[81,21],[98,5,1,81,22],[82,5,1,69,129,85],[82,5,1,82,5,2,210,80,0,64,129,82],[82,5,1,82,5,2,80,16777215,211],[84,60,1,112,4,2,113],[128,84],[82,5,1,82,5,2,210,80,16777215,65,129,84],[82,5,1,82,5,2,80,0,211],[82,5,1,4,128,76],[82,5,2,4,128,73],[162],[145,5,141,137],[136,10],[136,31],[81,21,81,23,81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,208],[81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,209],[80,0,248],[80,0,97,56],[87,68,114,97,103,111,110,32,99,117,114,118,101,0,87,32,98,121,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,0,54,190,191],[80,0,177],[176,97,57],[84,56,1,112,4,2,113],[87,0,190,191],[87,73,116,101,114,97,116,105,111,110,32,0,81,56,49,54,80,58,48,54,190,191,147],[80,0,97,59],[80,1],[97,58,80,3],[81,58,69,129,106],[81,58,136,50],[81,58,4,128,102],[80,0,97,60],[136,69],[87,32,32,0,81,59,49,54,87,32,112,105,120,101,108,115,32,98,111,114,110,59,32,0,54,81,60,49,54,87,32,112,105,120,101,108,115,32,107,105,108,108,101,100,0,54,190,191,147],[87,32,32,40,116,111,111,107,32,0,176,81,57,25,80,1e3,27,49,54,87,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,0,54,176,80,1e3,27,49,54,87,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,0,54,190,191,147],[81,59,81,60,24,80,0,67,80,2e3,80,1e3,69,9,129,114],[87,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,0,80,2e3,80,1e3,80,1,52,54,87,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,0,54,190,147],[80,2e3,178],[87,0,190,191],[81,59,81,60,24,80,0,64,129,96],[87,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,0,190,191],[80,1],[97,58,80,3],[81,58,69,129,121],[81,58,136,50],[81,58,4,128,117],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Dragon colour",author:"University of Oxford",date:"22/09/2016",time:"23:11:36",code:"PROGRAM DragonColour;\nCONST xleft=0;\n      xright=999;\n      ytop=0;\n      ybottom=999;\n      scaledown=4;\n      mappings=3;\n      title='Dragon curve';\n      gridlines=5;\n      gridthick=64;    \nVAR xl,xr,yt,yb,gt: integer;\n    coeffdiv: integer;\n    mapxx,mapxy,mapxc: array[1..mappings] of integer;\n    mapyx,mapyy,mapyc: array[1..mappings] of integer;\n    count: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv:=1000;\n    mapxx[1]:=0;\n    mapyx[1]:=-577;\n    mapxy[1]:=577;\n    mapyy[1]:=0;\n    mapxc[1]:=95;\n    mapyc[1]:=589;\n    mapxx[2]:=0;\n    mapyx[2]:=-577;\n    mapxy[2]:=577;\n    mapyy[2]:=0;\n    mapxc[2]:=441;\n    mapyc[2]:=789;\n    mapxx[3]:=0;\n    mapyx[3]:=-577;\n    mapxy[3]:=577;\n    mapyy[3]:=0;\n    mapxc[3]:=95;\n    mapyc[3]:=989;\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl:=xleft/scaledown;\n    xr:=xright/scaledown;\n    yt:=ytop/scaledown;\n    yb:=ybottom/scaledown;\n    for i:=1 to mappings do\n      begin\n        mapxc[i]:=mapxc[i]/scaledown;\n        mapyc[i]:=mapyc[i]/scaledown\n      end;\n    gt:=gridthick/scaledown\n  End;\n\n  Procedure background(rad: integer);\n  Var x,y: integer;\n  Begin\n    thickness(gt);\n    colour(darkgrey);\n    for x:=1 to gridlines-1 do\n      begin\n        setxy(xl+divmult(xr-xl,gridlines,x),yt);\n        drawxy(0,yb-yt)\n      end;   \n    for y:=1 to gridlines-1 do\n      begin\n        setxy(xl+gt/2,yt+divmult(yb-yt,gridlines,y));\n        drawxy(xr-xl-gt,0)\n      end;\n    colour(black);\n    setxy(xl,yt);\n    drawxy(xr-xl,0);\n    drawxy(0,yb-yt);\n    drawxy(xl-xr,0);\n    drawxy(0,yt-yb);\n    for x:=0 to gridlines-1 do\n      for y:=0 to gridlines-1 do\n        recolour(xl+divmult(xr-xl,gridlines,x)+gt,\n                 yt+divmult(yb-yt,gridlines,y)+gt,\n                 divmult(255,gridlines-1,x)*#10000\n                 +divmult(255,gridlines-1,y)*#100\n                 +divmult(255,2*gridlines-2,2*gridlines-2-x-y)*#1)\n  End;\n\n  Procedure map(a,x,y: integer;var newx,newy: integer);\n  Begin\n    newx:=divmult(x,coeffdiv,mapxx[a])+divmult(y,coeffdiv,mapxy[a])+mapxc[a];\n    newy:=divmult(x,coeffdiv,mapyx[a])+divmult(y,coeffdiv,mapyy[a])+mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x,y,newx,newy: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        begin\n          map(mapnum,x,y,newx,newy);\n          pixset(newx,newy,pixcol(x,y))\n        end;\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl,yt,xr-xl+1,yb-yt+1);\n  resolution(xr-xl+1,yb-yt+1);\n  background(6);\n  writeln(title+' mappings in colour');\n  for count:=1 to mappings do\n    domap(count)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:6,lines:"63 68 72 73 74 75"}],total:6},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:3,lines:"62 67 71"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"59 70"},{name:"thickness",level:1,count:1,lines:"58"}],total:3},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"94"},{name:"update",level:1,count:1,lines:"101"},{name:"canvas",level:2,count:1,lines:"107"},{name:"resolution",level:2,count:1,lines:"108"},{name:"pixcol",level:3,count:1,lines:"99"},{name:"pixset",level:3,count:1,lines:"99"},{name:"recolour",level:3,count:1,lines:"78"}],total:7},{category:"General arithmetic functions",expressions:[{name:"divmult",level:3,count:11,lines:"62 67 78 79 80 81 82 87 88"}],total:11},{category:"String operations",expressions:[{name:"writeln",level:1,count:1,lines:"110"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:8,lines:"47 60 65 76 77 95 96 111"},{name:"procedure",level:2,count:5,lines:"17 40 55 85 91"}],total:13},{category:"Subroutine calls",expressions:[{name:"map",level:0,count:1,lines:"98"},{name:"setmaps",level:0,count:1,lines:"105"},{name:"setscale",level:0,count:1,lines:"106"},{name:"background",level:0,count:1,lines:"109"},{name:"domap",level:0,count:1,lines:"112"}],total:5}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,42,115,80,57,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,28,97,27,80,3,97,28],[84,33,97,32,80,3,97,33],[84,38,97,37,80,3,97,38],[84,43,97,42,80,3,97,43],[84,48,97,47,80,3,97,48],[84,53,97,52,80,3,97,53],[128,100],[140,1],[80,1e3,97,26],[81,27,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,42,80,1,80,1,25,2,120,24,4,80,577,16,2,113],[81,32,80,1,80,1,25,2,120,24,4,80,577,2,113],[81,47,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,37,80,1,80,1,25,2,120,24,4,80,95,2,113],[81,52,80,1,80,1,25,2,120,24,4,80,589,2,113],[81,27,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,42,80,2,80,1,25,2,120,24,4,80,577,16,2,113],[81,32,80,2,80,1,25,2,120,24,4,80,577,2,113],[81,47,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,37,80,2,80,1,25,2,120,24,4,80,441,2,113],[81,52,80,2,80,1,25,2,120,24,4,80,789,2,113],[81,27,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,42,80,3,80,1,25,2,120,24,4,80,577,16,2,113],[81,32,80,3,80,1,25,2,120,24,4,80,577,2,113],[81,47,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,37,80,3,80,1,25,2,120,24,4,80,95,2,113],[81,52,80,3,80,1,25,2,120,24,4,80,989,2,113],[141,137],[140,2],[144,2,1],[80,0,80,4,27,97,21],[80,999,80,4,27,97,22],[80,0,80,4,27,97,23],[80,999,80,4,27,97,24],[80,1],[98,2,1,80,3],[82,2,1,69,129,43],[81,37,82,2,1,80,1,25,2,120,24,4,81,37,82,2,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[81,52,82,2,1,80,1,25,2,120,24,4,81,52,82,2,1,80,1,25,2,120,24,4,112,80,4,27,2,113],[82,2,1,4,128,38],[80,64,80,4,27,97,25],[145,2,141,137],[140,3],[144,3,3],[98,3,1],[81,25,220],[80,4210752,221],[80,1],[98,3,2,80,5,80,1,25],[82,3,2,69,129,56],[81,21,81,22,81,21,25,80,5,82,3,2,32,24,81,23,224],[80,0,81,24,81,23,25,226],[82,3,2,4,128,51],[80,1],[98,3,3,80,5,80,1,25],[82,3,3,69,129,62],[81,21,81,25,80,2,27,24,81,23,81,24,81,23,25,80,5,82,3,3,32,24,224],[81,22,81,21,25,81,25,25,80,0,226],[82,3,3,4,128,57],[80,0,221],[81,21,81,23,224],[81,22,81,21,25,80,0,226],[80,0,81,24,81,23,25,226],[81,21,81,22,25,80,0,226],[80,0,81,23,81,24,25,226],[80,0],[98,3,2,80,5,80,1,25],[82,3,2,69,129,77],[80,0],[98,3,3,80,5,80,1,25],[82,3,3,69,129,76],[81,21,81,22,81,21,25,80,5,82,3,2,32,24,81,25,24,81,23,81,24,81,23,25,80,5,82,3,3,32,24,81,25,24,80,255,80,5,80,1,25,82,3,2,32,80,65536,26,80,255,80,5,80,1,25,82,3,3,32,80,256,26,24,80,255,80,2,80,5,26,80,2,25,80,2,80,5,26,80,2,25,82,3,2,25,82,3,3,25,32,80,1,26,24,252],[82,3,3,4,128,72],[82,3,2,4,128,69],[145,3,141,137],[140,4],[144,4,5],[102,4,5,102,4,4,98,4,3,98,4,2,98,4,1],[82,4,2,81,26,81,27,82,4,1,80,1,25,2,120,24,4,112,32,82,4,3,81,26,81,32,82,4,1,80,1,25,2,120,24,4,112,32,24,81,37,82,4,1,80,1,25,2,120,24,4,112,24,99,4,4],[82,4,2,81,26,81,42,82,4,1,80,1,25,2,120,24,4,112,32,82,4,3,81,26,81,47,82,4,1,80,1,25,2,120,24,4,112,32,24,81,52,82,4,1,80,1,25,2,120,24,4,112,24,99,4,5],[145,4,141,137],[140,5],[144,5,5],[98,5,1],[163],[81,23],[98,5,3,81,24],[82,5,3,69,129,98],[81,21],[98,5,2,81,22],[82,5,2,69,129,97],[82,5,1,82,5,2,82,5,3,85,5,4,85,5,5,136,78],[82,5,4,82,5,5,82,5,2,82,5,3,210,211],[82,5,2,4,128,92],[82,5,3,4,128,89],[162],[145,5,141,137],[136,10],[136,31],[81,21,81,23,81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,208],[81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,209],[80,6,136,45],[87,68,114,97,103,111,110,32,99,117,114,118,101,0,87,32,109,97,112,112,105,110,103,115,32,105,110,32,99,111,108,111,117,114,0,54,190,191],[80,1],[97,57,80,3],[81,57,69,129,111],[81,57,136,84],[81,57,4,128,107],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Spread of disease",author:"University of Oxford",date:"22/09/2016",time:"18:22:05",code:"PROGRAM Disease;\nCONST width=100;\n      height=100;\n      susceptible=lightgreen;\n      infected=red;\n      recovered=blue;\n      startradius=10;\n      infectprob=1;\n      immuneprob=2; \n      recoverprob=15;\nVAR x,y,n: integer;\n    numinfected: integer;\n\n  Procedure infect(x,y: integer);\n  Begin\n    pixset(x,y,infected);\n    inc(numinfected)\n  End;    \n\nBEGIN\n  canvas(0,0,width,height);\n  resolution(width,height);\n  numinfected:=0;\n  noupdate;\n  for x:=0 to width-1 do\n    for y:=0 to height-1 do\n      if (random(100)<infectprob) and (hypot(x-width/2,y-height/2,1)<=startradius) then\n        infect(x,y)\n      else\n      if random(100)<immuneprob then\n        pixset(x,y,recovered)\n      else\n        pixset(x,y,susceptible);\n  update;\n  repeat\n    x:=random(width);\n    y:=random(height);\n    if pixcol(x,y)=infected then\n      begin\n        if random(100)<recoverprob then\n          begin\n            pixset(x,y,recovered);\n            dec(numinfected)\n          end\n        else\n          begin\n            n:=random(4)*2+1;\n            x:=x+n div 3-1;\n            y:=y+n mod 3-1;\n            if pixcol(x,y)=susceptible then\n              infect(x,y)\n          end\n      end\n  until numinfected=0\nEND.",usage:[{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"24"},{name:"update",level:1,count:1,lines:"34"},{name:"canvas",level:2,count:1,lines:"21"},{name:"resolution",level:2,count:1,lines:"22"},{name:"pixcol",level:3,count:2,lines:"38 50"},{name:"pixset",level:3,count:4,lines:"16 31 33 42"}],total:10},{category:"General arithmetic functions",expressions:[{name:"dec",level:1,count:1,lines:"43"},{name:"inc",level:1,count:1,lines:"17"},{name:"hypot",level:2,count:1,lines:"27"},{name:"random",level:2,count:6,lines:"27 30 36 37 40 47"}],total:9},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"27 30 38 40 50"},{name:"else",level:1,count:3,lines:"29 32 45"},{name:"for",level:1,count:2,lines:"25 26"},{name:"repeat",level:1,count:1,lines:"35"},{name:"procedure",level:2,count:1,lines:"14"}],total:12},{category:"Subroutine calls",expressions:[{name:"infect",level:0,count:2,lines:"28 51"}],total:2}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,9,115,80,20,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,10],[140,1],[144,1,2],[98,1,2,98,1,1],[82,1,1,82,1,2,80,16711680,211],[84,20,1,112,4,2,113],[145,1,141,137],[80,0,80,0,80,100,80,100,208],[80,100,80,100,209],[80,0,97,20],[163],[80,0],[97,17,80,100,80,1,25],[81,17,69,129,29],[80,0],[97,18,80,100,80,1,25],[81,18,69,129,28],[80,100,19,80,1,66,81,17,80,100,80,2,27,25,81,18,80,100,80,2,27,25,80,1,34,80,10,68,9,129,23],[81,17,81,18,136,4],[128,27],[80,100,19,80,2,66,129,26],[81,17,81,18,80,255,211],[128,27],[81,17,81,18,80,10025880,211],[81,18,4,128,18],[81,17,4,128,15],[162],[80,100,19,97,17],[80,100,19,97,18],[81,17,81,18,210,80,16711680,64,129,42],[80,100,19,80,15,66,129,37],[81,17,81,18,80,255,211],[84,20,1,112,5,2,113],[128,42],[80,4,19,80,2,26,80,1,24,97,19],[81,17,81,19,80,3,28,24,80,1,25,97,17],[81,18,81,19,80,3,29,24,80,1,25,97,18],[81,17,81,18,210,80,10025880,64,129,42],[81,17,81,18,136,4],[81,20,80,0,64,129,30],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Digital clock (using IF and WHILE)",author:"University of Oxford",date:"22/09/2016",time:"18:19:31",code:"PROGRAM DigitalClock;\nVAR hours: integer;\n    minutes: integer;\n\n  Procedure showtime;\n  Var hstring,mstring: string;\n  Begin\n    setxy(300,430);\n    box(400,130,white,false);\n    if hours<10 then\n      hstring:='0'+str(hours)\n    else\n      hstring:=str(hours);\n    if minutes<10 then\n      mstring:='0'+str(minutes)\n    else\n      mstring:=str(minutes);\n    print(hstring+':'+mstring,21,100)\n  End;\n\nBEGIN\n  blank(lightgreen);\n  setxy(250,390);\n  colour(maroon);\n  thickness(10);\n  box(500,210,lightbrown,true);\n  colour(black);\n  hours:=0;\n  minutes:=0;\n  while hours<12 do\n    begin\n      showtime;\n      pause(600);\n      inc(minutes);\n      if minutes=60 then\n        begin\n          inc(hours);\n          minutes:=0\n        end\n    end;\n  showtime\nEND.",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:2,lines:"8 23"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"box",level:2,count:2,lines:"9 26"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"24 27"},{name:"thickness",level:1,count:1,lines:"25"}],total:3},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"22"}],total:1},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:2,lines:"34 37"}],total:2},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"18"}],total:1},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:4,lines:"11 13 15 17"}],total:4},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"33"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:3,lines:"10 14 35"},{name:"else",level:1,count:2,lines:"12 16"},{name:"while",level:2,count:1,lines:"30"},{name:"procedure",level:2,count:1,lines:"5"}],total:7},{category:"Subroutine calls",expressions:[{name:"showtime",level:0,count:2,lines:"32 41"}],total:2}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,7,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,18],[140,1],[144,1,2],[80,300,80,430,224],[80,400,80,130,80,16777215,80,0,246],[81,17,80,10,66,129,11],[80,48,48,81,17,49,54,98,1,1,146],[128,12],[81,17,49,98,1,1,146],[81,18,80,10,66,129,15],[80,48,48,81,18,49,54,98,1,2,146],[128,16],[81,18,49,98,1,2,146],[82,1,1,80,58,48,54,82,1,2,54,80,21,80,100,189,147],[145,1,141,137],[80,10025880,248],[80,250,80,390,224],[80,8388608,221],[80,10,220],[80,500,80,210,80,11567184,80,-1,246],[80,0,221],[80,0,97,17],[80,0,97,18],[81,17,80,12,66,129,34],[136,4],[80,600,178],[84,18,1,112,4,2,113],[81,18,80,60,64,129,33],[84,17,1,112,4,2,113],[80,0,97,18],[128,26],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"A model of diffusion",author:"University of Oxford",date:"22/09/2016",time:"18:15:01",code:"PROGRAM Diffusion;\nCONST width=100;\n      leftaxis=21;\n      rightaxis=15;\n      topmargin=20;\n      gap=10;\n      concbottom=80;\n      concwidth=50;\n      colour1=red;\n      colour2=blue;\n      edgecol=black;\n      molcol=red;\n      conccol=seagreen;\nVAR xorval: integer;\n    bottom: integer;\n    boundary: integer;\n    x1,y1: integer;\n    x2,y2: integer;\n    temp: integer;\n    num1: array[0..width] of integer;\n\n  Procedure setup;\n  Begin\n    canvas(0,0,width+leftaxis+rightaxis,width*2+topmargin+gap);\n    resolution(width+leftaxis+rightaxis,width*2+topmargin+gap);\n    bottom:=width*2+topmargin+gap-1;\n    boundary:=divmult(width,1000,707);\n    xorval:=colour1 xor colour2;\n    thickness(1);\n    colour(colour2);\n    setxy(boundary+leftaxis,bottom-boundary);\n    drawxy(0,boundary);\n    setxy(boundary+leftaxis,bottom-boundary-10);\n    drawxy(0,5);\n    setxy(boundary+leftaxis,topmargin);\n    drawxy(0,5);\n    colour(colour1);\n    setxy(boundary+leftaxis-1,bottom-boundary-10);\n    drawxy(0,5);\n    setxy(boundary+leftaxis-1,topmargin);\n    drawxy(0,5);\n    colour(edgecol);\n    setxy(leftaxis-1,bottom);\n    drawxy(width+1,-width-1);\n    colour(edgecol);\n    drawxy(0,width+1);\n    recolour(leftaxis+2,bottom,colour1);\n    recolour(width+leftaxis-4,bottom,colour2);\n    for x1:=0 to boundary-1 do\n      num1[x1]:=x1+1;\n    for x1:=boundary to width-1 do\n      num1[x1]:=0;\n    colour(black);\n    setxy(0,0);\n    print('Diffusion in a Tapering Tube',2,width/10)  \n  End;\n\n  Procedure drawaxes;\n  Var n: integer;\n  Begin\n    for n:=-1 to concwidth do\n      pixset(leftaxis-1,concbottom-n,black);\n    for n:=0 to width do\n      pixset(leftaxis+100,topmargin+n,black);\n    for n:=0 to 100 do\n      begin\n        if (n<31) or (n mod 5=0) then\n          pixset(leftaxis+n,concbottom+1,black);\n        pixset(leftaxis+n,topmargin+101,black)\n      end;\n    drawxy(0,-concwidth);\n    colour(conccol);\n    setxy(0,concbottom-concwidth-width/15);\n    print('100%',2,width/15);\n    setxy(0,concbottom-width/15);\n    print('  0%',2,width/15);\n    setxy(0,topmargin+width*11/10);\n    print('Red concentration',2,width/12);\n    colour(molcol);\n    setxy(width+leftaxis+2,topmargin+width-boundary+1-width/15);\n    print(str(boundary-1),2,width/15);\n    setxy(width+leftaxis+2,topmargin+width-width/15);\n    print('  0',2,width/15);\n    setxy(0,topmargin+width*12/10);\n    print('Red molecule count',2,width/12);\n    colour(black);\n    setxy(0,topmargin+width*13/10+5);\n    print('(at horizontal position',2,width/15);\n    setxy(0,topmargin+width*14/10+5);\n    print('in tapering tube)',2,width/15); \n  End;\n\n  Procedure graphit(x: integer;show: boolean);\n  Begin\n    if show then\n      begin\n        pixset(x+leftaxis,topmargin+width-num1[x],molcol);\n        pixset(x+leftaxis,concbottom-divmult(num1[x],x+1,concwidth),conccol)\n      end\n    else\n      begin\n        pixset(x+leftaxis,topmargin+width-num1[x],white);\n        pixset(x+leftaxis,concbottom-divmult(num1[x],x+1,concwidth),white)\n      end\n  End;\n\n  Procedure showswap(x,origcol: integer);\n  Begin\n    graphit(x1,false);\n    graphit(x1+1,false);\n    if origcol=colour1 then\n      begin\n        dec(num1[x1]);\n        inc(num1[x1+1])\n      end\n    else\n      begin\n        inc(num1[x1]);\n        dec(num1[x1+1])\n      end;\n    graphit(x1,true);\n    graphit(x1+1,true)\n  End;\n    \nBEGIN\n  setup;\n  drawaxes;\n  for x1:=0 to width-1 do\n    graphit(x1,true);\n  pause(2500);\n  repeat\n    x1:=random(width);\n    y1:=random(width);\n    if y1<=x1 then\n      begin\n        y1:=bottom-y1;\n        x2:=x1;\n        y2:=y1;\n        if random(2)=0 then \n          inc(x2)\n        else\n          dec(y2);\n        temp:=pixcol(x1+leftaxis,y1);\n        if (pixcol(x2+leftaxis,y2) xor temp)=xorval then\n          begin\n            noupdate;\n            pixset(x1+leftaxis,y1,pixcol(x2+leftaxis,y2));\n            pixset(x2+leftaxis,y2,temp);\n            if (x2<>x1) then\n              showswap(x1,temp);\n            update\n          end\n      end\n  until 0=1 \nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:8,lines:"32 34 36 39 41 44 46 71"}],total:8},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:15,lines:"31 33 35 38 40 43 54 73 75 77 80 82 84 87 89"}],total:15},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:8,lines:"30 37 42 45 53 72 79 86"},{name:"thickness",level:1,count:1,lines:"29"}],total:9},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"146"},{name:"update",level:1,count:1,lines:"151"},{name:"canvas",level:2,count:1,lines:"24"},{name:"resolution",level:2,count:1,lines:"25"},{name:"pixcol",level:3,count:3,lines:"143 144 147"},{name:"pixset",level:3,count:10,lines:"62 64 68 69 97 98 102 103 147 148"},{name:"recolour",level:3,count:2,lines:"47 48"}],total:19},{category:"General arithmetic functions",expressions:[{name:"dec",level:1,count:3,lines:"113 119 142"},{name:"inc",level:1,count:3,lines:"114 118 140"},{name:"random",level:2,count:3,lines:"132 133 139"},{name:"divmult",level:3,count:3,lines:"27 98 103"}],total:12},{category:"String operations",expressions:[{name:"print",level:1,count:9,lines:"55 74 76 78 81 83 85 88 90"}],total:9},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:1,lines:"81"}],total:1},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"130"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:7,lines:"67 95 111 134 139 144 149"},{name:"else",level:1,count:3,lines:"100 116 141"},{name:"for",level:1,count:6,lines:"49 51 61 63 65 128"},{name:"repeat",level:1,count:1,lines:"131"},{name:"procedure",level:2,count:4,lines:"22 58 93 107"}],total:21},{category:"Subroutine calls",expressions:[{name:"graphit",level:0,count:5,lines:"109 110 121 122 129"},{name:"setup",level:0,count:1,lines:"126"},{name:"drawaxes",level:0,count:1,lines:"127"},{name:"showswap",level:0,count:1,lines:"150"}],total:8}],pcode:[[80,14,1,1,80,0,113,80,5,2,113,4,80,116,115,80,130,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,29,97,28,80,101,97,29],[128,109],[140,1],[80,0,80,0,80,100,80,21,24,80,15,24,80,100,80,2,26,80,20,24,80,10,24,208],[80,100,80,21,24,80,15,24,80,100,80,2,26,80,20,24,80,10,24,209],[80,100,80,2,26,80,20,24,80,10,24,80,1,25,97,21],[80,100,80,1e3,80,707,32,97,22],[80,16711680,80,255,11,97,20],[80,1,220],[80,255,221],[81,22,80,21,24,81,21,81,22,25,224],[80,0,81,22,226],[81,22,80,21,24,81,21,81,22,25,80,10,25,224],[80,0,80,5,226],[81,22,80,21,24,80,20,224],[80,0,80,5,226],[80,16711680,221],[81,22,80,21,24,80,1,25,81,21,81,22,25,80,10,25,224],[80,0,80,5,226],[81,22,80,21,24,80,1,25,80,20,224],[80,0,80,5,226],[80,0,221],[80,21,80,1,25,81,21,224],[80,100,80,1,24,80,100,16,80,1,25,226],[80,0,221],[80,0,80,100,80,1,24,226],[80,21,80,2,24,81,21,80,16711680,252],[80,100,80,21,24,80,4,25,81,21,80,255,252],[80,0],[97,23,81,22,80,1,25],[81,23,69,129,36],[81,28,81,23,2,120,24,4,81,23,80,1,24,2,113],[81,23,4,128,32],[81,22],[97,23,80,100,80,1,25],[81,23,69,129,41],[81,28,81,23,2,120,24,4,80,0,2,113],[81,23,4,128,37],[80,0,221],[80,0,80,0,224],[87,68,105,102,102,117,115,105,111,110,32,105,110,32,97,32,84,97,112,101,114,105,110,103,32,84,117,98,101,0,80,2,80,100,80,10,27,189],[141,137],[140,2],[144,2,1],[80,1,16],[98,2,1,80,50],[82,2,1,69,129,52],[80,21,80,1,25,80,80,82,2,1,25,80,0,211],[82,2,1,4,128,48],[80,0],[98,2,1,80,100],[82,2,1,69,129,57],[80,21,80,100,24,80,20,82,2,1,24,80,0,211],[82,2,1,4,128,53],[80,0],[98,2,1,80,100],[82,2,1,69,129,64],[82,2,1,80,31,66,82,2,1,80,5,29,80,0,64,10,129,62],[80,21,82,2,1,24,80,80,80,1,24,80,0,211],[80,21,82,2,1,24,80,20,80,101,24,80,0,211],[82,2,1,4,128,58],[80,0,80,50,16,226],[80,3978097,221],[80,0,80,80,80,50,25,80,100,80,15,27,25,224],[87,49,48,48,37,0,80,2,80,100,80,15,27,189],[80,0,80,80,80,100,80,15,27,25,224],[87,32,32,48,37,0,80,2,80,100,80,15,27,189],[80,0,80,20,80,100,80,11,26,80,10,27,24,224],[87,82,101,100,32,99,111,110,99,101,110,116,114,97,116,105,111,110,0,80,2,80,100,80,12,27,189],[80,16711680,221],[80,100,80,21,24,80,2,24,80,20,80,100,24,81,22,25,80,1,24,80,100,80,15,27,25,224],[81,22,80,1,25,49,80,2,80,100,80,15,27,189,147],[80,100,80,21,24,80,2,24,80,20,80,100,24,80,100,80,15,27,25,224],[87,32,32,48,0,80,2,80,100,80,15,27,189],[80,0,80,20,80,100,80,12,26,80,10,27,24,224],[87,82,101,100,32,109,111,108,101,99,117,108,101,32,99,111,117,110,116,0,80,2,80,100,80,12,27,189],[80,0,221],[80,0,80,20,80,100,80,13,26,80,10,27,24,80,5,24,224],[87,40,97,116,32,104,111,114,105,122,111,110,116,97,108,32,112,111,115,105,116,105,111,110,0,80,2,80,100,80,15,27,189],[80,0,80,20,80,100,80,14,26,80,10,27,24,80,5,24,224],[87,105,110,32,116,97,112,101,114,105,110,103,32,116,117,98,101,41,0,80,2,80,100,80,15,27,189],[145,2,141,137],[140,3],[144,3,2],[98,3,2,98,3,1],[82,3,2,129,92],[82,3,1,80,21,24,80,20,80,100,24,81,28,82,3,1,2,120,24,4,112,25,80,16711680,211],[82,3,1,80,21,24,80,80,81,28,82,3,1,2,120,24,4,112,82,3,1,80,1,24,80,50,32,25,80,3978097,211],[128,94],[82,3,1,80,21,24,80,20,80,100,24,81,28,82,3,1,2,120,24,4,112,25,80,16777215,211],[82,3,1,80,21,24,80,80,81,28,82,3,1,2,120,24,4,112,82,3,1,80,1,24,80,50,32,25,80,16777215,211],[145,3,141,137],[140,4],[144,4,2],[98,4,2,98,4,1],[81,23,80,0,136,85],[81,23,80,1,24,80,0,136,85],[82,4,2,80,16711680,64,129,104],[81,28,81,23,2,120,24,4,1,112,5,2,113],[81,28,81,23,80,1,24,2,120,24,4,1,112,4,2,113],[128,106],[81,28,81,23,2,120,24,4,1,112,4,2,113],[81,28,81,23,80,1,24,2,120,24,4,1,112,5,2,113],[81,23,80,-1,136,85],[81,23,80,1,24,80,-1,136,85],[145,4,141,137],[136,5],[136,45],[80,0],[97,23,80,100,80,1,25],[81,23,69,129,116],[81,23,80,-1,136,85],[81,23,4,128,112],[80,2500,178],[80,100,19,97,23],[80,100,19,97,24],[81,24,81,23,68,129,135],[81,21,81,24,25,97,24],[81,23,97,25],[81,24,97,26],[80,2,19,80,0,64,129,126],[84,25,1,112,4,2,113],[128,127],[84,26,1,112,5,2,113],[81,23,80,21,24,81,24,210,97,27],[81,25,80,21,24,81,26,210,81,27,11,81,20,64,129,135],[163],[81,23,80,21,24,81,24,81,25,80,21,24,81,26,210,211],[81,25,80,21,24,81,26,81,27,211],[81,25,81,23,65,129,134],[81,23,81,27,136,95],[162],[80,0,80,1,64,129,117],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Cycling colours (using MOD)",author:"University of Oxford",date:"22/09/2016",time:"18:09:40",code:"PROGRAM CycleColours;\nVAR len: integer;\n    colinc,colcode: integer;\nBEGIN\n  blank(black);\n  colinc:=random(5);\n  colcode:=random(20)+1;\n  colour(rgb(colcode));\n  len:=0;\n  thickness(16);\n  repeat\n    colcode:=(colcode+colinc) mod 20+1;\n    colour(rgb(colcode));\n    len:=len+1;\n    forward(len);\n    right(30)\n  until len>250\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:1,lines:"15"},{name:"right",level:1,count:1,lines:"16"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"8 13"},{name:"thickness",level:1,count:1,lines:"10"},{name:"rgb",level:3,count:2,lines:"8 13"}],total:5},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"5"}],total:1},{category:"General arithmetic functions",expressions:[{name:"random",level:2,count:2,lines:"6 7"}],total:2},{category:"Command structures",expressions:[{name:"repeat",level:1,count:1,lines:"11"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,8,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,0,248],[80,5,19,97,17],[80,20,19,80,1,24,97,18],[81,18,222,221],[80,0,97,16],[80,16,220],[81,18,81,17,24,80,20,29,80,1,24,97,18],[81,18,222,221],[81,16,80,1,24,97,16],[81,16,227],[80,30,230],[81,16,80,250,67,129,9],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Spiral of colours",author:"University of Oxford",date:"22/09/2016",time:"18:08:07",code:"PROGRAM ColourSpiral;\nVAR len: integer;\n\n  Procedure lineturn;\n  Begin\n    forward(len);\n    right(60)\n  End;\n\nBEGIN\n  blank(black);\n  forward(15);\n  thickness(27);\n  len:=20;\n  repeat\n    randcol(40);\n    lineturn;\n    len:=len+10\n  until len>500\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:2,lines:"6 12"},{name:"right",level:1,count:1,lines:"7"}],total:3},{category:"Other Turtle commands",expressions:[{name:"randcol",level:1,count:1,lines:"16"},{name:"thickness",level:1,count:1,lines:"13"}],total:2},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"11"}],total:1},{category:"Command structures",expressions:[{name:"repeat",level:1,count:1,lines:"15"},{name:"procedure",level:2,count:1,lines:"4"}],total:2},{category:"Subroutine calls",expressions:[{name:"lineturn",level:0,count:1,lines:"17"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,6,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,8],[140,1],[81,17,227],[80,60,230],[141,137],[80,0,248],[80,15,227],[80,27,220],[80,20,97,17],[80,40,19,4,222,221],[136,4],[81,17,80,10,24,97,17],[81,17,80,500,67,129,12],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Analogue clock (using REPEAT)",author:"University of Oxford",date:"22/09/2016",time:"18:07:03",code:"PROGRAM Clock;\nVAR hours: integer;\n    minutes: integer;\n\n  Procedure showhands;\n  Begin\n    colour(white);\n    blot(360);\n    colour(red);\n    direction(hours*30);\n    thickness(10);\n    forward(250);\n    back(250);\n    direction(minutes*6);\n    thickness(6);\n    forward(350);\n    back(350)\n  End;\n\nBEGIN\n  thickness(10);\n  circle(400);\n  hours:=0;\n  minutes:=0;\n  repeat\n    repeat\n      showhands;\n      pause(600);\n      inc(minutes)\n    until minutes=60;\n    inc(hours);\n    minutes:=0\n  until hours=12;\n  showhands\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:2,lines:"13 17"},{name:"forward",level:1,count:2,lines:"12 16"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:2,lines:"10 14"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:1,lines:"8"},{name:"circle",level:1,count:1,lines:"22"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"7 9"},{name:"thickness",level:1,count:3,lines:"11 15 21"}],total:5},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:2,lines:"29 31"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"28"}],total:1},{category:"Command structures",expressions:[{name:"repeat",level:1,count:2,lines:"25 26"},{name:"procedure",level:2,count:1,lines:"5"}],total:3},{category:"Subroutine calls",expressions:[{name:"showhands",level:0,count:2,lines:"27 34"}],total:2}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,7,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,17],[140,1],[80,16777215,221],[80,360,243],[80,16711680,221],[81,17,80,30,26,219],[80,10,220],[80,250,227],[80,250,228],[81,18,80,6,26,219],[80,6,220],[80,350,227],[80,350,228],[141,137],[80,10,220],[80,400,242],[80,0,97,17],[80,0,97,18],[136,4],[80,600,178],[84,18,1,112,4,2,113],[81,18,80,60,64,129,21],[84,17,1,112,4,2,113],[80,0,97,18],[81,17,80,12,64,129,21],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Circling circles",author:"University of Oxford",date:"22/09/2016",time:"18:05:43",code:"PROGRAM Circles;\nVAR count: integer;\nBEGIN\n  thickness(6);\n  penup;\n  blank(black);\n  colour(orange);\n  for count:=1 to 36 do\n    begin\n      forward(200);\n      circle(200);\n      back(200);\n      right(10);\n      pause(25)\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:1,lines:"12"},{name:"forward",level:1,count:1,lines:"10"},{name:"right",level:1,count:1,lines:"13"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"circle",level:1,count:1,lines:"11"}],total:1},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:1,lines:"7"},{name:"penup",level:1,count:1,lines:"5"},{name:"thickness",level:1,count:1,lines:"4"}],total:3},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"6"}],total:1},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"14"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:1,lines:"8"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,6,220],[160],[80,0,248],[80,16755200,221],[80,1],[97,16,80,36],[81,16,69,129,16],[80,200,227],[80,200,242],[80,200,228],[80,10,230],[80,25,178],[81,16,4,128,8],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Cheetahs and gazelles",author:"University of Oxford",date:"22/09/2016",time:"18:04:34",code:"PROGRAM Cheetahs;\nCONST maxanimals=500;\n      mingazelles=10;\n      startcheetahs=50;\n      startgazelles=50;\n      maxspeed=1000;\n      startslow=30;\n      startfast=70;\n      randmarginc=10;\n      randmarging=10;\n      huntingtries=100;\n      catchmargin=5;\n      cfoodadd=40;\n      cbreedfood=10;\n      cmatingratio=2;\n      gmatingratio=1;\n      chuntingratio=1;\n      slowage=100; {speed starts declining}\n      agefactor=0;\n      graphleft=60;\n      graphwidth=900;\n      graphheight=400;\n      cgraphbase=450;\n      ggraphbase=950;\n      ymax=20;\nVAR gen,cnum,gnum: integer;\n    cspeed,gspeed,cgenspeed,ggenspeed,\n      cage,gage,cfood: array[1..maxanimals] of integer;\n    cspeednum,gspeednum: array[0..maxspeed] of integer;\n\n  Procedure setup;\n  Var n: integer;\n  Begin\n    for n:=0 to maxspeed do\n      begin\n        cspeednum[n]:=0;\n        gspeednum[n]:=0\n      end;\n    cnum:=startcheetahs;\n    gnum:=startgazelles;\n    for n:=1 to cnum do\n      begin\n        cgenspeed[n]:=random(startfast+1-startslow)+startslow;\n        cspeed[n]:=cgenspeed[n];\n        cage[n]:=random(slowage);\n        cfood[n]:=random(cfoodadd)+1;\n        inc(cspeednum[cspeed[n]])\n      end;\n    for n:=cnum+1 to maxanimals do\n      cspeed[n]:=0; {i.e. not alive}\n    for n:=1 to gnum do\n      begin\n        ggenspeed[n]:=random(startfast+1-startslow)+startslow;\n        gspeed[n]:=ggenspeed[n];\n        gage[n]:=random(slowage);\n        inc(gspeednum[gspeed[n]])\n      end;\n    for n:=gnum+1 to maxanimals do\n      gspeed[n]:=0 {i.e. not alive}\n  End;\n\n  Procedure axes(graphbase: integer);\n  Var n: integer;\n      scale: integer;\n  Begin\n    colour(black);\n    setxy(graphleft,graphbase-graphheight);\n    drawxy(0,graphheight);\n    drawxy(graphwidth,0);\n    for n:=0 to 10 do\n      begin\n        setxy(20,graphbase-n*graphheight/10-19);\n        print(str(n*ymax/10),0,20)\n      end;\n    for n:=1 to 10 do\n      begin\n        setxy(graphleft+n*graphwidth/10-20,graphbase);\n        print(str(n*maxspeed/10),0,20)\n      end\n  End;\n\n  Procedure graph;\n  Var n,ctotal,gtotal: integer;\n  Begin\n    noupdate;\n    blank(white);\n    axes(450);\n    axes(950);\n    setxy(200,20);\n    colour(red);\n    print('Speed Distribution of Cheetahs',4,25);\n    setxy(750,20);\n    print(str(cnum),4,25);\n    ctotal:=0;\n    for n:=1 to maxspeed do\n      begin\n        setxy(graphleft+n*graphwidth/maxspeed,450);\n        drawxy(0,-graphheight*cspeednum[n]/ymax);\n        ctotal:=ctotal+n*cspeednum[n]\n      end;\n    setxy(200,520);\n    colour(green);\n    print('Speed Distribution of Gazelles',4,25);\n    setxy(750,520);\n    print(str(gnum),4,25);\n    gtotal:=0;\n    for n:=1 to maxspeed do\n      begin\n        setxy(graphleft+n*graphwidth/maxspeed,950);\n        drawxy(0,-graphheight*gspeednum[n]/ymax);\n        gtotal:=gtotal+n*gspeednum[n]\n      end;\n    setxy(850,20);\n    if cnum<1 then\n      begin\n        setxy(150,200);\n        colour(magenta);\n        print('All Cheetahs Have Died',4,50);\n        halt\n      end;\n    print(qstr(ctotal,cnum,2),4,25);\n    setxy(850,520);\n    print(qstr(gtotal,gnum,2),4,25);\n    update;  \n    write(str(gen));\n    write(' - c=');\n    write(str(cnum));\n    write(' (av=');\n    write(qstr(ctotal,cnum,2));\n    writeln(')');\n    update;\n    noupdate;\n    write('     g=');\n    write(str(gnum));\n    write(' (av=');\n    write(qstr(gtotal,gnum,2));\n    writeln(')')\n  End;\n\n  Procedure deadcheetah(c: integer);\n  Begin\n    dec(cspeednum[cspeed[c]]);\n    cspeed[c]:=0;\n    dec(cnum)\n  End;\n\n  Procedure deadgazelle(g: integer);\n  Begin\n    dec(gspeednum[gspeed[g]]);\n    gspeed[g]:=0;\n    dec(gnum)\n  End;\n\n  Procedure babycheetah(speed: integer);\n  Var b: integer;\n  Begin\n    b:=0;\n    repeat\n      inc(b)\n    until (cspeed[b]=0) or (b=maxanimals); {find empty space}\n    if cspeed[b]=0 then\n      begin\n        inc(cnum);\n        cgenspeed[b]:=speed+random(2*randmarginc+1)-randmarginc;\n        cgenspeed[b]:=max(1,min(maxspeed,cgenspeed[b]));\n        cspeed[b]:=cgenspeed[b];\n        cage[b]:=0;\n        cfood[b]:=cfoodadd;\n        inc(cspeednum[cspeed[b]])\n      end\n  End;\n\n  Procedure babygazelle(speed: integer);\n  Var b: integer;\n  Begin\n    b:=0;\n    repeat\n      inc(b)\n    until (gspeed[b]=0) or (b=maxanimals); {find empty space}\n    if gspeed[b]=0 then\n      begin\n        inc(gnum);\n        ggenspeed[b]:=speed+random(2*randmarging+1)-randmarging;\n        ggenspeed[b]:=max(1,min(maxspeed,ggenspeed[b]));\n        gspeed[b]:=ggenspeed[b];\n        gage[b]:=0;\n        inc(gspeednum[gspeed[b]])\n      end\n  End;\n\n  Procedure generation;\n  Var n: integer;\n      c,g,s,b: integer;\n      tries: integer;\n  Begin\n    for c:=1 to cnum/chuntingratio do {cheetahs hunt gazelles}\n      begin\n        c:=random(maxanimals)+1;\n        if (cspeed[c]>0) and (gnum>mingazelles) then\n          begin\n            tries:=0;\n            repeat\n              inc(tries);\n              g:=random(maxanimals)+1\n            until (gspeed[g]>0) or (tries=huntingtries);\n            if (gspeed[g]>0) and (cspeed[c]>=gspeed[g]+catchmargin) then\n              begin\n                deadgazelle(g);\n                cfood[c]:=cfood[c]+cfoodadd\n              end\n          end\n      end;\n    for n:=1 to cnum/cmatingratio do {cheetahs try mating}\n      begin\n        c:=random(maxanimals)+1;\n        if (cnum<maxanimals) and (cspeed[c]>0) and (cfood[c]>=cbreedfood) then\n          begin\n            babycheetah(cgenspeed[c]);\n            cfood[c]:=cfood[c]-cbreedfood\n          end\n      end;\n    for n:=1 to gnum/gmatingratio do {gazelles try mating}\n      begin\n        g:=random(maxanimals)+1;\n        if (gnum<maxanimals) and (gspeed[g]>0) then\n          babygazelle(ggenspeed[g])\n      end;\n    for n:=1 to maxanimals do\n      begin\n        if cspeed[n]>0 then {live cheetah}\n          begin\n            inc(cage[n]);\n            if cage[n]>slowage then\n              begin\n                dec(cspeednum[cspeed[n]]);\n                cspeed[n]:=cspeed[n]*agefactor/100;\n                inc(cspeednum[cspeed[n]]);\n                if cspeed[n]=0 then\n                  deadcheetah(n)\n              end;\n            dec(cfood[n]);\n            if cfood[n]<0 then\n              deadcheetah(n)\n          end;\n        if gspeed[n]>0 then {live gazelle}\n          begin\n            inc(gage[n]);\n            if gage[n]>slowage then\n              begin\n               dec(gspeednum[gspeed[n]]);\n               gspeed[n]:=gspeed[n]*agefactor/100;\n               inc(gspeednum[gspeed[n]]);\n               if gspeed[n]=0 then\n                 deadgazelle(n)\n              end\n          end\n      end\n  End;\n\nBEGIN\n  setup;\n  graph;\n  gen:=0;\n  repeat\n    inc(gen);\n    generation;\n    graph\n  until 0=1\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:4,lines:"68 69 98 110"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:12,lines:"67 72 77 89 92 97 101 104 109 113 116 122"}],total:12},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:4,lines:"66 90 102 117"}],total:4},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"86"},{name:"noupdate",level:1,count:2,lines:"85 132"},{name:"update",level:1,count:2,lines:"124 131"}],total:5},{category:"General arithmetic functions",expressions:[{name:"dec",level:1,count:7,lines:"142 144 149 151 235 241 250"},{name:"inc",level:1,count:14,lines:"47 56 159 163 169 178 182 187 203 232 237 247 252 265"},{name:"max",level:2,count:2,lines:"165 184"},{name:"min",level:2,count:2,lines:"165 184"},{name:"random",level:2,count:11,lines:"43 45 46 53 55 164 183 198 204 215 224"}],total:36},{category:"String operations",expressions:[{name:"print",level:1,count:9,lines:"73 78 91 93 103 105 118 121 123"},{name:"write",level:1,count:9,lines:"125 126 127 128 129 133 134 135 136"},{name:"writeln",level:1,count:2,lines:"130 137"}],total:20},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:7,lines:"73 78 93 105 125 127 134"},{name:"qstr",level:2,count:4,lines:"121 123 129 136"}],total:11},{category:"Input and timing routines",expressions:[{name:"halt",level:1,count:1,lines:"119"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:14,lines:"114 161 180 199 206 216 225 230 233 238 242 245 248 253"},{name:"for",level:1,count:13,lines:"34 41 49 51 58 70 75 95 107 196 213 222 228"},{name:"repeat",level:1,count:4,lines:"158 177 202 264"},{name:"procedure",level:2,count:8,lines:"31 62 82 140 147 154 173 191"}],total:39},{category:"Subroutine calls",expressions:[{name:"axes",level:0,count:2,lines:"87 88"},{name:"deadgazelle",level:0,count:2,lines:"208 254"},{name:"babycheetah",level:0,count:1,lines:"218"},{name:"babygazelle",level:0,count:1,lines:"226"},{name:"deadcheetah",level:0,count:2,lines:"239 243"},{name:"setup",level:0,count:1,lines:"261"},{name:"graph",level:0,count:2,lines:"262 267"},{name:"generation",level:0,count:1,lines:"266"}],total:12}],pcode:[[80,18,1,1,80,0,113,80,5,2,113,4,80,5528,115,80,5546,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,28,97,27,80,500,97,28],[84,530,97,529,80,500,97,530],[84,1032,97,1031,80,500,97,1032],[84,1534,97,1533,80,500,97,1534],[84,2036,97,2035,80,500,97,2036],[84,2538,97,2537,80,500,97,2538],[84,3040,97,3039,80,500,97,3040],[84,3542,97,3541,80,1001,97,3542],[84,4545,97,4544,80,1001,97,4545],[128,224],[140,1],[144,1,1],[80,0],[98,1,1,80,1e3],[82,1,1,69,129,21],[81,3541,82,1,1,2,120,24,4,80,0,2,113],[81,4544,82,1,1,2,120,24,4,80,0,2,113],[82,1,1,4,128,16],[80,50,97,25],[80,50,97,26],[80,1],[98,1,1,81,25],[82,1,1,69,129,32],[81,1031,82,1,1,80,1,25,2,120,24,4,80,70,80,1,24,80,30,25,19,80,30,24,2,113],[81,27,82,1,1,80,1,25,2,120,24,4,81,1031,82,1,1,80,1,25,2,120,24,4,112,2,113],[81,2035,82,1,1,80,1,25,2,120,24,4,80,100,19,2,113],[81,3039,82,1,1,80,1,25,2,120,24,4,80,40,19,80,1,24,2,113],[81,3541,81,27,82,1,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[82,1,1,4,128,24],[81,25,80,1,24],[98,1,1,80,500],[82,1,1,69,129,37],[81,27,82,1,1,80,1,25,2,120,24,4,80,0,2,113],[82,1,1,4,128,33],[80,1],[98,1,1,81,26],[82,1,1,69,129,45],[81,1533,82,1,1,80,1,25,2,120,24,4,80,70,80,1,24,80,30,25,19,80,30,24,2,113],[81,529,82,1,1,80,1,25,2,120,24,4,81,1533,82,1,1,80,1,25,2,120,24,4,112,2,113],[81,2537,82,1,1,80,1,25,2,120,24,4,80,100,19,2,113],[81,4544,81,529,82,1,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[82,1,1,4,128,38],[81,26,80,1,24],[98,1,1,80,500],[82,1,1,69,129,50],[81,529,82,1,1,80,1,25,2,120,24,4,80,0,2,113],[82,1,1,4,128,46],[145,1,141,137],[140,2],[144,2,3],[98,2,1],[80,0,221],[80,60,82,2,1,80,400,25,224],[80,0,80,400,226],[80,900,80,0,226],[80,0],[98,2,2,80,10],[82,2,2,69,129,64],[80,20,82,2,1,82,2,2,80,400,26,80,10,27,25,80,19,25,224],[82,2,2,80,20,26,80,10,27,49,80,0,80,20,189,147],[82,2,2,4,128,59],[80,1],[98,2,2,80,10],[82,2,2,69,129,70],[80,60,82,2,2,80,900,26,80,10,27,24,80,20,25,82,2,1,224],[82,2,2,80,1e3,26,80,10,27,49,80,0,80,20,189,147],[82,2,2,4,128,65],[145,2,141,137],[140,3],[144,3,3],[163],[80,16777215,248],[80,450,136,51],[80,950,136,51],[80,200,80,20,224],[80,16711680,221],[87,83,112,101,101,100,32,68,105,115,116,114,105,98,117,116,105,111,110,32,111,102,32,67,104,101,101,116,97,104,115,0,80,4,80,25,189],[80,750,80,20,224],[81,25,49,80,4,80,25,189,147],[80,0,98,3,2],[80,1],[98,3,1,80,1e3],[82,3,1,69,129,90],[80,60,82,3,1,80,900,26,80,1e3,27,24,80,450,224],[80,0,80,400,16,81,3541,82,3,1,2,120,24,4,112,26,80,20,27,226],[82,3,2,82,3,1,81,3541,82,3,1,2,120,24,4,112,26,24,98,3,2],[82,3,1,4,128,84],[80,200,80,520,224],[80,2263842,221],[87,83,112,101,101,100,32,68,105,115,116,114,105,98,117,116,105,111,110,32,111,102,32,71,97,122,101,108,108,101,115,0,80,4,80,25,189],[80,750,80,520,224],[81,26,49,80,4,80,25,189,147],[80,0,98,3,3],[80,1],[98,3,1,80,1e3],[82,3,1,69,129,103],[80,60,82,3,1,80,900,26,80,1e3,27,24,80,950,224],[80,0,80,400,16,81,4544,82,3,1,2,120,24,4,112,26,80,20,27,226],[82,3,3,82,3,1,81,4544,82,3,1,2,120,24,4,112,26,24,98,3,3],[82,3,1,4,128,97],[80,850,80,20,224],[81,25,80,1,66,129,109],[80,150,80,200,224],[80,16711935,221],[87,65,108,108,32,67,104,101,101,116,97,104,115,32,72,97,118,101,32,68,105,101,100,0,80,4,80,50,189],[130],[82,3,2,81,25,80,2,52,80,4,80,25,189,147],[80,850,80,520,224],[82,3,3,81,26,80,2,52,80,4,80,25,189,147],[162],[81,24,49,190,147],[87,32,45,32,99,61,0,190],[81,25,49,190,147],[87,32,40,97,118,61,0,190],[82,3,2,81,25,80,2,52,190,147],[80,41,48,190,191,147],[162],[163],[87,32,32,32,32,32,103,61,0,190],[81,26,49,190,147],[87,32,40,97,118,61,0,190],[82,3,3,81,26,80,2,52,190,147],[80,41,48,190,191,147],[145,3,141,137],[140,4],[144,4,1],[98,4,1],[81,3541,81,27,82,4,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,27,82,4,1,80,1,25,2,120,24,4,80,0,2,113],[84,25,1,112,5,2,113],[145,4,141,137],[140,5],[144,5,1],[98,5,1],[81,4544,81,529,82,5,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,529,82,5,1,80,1,25,2,120,24,4,80,0,2,113],[84,26,1,112,5,2,113],[145,5,141,137],[140,6],[144,6,2],[98,6,1],[80,0,98,6,2],[85,6,2,1,112,4,2,113],[81,27,82,6,2,80,1,25,2,120,24,4,112,80,0,64,82,6,2,80,500,64,10,129,145],[81,27,82,6,2,80,1,25,2,120,24,4,112,80,0,64,129,155],[84,25,1,112,4,2,113],[81,1031,82,6,2,80,1,25,2,120,24,4,82,6,1,80,2,80,10,26,80,1,24,19,24,80,10,25,2,113],[81,1031,82,6,2,80,1,25,2,120,24,4,80,1,80,1e3,81,1031,82,6,2,80,1,25,2,120,24,4,112,71,70,2,113],[81,27,82,6,2,80,1,25,2,120,24,4,81,1031,82,6,2,80,1,25,2,120,24,4,112,2,113],[81,2035,82,6,2,80,1,25,2,120,24,4,80,0,2,113],[81,3039,82,6,2,80,1,25,2,120,24,4,80,40,2,113],[81,3541,81,27,82,6,2,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[145,6,141,137],[140,7],[144,7,2],[98,7,1],[80,0,98,7,2],[85,7,2,1,112,4,2,113],[81,529,82,7,2,80,1,25,2,120,24,4,112,80,0,64,82,7,2,80,500,64,10,129,160],[81,529,82,7,2,80,1,25,2,120,24,4,112,80,0,64,129,169],[84,26,1,112,4,2,113],[81,1533,82,7,2,80,1,25,2,120,24,4,82,7,1,80,2,80,10,26,80,1,24,19,24,80,10,25,2,113],[81,1533,82,7,2,80,1,25,2,120,24,4,80,1,80,1e3,81,1533,82,7,2,80,1,25,2,120,24,4,112,71,70,2,113],[81,529,82,7,2,80,1,25,2,120,24,4,81,1533,82,7,2,80,1,25,2,120,24,4,112,2,113],[81,2537,82,7,2,80,1,25,2,120,24,4,80,0,2,113],[81,4544,81,529,82,7,2,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[145,7,141,137],[140,8],[144,8,6],[80,1],[98,8,2,81,25,80,1,27],[82,8,2,69,129,185],[80,500,19,80,1,24,98,8,2],[81,27,82,8,2,80,1,25,2,120,24,4,112,80,0,67,81,26,80,10,67,9,129,184],[80,0,98,8,6],[85,8,6,1,112,4,2,113],[80,500,19,80,1,24,98,8,3],[81,529,82,8,3,80,1,25,2,120,24,4,112,80,0,67,82,8,6,80,100,64,10,129,178],[81,529,82,8,3,80,1,25,2,120,24,4,112,80,0,67,81,27,82,8,2,80,1,25,2,120,24,4,112,81,529,82,8,3,80,1,25,2,120,24,4,112,80,5,24,69,9,129,184],[82,8,3,136,134],[81,3039,82,8,2,80,1,25,2,120,24,4,81,3039,82,8,2,80,1,25,2,120,24,4,112,80,40,24,2,113],[82,8,2,4,128,173],[80,1],[98,8,1,81,25,80,2,27],[82,8,1,69,129,193],[80,500,19,80,1,24,98,8,2],[81,25,80,500,66,81,27,82,8,2,80,1,25,2,120,24,4,112,80,0,67,9,81,3039,82,8,2,80,1,25,2,120,24,4,112,80,10,69,9,129,192],[81,1031,82,8,2,80,1,25,2,120,24,4,112,136,141],[81,3039,82,8,2,80,1,25,2,120,24,4,81,3039,82,8,2,80,1,25,2,120,24,4,112,80,10,25,2,113],[82,8,1,4,128,186],[80,1],[98,8,1,81,26,80,1,27],[82,8,1,69,129,200],[80,500,19,80,1,24,98,8,3],[81,26,80,500,66,81,529,82,8,3,80,1,25,2,120,24,4,112,80,0,67,9,129,199],[81,1533,82,8,3,80,1,25,2,120,24,4,112,136,156],[82,8,1,4,128,194],[80,1],[98,8,1,80,500],[82,8,1,69,129,223],[81,27,82,8,1,80,1,25,2,120,24,4,112,80,0,67,129,214],[81,2035,82,8,1,80,1,25,2,120,24,4,1,112,4,2,113],[81,2035,82,8,1,80,1,25,2,120,24,4,112,80,100,67,129,211],[81,3541,81,27,82,8,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,27,82,8,1,80,1,25,2,120,24,4,81,27,82,8,1,80,1,25,2,120,24,4,112,80,0,26,80,100,27,2,113],[81,3541,81,27,82,8,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[81,27,82,8,1,80,1,25,2,120,24,4,112,80,0,64,129,211],[82,8,1,136,127],[81,3039,82,8,1,80,1,25,2,120,24,4,1,112,5,2,113],[81,3039,82,8,1,80,1,25,2,120,24,4,112,80,0,66,129,214],[82,8,1,136,127],[81,529,82,8,1,80,1,25,2,120,24,4,112,80,0,67,129,222],[81,2537,82,8,1,80,1,25,2,120,24,4,1,112,4,2,113],[81,2537,82,8,1,80,1,25,2,120,24,4,112,80,100,67,129,222],[81,4544,81,529,82,8,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,5,2,113],[81,529,82,8,1,80,1,25,2,120,24,4,81,529,82,8,1,80,1,25,2,120,24,4,112,80,0,26,80,100,27,2,113],[81,4544,81,529,82,8,1,80,1,25,2,120,24,4,112,2,120,24,4,1,112,4,2,113],[81,529,82,8,1,80,1,25,2,120,24,4,112,80,0,64,129,222],[82,8,1,136,134],[82,8,1,4,128,201],[145,8,141,137],[136,13],[136,71],[80,0,97,24],[84,24,1,112,4,2,113],[136,170],[136,71],[80,0,80,1,64,129,227],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Brownian motion",author:"University of Oxford",date:"22/09/2016",time:"17:55:25",code:"PROGRAM BrownianMotion;\nCONST polradius=80; {pollen}\n      molradius=10;\n      hitradius=90; {polradius+molradius}\n      molecules=400;\n      slowspeed=30;\n      highspeed=50;\n      speedratio=10;\n      polcolour=blue;\n      molcolour=red;\n      halocolour=#FFFFFE;\n      delay=50;\nVAR px,py: integer;\n    pxvel,pyvel: integer;\n    mx,my,ms,md: array[1..molecules] of integer;\n    n: integer;\n\n  Procedure setup;\n  Var n: integer;\n  Begin\n    penup;\n    px:=500;\n    py:=500;\n    pxvel:=0;\n    pyvel:=0;\n    setxy(px,py);\n    colour(halocolour);\n    blot(hitradius);\n    for n:=1 to molecules do\n      begin\n        repeat\n          mx[n]:=random(1000-2*molradius)+molradius;\n          my[n]:=random(1000-2*molradius)+molradius\n        until pixcol(mx[n],my[n])=white;\n        ms[n]:=random(highspeed-slowspeed+1)+slowspeed;\n        md[n]:=random(360);\n        setxy(mx[n],my[n]);\n        blot(2*molradius)\n      end\n  End;\n\n  Procedure draw(positive: boolean);\n  Var n: integer;\n      radius: integer;\n  Begin\n    if positive then\n      begin\n        colour(molcolour);\n        radius:=molradius\n      end\n    else\n      begin\n        colour(white);\n        radius:=molradius+1\n      end;\n    for n:=1 to molecules do\n      begin\n        setxy(mx[n],my[n]);\n        blot(radius)\n      end;\n    setxy(px,py);\n    if positive then\n      begin\n        colour(polcolour);\n        blot(polradius)\n      end\n    else\n      blot(polradius+1)\n  End;\n\n  Procedure move(m: integer);\n  Var degturn: integer;\n      impact: integer;\n  Begin\n    setxy(mx[m],my[m]);\n    direction(md[m]);\n    forward(ms[m]);\n    if hypot(turtx-px,turty-py,1)<=hitradius then\n      begin\n        while hypot(turtx-px,turty-py,1)<hitradius do\n          back(1);\n        turnxy(px-turtx,py-turty);\n        degturn:=turtd-md[m];\n        md[m]:=(180+(turtd+degturn)) mod 360;\n        impact:=cos(degturn,1,ms[m]);\n        pxvel:=pxvel+sin(turtd,1,impact);\n        pyvel:=pyvel-cos(turtd,1,impact)\n      end;\n    mx[m]:=(turtx+1000) mod 1000;\n    my[m]:=(turty+1000) mod 1000\n  End;\n\nBEGIN\n  noupdate;\n  setup;\n  blank(white);\n  draw(true);\n  repeat\n    noupdate;\n    draw(false);\n    for n:=1 to molecules do\n      move(n);\n    px:=px+pxvel/speedratio;\n    py:=py+pyvel/speedratio;\n    draw(true);\n    update;\n    pause(delay)\n  until (abs(px-500)>490) or (abs(py-500)>480)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"back",level:1,count:1,lines:"81"},{name:"forward",level:1,count:1,lines:"77"}],total:2},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:1,lines:"76"},{name:"setxy",level:1,count:5,lines:"26 37 58 61 75"},{name:"turnxy",level:2,count:1,lines:"82"}],total:7},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:5,lines:"28 38 59 65 68"}],total:5},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:4,lines:"27 48 53 64"},{name:"penup",level:1,count:1,lines:"21"}],total:5},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"96"},{name:"noupdate",level:1,count:2,lines:"94 99"},{name:"update",level:1,count:1,lines:"106"},{name:"pixcol",level:3,count:1,lines:"34"}],total:5},{category:"General arithmetic functions",expressions:[{name:"abs",level:1,count:2,lines:"108"},{name:"hypot",level:2,count:2,lines:"78 80"},{name:"random",level:2,count:4,lines:"32 33 35 36"}],total:8},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:2,lines:"85 87"},{name:"sin",level:2,count:1,lines:"86"}],total:3},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"107"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:3,lines:"46 62 78"},{name:"else",level:1,count:2,lines:"51 67"},{name:"for",level:1,count:3,lines:"29 56 101"},{name:"repeat",level:1,count:2,lines:"31 98"},{name:"while",level:2,count:1,lines:"80"},{name:"procedure",level:2,count:3,lines:"18 42 71"}],total:14},{category:"Subroutine calls",expressions:[{name:"setup",level:0,count:1,lines:"95"},{name:"draw",level:0,count:3,lines:"97 100 105"},{name:"move",level:0,count:1,lines:"102"}],total:5}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,1618,115,80,1631,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,24,97,23,80,400,97,24],[84,426,97,425,80,400,97,426],[84,828,97,827,80,400,97,828],[84,1230,97,1229,80,400,97,1230],[128,71],[140,1],[144,1,1],[160],[80,500,97,19],[80,500,97,20],[80,0,97,21],[80,0,97,22],[81,19,81,20,224],[80,16777214,221],[80,90,243],[80,1],[98,1,1,80,400],[82,1,1,69,129,29],[81,23,82,1,1,80,1,25,2,120,24,4,80,1e3,80,2,80,10,26,25,19,80,10,24,2,113],[81,425,82,1,1,80,1,25,2,120,24,4,80,1e3,80,2,80,10,26,25,19,80,10,24,2,113],[81,23,82,1,1,80,1,25,2,120,24,4,112,81,425,82,1,1,80,1,25,2,120,24,4,112,210,80,16777215,64,129,21],[81,827,82,1,1,80,1,25,2,120,24,4,80,50,80,30,25,80,1,24,19,80,30,24,2,113],[81,1229,82,1,1,80,1,25,2,120,24,4,80,360,19,2,113],[81,23,82,1,1,80,1,25,2,120,24,4,112,81,425,82,1,1,80,1,25,2,120,24,4,112,224],[80,2,80,10,26,243],[82,1,1,4,128,19],[145,1,141,137],[140,2],[144,2,3],[98,2,1],[82,2,1,129,37],[80,16711680,221],[80,10,98,2,3],[128,39],[80,16777215,221],[80,10,80,1,24,98,2,3],[80,1],[98,2,2,80,400],[82,2,2,69,129,45],[81,23,82,2,2,80,1,25,2,120,24,4,112,81,425,82,2,2,80,1,25,2,120,24,4,112,224],[82,2,3,243],[82,2,2,4,128,40],[81,19,81,20,224],[82,2,1,129,50],[80,255,221],[80,80,243],[128,51],[80,80,80,1,24,243],[145,2,141,137],[140,3],[144,3,3],[98,3,1],[81,23,82,3,1,80,1,25,2,120,24,4,112,81,425,82,3,1,80,1,25,2,120,24,4,112,224],[81,1229,82,3,1,80,1,25,2,120,24,4,112,219],[81,827,82,3,1,80,1,25,2,120,24,4,112,227],[81,14,81,19,25,81,15,81,20,25,80,1,34,80,90,68,129,68],[81,14,81,19,25,81,15,81,20,25,80,1,34,80,90,66,129,62],[80,1,228],[128,59],[81,19,81,14,25,81,20,81,15,25,231],[81,16,81,1229,82,3,1,80,1,25,2,120,24,4,112,25,98,3,2],[81,1229,82,3,1,80,1,25,2,120,24,4,80,180,81,16,82,3,2,24,24,80,360,29,2,113],[82,3,2,80,1,81,827,82,3,1,80,1,25,2,120,24,4,112,42,98,3,3],[81,21,81,16,80,1,82,3,3,41,24,97,21],[81,22,81,16,80,1,82,3,3,42,25,97,22],[81,23,82,3,1,80,1,25,2,120,24,4,81,14,80,1e3,24,80,1e3,29,2,113],[81,425,82,3,1,80,1,25,2,120,24,4,81,15,80,1e3,24,80,1e3,29,2,113],[145,3,141,137],[163],[136,8],[80,16777215,248],[80,-1,136,30],[163],[80,0,136,30],[80,1],[97,1631,80,400],[81,1631,69,129,82],[81,1631,136,52],[81,1631,4,128,78],[81,19,81,21,80,10,27,24,97,19],[81,20,81,22,80,10,27,24,97,20],[80,-1,136,30],[162],[80,50,178],[81,19,80,500,25,17,80,490,67,81,20,80,500,25,17,80,480,67,10,129,75],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Bouncing ball (using variables)",author:"University of Oxford",date:"22/09/2016",time:"17:43:56",code:"PROGRAM BouncingBall;\nVAR x,y: integer;\n    xvel,yvel: integer;\nBEGIN\n  x:=100;\n  y:=700;\n  xvel:=8;\n  yvel:=-4;\n  while 0<1 do\n    begin\n      noupdate;\n      colour(white);\n      blot(51);\n      x:=x+xvel;\n      y:=y+yvel;\n      setxy(x,y);\n      colour(red);\n      blot(50);\n      update;\n      pause(10);\n      if (x<50) or (x>949) then\n        xvel:=-xvel;\n      if (y<50) or (y>949) then\n        yvel:=-yvel;\n    end\nEND.",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:1,lines:"16"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:2,lines:"13 18"}],total:2},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"12 17"}],total:2},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"11"},{name:"update",level:1,count:1,lines:"19"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"20"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:2,lines:"21 23"},{name:"while",level:2,count:1,lines:"9"}],total:3}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,9,115,80,19,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,100,97,16],[80,700,97,17],[80,8,97,18],[80,4,16,97,19],[80,0,80,1,66,129,23],[163],[80,16777215,221],[80,51,243],[81,16,81,18,24,97,16],[81,17,81,19,24,97,17],[81,16,81,17,224],[80,16711680,221],[80,50,243],[162],[80,10,178],[81,16,80,50,66,81,16,80,949,67,10,129,20],[81,18,16,97,18],[81,17,80,50,66,81,17,80,949,67,10,129,22],[81,19,16,97,19],[128,7],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Barnsley IFS",author:"University of Oxford",date:"22/09/2016",time:"17:41:59",code:"PROGRAM BarnsleyIFS;\nCONST xleft=-236;\n      xright=263;\n      ytop=1;\n      ybottom=1000;\n      scaledown=3;\n      mappings=4;\n      title='Barnsley fern';\n      live=green;\n      copied=emerald;\n      pauseval=2000;\nVAR xl,xr,yt,yb: integer;\n    coeffdiv: integer;\n    mapxx,mapxy,mapxc: array[1..mappings] of integer;\n    mapyx,mapyy,mapyc: array[1..mappings] of integer;\n    iteration,starttime: integer;\n    count,numborn,numkilled: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv:=100;\n    mapxx[1]:=0;\n    mapyx[1]:=0;\n    mapxy[1]:=0;\n    mapyy[1]:=16;\n    mapxc[1]:=0;\n    mapyc[1]:=0;\n    mapxx[2]:=85;\n    mapyx[2]:=-4;\n    mapxy[2]:=4;\n    mapyy[2]:=85;\n    mapxc[2]:=0;\n    mapyc[2]:=160;\n    mapxx[3]:=20;\n    mapyx[3]:=23;\n    mapxy[3]:=-26;\n    mapyy[3]:=22;\n    mapxc[3]:=0;\n    mapyc[3]:=160;\n    mapxx[4]:=-15;\n    mapyx[4]:=26;\n    mapxy[4]:=28;\n    mapyy[4]:=24;\n    mapxc[4]:=0;\n    mapyc[4]:=44\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl:=xleft/scaledown;\n    xr:=xright/scaledown;\n    yt:=ytop/scaledown;\n    yb:=ybottom/scaledown;\n    for i:=1 to mappings do\n      begin\n        mapxc[i]:=mapxc[i]/scaledown;\n        mapyc[i]:=mapyc[i]/scaledown\n      end\n  End;\n\n  Procedure map(a,x,y: integer;var newx,newy: integer);\n  Begin\n    newx:=divmult(x,coeffdiv,mapxx[a])+divmult(y,coeffdiv,mapxy[a])+mapxc[a];\n    newy:=divmult(x,coeffdiv,mapyx[a])+divmult(y,coeffdiv,mapyy[a])+mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x,y,newx,newy: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        if pixcol(x,y)<>white then\n          begin\n            map(mapnum,x,y,newx,newy);\n            if pixcol(newx,newy)=white then\n              inc(numborn);\n            pixset(newx,newy,copied)\n          end;\n    update\n  End;\n\n  Procedure cleanup;\n  Var x,y: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        if pixcol(x,y)=live then\n          begin\n            pixset(x,y,white);\n            inc(numkilled)\n          end\n        else\n        if pixcol(x,y)=copied then\n          pixset(x,y,live);\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl,yt,xr-xl+1,yb-yt+1);\n  resolution(xr-xl+1,yb-yt+1);\n  pixset(1,1,live);\n  iteration:=0;\n  writeln(title+' by iterative mapping');\n  timeset(0);\n  repeat\n    starttime:=time;\n    inc(iteration);\n    writeln('');\n    writeln('Iteration '+str(iteration)+':');\n    numborn:=0;\n    for count:=1 to mappings do\n      domap(count);\n    numkilled:=0;\n    cleanup;\n    writeln('  '+str(numborn)+' pixels born; '+str(numkilled)+' pixels killed');\n    writeln('  (took '+str((time-starttime)/1000)+' seconds - total '+str(time/1000)+' seconds so far)');\n    if (numborn+numkilled>0) and (pauseval>=1000) then\n      begin\n        write('  (now pausing '+qstr(pauseval,1000,1)+' seconds to allow halting if desired ...)');\n        pause(pauseval);\n        writeln('')\n      end\n  until numborn+numkilled=0;\n  writeln('FINISH - fixed point of iterative mapping has been reached')\nEND.",usage:[{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:2,lines:"71 87"},{name:"update",level:1,count:2,lines:"81 98"},{name:"canvas",level:2,count:1,lines:"104"},{name:"resolution",level:2,count:1,lines:"105"},{name:"pixcol",level:3,count:4,lines:"74 77 90 96"},{name:"pixset",level:3,count:4,lines:"79 92 97 106"}],total:14},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:3,lines:"78 93 112"},{name:"divmult",level:3,count:4,lines:"64 65"}],total:7},{category:"String operations",expressions:[{name:"write",level:1,count:1,lines:"124"},{name:"writeln",level:1,count:7,lines:"108 113 114 120 121 126 129"}],total:8},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:5,lines:"114 120 121"},{name:"qstr",level:2,count:1,lines:"124"}],total:6},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"125"},{name:"time",level:2,count:3,lines:"111 121"},{name:"timeset",level:2,count:1,lines:"109"}],total:5},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"74 77 90 96 122"},{name:"else",level:1,count:1,lines:"95"},{name:"for",level:1,count:6,lines:"55 72 73 88 89 116"},{name:"repeat",level:1,count:1,lines:"110"},{name:"procedure",level:2,count:5,lines:"19 48 62 68 84"}],total:18},{category:"Subroutine calls",expressions:[{name:"map",level:0,count:1,lines:"76"},{name:"setmaps",level:0,count:1,lines:"102"},{name:"setscale",level:0,count:1,lines:"103"},{name:"domap",level:0,count:1,lines:"117"},{name:"cleanup",level:0,count:1,lines:"119"}],total:5}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,51,115,80,66,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,27,97,26,80,4,97,27],[84,33,97,32,80,4,97,33],[84,39,97,38,80,4,97,39],[84,45,97,44,80,4,97,45],[84,51,97,50,80,4,97,51],[84,57,97,56,80,4,97,57],[128,94],[140,1],[80,100,97,25],[81,26,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,44,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,32,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,50,80,1,80,1,25,2,120,24,4,80,16,2,113],[81,38,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,56,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,26,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,44,80,2,80,1,25,2,120,24,4,80,4,16,2,113],[81,32,80,2,80,1,25,2,120,24,4,80,4,2,113],[81,50,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,38,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,56,80,2,80,1,25,2,120,24,4,80,160,2,113],[81,26,80,3,80,1,25,2,120,24,4,80,20,2,113],[81,44,80,3,80,1,25,2,120,24,4,80,23,2,113],[81,32,80,3,80,1,25,2,120,24,4,80,26,16,2,113],[81,50,80,3,80,1,25,2,120,24,4,80,22,2,113],[81,38,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,56,80,3,80,1,25,2,120,24,4,80,160,2,113],[81,26,80,4,80,1,25,2,120,24,4,80,15,16,2,113],[81,44,80,4,80,1,25,2,120,24,4,80,26,2,113],[81,32,80,4,80,1,25,2,120,24,4,80,28,2,113],[81,50,80,4,80,1,25,2,120,24,4,80,24,2,113],[81,38,80,4,80,1,25,2,120,24,4,80,0,2,113],[81,56,80,4,80,1,25,2,120,24,4,80,44,2,113],[141,137],[140,2],[144,2,1],[80,-236,80,3,27,97,21],[80,263,80,3,27,97,22],[80,1,80,3,27,97,23],[80,1e3,80,3,27,97,24],[80,1],[98,2,1,80,4],[82,2,1,69,129,49],[81,38,82,2,1,80,1,25,2,120,24,4,81,38,82,2,1,80,1,25,2,120,24,4,112,80,3,27,2,113],[81,56,82,2,1,80,1,25,2,120,24,4,81,56,82,2,1,80,1,25,2,120,24,4,112,80,3,27,2,113],[82,2,1,4,128,44],[145,2,141,137],[140,3],[144,3,5],[102,3,5,102,3,4,98,3,3,98,3,2,98,3,1],[82,3,2,81,25,81,26,82,3,1,80,1,25,2,120,24,4,112,32,82,3,3,81,25,81,32,82,3,1,80,1,25,2,120,24,4,112,32,24,81,38,82,3,1,80,1,25,2,120,24,4,112,24,99,3,4],[82,3,2,81,25,81,44,82,3,1,80,1,25,2,120,24,4,112,32,82,3,3,81,25,81,50,82,3,1,80,1,25,2,120,24,4,112,32,24,81,56,82,3,1,80,1,25,2,120,24,4,112,24,99,3,5],[145,3,141,137],[140,4],[144,4,5],[98,4,1],[163],[81,23],[98,4,3,81,24],[82,4,3,69,129,73],[81,21],[98,4,2,81,22],[82,4,2,69,129,72],[82,4,2,82,4,3,210,80,16777215,65,129,71],[82,4,1,82,4,2,82,4,3,85,4,4,85,4,5,136,50],[82,4,4,82,4,5,210,80,16777215,64,129,70],[84,65,1,112,4,2,113],[82,4,4,82,4,5,80,51543,211],[82,4,2,4,128,64],[82,4,3,4,128,61],[162],[145,4,141,137],[140,5],[144,5,2],[163],[81,23],[98,5,2,81,24],[82,5,2,69,129,92],[81,21],[98,5,1,81,22],[82,5,1,69,129,91],[82,5,1,82,5,2,210,80,2263842,64,129,88],[82,5,1,82,5,2,80,16777215,211],[84,66,1,112,4,2,113],[128,90],[82,5,1,82,5,2,210,80,51543,64,129,90],[82,5,1,82,5,2,80,2263842,211],[82,5,1,4,128,82],[82,5,2,4,128,79],[162],[145,5,141,137],[136,10],[136,37],[81,21,81,23,81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,208],[81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,209],[80,1,80,1,80,2263842,211],[80,0,97,62],[87,66,97,114,110,115,108,101,121,32,102,101,114,110,0,87,32,98,121,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,0,54,190,191],[80,0,177],[176,97,63],[84,62,1,112,4,2,113],[87,0,190,191],[87,73,116,101,114,97,116,105,111,110,32,0,81,62,49,54,80,58,48,54,190,191,147],[80,0,97,65],[80,1],[97,64,80,4],[81,64,69,129,112],[81,64,136,56],[81,64,4,128,108],[80,0,97,66],[136,75],[87,32,32,0,81,65,49,54,87,32,112,105,120,101,108,115,32,98,111,114,110,59,32,0,54,81,66,49,54,87,32,112,105,120,101,108,115,32,107,105,108,108,101,100,0,54,190,191,147],[87,32,32,40,116,111,111,107,32,0,176,81,63,25,80,1e3,27,49,54,87,32,115,101,99,111,110,100,115,32,45,32,116,111,116,97,108,32,0,54,176,80,1e3,27,49,54,87,32,115,101,99,111,110,100,115,32,115,111,32,102,97,114,41,0,54,190,191,147],[81,65,81,66,24,80,0,67,80,2e3,80,1e3,69,9,129,120],[87,32,32,40,110,111,119,32,112,97,117,115,105,110,103,32,0,80,2e3,80,1e3,80,1,52,54,87,32,115,101,99,111,110,100,115,32,116,111,32,97,108,108,111,119,32,104,97,108,116,105,110,103,32,105,102,32,100,101,115,105,114,101,100,32,46,46,46,41,0,54,190,147],[80,2e3,178],[87,0,190,191],[81,65,81,66,24,80,0,64,129,102],[87,70,73,78,73,83,72,32,45,32,102,105,120,101,100,32,112,111,105,110,116,32,111,102,32,105,116,101,114,97,116,105,118,101,32,109,97,112,112,105,110,103,32,104,97,115,32,98,101,101,110,32,114,101,97,99,104,101,100,0,190,191],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Barnsley colour",author:"University of Oxford",date:"22/09/2016",time:"23:04:59",code:"PROGRAM BarnsleyColour;\nCONST xleft=-236;\n      xright=263;\n      ytop=1;\n      ybottom=1000;\n      scaledown=3;\n      mappings=4;\n      title='Barnsley fern';\n      gridlines=5;\n      gridthick=32;    \nVAR xl,xr,yt,yb,gt: integer;\n    coeffdiv: integer;\n    mapxx,mapxy,mapxc: array[1..mappings] of integer;\n    mapyx,mapyy,mapyc: array[1..mappings] of integer;\n    count: integer;\n\n  Procedure setmaps;\n  Begin\n    coeffdiv:=100;\n    mapxx[1]:=0;\n    mapyx[1]:=0;\n    mapxy[1]:=0;\n    mapyy[1]:=16;\n    mapxc[1]:=0;\n    mapyc[1]:=0;\n    mapxx[2]:=85;\n    mapyx[2]:=-4;\n    mapxy[2]:=4;\n    mapyy[2]:=85;\n    mapxc[2]:=0;\n    mapyc[2]:=160;\n    mapxx[3]:=20;\n    mapyx[3]:=23;\n    mapxy[3]:=-26;\n    mapyy[3]:=22;\n    mapxc[3]:=0;\n    mapyc[3]:=160;\n    mapxx[4]:=-15;\n    mapyx[4]:=26;\n    mapxy[4]:=28;\n    mapyy[4]:=24;\n    mapxc[4]:=0;\n    mapyc[4]:=44\n  End;\n\n  Procedure setscale;\n  Var i: integer;\n  Begin\n    xl:=xleft/scaledown;\n    xr:=xright/scaledown;\n    yt:=ytop/scaledown;\n    yb:=ybottom/scaledown;\n    for i:=1 to mappings do\n      begin\n        mapxc[i]:=mapxc[i]/scaledown;\n        mapyc[i]:=mapyc[i]/scaledown\n      end;\n    gt:=gridthick/scaledown\n  End;\n\n  Procedure background(rad: integer);\n  Var x,y: integer;\n  Begin\n    thickness(gt);\n    colour(darkgrey);\n    for x:=1 to gridlines-1 do\n      begin\n        setxy(xl+divmult(xr-xl,gridlines,x),yt);\n        drawxy(0,yb-yt)\n      end;   \n    for y:=1 to gridlines-1 do\n      begin\n        setxy(xl+gt/2,yt+divmult(yb-yt,gridlines,y));\n        drawxy(xr-xl-gt,0)\n      end;\n    colour(black);\n    setxy(xl,yt);\n    drawxy(xr-xl,0);\n    drawxy(0,yb-yt);\n    drawxy(xl-xr,0);\n    drawxy(0,yt-yb);\n    for x:=0 to gridlines-1 do\n      for y:=0 to gridlines-1 do\n        recolour(xl+divmult(xr-xl,gridlines,x)+gt,\n                 yt+divmult(yb-yt,gridlines,y)+gt,\n                 divmult(255,gridlines-1,x)*#10000\n                 +divmult(255,gridlines-1,y)*#100\n                 +divmult(255,2*gridlines-2,2*gridlines-2-x-y)*#1)\n  End;\n\n  Procedure map(a,x,y: integer;var newx,newy: integer);\n  Begin\n    newx:=divmult(x,coeffdiv,mapxx[a])+divmult(y,coeffdiv,mapxy[a])+mapxc[a];\n    newy:=divmult(x,coeffdiv,mapyx[a])+divmult(y,coeffdiv,mapyy[a])+mapyc[a]\n  End;\n\n  Procedure domap(mapnum: integer);\n  Var x,y,newx,newy: integer;\n  Begin\n    noupdate;\n    for y:=yt to yb do\n      for x:=xl to xr do\n        begin\n          map(mapnum,x,y,newx,newy);\n          pixset(newx,newy,pixcol(x,y))\n        end;\n    update\n  End;\n\nBEGIN\n  setmaps;\n  setscale;\n  canvas(xl,yt,xr-xl+1,yb-yt+1);\n  resolution(xr-xl+1,yb-yt+1);\n  background(6);\n  writeln(title+' mappings in colour');\n  for count:=1 to mappings do\n    domap(count)\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"drawxy",level:2,count:6,lines:"69 74 78 79 80 81"}],total:6},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:3,lines:"68 73 77"}],total:3},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:2,lines:"65 76"},{name:"thickness",level:1,count:1,lines:"64"}],total:3},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:1,lines:"100"},{name:"update",level:1,count:1,lines:"107"},{name:"canvas",level:2,count:1,lines:"113"},{name:"resolution",level:2,count:1,lines:"114"},{name:"pixcol",level:3,count:1,lines:"105"},{name:"pixset",level:3,count:1,lines:"105"},{name:"recolour",level:3,count:1,lines:"84"}],total:7},{category:"General arithmetic functions",expressions:[{name:"divmult",level:3,count:11,lines:"68 73 84 85 86 87 88 93 94"}],total:11},{category:"String operations",expressions:[{name:"writeln",level:1,count:1,lines:"116"}],total:1},{category:"Command structures",expressions:[{name:"for",level:1,count:8,lines:"53 66 71 82 83 101 102 117"},{name:"procedure",level:2,count:5,lines:"17 46 61 91 97"}],total:13},{category:"Subroutine calls",expressions:[{name:"map",level:0,count:1,lines:"104"},{name:"setmaps",level:0,count:1,lines:"111"},{name:"setscale",level:0,count:1,lines:"112"},{name:"background",level:0,count:1,lines:"115"},{name:"domap",level:0,count:1,lines:"118"}],total:5}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,48,115,80,63,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,28,97,27,80,4,97,28],[84,34,97,33,80,4,97,34],[84,40,97,39,80,4,97,40],[84,46,97,45,80,4,97,46],[84,52,97,51,80,4,97,52],[84,58,97,57,80,4,97,58],[128,106],[140,1],[80,100,97,26],[81,27,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,45,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,33,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,51,80,1,80,1,25,2,120,24,4,80,16,2,113],[81,39,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,1,80,1,25,2,120,24,4,80,0,2,113],[81,27,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,45,80,2,80,1,25,2,120,24,4,80,4,16,2,113],[81,33,80,2,80,1,25,2,120,24,4,80,4,2,113],[81,51,80,2,80,1,25,2,120,24,4,80,85,2,113],[81,39,80,2,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,2,80,1,25,2,120,24,4,80,160,2,113],[81,27,80,3,80,1,25,2,120,24,4,80,20,2,113],[81,45,80,3,80,1,25,2,120,24,4,80,23,2,113],[81,33,80,3,80,1,25,2,120,24,4,80,26,16,2,113],[81,51,80,3,80,1,25,2,120,24,4,80,22,2,113],[81,39,80,3,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,3,80,1,25,2,120,24,4,80,160,2,113],[81,27,80,4,80,1,25,2,120,24,4,80,15,16,2,113],[81,45,80,4,80,1,25,2,120,24,4,80,26,2,113],[81,33,80,4,80,1,25,2,120,24,4,80,28,2,113],[81,51,80,4,80,1,25,2,120,24,4,80,24,2,113],[81,39,80,4,80,1,25,2,120,24,4,80,0,2,113],[81,57,80,4,80,1,25,2,120,24,4,80,44,2,113],[141,137],[140,2],[144,2,1],[80,-236,80,3,27,97,21],[80,263,80,3,27,97,22],[80,1,80,3,27,97,23],[80,1e3,80,3,27,97,24],[80,1],[98,2,1,80,4],[82,2,1,69,129,49],[81,39,82,2,1,80,1,25,2,120,24,4,81,39,82,2,1,80,1,25,2,120,24,4,112,80,3,27,2,113],[81,57,82,2,1,80,1,25,2,120,24,4,81,57,82,2,1,80,1,25,2,120,24,4,112,80,3,27,2,113],[82,2,1,4,128,44],[80,32,80,3,27,97,25],[145,2,141,137],[140,3],[144,3,3],[98,3,1],[81,25,220],[80,4210752,221],[80,1],[98,3,2,80,5,80,1,25],[82,3,2,69,129,62],[81,21,81,22,81,21,25,80,5,82,3,2,32,24,81,23,224],[80,0,81,24,81,23,25,226],[82,3,2,4,128,57],[80,1],[98,3,3,80,5,80,1,25],[82,3,3,69,129,68],[81,21,81,25,80,2,27,24,81,23,81,24,81,23,25,80,5,82,3,3,32,24,224],[81,22,81,21,25,81,25,25,80,0,226],[82,3,3,4,128,63],[80,0,221],[81,21,81,23,224],[81,22,81,21,25,80,0,226],[80,0,81,24,81,23,25,226],[81,21,81,22,25,80,0,226],[80,0,81,23,81,24,25,226],[80,0],[98,3,2,80,5,80,1,25],[82,3,2,69,129,83],[80,0],[98,3,3,80,5,80,1,25],[82,3,3,69,129,82],[81,21,81,22,81,21,25,80,5,82,3,2,32,24,81,25,24,81,23,81,24,81,23,25,80,5,82,3,3,32,24,81,25,24,80,255,80,5,80,1,25,82,3,2,32,80,65536,26,80,255,80,5,80,1,25,82,3,3,32,80,256,26,24,80,255,80,2,80,5,26,80,2,25,80,2,80,5,26,80,2,25,82,3,2,25,82,3,3,25,32,80,1,26,24,252],[82,3,3,4,128,78],[82,3,2,4,128,75],[145,3,141,137],[140,4],[144,4,5],[102,4,5,102,4,4,98,4,3,98,4,2,98,4,1],[82,4,2,81,26,81,27,82,4,1,80,1,25,2,120,24,4,112,32,82,4,3,81,26,81,33,82,4,1,80,1,25,2,120,24,4,112,32,24,81,39,82,4,1,80,1,25,2,120,24,4,112,24,99,4,4],[82,4,2,81,26,81,45,82,4,1,80,1,25,2,120,24,4,112,32,82,4,3,81,26,81,51,82,4,1,80,1,25,2,120,24,4,112,32,24,81,57,82,4,1,80,1,25,2,120,24,4,112,24,99,4,5],[145,4,141,137],[140,5],[144,5,5],[98,5,1],[163],[81,23],[98,5,3,81,24],[82,5,3,69,129,104],[81,21],[98,5,2,81,22],[82,5,2,69,129,103],[82,5,1,82,5,2,82,5,3,85,5,4,85,5,5,136,84],[82,5,4,82,5,5,82,5,2,82,5,3,210,211],[82,5,2,4,128,98],[82,5,3,4,128,95],[162],[145,5,141,137],[136,10],[136,37],[81,21,81,23,81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,208],[81,22,81,21,25,80,1,24,81,24,81,23,25,80,1,24,209],[80,6,136,51],[87,66,97,114,110,115,108,101,121,32,102,101,114,110,0,87,32,109,97,112,112,105,110,103,115,32,105,110,32,99,111,108,111,117,114,0,54,190,191],[80,1],[97,63,80,4],[81,63,69,129,117],[81,63,136,90],[81,63,4,128,113],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"3D colour effects",author:"University of Oxford",date:"22/09/2016",time:"17:32:53",code:"PROGRAM Balls3D;\nVAR count: integer;\nBEGIN\n  setxy(250,250);\n  colour(#00ffff);\n  for count:=240 downto 1 do\n    begin\n      blot(count);\n      turtc:=turtc+#10000\n    end;\n  right(60);\n  setxy(750,250);\n  colour(#d2691e);\n  for count:=40 downto 1 do\n    begin\n      blot(count*6);\n      forward(3);\n      turtc:=turtc+#10102\n    end;\n  setxy(250,750);\n  colour(#d2691e);\n  for count:=40 downto 1 do\n    begin\n      blot(count*6);\n      forward(3);\n      turtc:=turtc+#10102\n    end;\n  setxy(750,750);\n  colour(#ffa500);\n  for count:=80 downto 1 do\n    begin\n      blot(count*3);\n      forward(2);\n      turtc:=turtc+#101\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:3,lines:"17 25 33"},{name:"right",level:1,count:1,lines:"11"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:4,lines:"4 12 20 28"}],total:4},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:4,lines:"8 16 24 32"}],total:4},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:4,lines:"5 13 21 29"}],total:4},{category:"Command structures",expressions:[{name:"for",level:1,count:4,lines:"6 14 22 30"}],total:4}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,250,80,250,224],[80,65535,221],[80,240],[97,16,80,1],[81,16,68,129,11],[81,16,243],[81,15,80,65536,24,97,15],[81,16,5,128,6],[80,60,230],[80,750,80,250,224],[80,13789470,221],[80,40],[97,16,80,1],[81,16,68,129,21],[81,16,80,6,26,243],[80,3,227],[81,15,80,65794,24,97,15],[81,16,5,128,15],[80,250,80,750,224],[80,13789470,221],[80,40],[97,16,80,1],[81,16,68,129,30],[81,16,80,6,26,243],[80,3,227],[81,15,80,65794,24,97,15],[81,16,5,128,24],[80,750,80,750,224],[80,16753920,221],[80,80],[97,16,80,1],[81,16,68,129,39],[81,16,80,3,26,243],[80,2,227],[81,15,80,257,24,97,15],[81,16,5,128,33],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"One-dimensional cellular automata",author:"University of Oxford",date:"22/09/2016",time:"17:31:18",code:"PROGRAM Automata;\nCONST width=100;\n      height=100;\nVAR n,rule: integer;\n    x,generation: integer;\n    cellcol: array[0..1] of integer;    \n    nextstate: array[0..7] of integer;\n\n  Procedure setup(rulecode: integer);\n  Var nhood: integer;\n  Begin\n    for nhood:=0 to 7 do\n      begin\n        nextstate[nhood]:=rulecode mod 2;\n        rulecode:=rulecode div 2\n      end\n  End;\n\n  Procedure nextgen(g: integer);\n  Var x,xmod,thispix: integer;\n      n1,n2,n3: integer;\n  Begin\n    for x:=-1 to width do\n      begin\n        xmod:=(x+width) mod width;\n        thispix:=pixcol(xmod,g-1) and 1;\n        n3:=n2*2+thispix;\n        n2:=n1*2+thispix;\n        n1:=thispix;\n        if x>0 then\n          pixset(x-1,g,cellcol[nextstate[n3]])\n      end\n  End;\n\nBEGIN\n  canvas(0,0,width,height);\n  resolution(width,height);\n  cellcol[0]:=#FFFFFE;\n  cellcol[1]:=#000001;\n  for n:=4 to 45 do\n    begin\n      rule:=n*4+2;\n      setup(rule);\n      noupdate;\n      blank(white);\n      for x:=0 to width-1 do\n        pixset(x,0,cellcol[random(2)]);\n      for generation:=1 to height-1 do\n        nextgen(generation);\n      setxy(0,height-15);\n      box(25+length(str(rule))*7,14,cream,false);\n      print('Rule '+str(rule),4,8);\n      update;\n      pause(500)\n    end\nEND.",usage:[{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:1,lines:"50"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"box",level:2,count:1,lines:"51"}],total:1},{category:"Canvas operations",expressions:[{name:"blank",level:1,count:1,lines:"45"},{name:"noupdate",level:1,count:1,lines:"44"},{name:"update",level:1,count:1,lines:"53"},{name:"canvas",level:2,count:1,lines:"36"},{name:"resolution",level:2,count:1,lines:"37"},{name:"pixcol",level:3,count:1,lines:"26"},{name:"pixset",level:3,count:2,lines:"31 47"}],total:8},{category:"General arithmetic functions",expressions:[{name:"random",level:2,count:1,lines:"47"}],total:1},{category:"String operations",expressions:[{name:"print",level:1,count:1,lines:"52"},{name:"length",level:2,count:1,lines:"51"}],total:2},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:2,lines:"51 52"}],total:2},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"54"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:1,lines:"30"},{name:"for",level:1,count:5,lines:"12 23 40 46 48"},{name:"procedure",level:2,count:2,lines:"9 19"}],total:8},{category:"Subroutine calls",expressions:[{name:"setup",level:0,count:1,lines:"43"},{name:"nextgen",level:0,count:1,lines:"49"}],total:2}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,23,115,80,35,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[84,23,97,22,80,2,97,23],[84,27,97,26,80,8,97,27],[128,31],[140,1],[144,1,2],[98,1,1],[80,0],[98,1,2,80,7],[82,1,2,69,129,15],[81,26,82,1,2,2,120,24,4,82,1,1,80,2,29,2,113],[82,1,1,80,2,28,98,1,1],[82,1,2,4,128,10],[145,1,141,137],[140,2],[144,2,7],[98,2,1],[80,1,16],[98,2,2,80,100],[82,2,2,69,129,30],[82,2,2,80,100,24,80,100,29,98,2,3],[82,2,3,82,2,1,80,1,25,210,80,1,9,98,2,4],[82,2,6,80,2,26,82,2,4,24,98,2,7],[82,2,5,80,2,26,82,2,4,24,98,2,6],[82,2,4,98,2,5],[82,2,2,80,0,67,129,29],[82,2,2,80,1,25,82,2,1,81,22,81,26,82,2,7,2,120,24,4,112,2,120,24,4,112,211],[82,2,2,4,128,20],[145,2,141,137],[80,0,80,0,80,100,80,100,208],[80,100,80,100,209],[81,22,80,0,2,120,24,4,80,16777214,2,113],[81,22,80,1,2,120,24,4,80,1,2,113],[80,4],[97,18,80,45],[81,18,69,129,58],[81,18,80,4,26,80,2,24,97,19],[81,19,136,6],[163],[80,16777215,248],[80,0],[97,20,80,100,80,1,25],[81,20,69,129,47],[81,20,80,0,81,22,80,2,19,2,120,24,4,112,211],[81,20,4,128,43],[80,1],[97,21,80,100,80,1,25],[81,21,69,129,52],[81,21,136,16],[81,21,4,128,48],[80,0,80,100,80,15,25,224],[80,25,81,19,49,55,80,7,26,24,80,14,80,16777147,80,0,246,147],[87,82,117,108,101,32,0,81,19,49,54,80,4,80,8,189,147],[162],[80,500,178],[81,18,4,128,36],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Firing a cannon (automatic)",author:"University of Oxford",date:"22/09/2016",time:"17:28:51",code:"PROGRAM AutoCannon;\nCONST gunlength = 1000;\n      distancecol = green;\n      timecol = red;\nVAR n: integer;\n    steps: integer;\n\n  Procedure graphaxes;\n  Var n: integer;\n  Begin\n    thickness(5);\n    setxy(9700,600);\n    drawxy(0,3900);\n    drawxy(-9000,0); {x axis 700 to 9700}\n    drawxy(0,-3900); {y axis 4500 to 600}\n    for n:=0 to 90 do\n      if n mod 5=0 then\n        begin\n          setxy(650+n*100,4600);\n          print(str(n),2,16)\n        end;\n    for n:=0 to 9 do\n      begin\n        setxy(100,4350-n*400);\n        print(str(n*1000),2,16)\n      end;\n    for n:=0 to 9 do\n      begin\n        setxy(9900,4380-n*400);\n        print(str(n*20),2,16)\n      end;\n    setxy(4000,4900);\n    print('Angle of elevation',2,24);\n    colour(distancecol);\n    setxy(0,100);\n    print('Distance',2,24);\n    colour(timecol);\n    setxy(9600,100);\n    print('Time',2,24)\n  End;\n\n  Procedure plot(x,y,col: integer);\n  Begin\n    setxy(700+x*100,4500-y*2/5);\n    colour(col);\n    blot(40)\n  End;\n\n  Procedure aim(elevation: integer);\n  Begin\n    noupdate;\n    setxy(0,10000);\n    colour(cream);\n    blot(1600);\n    colour(yellowgreen);\n    blot(1400);\n    colour(maroon);\n    setxy(250,9750);\n    blot(250);\n    direction(90-elevation);\n    forward(gunlength);\n    setxy(250,9750);\n    colour(red);\n    blot(100);\n    update\n  End;\n\n  Procedure fire(xvel,yvel,gravity,floor: integer);\n  Begin\n    setxy(250,9750);\n    steps:=0;\n    repeat\n      inc(steps);\n      if pixcol(turtx,turty)=black then\n        begin\n          colour(white);\n          blot(80)\n        end;\n      movexy(xvel,yvel);\n      yvel:=yvel+gravity;\n      if turty>floor then\n        turty:=floor;\n      if (pixcol(turtx,turty)=white) or (turty=floor) then\n        begin\n          colour(black);\n          blot(75)\n        end;\n      update;\n      pause(10);\n      noupdate\n    until turty=floor\n  End;\n\nBEGIN\n  canvas(0,0,10500,10000);\n  graphaxes;\n  turtd:=45;\n  thickness(20);\n  for n:=0 to 90 do\n    begin\n      aim(n);\n      write('Elevation: '+str(90-turtd));\n      fire(cos(90-turtd,1,96),sin(90-turtd,1,-96),1,9950);\n      write('  Distance: '+str(turtx));\n      writeln('  Time: '+str(steps));\n      plot(90-turtd,turtx,distancecol);\n      plot(90-turtd,steps*50,timecol)\n    end\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:1,lines:"61"},{name:"drawxy",level:2,count:3,lines:"13 14 15"},{name:"movexy",level:2,count:1,lines:"79"}],total:5},{category:"Turtle: absolute movement",expressions:[{name:"direction",level:1,count:1,lines:"60"},{name:"setxy",level:1,count:12,lines:"12 19 24 29 32 35 38 44 52 58 62 70"}],total:13},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:7,lines:"46 54 56 59 64 77 86"}],total:7},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:9,lines:"34 37 45 53 55 57 63 76 85"},{name:"thickness",level:1,count:2,lines:"11 98"}],total:11},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:2,lines:"51 90"},{name:"update",level:1,count:2,lines:"65 88"},{name:"canvas",level:2,count:1,lines:"95"},{name:"pixcol",level:3,count:2,lines:"74 83"}],total:7},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:1,lines:"73"}],total:1},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:1,lines:"103"},{name:"sin",level:2,count:1,lines:"103"}],total:2},{category:"String operations",expressions:[{name:"print",level:1,count:6,lines:"20 25 30 33 36 39"},{name:"write",level:1,count:2,lines:"102 104"},{name:"writeln",level:1,count:1,lines:"105"}],total:9},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:6,lines:"20 25 30 102 104 105"}],total:6},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"89"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:4,lines:"17 74 81 83"},{name:"for",level:1,count:4,lines:"16 22 27 99"},{name:"repeat",level:1,count:1,lines:"72"},{name:"procedure",level:2,count:4,lines:"8 42 49 68"}],total:13},{category:"Subroutine calls",expressions:[{name:"graphaxes",level:0,count:1,lines:"96"},{name:"aim",level:0,count:1,lines:"101"},{name:"fire",level:0,count:1,lines:"103"},{name:"plot",level:0,count:2,lines:"106 107"}],total:5}],pcode:[[80,14,1,1,80,0,113,80,5,2,113,4,80,7,115,80,21,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,86],[140,1],[144,1,1],[80,5,220],[80,9700,80,600,224],[80,0,80,3900,226],[80,9e3,16,80,0,226],[80,0,80,3900,16,226],[80,0],[98,1,1,80,90],[82,1,1,69,129,18],[82,1,1,80,5,29,80,0,64,129,17],[80,650,82,1,1,80,100,26,24,80,4600,224],[82,1,1,49,80,2,80,16,189,147],[82,1,1,4,128,12],[80,0],[98,1,1,80,9],[82,1,1,69,129,24],[80,100,80,4350,82,1,1,80,400,26,25,224],[82,1,1,80,1e3,26,49,80,2,80,16,189,147],[82,1,1,4,128,19],[80,0],[98,1,1,80,9],[82,1,1,69,129,30],[80,9900,80,4380,82,1,1,80,400,26,25,224],[82,1,1,80,20,26,49,80,2,80,16,189,147],[82,1,1,4,128,25],[80,4e3,80,4900,224],[87,65,110,103,108,101,32,111,102,32,101,108,101,118,97,116,105,111,110,0,80,2,80,24,189],[80,2263842,221],[80,0,80,100,224],[87,68,105,115,116,97,110,99,101,0,80,2,80,24,189],[80,16711680,221],[80,9600,80,100,224],[87,84,105,109,101,0,80,2,80,24,189],[145,1,141,137],[140,2],[144,2,3],[98,2,3,98,2,2,98,2,1],[80,700,82,2,1,80,100,26,24,80,4500,82,2,2,80,2,26,80,5,27,25,224],[82,2,3,221],[80,40,243],[145,2,141,137],[140,3],[144,3,1],[98,3,1],[163],[80,0,80,1e4,224],[80,16777147,221],[80,1600,243],[80,11193395,221],[80,1400,243],[80,8388608,221],[80,250,80,9750,224],[80,250,243],[80,90,82,3,1,25,219],[80,1e3,227],[80,250,80,9750,224],[80,16711680,221],[80,100,243],[162],[145,3,141,137],[140,4],[144,4,4],[98,4,4,98,4,3,98,4,2,98,4,1],[80,250,80,9750,224],[80,0,97,21],[84,21,1,112,4,2,113],[81,15,81,16,210,80,0,64,129,74],[80,16777215,221],[80,80,243],[82,4,1,82,4,2,225],[82,4,2,82,4,3,24,98,4,2],[81,16,82,4,4,67,129,78],[82,4,4,97,16],[81,15,81,16,210,80,16777215,64,81,16,82,4,4,64,10,129,81],[80,0,221],[80,75,243],[162],[80,10,178],[163],[81,16,82,4,4,64,129,70],[145,4,141,137],[80,0,80,0,80,10500,80,1e4,208],[136,4],[80,45,97,17],[80,20,220],[80,0],[97,20,80,90],[81,20,69,129,101],[81,20,136,46],[87,69,108,101,118,97,116,105,111,110,58,32,0,80,90,81,17,25,49,54,190,147],[80,90,81,17,25,80,1,80,96,42,80,90,81,17,25,80,1,80,96,16,41,80,1,80,9950,136,65],[87,32,32,68,105,115,116,97,110,99,101,58,32,0,81,15,49,54,190,147],[87,32,32,84,105,109,101,58,32,0,81,21,49,54,190,191,147],[80,90,81,17,25,81,15,80,2263842,136,39],[80,90,81,17,25,81,21,80,50,26,80,16711680,136,39],[81,20,4,128,91],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Asking for typed input",author:"University of Oxford",date:"29/09/2016",time:"16:56:56",code:"PROGRAM AskInput;\nVAR s: string;\nBEGIN\n  writeln('What is your name?');\n  s:=readln;\n  writeln('');\n  writeln('Hello, '+s+',');\n  writeln('How are you?')\nEND.",usage:[{category:"String operations",expressions:[{name:"writeln",level:1,count:4,lines:"4 6 7 8"}],total:4},{category:"Input and timing routines",expressions:[{name:"readln",level:1,count:1,lines:"5"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[87,87,104,97,116,32,105,115,32,121,111,117,114,32,110,97,109,101,63,0,190,191],[188,97,16,146],[87,0,190,191],[87,72,101,108,108,111,44,32,0,81,16,54,80,44,48,54,190,191,147],[87,72,111,119,32,97,114,101,32,121,111,117,63,0,190,191],[130]]}},function(e,n){e.exports={format:1,language:"Pascal",version:11,name:"Firing a cannon (manual)",author:"University of Oxford",date:"22/09/2016",time:"17:24:47",code:"PROGRAM AimCannon;\nCONST gunlength = 1000;\n      distancecol = green;\n      timecol = red;\nVAR n: integer;\n    steps: integer;\n\n  Procedure graphaxes;\n  Var n: integer;\n  Begin\n    thickness(5);\n    setxy(9700,600);\n    drawxy(0,3900);\n    drawxy(-9000,0); {x axis 700 to 9700}\n    drawxy(0,-3900); {y axis 4500 to 600}\n    for n:=0 to 90 do\n      if n mod 5=0 then\n        begin\n          setxy(650+n*100,4600);\n          print(str(n),2,16)\n        end;\n    for n:=0 to 9 do\n      begin\n        setxy(100,4350-n*400);\n        print(str(n*1000),2,16)\n      end;\n    for n:=0 to 9 do\n      begin\n        setxy(9900,4380-n*400);\n        print(str(n*20),2,16)\n      end;\n    setxy(4000,4900);\n    print('Angle of elevation',2,24);\n    colour(distancecol);\n    setxy(0,100);\n    print('Distance',2,24);\n    colour(timecol);\n    setxy(9600,100);\n    print('Time',2,24)\n  End;\n\n  Procedure plot(x,y,col: integer);\n  Begin\n    setxy(700+x*100,4500-y*2/5);\n    colour(col);\n    blot(40)\n  End;\n\n  Procedure aim;\n  Begin\n    repeat\n      noupdate;\n      setxy(0,10000);\n      colour(cream);\n      blot(1600);\n      colour(yellowgreen);\n      blot(1400);\n      colour(maroon);\n      setxy(250,9750);\n      blot(250);\n      forward(gunlength);\n      setxy(250,9750);\n      colour(red);\n      blot(100);\n      update;\n      repeat\n      until (?lmouse>0);\n      if pixcol(?mousex,?mousey)=cream then\n        turnxy(?mousex-250,?mousey-9750)\n    until pixcol(?mousex,?mousey)=red\n  End;\n\n  Procedure fire(xvel,yvel,gravity,floor: integer);\n  Begin\n    setxy(250,9750);\n    steps:=0;\n    repeat\n      inc(steps);\n      if pixcol(turtx,turty)=black then\n        begin\n          colour(white);\n          blot(80)\n        end;\n      movexy(xvel,yvel);\n      yvel:=yvel+gravity;\n      if turty>floor then\n        turty:=floor;\n      if (pixcol(turtx,turty)=white) or (turty=floor) then\n        begin\n          colour(black);\n          blot(75)\n        end;\n      update;\n      pause(10);\n      noupdate\n    until turty=floor\n  End;\n\nBEGIN\n  canvas(0,0,10500,10000);\n  graphaxes;\n  turtd:=45;\n  thickness(20);\n  repeat\n    aim;\n    write('Elevation: '+str(90-turtd));\n    fire(cos(90-turtd,1,96),sin(90-turtd,1,-96),1,9950);\n    write('  Distance: '+str(turtx));\n    writeln('  Time: '+str(steps));\n    plot(90-turtd,turtx,distancecol);\n    plot(90-turtd,steps*50,timecol)\n  until 0=1\nEND.",usage:[{category:"Turtle: relative movement",expressions:[{name:"forward",level:1,count:1,lines:"61"},{name:"drawxy",level:2,count:3,lines:"13 14 15"},{name:"movexy",level:2,count:1,lines:"84"}],total:5},{category:"Turtle: absolute movement",expressions:[{name:"setxy",level:1,count:12,lines:"12 19 24 29 32 35 38 44 53 59 62 75"},{name:"turnxy",level:2,count:1,lines:"69"}],total:13},{category:"Turtle: drawing shapes",expressions:[{name:"blot",level:1,count:7,lines:"46 55 57 60 64 82 91"}],total:7},{category:"Other Turtle commands",expressions:[{name:"colour",level:1,count:9,lines:"34 37 45 54 56 58 63 81 90"},{name:"thickness",level:1,count:2,lines:"11 103"}],total:11},{category:"Canvas operations",expressions:[{name:"noupdate",level:1,count:2,lines:"52 95"},{name:"update",level:1,count:2,lines:"65 93"},{name:"canvas",level:2,count:1,lines:"100"},{name:"pixcol",level:3,count:4,lines:"68 70 79 88"}],total:9},{category:"General arithmetic functions",expressions:[{name:"inc",level:1,count:1,lines:"78"}],total:1},{category:"Trig / exp / log functions",expressions:[{name:"cos",level:2,count:1,lines:"107"},{name:"sin",level:2,count:1,lines:"107"}],total:2},{category:"String operations",expressions:[{name:"print",level:1,count:6,lines:"20 25 30 33 36 39"},{name:"write",level:1,count:2,lines:"106 108"},{name:"writeln",level:1,count:1,lines:"109"}],total:9},{category:"Type conversion routines",expressions:[{name:"str",level:1,count:6,lines:"20 25 30 106 108 109"}],total:6},{category:"Input and timing routines",expressions:[{name:"pause",level:1,count:1,lines:"94"}],total:1},{category:"Command structures",expressions:[{name:"if",level:1,count:5,lines:"17 68 79 86 88"},{name:"for",level:1,count:3,lines:"16 22 27"},{name:"repeat",level:1,count:4,lines:"51 66 77 104"},{name:"procedure",level:2,count:4,lines:"8 42 49 73"}],total:16},{category:"Subroutine calls",expressions:[{name:"graphaxes",level:0,count:1,lines:"101"},{name:"aim",level:0,count:1,lines:"105"},{name:"fire",level:0,count:1,lines:"107"},{name:"plot",level:0,count:2,lines:"110 111"}],total:5}],pcode:[[80,14,1,1,80,0,113,80,5,2,113,4,80,7,115,80,21,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,87],[140,1],[144,1,1],[80,5,220],[80,9700,80,600,224],[80,0,80,3900,226],[80,9e3,16,80,0,226],[80,0,80,3900,16,226],[80,0],[98,1,1,80,90],[82,1,1,69,129,18],[82,1,1,80,5,29,80,0,64,129,17],[80,650,82,1,1,80,100,26,24,80,4600,224],[82,1,1,49,80,2,80,16,189,147],[82,1,1,4,128,12],[80,0],[98,1,1,80,9],[82,1,1,69,129,24],[80,100,80,4350,82,1,1,80,400,26,25,224],[82,1,1,80,1e3,26,49,80,2,80,16,189,147],[82,1,1,4,128,19],[80,0],[98,1,1,80,9],[82,1,1,69,129,30],[80,9900,80,4380,82,1,1,80,400,26,25,224],[82,1,1,80,20,26,49,80,2,80,16,189,147],[82,1,1,4,128,25],[80,4e3,80,4900,224],[87,65,110,103,108,101,32,111,102,32,101,108,101,118,97,116,105,111,110,0,80,2,80,24,189],[80,2263842,221],[80,0,80,100,224],[87,68,105,115,116,97,110,99,101,0,80,2,80,24,189],[80,16711680,221],[80,9600,80,100,224],[87,84,105,109,101,0,80,2,80,24,189],[145,1,141,137],[140,2],[144,2,3],[98,2,3,98,2,2,98,2,1],[80,700,82,2,1,80,100,26,24,80,4500,82,2,2,80,2,26,80,5,27,25,224],[82,2,3,221],[80,40,243],[145,2,141,137],[140,3],[163],[80,0,80,1e4,224],[80,16777147,221],[80,1600,243],[80,11193395,221],[80,1400,243],[80,8388608,221],[80,250,80,9750,224],[80,250,243],[80,1e3,227],[80,250,80,9750,224],[80,16711680,221],[80,100,243],[162],[80,-1,184,80,0,67,129,61],[80,-7,184,80,-8,184,210,80,16777147,64,129,64],[80,-7,184,80,250,25,80,-8,184,80,9750,25,231],[80,-7,184,80,-8,184,210,80,16711680,64,129,47],[141,137],[140,4],[144,4,4],[98,4,4,98,4,3,98,4,2,98,4,1],[80,250,80,9750,224],[80,0,97,21],[84,21,1,112,4,2,113],[81,15,81,16,210,80,0,64,129,75],[80,16777215,221],[80,80,243],[82,4,1,82,4,2,225],[82,4,2,82,4,3,24,98,4,2],[81,16,82,4,4,67,129,79],[82,4,4,97,16],[81,15,81,16,210,80,16777215,64,81,16,82,4,4,64,10,129,82],[80,0,221],[80,75,243],[162],[80,10,178],[163],[81,16,82,4,4,64,129,71],[145,4,141,137],[80,0,80,0,80,10500,80,1e4,208],[136,4],[80,45,97,17],[80,20,220],[136,46],[87,69,108,101,118,97,116,105,111,110,58,32,0,80,90,81,17,25,49,54,190,147],[80,90,81,17,25,80,1,80,96,42,80,90,81,17,25,80,1,80,96,16,41,80,1,80,9950,136,66],[87,32,32,68,105,115,116,97,110,99,101,58,32,0,81,15,49,54,190,147],[87,32,32,84,105,109,101,58,32,0,81,21,49,54,190,191,147],[80,90,81,17,25,81,15,80,2263842,136,39],[80,90,81,17,25,81,21,80,50,26,80,16711680,136,39],[80,0,80,1,64,129,91],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Text and arrow (using PRINT)",author:"Oxford University",date:"18/04/2016",time:"21:57:38",code:'REM YouAreHere\n\nCOLOUR(RED)\nBLOT(20)\nCOLOUR(VIOLET)\nPRINT("You are here",4,36)\nSETXY(790,540)\nCOLOUR(BLUE)\nDRAWXY(40,0)\nDRAWXY(28,-28)\nDRAWXY(0,-40)\nDRAWXY(-28,-28)\nDRAWXY(-40,0)\nSETXY(500,500)\nSETXY(530,480)\nSETXY(535,505)\nSETXY(500,500)\nPOLYLINE(5)\nPOLYGON(3)\nEND',usage:[{category:"Turtle: relative movement",expressions:[{name:"DRAWXY",level:2,count:5,lines:"9 10 11 12 13"}],total:5},{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:5,lines:"7 14 15 16 17"}],total:5},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:1,lines:"4"},{name:"POLYGON",level:2,count:1,lines:"19"},{name:"POLYLINE",level:2,count:1,lines:"18"}],total:3},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:3,lines:"3 5 8"}],total:3},{category:"String operations",expressions:[{name:"PRINT",level:1,count:1,lines:"6"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,5,115,80,15,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,16711680,221],[80,20,243],[80,9055202,221],[87,89,111,117,32,97,114,101,32,104,101,114,101,0,80,4,80,36,61],[80,790,80,540,224],[80,255,221],[80,40,80,0,226],[80,28,80,28,16,226],[80,0,80,40,16,226],[80,28,16,80,28,16,226],[80,40,16,80,0,226],[80,500,80,500,224],[80,530,80,480,224],[80,535,80,505,224],[80,500,80,500,224],[80,5,240],[80,3,241],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Wave superposer",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Young's two-slit experiment",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Moving ball (using the Turtle)",author:"Oxford University",date:"18/04/2016",time:"22:45:26",code:"REM TurtleMove\n\nSETXY(100,700)\nFOR count%=1 TO 100\n  NOUPDATE\n  COLOUR(WHITE)\n  BLOT(51)\n  MOVEXY(8,-4)\n  COLOUR(RED)\n  BLOT(50)\n  UPDATE\n  PAUSE(5)\nNEXT\nEND",usage:[{category:"Turtle: relative movement",expressions:[{name:"MOVEXY",level:2,count:1,lines:"8"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:1,lines:"3"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:2,lines:"7 10"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"6 9"}],total:2},{category:"Canvas operations",expressions:[{name:"NOUPDATE",level:1,count:1,lines:"5"},{name:"UPDATE",level:1,count:1,lines:"11"}],total:2},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"12"}],total:1},{category:"Command structures",expressions:[{name:"FOR",level:1,count:1,lines:"4"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,100,80,700,224],[80,1],[97,16,80,100],[81,16,69,129,16],[163],[80,16777215,221],[80,51,243],[80,8,80,4,16,225],[80,16711680,221],[80,50,243],[162],[80,5,178],[81,16,4,128,5],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Bouncing ball (using the Turtle)",author:"Oxford University",date:"18/04/2016",time:"22:49:25",code:"REM TurtleBounce\n\nSETXY(100,700)\nxvel%=8\nyvel%=-4\nWHILE 0<1\n  NOUPDATE\n  COLOUR(WHITE)\n  BLOT(51)\n  MOVEXY(xvel%,yvel%)\n  COLOUR(RED)\n  BLOT(50)\n  UPDATE\n  PAUSE(5)\n  IF (TURTX%<50) OR (TURTX%>949) THEN\n    xvel%=-xvel%\n  ENDIF\n  IF (TURTY%<50) OR (TURTY%>949) THEN\n    yvel%=-yvel%\n  ENDIF\nENDWHILE\nEND",usage:[{category:"Turtle: relative movement",expressions:[{name:"MOVEXY",level:2,count:1,lines:"10"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:1,lines:"3"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:2,lines:"9 12"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"8 11"}],total:2},{category:"Canvas operations",expressions:[{name:"NOUPDATE",level:1,count:1,lines:"7"},{name:"UPDATE",level:1,count:1,lines:"13"}],total:2},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"14"}],total:1},{category:"Command structures",expressions:[{name:"IF",level:1,count:2,lines:"15 18"},{name:"WHILE",level:2,count:1,lines:"6"}],total:3}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,7,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,100,80,700,224],[80,8,97,16],[80,4,16,97,17],[80,0,80,1,66,129,20],[163],[80,16777215,221],[80,51,243],[81,16,81,17,225],[80,16711680,221],[80,50,243],[162],[80,5,178],[81,11,80,50,66,81,11,80,949,67,10,129,17],[81,16,16,97,16],[81,12,80,50,66,81,12,80,949,67,10,129,19],[81,17,16,97,17],[128,6],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Trigonometric graphs",author:"Oxford University",date:"18/04/2016",time:"22:24:35",code:'REM TrigGraphs\n\nXORIGIN%=500\nYORIGIN%=500\nHALFWIDTH%=400\nYSCALE%=200\nPROCaxes\nNOUPDATE\nTHICKNESS(4)\nCOLOUR(GREEN)\nSETXY(20,800)\nPRINT("sine",16,40)\nPROCsinecurve\nCOLOUR(RED)\nSETXY(20,860)\nPRINT("cosine",16,40)\nPROCcosinecurve\nCOLOUR(BLUE)\nSETXY(20,920)\nPRINT("tangent",16,40)\nPROCtancurve\nEND\n\nDEF PROCaxes\n  THICKNESS(3)\n  SETXY(XORIGIN%-HALFWIDTH%,YORIGIN%)\n  DRAWXY(HALFWIDTH%*2,0)\n  SETXY(XORIGIN%,0)\n  DRAWXY(0,1000)\n  SETXY(XORIGIN%,YORIGIN%)\n  CIRCLE(15)\n  THICKNESS(2)\n  SETXY(XORIGIN%-HALFWIDTH%,YORIGIN%-YSCALE%)\n  DRAWXY(HALFWIDTH%*2,0)\n  SETXY(XORIGIN%-HALFWIDTH%,YORIGIN%+YSCALE%)\n  DRAWXY(HALFWIDTH%*2,0)\n  SETXY(XORIGIN%+HALFWIDTH%+10,YORIGIN%-YSCALE%-18)\n  PRINT("+1",0,20)\n  SETXY(XORIGIN%+HALFWIDTH%+10,YORIGIN%+YSCALE%-18)\n  PRINT("-1",0,20)\n  SETXY(XORIGIN%-HALFWIDTH%-60,YORIGIN%)\n  PRINT("-180",0,20)\n  SETXY(XORIGIN%-HALFWIDTH%/2,YORIGIN%)\n  PRINT("-90",0,20)\n  SETXY(XORIGIN%+HALFWIDTH%/2-30,YORIGIN%)\n  PRINT("90",0,20)\n  SETXY(XORIGIN%+HALFWIDTH%,YORIGIN%)\n  PRINT("180",0,20)\nENDPROC\n\nDEF PROCsinecurve\n  LOCAL degrees%,x%,y%\n  FOR degrees%=-180 TO 180\n    x%=XORIGIN%+DIVMULT(degrees%,180,HALFWIDTH%)\n    y%=YORIGIN%-SIN(degrees%,1,YSCALE%)\n    SETXY(x%,y%)\n  NEXT\n  POLYLINE(361)\nENDPROC\n\nDEF PROCcosinecurve\n  LOCAL degrees%,x%,y%\n  FOR degrees%=-180 TO 180\n    x%=XORIGIN%+DIVMULT(degrees%,180,HALFWIDTH%)\n    y%=YORIGIN%-COS(degrees%,1,YSCALE%)\n    SETXY(x%,y%)\n  NEXT\n  POLYLINE(361)\nENDPROC\n\nDEF PROCtancurve\n  LOCAL degrees%,x%,y%\n  FOR degrees%=-180 TO 180\n    IF degrees%=-90 THEN\n      POLYLINE(90)\n    ELSE\n      IF degrees%=90 THEN\n        POLYLINE(179)\n      ELSE\n        x%=XORIGIN%+DIVMULT(degrees%,180,HALFWIDTH%)\n        y%=YORIGIN%-TAN(degrees%,1,YSCALE%)\n        SETXY(x%,y%)\n      ENDIF\n    ENDIF\n  NEXT\n  POLYLINE(90)\nENDPROC',usage:[{category:"Turtle: relative movement",expressions:[{name:"DRAWXY",level:2,count:4,lines:"27 29 34 36"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:17,lines:"11 15 19 26 28 30 33 35 37 39 41 43 45 47 56 66 82"}],total:17},{category:"Turtle: drawing shapes",expressions:[{name:"CIRCLE",level:1,count:1,lines:"31"},{name:"POLYLINE",level:2,count:5,lines:"58 68 75 78 86"}],total:6},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:3,lines:"10 14 18"},{name:"THICKNESS",level:1,count:3,lines:"9 25 32"}],total:6},{category:"Canvas operations",expressions:[{name:"NOUPDATE",level:1,count:1,lines:"8"}],total:1},{category:"General arithmetic functions",expressions:[{name:"DIVMULT",level:3,count:3,lines:"54 64 80"}],total:3},{category:"Trig / exp / log functions",expressions:[{name:"COS",level:2,count:1,lines:"65"},{name:"SIN",level:2,count:1,lines:"55"},{name:"TAN",level:2,count:1,lines:"81"}],total:3},{category:"String operations",expressions:[{name:"PRINT",level:1,count:9,lines:"12 16 20 38 40 42 44 46 48"}],total:9},{category:"Command structures",expressions:[{name:"IF",level:1,count:2,lines:"74 77"},{name:"ELSE",level:1,count:2,lines:"76 79"},{name:"FOR",level:1,count:3,lines:"53 63 73"},{name:"DEF PROC",level:2,count:4,lines:"24 51 61 71"}],total:11},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:3,lines:"52 62 72"}],total:3},{category:"Subroutine calls",expressions:[{name:"PROCaxes",level:0,count:1,lines:"7"},{name:"PROCsinecurve",level:0,count:1,lines:"13"},{name:"PROCcosinecurve",level:0,count:1,lines:"17"},{name:"PROCtancurve",level:0,count:1,lines:"21"}],total:4}],pcode:[[80,14,1,1,80,0,113,80,5,2,113,4,80,9,115,80,23,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,69],[140,1],[80,3,220],[81,20,81,22,25,81,21,224],[81,22,80,2,26,80,0,226],[81,20,80,0,224],[80,0,80,1e3,226],[81,20,81,21,224],[80,15,242],[80,2,220],[81,20,81,22,25,81,21,81,23,25,224],[81,22,80,2,26,80,0,226],[81,20,81,22,25,81,21,81,23,24,224],[81,22,80,2,26,80,0,226],[81,20,81,22,24,80,10,24,81,21,81,23,25,80,18,25,224],[87,43,49,0,80,0,80,20,61],[81,20,81,22,24,80,10,24,81,21,81,23,24,80,18,25,224],[87,45,49,0,80,0,80,20,61],[81,20,81,22,25,80,60,25,81,21,224],[87,45,49,56,48,0,80,0,80,20,61],[81,20,81,22,80,2,27,25,81,21,224],[87,45,57,48,0,80,0,80,20,61],[81,20,81,22,80,2,27,24,80,30,25,81,21,224],[87,57,48,0,80,0,80,20,61],[81,20,81,22,24,81,21,224],[87,49,56,48,0,80,0,80,20,61],[141,137],[140,2],[144,2,3],[80,180,16],[98,2,1,80,180],[82,2,1,69,129,39],[81,20,82,2,1,80,180,81,22,32,24,98,2,2],[81,21,82,2,1,80,1,81,23,41,25,98,2,3],[82,2,2,82,2,3,224],[82,2,1,4,128,33],[80,361,240],[145,2,141,137],[140,3],[144,3,3],[80,180,16],[98,3,1,80,180],[82,3,1,69,129,50],[81,20,82,3,1,80,180,81,22,32,24,98,3,2],[81,21,82,3,1,80,1,81,23,42,25,98,3,3],[82,3,2,82,3,3,224],[82,3,1,4,128,44],[80,361,240],[145,3,141,137],[140,4],[144,4,3],[80,180,16],[98,4,1,80,180],[82,4,1,69,129,67],[82,4,1,80,90,16,64,129,60],[80,90,240],[128,66],[82,4,1,80,90,64,129,63],[80,179,240],[128,66],[81,20,82,4,1,80,180,81,22,32,24,98,4,2],[81,21,82,4,1,80,1,81,23,43,25,98,4,3],[82,4,2,82,4,3,224],[82,4,1,4,128,55],[80,90,240],[145,4,141,137],[80,500,97,20],[80,500,97,21],[80,400,97,22],[80,200,97,23],[136,4],[163],[80,4,220],[80,2263842,221],[80,20,80,800,224],[87,115,105,110,101,0,80,16,80,40,61],[136,30],[80,16711680,221],[80,20,80,860,224],[87,99,111,115,105,110,101,0,80,16,80,40,61],[136,41],[80,255,221],[80,20,80,920,224],[87,116,97,110,103,101,110,116,0,80,16,80,40,61],[136,52],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Recursive triangles",author:"Oxford University",date:"18/04/2016",time:"22:14:06",code:"REM Triangles\n\nMOVEXY(-100,150)\nPROCtriangle(256)\nEND\n\nDEF PROCtriangle(size%)\n  IF size%>=2 THEN\n    FORWARD(size%)\n    PROCtriangle(size%/2)\n    RIGHT(120)\n    FORWARD(size%)\n    PROCtriangle(size%/2)\n    RIGHT(120)\n    FORWARD(size%)\n    PROCtriangle(size%/2)\n    RIGHT(120)\n  ENDIF\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"FORWARD",level:1,count:3,lines:"9 12 15"},{name:"RIGHT",level:1,count:3,lines:"11 14 17"},{name:"MOVEXY",level:2,count:1,lines:"3"}],total:7},{category:"Command structures",expressions:[{name:"IF",level:1,count:1,lines:"8"},{name:"DEF PROC",level:2,count:1,lines:"7"}],total:2},{category:"Subroutine calls",expressions:[{name:"PROCtriangle",level:0,count:4,lines:"4 10 13 16"}],total:4}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,18],[140,1],[144,1,1],[98,1,1],[82,1,1,80,2,69,129,17],[82,1,1,227],[82,1,1,80,2,27,136,4],[80,120,230],[82,1,1,227],[82,1,1,80,2,27,136,4],[80,120,230],[82,1,1,227],[82,1,1,80,2,27,136,4],[80,120,230],[145,1,141,137],[80,100,16,80,150,225],[80,256,136,4],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Sierpinski triangle",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"The plough constellation",author:"Oxford University",date:"16/04/2016",time:"15:58:10",code:"REM ThePlough\n\nBLANK(BLACK)\nCOLOUR(LIGHTBLUE)\nSETXY(100,200)\nBLOT(10)\nSETXY(300,250)\nBLOT(10)\nSETXY(420,350)\nBLOT(10)\nSETXY(570,490)\nBLOT(10)\nSETXY(900,560)\nBLOT(10)\nSETXY(840,720)\nBLOT(10)\nSETXY(590,660)\nBLOT(10)\nSETXY(570,490)\nCOLOUR(SILVER)\nPOLYLINE(8)\nEND",usage:[{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:8,lines:"5 7 9 11 13 15 17 19"}],total:8},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:7,lines:"6 8 10 12 14 16 18"},{name:"POLYLINE",level:2,count:1,lines:"21"}],total:8},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"4 20"}],total:2},{category:"Canvas operations",expressions:[{name:"BLANK",level:1,count:1,lines:"3"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,5,115,80,15,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,0,248],[80,10075135,221],[80,100,80,200,224],[80,10,243],[80,300,80,250,224],[80,10,243],[80,420,80,350,224],[80,10,243],[80,570,80,490,224],[80,10,243],[80,900,80,560,224],[80,10,243],[80,840,80,720,224],[80,10,243],[80,590,80,660,224],[80,10,243],[80,570,80,490,224],[80,12632256,221],[80,8,240],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"String functions",author:"University of Oxford",date:"29/09/2016",time:"17:53:15",code:'REM StringFunctions\n\nDELAY%=500\nOUTPUT(TRUE,CREAM,TRUE)\ns1$="Turtle BASIC"\ns2$=MID$(s1$,1,6)\nWRITELN(s2$+" is the name of a small animal.")\nPAUSE(DELAY%)\ns3$=MID$(s1$,8,5)\nWRITELN(s3$+" was invented in the 1960s.")\nPAUSE(DELAY%)\ns4$=INS$(s3$,2,"BC B")\nWRITELN(""""+s4$+""" is the name of a 1980s variant.")\nPAUSE(DELAY%)\nWRITELN("\'"+s1$+"\' has "+STR$(LEN(s1$))+" characters.")\nPAUSE(DELAY%)\nWRITELN("In lower case it is \'"+LCASE$(s1$)+"\'.")\nWRITELN("In upper case it is \'"+UCASE$(s1$)+"\'.")\nPAUSE(DELAY%)\nposn%=INSTR(s1$,s3$)\nIF posn%>0 THEN\n  WRITELN("\'"+s3$+"\' occurs within \'"+s1$+"\' at position "+STR$(posn%)+".")\nENDIF\nPAUSE(DELAY%)\ns5$="3.14159"\nWRITELN(s5$+" times 100000 = "+STR$(QVAL(s5$,100000,-1))+".")\nn%=QVAL(s5$,100000,-1)\nPAUSE(DELAY%)\nWRITELN(STR$(n%)+" divided by 100000 = "+QSTR$(n%,100000,5)+".")\nWRITELN("")\nPAUSE(DELAY%*5)\nWRITELN("Now back to the Canvas and Console ...")\nOUTPUT(FALSE,PEACH,TRUE)\nPAUSE(DELAY%*5)\nOUTPUT(FALSE,LIGHTRED,FALSE)\nPAUSE(DELAY%*5)\nCONSOLE(TRUE,LIGHTBLUE)\nWRITELN("You will see this on a clear light blue Console")\nEND',usage:[{category:"Other Turtle commands",expressions:[{name:"CONSOLE",level:2,count:1,lines:"37"},{name:"OUTPUT",level:2,count:3,lines:"4 33 35"}],total:4},{category:"String operations",expressions:[{name:"WRITELN",level:1,count:12,lines:"7 10 13 15 17 18 22 26 29 30 32 38"},{name:"LCASE$",level:2,count:1,lines:"17"},{name:"LEN",level:2,count:1,lines:"15"},{name:"UCASE$",level:2,count:1,lines:"18"},{name:"INS$",level:3,count:1,lines:"12"},{name:"INSTR",level:3,count:1,lines:"20"},{name:"MID$",level:3,count:2,lines:"6 9"}],total:19},{category:"Type conversion routines",expressions:[{name:"STR$",level:1,count:4,lines:"15 22 26 29"},{name:"QSTR$",level:2,count:1,lines:"29"},{name:"QVAL",level:2,count:2,lines:"26 27"}],total:7},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:10,lines:"8 11 14 16 19 24 28 31 34 36"}],total:10},{category:"Command structures",expressions:[{name:"IF",level:1,count:1,lines:"21"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,13,115,80,23,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,500,97,16],[80,-1,80,16777147,80,-1,166],[87,84,117,114,116,108,101,32,66,65,83,73,67,0,97,17,146],[81,17,80,1,80,6,57,97,18,146],[81,18,87,32,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,97,32,115,109,97,108,108,32,97,110,105,109,97,108,46,0,54,190,191],[81,16,178],[81,17,80,8,80,5,57,97,19,146],[81,19,87,32,119,97,115,32,105,110,118,101,110,116,101,100,32,105,110,32,116,104,101,32,49,57,54,48,115,46,0,54,190,191],[81,16,178],[81,19,80,2,87,66,67,32,66,0,3,3,59,97,20,146],[87,34,0,81,20,54,87,34,32,105,115,32,116,104,101,32,110,97,109,101,32,111,102,32,97,32,49,57,56,48,115,32,118,97,114,105,97,110,116,46,0,54,190,191],[81,16,178],[87,39,0,81,17,54,87,39,32,104,97,115,32,0,54,81,17,55,49,54,87,32,99,104,97,114,97,99,116,101,114,115,46,0,54,190,191,147],[81,16,178],[87,73,110,32,108,111,119,101,114,32,99,97,115,101,32,105,116,32,105,115,32,39,0,81,17,80,-1,56,54,87,39,46,0,54,190,191,147],[87,73,110,32,117,112,112,101,114,32,99,97,115,101,32,105,116,32,105,115,32,39,0,81,17,80,1,56,54,87,39,46,0,54,190,191,147],[81,16,178],[81,17,81,19,2,60,97,21],[81,21,80,0,67,129,23],[87,39,0,81,19,54,87,39,32,111,99,99,117,114,115,32,119,105,116,104,105,110,32,39,0,54,81,17,54,87,39,32,97,116,32,112,111,115,105,116,105,111,110,32,0,54,81,21,49,54,87,46,0,54,190,191,147],[81,16,178],[87,51,46,49,52,49,53,57,0,97,22,146],[81,22,87,32,116,105,109,101,115,32,49,48,48,48,48,48,32,61,32,0,54,81,22,80,1e5,80,1,16,53,49,54,87,46,0,54,190,191,147],[81,22,80,1e5,80,1,16,53,97,23],[81,16,178],[81,23,49,87,32,100,105,118,105,100,101,100,32,98,121,32,49,48,48,48,48,48,32,61,32,0,54,81,23,80,1e5,80,5,52,54,87,46,0,54,190,191,147],[87,0,190,191],[81,16,80,5,26,178],[87,78,111,119,32,98,97,99,107,32,116,111,32,116,104,101,32,67,97,110,118,97,115,32,97,110,100,32,67,111,110,115,111,108,101,32,46,46,46,0,190,191],[80,0,80,16764080,80,-1,166],[81,16,80,5,26,178],[80,0,80,13458524,80,0,166],[81,16,80,5,26,178],[80,-1,80,10075135,167],[87,89,111,117,32,119,105,108,108,32,115,101,101,32,116,104,105,115,32,111,110,32,97,32,99,108,101,97,114,32,108,105,103,104,116,32,98,108,117,101,32,67,111,110,115,111,108,101,0,190,191],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Stars (using ANGLES and FORGET)",author:"Oxford University",date:"18/04/2016",time:"21:59:14",code:"REM Stars\n\nPENUP\nFOR n%=3 TO 12\n  PROCstar(n%,RGB(n%-2))\n  PAUSE(500)\nNEXT\nEND\n\nDEF PROCstar(points%,col%)\n  LOCAL count%\n  ANGLES(points%*2)\n  FOR count%=1 TO points%\n    FORWARD(450)\n    BACK(450)\n    FORGET(1)\n    RIGHT(1)\n    FORWARD(200)\n    BACK(200)\n    FORGET(1)\n    RIGHT(1)\n  NEXT\n  COLOUR(col%)\n  POLYGON(points%*2)\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"BACK",level:1,count:2,lines:"15 19"},{name:"FORWARD",level:1,count:2,lines:"14 18"},{name:"RIGHT",level:1,count:2,lines:"17 21"}],total:6},{category:"Turtle: drawing shapes",expressions:[{name:"FORGET",level:2,count:2,lines:"16 20"},{name:"POLYGON",level:2,count:1,lines:"24"}],total:3},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:1,lines:"23"},{name:"PENUP",level:1,count:1,lines:"3"},{name:"RGB",level:3,count:1,lines:"5"}],total:3},{category:"Canvas operations",expressions:[{name:"ANGLES",level:2,count:1,lines:"12"}],total:1},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"6"}],total:1},{category:"Command structures",expressions:[{name:"FOR",level:1,count:2,lines:"4 13"},{name:"DEF PROC",level:2,count:1,lines:"10"}],total:3},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:1,lines:"11"}],total:1},{category:"Subroutine calls",expressions:[{name:"PROCstar",level:0,count:1,lines:"5"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,6,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,23],[140,1],[144,1,3],[98,1,2,98,1,1],[82,1,1,80,2,26,212],[80,1],[98,1,3,82,1,1],[82,1,3,69,129,20],[80,450,227],[80,450,228],[80,1,237],[80,1,230],[80,200,227],[80,200,228],[80,1,237],[80,1,230],[82,1,3,4,128,9],[82,1,2,221],[82,1,1,80,2,26,241],[145,1,141,137],[160],[80,3],[97,17,80,12],[81,17,69,129,30],[81,17,81,17,80,2,25,222,136,4],[80,500,178],[81,17,4,128,25],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Solar system",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Snake (classic game)",author:"Oxford University",date:"19/04/2016",time:"09:05:12",code:'REM Snake\n\nBOARDSIZE%=30\nSNAKECOLOUR%=PURPLE\nAPPLECOLOUR%=GREEN\nCANVAS(0,0,BOARDSIZE%,BOARDSIZE%)\nRESOLUTION(BOARDSIZE%,BOARDSIZE%)\nANGLES(4)\nBLANK(LIGHTBLUE)\nCURSOR(0)\nCOLOUR(SNAKECOLOUR%)\nTHICKNESS(1)\nPENUP\nFORWARD(1)\nsnakelength%=2\nPROCnewapple\ncrash%=FALSE\nREPEAT\n  NOUPDATE\n  IF (ABS(?KEY)=\\UP) AND (TURTD%<>2) THEN DIRECTION(0)\n  IF (ABS(?KEY)=\\RIGHT) AND (TURTD%<>3) THEN DIRECTION(1)\n  IF (ABS(?KEY)=\\DOWN) AND (TURTD%<>0) THEN DIRECTION(2)\n  IF (ABS(?KEY)=\\LEFT) AND (TURTD%<>1) THEN DIRECTION(3)\n  FORWARD(1)\n  IF (TURTX%<0) OR (TURTX%>=BOARDSIZE%) OR (TURTY%<0) OR (TURTY%>=BOARDSIZE%) THEN crash%=TRUE\n  IF PIXCOL(TURTX%,TURTY%)=SNAKECOLOUR% THEN crash%=TRUE\n  IF PIXCOL(TURTX%,TURTY%)=APPLECOLOUR% THEN\n    INC(snakelength%)\n    PIXSET(TURTX%,TURTY%,SNAKECOLOUR%)\n    PROCnewapple\n  ENDIF\n  COLOUR(LIGHTBLUE)\n  POLYLINE(snakelength%+2)\n  COLOUR(SNAKECOLOUR%)\n  POLYLINE(snakelength%)\n  UPDATE\n  PAUSE(250-(snakelength%*3))\nUNTIL crash%\nRESOLUTION(1000,1000)\nBLANK(LILAC)\nSETXY(BOARDSIZE%/4,2*BOARDSIZE%/5)\nPRINT("Score "+STR$(snakelength%-2),20,100)\nEND\n\nDEF PROCnewapple\n  LOCAL x%,y%\n  REPEAT\n    x%=RND(BOARDSIZE%)-1\n    y%=RND(BOARDSIZE%)-1\n  UNTIL (PIXCOL(x%,y%)<>SNAKECOLOUR%)\n  PIXSET(x%,y%,APPLECOLOUR%)\nENDPROC',usage:[{category:"Turtle: relative movement",expressions:[{name:"FORWARD",level:1,count:2,lines:"14 24"}],total:2},{category:"Turtle: absolute movement",expressions:[{name:"DIRECTION",level:1,count:4,lines:"20 21 22 23"},{name:"SETXY",level:1,count:1,lines:"41"}],total:5},{category:"Turtle: drawing shapes",expressions:[{name:"POLYLINE",level:2,count:2,lines:"33 35"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:3,lines:"11 32 34"},{name:"PENUP",level:1,count:1,lines:"13"},{name:"THICKNESS",level:1,count:1,lines:"12"}],total:5},{category:"Canvas operations",expressions:[{name:"BLANK",level:1,count:2,lines:"9 40"},{name:"NOUPDATE",level:1,count:1,lines:"19"},{name:"UPDATE",level:1,count:1,lines:"36"},{name:"ANGLES",level:2,count:1,lines:"8"},{name:"CANVAS",level:2,count:1,lines:"6"},{name:"RESOLUTION",level:2,count:2,lines:"7 39"},{name:"PIXCOL",level:3,count:3,lines:"26 27 50"},{name:"PIXSET",level:3,count:2,lines:"29 51"}],total:13},{category:"General arithmetic functions",expressions:[{name:"ABS",level:1,count:4,lines:"20 21 22 23"},{name:"INC",level:1,count:1,lines:"28"},{name:"RND",level:2,count:2,lines:"48 49"}],total:7},{category:"String operations",expressions:[{name:"PRINT",level:1,count:1,lines:"42"}],total:1},{category:"Type conversion routines",expressions:[{name:"STR$",level:1,count:1,lines:"42"}],total:1},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"37"},{name:"CURSOR",level:2,count:1,lines:"10"}],total:2},{category:"Command structures",expressions:[{name:"IF",level:1,count:7,lines:"20 21 22 23 25 26 27"},{name:"REPEAT",level:2,count:2,lines:"18 47"},{name:"DEF PROC",level:2,count:1,lines:"45"}],total:10},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:1,lines:"46"}],total:1},{category:"Subroutine calls",expressions:[{name:"PROCnewapple",level:0,count:2,lines:"16 30"}],total:2}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,10,115,80,21,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,11],[140,1],[144,1,2],[81,17,19,4,80,1,25,98,1,1],[81,17,19,4,80,1,25,98,1,2],[82,1,1,82,1,2,210,81,18,65,129,6],[82,1,1,82,1,2,81,19,211],[145,1,141,137],[80,30,97,17],[80,8388736,97,18],[80,2263842,97,19],[80,0,80,0,81,17,81,17,208],[81,17,81,17,209],[80,4,212],[80,10075135,248],[80,0,213],[81,18,221],[80,1,220],[160],[80,1,227],[80,2,97,20],[136,4],[80,0,97,21],[163],[80,-9,184,17,80,38,64,81,14,80,2,65,9,129,29],[80,0,219],[80,-9,184,17,80,39,64,81,14,80,3,65,9,129,31],[80,1,219],[80,-9,184,17,80,40,64,81,14,80,0,65,9,129,33],[80,2,219],[80,-9,184,17,80,37,64,81,14,80,1,65,9,129,35],[80,3,219],[80,1,227],[81,12,80,0,66,81,12,81,17,69,10,81,13,80,0,66,10,81,13,81,17,69,10,129,38],[80,-1,97,21],[81,12,81,13,210,81,18,64,129,40],[80,-1,97,21],[81,12,81,13,210,81,19,64,129,44],[84,20,1,112,4,2,113],[81,12,81,13,81,18,211],[136,4],[80,10075135,221],[81,20,80,2,24,240],[81,18,221],[81,20,240],[162],[80,250,81,20,80,3,26,25,178],[81,21,129,26],[80,1e3,80,1e3,209],[80,11572223,248],[81,17,80,4,27,80,2,81,17,26,80,5,27,224],[87,83,99,111,114,101,32,0,81,20,80,2,25,49,54,80,20,80,100,189,147],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Simple procedure",author:"Oxford University",date:"18/04/2016",time:"21:42:43",code:"REM SimpleProc\n\nREPEAT\n  RNDCOL(10)\n  PROCprong\n  RIGHT(61)\nUNTIL TURTD%=0\nEND\n\nDEF PROCprong\n  FORWARD(400)\n  BLOT(20)\n  BACK(400)\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"BACK",level:1,count:1,lines:"13"},{name:"FORWARD",level:1,count:1,lines:"11"},{name:"RIGHT",level:1,count:1,lines:"6"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:1,lines:"12"}],total:1},{category:"Other Turtle commands",expressions:[{name:"RNDCOL",level:1,count:1,lines:"4"}],total:1},{category:"Command structures",expressions:[{name:"REPEAT",level:2,count:1,lines:"3"},{name:"DEF PROC",level:2,count:1,lines:"10"}],total:2},{category:"Subroutine calls",expressions:[{name:"PROCprong",level:0,count:1,lines:"5"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,9],[140,1],[80,400,227],[80,20,243],[80,400,228],[141,137],[80,10,19,4,222,221],[136,4],[80,61,230],[81,14,80,0,64,129,9],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Drawing to the mouse",author:"Oxford University",date:"18/04/2016",time:"22:55:25",code:"REM SimpleDraw\n\nPROCpalette\nHOME\nTHICKNESS(10)\nBLOT(2)\nREPEAT\n  REPEAT\n    UPDATE\n  UNTIL (?LMOUSE>0) OR (?RMOUSE>0)\n  IF ?MOUSEY>900 THEN\n    COLOUR(RGB(?MOUSEX DIV 100+1))\n  ELSE\n    IF ?LMOUSE>0 THEN\n      DRAWXY(?MOUSEX-TURTX%,?MOUSEY-TURTY%)\n    ELSE\n      SETXY(?MOUSEX,?MOUSEY)\n    ENDIF\n  ENDIF\nUNTIL FALSE\nEND\n\nDEF PROCpalette\n  LOCAL col%\n  FOR col%=1 TO 10\n    SETXY(col%*100-50,950)\n    COLOUR(RGB(col%))\n    BLOT(50)\n  NEXT\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"DRAWXY",level:2,count:1,lines:"15"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"HOME",level:1,count:1,lines:"4"},{name:"SETXY",level:1,count:2,lines:"17 26"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:2,lines:"6 28"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"12 27"},{name:"THICKNESS",level:1,count:1,lines:"5"},{name:"RGB",level:3,count:2,lines:"12 27"}],total:5},{category:"Canvas operations",expressions:[{name:"UPDATE",level:1,count:1,lines:"9"}],total:1},{category:"Command structures",expressions:[{name:"IF",level:1,count:2,lines:"11 14"},{name:"ELSE",level:1,count:2,lines:"13 16"},{name:"FOR",level:1,count:1,lines:"25"},{name:"REPEAT",level:2,count:2,lines:"7 8"},{name:"DEF PROC",level:2,count:1,lines:"23"}],total:8},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:1,lines:"24"}],total:1},{category:"Subroutine calls",expressions:[{name:"PROCpalette",level:0,count:1,lines:"3"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,14],[140,1],[144,1,1],[80,1],[98,1,1,80,10],[82,1,1,69,129,13],[82,1,1,80,100,26,80,50,25,80,950,224],[82,1,1,222,221],[80,50,243],[82,1,1,4,128,7],[145,1,141,137],[136,4],[216],[80,10,220],[80,2,243],[162],[80,-1,184,80,0,67,80,-2,184,80,0,67,10,129,18],[80,-8,184,80,900,67,129,23],[80,-7,184,80,100,28,80,1,24,222,221],[128,27],[80,-1,184,80,0,67,129,26],[80,-7,184,81,12,25,80,-8,184,81,13,25,226],[128,27],[80,-7,184,80,-8,184,224],[80,0,129,18],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Sierpinski triangle",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Sierpinski triangle",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Sierpinski triangle",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Sierpinski triangle",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Arcade shooting game",author:"Oxford University",date:"19/04/2016",time:"09:12:14",code:'REM Shoot\n\nTARGETS%=10\nFaceX%=-100\nFaceY%=625\nfacexspeed%=5\nfaceyspeed%=0\nhits%=0\nCURSOR(0)\nWHILE hits%<TARGETS%\n  NOUPDATE\n  PROCbackground\n  SETXY(FaceX%,FaceY%)\n  PROCface\n  FOR i%=1 TO hits%\n    PROCbottle(50*i%-35,740)\n  NEXT\n  COLOUR(BROWN)\n  THICKNESS(272)\n  SETXY(0,863)\n  DRAWXY(1000,0)\n  PROCgunsight\n  THICKNESS(2)\n  UPDATE\n  FaceX%=FaceX%+facexspeed%\n  FaceY%=FaceY%+faceyspeed%\n  IF FaceX%>1100 THEN FaceX%=-100\n  IF FaceX%<-100 THEN FaceX%=1100\n  IF (FaceY%<100) OR (FaceY%>625) THEN faceyspeed%=faceyspeed%*-1\n  IF ((?LMOUSE>0) AND (((?MOUSEX-FaceX%)*(?MOUSEX-FaceX%))+((?MOUSEY-FaceY%)*(?MOUSEY-FaceY%))<10000)) THEN\n    FaceX%=-100\n    facexspeed%=RND(5)+1\n    faceyspeed%=RND(9)-5\n    FaceY%=RND(550)+49\n    INC(hits%)\n  ENDIF\nENDWHILE\nBLANK(BLACK)\nSETXY(200,450)\nCOLOUR(GREEN)\nPRINT("  Well done!  ",4,75)\nEND\n\nDEF PROCbottle(x%,y%)\n  SETXY(x%,y%)\n  COLOUR(CYAN)\n  MOVEXY(0,-15)\n  THICKNESS(40)\n  DRAWXY(0,-50)\n  THICKNESS(10)\n  DRAWXY(0,-40)\n  THICKNESS(2)\n  MOVEXY(-20,90)\n  MOVEXY(40,0)\n  MOVEXY(0,-20)\n  MOVEXY(-40,0)\n  COLOUR(PURPLE)\n  POLYGON(4)\n  MOVEXY(20,35)\nENDPROC\n\nDEF PROCaddhat\n  SETXY(FaceX%,FaceY%-80)\n  COLOUR(DARKGREY)\n  ELLBLOT(90,30)\n  THICKNESS(2)\n  COLOUR(BLACK)\n  ELLIPSE(90,30)\n  MOVEXY(-70,0)\n  THICKNESS(4)\n  DRAWXY(35,-70)\n  DRAWXY(70,0)\n  DRAWXY(35,70)\n  COLOUR(DARKGREY)\n  THICKNESS(1)\n  POLYGON(4)\nENDPROC\n\nDEF PROCface\n  THICKNESS(1)\n  COLOUR(#FF8899)\n  BLOT(100)\n  COLOUR(WHITE)\n  SETXY(FaceX%-20,FaceY%-20)\n  BLOT(10)\n  COLOUR(BLACK)\n  BLOT(4)\n  THICKNESS(4)\n  MOVEXY(0,-22)\n  COLOUR(#663300)\n  DRAWXY(15,15)\n  THICKNESS(1)\n  COLOUR(WHITE)\n  SETXY(FaceX%+20,FaceY%-20)\n  BLOT(10)\n  COLOUR(BLACK)\n  BLOT(4)\n  THICKNESS(4)\n  MOVEXY(0,-22)\n  COLOUR(#663300)\n  DRAWXY(-15,15)\n  PROCaddhat\n  SETXY(FaceX%,FaceY%+13)\n  COLOUR(RED)\n  BLOT(10)\n  MOVEXY(0,32)\n  ELLBLOT(30,6)\n  COLOUR(WHITE)\n  ELLBLOT(20,4)\nENDPROC\n\nDEF PROCbackground\n  BLANK(COFFEE)\n  PROCbottle(100,500)\n  PROCbottle(200,500)\n  PROCbottle(450,500)\n  PROCbottle(500,500)\n  PROCbottle(565,500)\n  PROCbottle(865,500)\n  COLOUR(DARKBROWN)\n  THICKNESS(20)\n  SETXY(0,125)\n  DRAWXY(1000,0)\n  SETXY(0,325)\n  DRAWXY(1000,0)\n  SETXY(0,525)\n  DRAWXY(1000,0)\n  COLOUR(BROWN)\n  THICKNESS(30)\n  SETXY(0,100)\n  DRAWXY(1000,0)\n  SETXY(0,300)\n  DRAWXY(1000,0)\n  SETXY(0,500)\n  DRAWXY(1000,0)\nENDPROC\n\nDEF PROCgunsight\n  COLOUR(BLACK)\n  THICKNESS(6)\n  SETXY(?MOUSEX-50,?MOUSEY)\n  DRAWXY(100,0)\n  SETXY(?MOUSEX,?MOUSEY-50)\n  DRAWXY(0,100)\nENDPROC',usage:[{category:"Turtle: relative movement",expressions:[{name:"DRAWXY",level:2,count:16,lines:"21 49 51 71 72 73 91 101 123 125 127 131 133 135 142 144"},{name:"MOVEXY",level:2,count:10,lines:"47 53 54 55 56 59 69 89 99 106"}],total:26},{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:16,lines:"13 20 39 45 63 84 94 103 122 124 126 130 132 134 141 143"}],total:16},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:6,lines:"82 85 87 95 97 105"},{name:"ELLBLOT",level:1,count:3,lines:"65 107 109"},{name:"ELLIPSE",level:1,count:1,lines:"68"},{name:"POLYGON",level:2,count:2,lines:"58 76"}],total:12},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:19,lines:"18 40 46 57 64 67 74 81 83 86 90 93 96 100 104 108 120 128 139"},{name:"THICKNESS",level:1,count:15,lines:"19 23 48 50 52 66 70 75 80 88 92 98 121 129 140"}],total:34},{category:"Canvas operations",expressions:[{name:"BLANK",level:1,count:2,lines:"38 113"},{name:"NOUPDATE",level:1,count:1,lines:"11"},{name:"UPDATE",level:1,count:1,lines:"24"}],total:4},{category:"General arithmetic functions",expressions:[{name:"INC",level:1,count:1,lines:"35"},{name:"RND",level:2,count:3,lines:"32 33 34"}],total:4},{category:"String operations",expressions:[{name:"PRINT",level:1,count:1,lines:"41"}],total:1},{category:"Input and timing routines",expressions:[{name:"CURSOR",level:2,count:1,lines:"9"}],total:1},{category:"Command structures",expressions:[{name:"IF",level:1,count:4,lines:"27 28 29 30"},{name:"FOR",level:1,count:1,lines:"15"},{name:"WHILE",level:2,count:1,lines:"10"},{name:"DEF PROC",level:2,count:5,lines:"44 62 79 112 138"}],total:11},{category:"Subroutine calls",expressions:[{name:"PROCaddhat",level:0,count:1,lines:"102"},{name:"PROCbottle",level:0,count:7,lines:"16 114 115 116 117 118 119"},{name:"PROCbackground",level:0,count:1,lines:"12"},{name:"PROCface",level:0,count:1,lines:"14"},{name:"PROCgunsight",level:0,count:1,lines:"22"}],total:11}],pcode:[[80,15,1,1,80,0,113,80,5,2,113,4,80,12,115,80,27,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,104],[140,1],[144,1,2],[98,1,2,98,1,1],[82,1,1,82,1,2,224],[80,65535,221],[80,0,80,15,16,225],[80,40,220],[80,0,80,50,16,226],[80,10,220],[80,0,80,40,16,226],[80,2,220],[80,20,16,80,90,225],[80,40,80,0,225],[80,0,80,20,16,225],[80,40,16,80,0,225],[80,8388736,221],[80,4,241],[80,20,80,35,225],[145,1,141,137],[140,2],[81,22,81,23,80,80,25,224],[80,4210752,221],[80,90,80,30,245],[80,2,220],[80,0,221],[80,90,80,30,244],[80,70,16,80,0,225],[80,4,220],[80,35,80,70,16,226],[80,70,80,0,226],[80,35,80,70,226],[80,4210752,221],[80,1,220],[80,4,241],[141,137],[140,3],[80,1,220],[80,16746649,221],[80,100,243],[80,16777215,221],[81,22,80,20,25,81,23,80,20,25,224],[80,10,243],[80,0,221],[80,4,243],[80,4,220],[80,0,80,22,16,225],[80,6697728,221],[80,15,80,15,226],[80,1,220],[80,16777215,221],[81,22,80,20,24,81,23,80,20,25,224],[80,10,243],[80,0,221],[80,4,243],[80,4,220],[80,0,80,22,16,225],[80,6697728,221],[80,15,16,80,15,226],[136,23],[81,22,81,23,80,13,24,224],[80,16711680,221],[80,10,243],[80,0,80,32,225],[80,30,80,6,245],[80,16777215,221],[80,20,80,4,245],[141,137],[140,4],[80,9596735,248],[80,100,80,500,136,4],[80,200,80,500,136,4],[80,450,80,500,136,4],[80,500,80,500,136,4],[80,565,80,500,136,4],[80,865,80,500,136,4],[80,6045747,221],[80,20,220],[80,0,80,125,224],[80,1e3,80,0,226],[80,0,80,325,224],[80,1e3,80,0,226],[80,0,80,525,224],[80,1e3,80,0,226],[80,9849600,221],[80,30,220],[80,0,80,100,224],[80,1e3,80,0,226],[80,0,80,300,224],[80,1e3,80,0,226],[80,0,80,500,224],[80,1e3,80,0,226],[141,137],[140,5],[80,0,221],[80,6,220],[80,-7,184,80,50,25,80,-8,184,224],[80,100,80,0,226],[80,-7,184,80,-8,184,80,50,25,224],[80,0,80,100,226],[141,137],[80,10,97,21],[80,100,16,97,22],[80,625,97,23],[80,5,97,24],[80,0,97,25],[80,0,97,26],[80,0,213],[81,26,81,21,66,129,143],[163],[136,71],[81,22,81,23,224],[136,39],[80,1],[97,27,81,26],[81,27,69,129,121],[80,50,81,27,26,80,35,25,80,740,136,4],[81,27,4,128,117],[80,9849600,221],[80,272,220],[80,0,80,863,224],[80,1e3,80,0,226],[136,96],[80,2,220],[162],[81,22,81,24,24,97,22],[81,23,81,25,24,97,23],[81,22,80,1100,67,129,132],[80,100,16,97,22],[81,22,80,100,16,66,129,134],[80,1100,97,22],[81,23,80,100,66,81,23,80,625,67,10,129,136],[81,25,80,1,16,26,97,25],[80,-1,184,80,0,67,80,-7,184,81,22,25,80,-7,184,81,22,25,26,80,-8,184,81,23,25,80,-8,184,81,23,25,26,24,80,1e4,66,9,129,142],[80,100,16,97,22],[80,5,19,4,80,1,24,97,24],[80,9,19,4,80,5,25,97,25],[80,550,19,4,80,49,24,97,23],[84,26,1,112,4,2,113],[128,111],[80,0,248],[80,200,80,450,224],[80,2263842,221],[87,32,32,87,101,108,108,32,100,111,110,101,33,32,32,0,80,4,80,75,189],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"The sex ratio",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Schelling's segregation model",author:"Oxford University",date:"19/04/2016",time:"13:36:03",code:"REM Schelling\n\nWIDTH%=50\nHEIGHT%=50\nEMPTY%=GREEN\nCANVAS(-1,-1,WIDTH%+2,HEIGHT%+2)\nRESOLUTION(WIDTH%+2,HEIGHT%+2)\nNOUPDATE\nBLANK(EMPTY%)\nFOR i%=0 TO WIDTH%-1\n  FOR j%=0 TO WIDTH%-1\n    test%=RND(25)\n    IF test%=1 THEN\n      PIXSET(i%,j%,EMPTY%)\n    ELSE\n      IF (i%+j%) MOD 2=0 THEN PIXSET(i%,j%,RED) ELSE PIXSET(i%,j%,BLUE)\n    ENDIF\n  NEXT\nNEXT\nPAUSE(2000)\nWHILE ?KEY<>\\ESCAPE\n  NOUPDATE\n  REPEAT\n    tryi%=RND(WIDTH%)-1\n    tryj%=RND(HEIGHT%)-1\n    this%=PIXCOL(tryi%,tryj%)\n  UNTIL (this%<>EMPTY%) AND (NOT(FNhappy(tryi%,tryj%,this%)))\n  PIXSET(tryi%,tryj%,EMPTY%)\n  REPEAT\n    tryi%=RND(WIDTH%)-1\n    tryj%=RND(HEIGHT%)-1\n  UNTIL (PIXCOL(tryi%,tryj%)=EMPTY%) AND FNhappy(tryi%,tryj%,this%)\n  PIXSET(tryi%,tryj%,this%)\n  UPDATE\nENDWHILE\nEND\n\nDEF FNhappy(x%,y%,c%)\n  LOCAL like%,unlike%,neighbour%,i%,j%\n  like%=0\n  unlike%=0\n  FOR i%=-1 TO 1\n    FOR j%=-1 TO 1\n      IF (i%<>0) OR (j%<>0) THEN\n        neighbour%=PIXCOL(x%+i%,y%+j%)\n        IF neighbour%<>EMPTY% THEN\n          IF neighbour%=c% THEN INC(like%) ELSE INC(unlike%)\n        ENDIF\n      ENDIF\n    NEXT\n  NEXT\n=(like%>=unlike%-1)",usage:[{category:"Canvas operations",expressions:[{name:"BLANK",level:1,count:1,lines:"9"},{name:"NOUPDATE",level:1,count:2,lines:"8 22"},{name:"UPDATE",level:1,count:1,lines:"34"},{name:"CANVAS",level:2,count:1,lines:"6"},{name:"RESOLUTION",level:2,count:1,lines:"7"},{name:"PIXCOL",level:3,count:3,lines:"26 32 45"},{name:"PIXSET",level:3,count:5,lines:"14 16 28 33"}],total:14},{category:"General arithmetic functions",expressions:[{name:"INC",level:1,count:2,lines:"47"},{name:"RND",level:2,count:5,lines:"12 24 25 30 31"}],total:7},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"20"}],total:1},{category:"Command structures",expressions:[{name:"IF",level:1,count:5,lines:"13 16 44 46 47"},{name:"ELSE",level:1,count:3,lines:"15 16 47"},{name:"FOR",level:1,count:4,lines:"10 11 42 43"},{name:"REPEAT",level:2,count:2,lines:"23 29"},{name:"WHILE",level:2,count:1,lines:"21"},{name:"DEF FN",level:3,count:1,lines:"38"}],total:16},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:1,lines:"39"}],total:1},{category:"Subroutine calls",expressions:[{name:"FNhappy",level:0,count:2,lines:"27 32"}],total:2}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,14,115,80,26,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,26],[140,1],[144,1,9],[98,1,4,98,1,3,98,1,2],[80,0,98,1,5],[80,0,98,1,6],[80,1,16],[98,1,8,80,1],[82,1,8,69,129,24],[80,1,16],[98,1,9,80,1],[82,1,9,69,129,23],[82,1,8,80,0,65,82,1,9,80,0,65,10,129,22],[82,1,2,82,1,8,24,82,1,3,82,1,9,24,210,98,1,7],[82,1,7,81,20,65,129,22],[82,1,7,82,1,4,64,129,21],[85,1,5,1,112,4,2,113],[128,22],[85,1,6,1,112,4,2,113],[82,1,9,4,128,13],[82,1,8,4,128,10],[82,1,5,82,1,6,80,1,25,69,98,1,1],[89,1,105,2,145,1,141,137],[80,50,97,18],[80,50,97,19],[80,2263842,97,20],[80,1,16,80,1,16,81,18,80,2,24,81,19,80,2,24,208],[81,18,80,2,24,81,19,80,2,24,209],[163],[81,20,248],[80,0],[97,21,81,18,80,1,25],[81,21,69,129,49],[80,0],[97,22,81,18,80,1,25],[81,22,69,129,48],[80,25,19,4,97,23],[81,23,80,1,64,129,43],[81,21,81,22,81,20,211],[128,47],[81,21,81,22,24,80,2,29,80,0,64,129,46],[81,21,81,22,80,16711680,211],[128,47],[81,21,81,22,80,255,211],[81,22,4,128,37],[81,21,4,128,34],[80,2e3,178],[80,-9,184,80,27,65,129,65],[163],[81,18,19,4,80,1,25,97,24],[81,19,19,4,80,1,25,97,25],[81,24,81,25,210,97,26],[81,26,81,20,65,81,24,81,25,81,26,136,4],[82,2,1,8,9,129,52],[81,24,81,25,81,20,211],[81,18,19,4,80,1,25,97,24],[81,19,19,4,80,1,25,97,25],[81,24,81,25,210,81,20,64,81,24,81,25,81,26,136,4],[82,2,1,9,129,58],[81,24,81,25,81,26,211],[162],[128,50],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Reference parameters (using RETURN)",author:"Oxford University",date:"18/04/2016",time:"22:18:32",code:"REM RefParams\n\nSETXY(100,900)\nPROClines(TURTT%,FALSE)\nPROClines(TURTC%,TRUE)\nPROCdots(TURTX%)\nPROCdots(TURTY%)\nEND\n\nDEF PROClines(RETURN style%,convert%)\n  LOCAL count%\n  FOR count%=1 TO 8\n    IF convert% THEN\n      style%=RGB(count%)\n    ELSE\n      style%=count%\n    ENDIF\n    FORWARD(50)\n    PAUSE(100)\n  NEXT\nENDPROC\n\nDEF PROCdots(RETURN coord%)\n  LOCAL count%\n  FOR count%=1 TO 8\n    coord%=coord%+100\n    BLOT(40)\n    PAUSE(100)\n  NEXT\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"FORWARD",level:1,count:1,lines:"18"}],total:1},{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:1,lines:"3"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:1,lines:"27"}],total:1},{category:"Other Turtle commands",expressions:[{name:"RGB",level:3,count:1,lines:"14"}],total:1},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:2,lines:"19 28"}],total:2},{category:"Command structures",expressions:[{name:"IF",level:1,count:1,lines:"13"},{name:"ELSE",level:1,count:1,lines:"15"},{name:"FOR",level:1,count:2,lines:"12 25"},{name:"DEF PROC",level:2,count:2,lines:"10 23"}],total:6},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:2,lines:"11 24"}],total:2},{category:"Subroutine calls",expressions:[{name:"PROClines",level:0,count:2,lines:"4 5"},{name:"PROCdots",level:0,count:2,lines:"6 7"}],total:4}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,5,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,29],[140,1],[144,1,3],[98,1,2,102,1,1],[80,1],[98,1,3,80,8],[82,1,3,69,129,17],[82,1,2,129,13],[82,1,3,222,99,1,1],[128,14],[82,1,3,99,1,1],[80,50,227],[80,100,178],[82,1,3,4,128,8],[145,1,141,137],[140,2],[144,2,2],[102,2,1],[80,1],[98,2,2,80,8],[82,2,2,69,129,28],[83,2,1,80,100,24,99,2,1],[80,40,243],[80,100,178],[82,2,2,4,128,22],[145,2,141,137],[80,100,80,900,224],[84,16,80,0,136,4],[84,17,80,-1,136,4],[84,13,136,18],[84,14,136,18],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Quine (self-replicating) program",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Polygons",author:"Oxford University",date:"19/04/2016",time:"12:55:15",code:"REM Polygons\n\nPENUP\nTHICKNESS(4)\nSETXY(100,400)\nPROCpoly(3,BLUE)\nSETXY(400,400)\nPROCpoly(4,RED)\nSETXY(700,400)\nPROCpoly(5,YELLOW)\nSETXY(150,750)\nPROCpoly(6,PINK)\nSETXY(440,750)\nPROCpoly(7,GREEN)\nSETXY(740,750)\nPROCpoly(8,TURQUOISE)\nEND\n\nDEF PROCpoly(points%,col%)\n  LOCAL count%\n  DIRECTION(90)\n  FOR count%=1 TO points%\n    FORWARD(600 DIV points%)\n    LEFT(360 DIV points%)\n  NEXT\n  COLOUR(col%)\n  POLYGON(points%)\n  COLOUR(BLACK)\n  POLYLINE(points%+1)\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"FORWARD",level:1,count:1,lines:"23"},{name:"LEFT",level:1,count:1,lines:"24"}],total:2},{category:"Turtle: absolute movement",expressions:[{name:"DIRECTION",level:1,count:1,lines:"21"},{name:"SETXY",level:1,count:6,lines:"5 7 9 11 13 15"}],total:7},{category:"Turtle: drawing shapes",expressions:[{name:"POLYGON",level:2,count:1,lines:"27"},{name:"POLYLINE",level:2,count:1,lines:"29"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"26 28"},{name:"PENUP",level:1,count:1,lines:"3"},{name:"THICKNESS",level:1,count:1,lines:"4"}],total:4},{category:"Command structures",expressions:[{name:"FOR",level:1,count:1,lines:"22"},{name:"DEF PROC",level:2,count:1,lines:"19"}],total:2},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:1,lines:"20"}],total:1},{category:"Subroutine calls",expressions:[{name:"PROCpoly",level:0,count:6,lines:"6 8 10 12 14 16"}],total:6}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,19],[140,1],[144,1,3],[98,1,2,98,1,1],[80,90,219],[80,1],[98,1,3,82,1,1],[82,1,3,69,129,14],[80,600,82,1,1,28,227],[80,360,82,1,1,28,229],[82,1,3,4,128,9],[82,1,2,221],[82,1,1,241],[80,0,221],[82,1,1,80,1,24,240],[145,1,141,137],[160],[80,4,220],[80,100,80,400,224],[80,3,80,255,136,4],[80,400,80,400,224],[80,4,80,16711680,136,4],[80,700,80,400,224],[80,5,80,16776960,136,4],[80,150,80,750,224],[80,6,80,15602313,136,4],[80,440,80,750,224],[80,7,80,2263842,136,4],[80,740,80,750,224],[80,8,80,48833,136,4],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Polygon rings",author:"Oxford University",date:"19/04/2016",time:"12:58:38",code:"REM PolygonRings\n\nPENUP\nBLOT(500)\nRNDCOL(6)\nPROCannulus(410,80,2)\nPROCannulus(310,80,3)\nPROCannulus(210,80,5)\nPROCannulus(110,80,7)\nPROCannulus(10,80,1)\nEND\n\nDEF PROCannulus(inner%,width%,angle%)\n  LOCAL count%\n  FOR count%=0 TO 360 DIV angle%\n    FORWARD(inner%+width%)\n    BACK(width%)\n    BACK(inner%)\n    FORGET(1)\n    RIGHT(angle%)\n    FORWARD(inner%)\n    FORWARD(width%)\n    COLOUR(RGB(count% MOD 20+1))\n    POLYGON(4)\n    BACK(inner%+width%)\n  NEXT\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"BACK",level:1,count:3,lines:"17 18 25"},{name:"FORWARD",level:1,count:3,lines:"16 21 22"},{name:"RIGHT",level:1,count:1,lines:"20"}],total:7},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:1,lines:"4"},{name:"FORGET",level:2,count:1,lines:"19"},{name:"POLYGON",level:2,count:1,lines:"24"}],total:3},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:1,lines:"23"},{name:"PENUP",level:1,count:1,lines:"3"},{name:"RNDCOL",level:1,count:1,lines:"5"},{name:"RGB",level:3,count:1,lines:"23"}],total:4},{category:"Command structures",expressions:[{name:"FOR",level:1,count:1,lines:"15"},{name:"DEF PROC",level:2,count:1,lines:"13"}],total:2},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:1,lines:"14"}],total:1},{category:"Subroutine calls",expressions:[{name:"PROCannulus",level:0,count:5,lines:"6 7 8 9 10"}],total:5}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,22],[140,1],[144,1,4],[98,1,3,98,1,2,98,1,1],[80,0],[98,1,4,80,360,82,1,3,28],[82,1,4,69,129,21],[82,1,1,82,1,2,24,227],[82,1,2,228],[82,1,1,228],[80,1,237],[82,1,3,230],[82,1,1,227],[82,1,2,227],[82,1,4,80,20,29,80,1,24,222,221],[80,4,241],[82,1,1,82,1,2,24,228],[82,1,4,4,128,8],[145,1,141,137],[160],[80,500,243],[80,6,19,4,221],[80,410,80,80,80,2,136,4],[80,310,80,80,80,3,136,4],[80,210,80,80,80,5,136,4],[80,110,80,80,80,7,136,4],[80,10,80,80,80,1,136,4],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Procedure with parameter",author:"Oxford University",date:"18/04/2016",time:"21:55:03",code:"REM ParameterProc\n\nFOR count%=360 TO 1 STEP -1\n  RNDCOL(10)\n  PROCprong(count%+100)\n  RIGHT(61)\nNEXT\nEND\n\nDEF PROCprong(length%)\n  FORWARD(length%)\n  BLOT(length% DIV 20)\n  BACK(length%)\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"BACK",level:1,count:1,lines:"13"},{name:"FORWARD",level:1,count:1,lines:"11"},{name:"RIGHT",level:1,count:1,lines:"6"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:1,lines:"12"}],total:1},{category:"Other Turtle commands",expressions:[{name:"RNDCOL",level:1,count:1,lines:"4"}],total:1},{category:"Command structures",expressions:[{name:"FOR",level:1,count:1,lines:"3"},{name:"DEF PROC",level:2,count:1,lines:"10"}],total:2},{category:"Subroutine calls",expressions:[{name:"PROCprong",level:0,count:1,lines:"5"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,6,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,11],[140,1],[144,1,1],[98,1,1],[82,1,1,227],[82,1,1,80,20,28,243],[82,1,1,228],[145,1,141,137],[80,360],[97,17,80,1],[81,17,68,129,18],[80,10,19,4,222,221],[81,17,80,100,24,136,4],[80,61,230],[81,17,5,128,12],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Painting application",author:"Oxford University",date:"19/04/2016",time:"08:59:01",code:'REM PaintApp\n\nPROCsetup\nREPEAT\n  IF ?LMOUSE>0 THEN\n    IF ?MOUSEY>900 THEN\n      PROCsetbrushcolour(PIXCOL(?MOUSEX,?MOUSEY))\n    ELSE\n      IF (?MOUSEY>850) AND ((?MOUSEX>600) AND (?MOUSEX<850)) THEN\n        PROCsetbrushwidth(((?MOUSEX DIV 50)*2)-16)\n      ELSE\n        IF ?MOUSEY<850-BrushWidth% THEN PROCpaintbrush(?MOUSEX,?MOUSEY)\n      ENDIF\n    ENDIF\n  ENDIF\n  IF (?RMOUSE>0) AND (?MOUSEY<850) THEN PROCpaintcan(?MOUSEX,?MOUSEY)\n  UPDATE\nUNTIL FALSE\nEND\n\nDEF PROCsetbrushwidth(wdth%)\n  LOCAL count%\n  BrushWidth%=wdth%\n  NOUPDATE\n  COLOUR(BLACK)\n  FOR count%=0 TO 4\n    SETXY(625+count%*50,875)\n    BLOT(8+count%*2)\n  NEXT\n  COLOUR(BrushColour%)\n  RECOLOUR(((BrushWidth%+16)*25)+25,875,LIGHTRED)\n  UPDATE\nENDPROC\n\nDEF PROCsetbrushcolour(clr%)\n  BrushColour%=clr%\n  COLOUR(clr%)\n  SETXY(975,875)\n  BLOT(16)\nENDPROC\n\nDEF PROCpaintbrush(x%,y%)\n  SETXY(x%,y%)\n  BLOT(BrushWidth%)\nENDPROC\n\nDEF PROCpaintcan(x%,y%)\n  RECOLOUR(x%,y%,BrushColour%)\nENDPROC\n\nDEF PROCtext(input$)\n  COLOUR(BLACK)\n  PRINT(input$,0,20)\nENDPROC\n\nDEF PROCsquare(col%)\n  MOVEXY(50,0)\n  MOVEXY(0,50)\n  MOVEXY(-50,0)\n  MOVEXY(0,-50)\n  COLOUR(col%)\n  POLYGON(4)\nENDPROC\n\nDEF PROCsetup\n  LOCAL count%\n  COLOUR(LIGHTRED)\n  SETXY(0,850)\n  DRAWXY(1000,0)\n  SETXY(0,900)\n  DRAWXY(1000,0)\n  SETXY(450,850)\n  DRAWXY(0,50)\n  SETXY(850,850)\n  DRAWXY(0,50)\n  SETXY(10,858)\n  PROCtext("Left-click to draw, right-click to fill")\n  SETXY(450+10,858)\n  PROCtext("Brush width:")\n  SETXY(850+10,858)\n  PROCtext("Colour:")\n  SETXY(0,900)\n  FOR count%=1 TO 20\n    PROCsquare(RGB(count%))\n    MOVEXY(0,50)\n    PROCsquare(RGB(count%+30))\n    MOVEXY(50,-50)\n  NEXT\n  PROCsetbrushwidth(8)\n  PROCsetbrushcolour(BLACK)\nENDPROC',usage:[{category:"Turtle: relative movement",expressions:[{name:"DRAWXY",level:2,count:4,lines:"69 71 73 75"},{name:"MOVEXY",level:2,count:6,lines:"57 58 59 60 85 87"}],total:10},{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:11,lines:"27 38 43 68 70 72 74 76 78 80 82"}],total:11},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:3,lines:"28 39 44"},{name:"POLYGON",level:2,count:1,lines:"62"}],total:4},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:6,lines:"25 30 37 52 61 67"},{name:"RGB",level:3,count:2,lines:"84 86"}],total:8},{category:"Canvas operations",expressions:[{name:"NOUPDATE",level:1,count:1,lines:"24"},{name:"UPDATE",level:1,count:2,lines:"17 32"},{name:"PIXCOL",level:3,count:1,lines:"7"},{name:"RECOLOUR",level:3,count:2,lines:"31 48"}],total:6},{category:"String operations",expressions:[{name:"PRINT",level:1,count:1,lines:"53"}],total:1},{category:"Command structures",expressions:[{name:"IF",level:1,count:5,lines:"5 6 9 12 16"},{name:"ELSE",level:1,count:2,lines:"8 11"},{name:"FOR",level:1,count:2,lines:"26 83"},{name:"REPEAT",level:2,count:1,lines:"4"},{name:"DEF PROC",level:2,count:7,lines:"21 35 42 47 51 56 65"}],total:17},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:2,lines:"22 66"}],total:2},{category:"Subroutine calls",expressions:[{name:"PROCtext",level:0,count:3,lines:"77 79 81"},{name:"PROCsquare",level:0,count:2,lines:"84 86"},{name:"PROCsetbrushwidth",level:0,count:2,lines:"10 89"},{name:"PROCsetbrushcolour",level:0,count:2,lines:"7 90"},{name:"PROCsetup",level:0,count:1,lines:"3"},{name:"PROCpaintbrush",level:0,count:1,lines:"12"},{name:"PROCpaintcan",level:0,count:1,lines:"16"}],total:12}],pcode:[[80,17,1,1,80,0,113,80,5,2,113,4,80,7,115,80,24,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,84],[140,1],[144,1,2],[98,1,1],[82,1,1,97,23],[163],[80,0,221],[80,0],[98,1,2,80,4],[82,1,2,69,129,16],[80,625,82,1,2,80,50,26,24,80,875,224],[80,8,82,1,2,80,2,26,24,243],[82,1,2,4,128,11],[81,24,221],[81,23,80,16,24,80,25,26,80,25,24,80,875,80,13458524,252],[162],[145,1,141,137],[140,2],[144,2,1],[98,2,1],[82,2,1,97,24],[82,2,1,221],[80,975,80,875,224],[80,16,243],[145,2,141,137],[140,3],[144,3,2],[98,3,2,98,3,1],[82,3,1,82,3,2,224],[81,23,243],[145,3,141,137],[140,4],[144,4,2],[98,4,2,98,4,1],[82,4,1,82,4,2,81,24,252],[145,4,141,137],[140,5],[144,5,1],[98,5,1],[80,0,221],[82,5,1,80,0,80,20,61],[145,5,141,137],[140,6],[144,6,1],[98,6,1],[80,50,80,0,225],[80,0,80,50,225],[80,50,16,80,0,225],[80,0,80,50,16,225],[82,6,1,221],[80,4,241],[145,6,141,137],[140,7],[144,7,1],[80,13458524,221],[80,0,80,850,224],[80,1e3,80,0,226],[80,0,80,900,224],[80,1e3,80,0,226],[80,450,80,850,224],[80,0,80,50,226],[80,850,80,850,224],[80,0,80,50,226],[80,10,80,858,224],[87,76,101,102,116,45,99,108,105,99,107,32,116,111,32,100,114,97,119,44,32,114,105,103,104,116,45,99,108,105,99,107,32,116,111,32,102,105,108,108,0,146,136,39],[80,450,80,10,24,80,858,224],[87,66,114,117,115,104,32,119,105,100,116,104,58,0,146,136,39],[80,850,80,10,24,80,858,224],[87,67,111,108,111,117,114,58,0,146,136,39],[80,0,80,900,224],[80,1],[98,7,1,80,20],[82,7,1,69,129,81],[82,7,1,222,136,45],[80,0,80,50,225],[82,7,1,80,30,24,222,136,45],[80,50,80,50,16,225],[82,7,1,4,128,74],[80,8,136,4],[80,0,136,20],[145,7,141,137],[136,55],[80,-1,184,80,0,67,129,94],[80,-8,184,80,900,67,129,89],[80,-7,184,80,-8,184,210,136,20],[128,94],[80,-8,184,80,850,67,80,-7,184,80,600,67,80,-7,184,80,850,66,9,9,129,92],[80,-7,184,80,50,28,80,2,26,80,16,25,136,4],[128,94],[80,-8,184,80,850,81,23,25,66,129,94],[80,-7,184,80,-8,184,136,28],[80,-2,184,80,0,67,80,-8,184,80,850,66,9,129,96],[80,-7,184,80,-8,184,136,34],[162],[80,0,129,85],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Olympic rings 2 (with variable)",author:"Oxford University",date:"16/04/2016",time:"15:57:45",code:"REM OlympicRings2\n\nringsize%=130\nTHICKNESS(20)\nPENUP\nFORWARD(50)\nCIRCLE(ringsize%)\nLEFT(90)\nFORWARD(300)\nCOLOUR(BLUE)\nCIRCLE(ringsize%)\nBACK(600)\nCOLOUR(RED)\nCIRCLE(ringsize%)\nFORWARD(150)\nRIGHT(90)\nBACK(125)\nCOLOUR(LIME)\nCIRCLE(ringsize%)\nLEFT(90)\nFORWARD(300)\nCOLOUR(YELLOW)\nCIRCLE(ringsize%)\nEND",usage:[{category:"Turtle: relative movement",expressions:[{name:"BACK",level:1,count:2,lines:"12 17"},{name:"FORWARD",level:1,count:4,lines:"6 9 15 21"},{name:"LEFT",level:1,count:2,lines:"8 20"},{name:"RIGHT",level:1,count:1,lines:"16"}],total:9},{category:"Turtle: drawing shapes",expressions:[{name:"CIRCLE",level:1,count:5,lines:"7 11 14 19 23"}],total:5},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:4,lines:"10 13 18 22"},{name:"PENUP",level:1,count:1,lines:"5"},{name:"THICKNESS",level:1,count:1,lines:"4"}],total:6}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,130,97,16],[80,20,220],[160],[80,50,227],[81,16,242],[80,90,229],[80,300,227],[80,255,221],[81,16,242],[80,600,228],[80,16711680,221],[81,16,242],[80,150,227],[80,90,230],[80,125,228],[80,65280,221],[81,16,242],[80,90,229],[80,300,227],[80,16776960,221],[81,16,242],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Olympic rings 1 (using PENUP)",author:"Oxford University",date:"16/04/2016",time:"15:57:19",code:"REM OlympicRings1\n\nTHICKNESS(20)\nPENUP\nFORWARD(50)\nCIRCLE(130)\nLEFT(90)\nFORWARD(300)\nCOLOUR(BLUE)\nCIRCLE(130)\nBACK(600)\nCOLOUR(RED)\nCIRCLE(130)\nFORWARD(150)\nRIGHT(90)\nBACK(125)\nCOLOUR(LIME)\nCIRCLE(130)\nLEFT(90)\nFORWARD(300)\nCOLOUR(YELLOW)\nCIRCLE(130)\nEND",usage:[{category:"Turtle: relative movement",expressions:[{name:"BACK",level:1,count:2,lines:"11 16"},{name:"FORWARD",level:1,count:4,lines:"5 8 14 20"},{name:"LEFT",level:1,count:2,lines:"7 19"},{name:"RIGHT",level:1,count:1,lines:"15"}],total:9},{category:"Turtle: drawing shapes",expressions:[{name:"CIRCLE",level:1,count:5,lines:"6 10 13 18 22"}],total:5},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:4,lines:"9 12 17 21"},{name:"PENUP",level:1,count:1,lines:"4"},{name:"THICKNESS",level:1,count:1,lines:"3"}],total:6}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,5,115,80,15,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,20,220],[160],[80,50,227],[80,130,242],[80,90,229],[80,300,227],[80,255,221],[80,130,242],[80,600,228],[80,16711680,221],[80,130,242],[80,150,227],[80,90,230],[80,125,228],[80,65280,221],[80,130,242],[80,90,229],[80,300,227],[80,16776960,221],[80,130,242],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Noughts and crosses",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Nim",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Nested FOR loops",author:"Oxford University",date:"18/04/2016",time:"21:41:43",code:"REM NestedLoops\n\nPENUP\nFOR countblot%=1 TO 10\n  FORWARD(260)\n  COLOUR(BLACK)\n  BLOT(150)\n  COLOUR(RGB(countblot%))\n  FOR countcirc%=1 TO 25\n    CIRCLE(countcirc%*8)\n  NEXT\n  BACK(260)\n  RIGHT(36)\nNEXT\nEND",usage:[{category:"Turtle: relative movement",expressions:[{name:"BACK",level:1,count:1,lines:"12"},{name:"FORWARD",level:1,count:1,lines:"5"},{name:"RIGHT",level:1,count:1,lines:"13"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:1,lines:"7"},{name:"CIRCLE",level:1,count:1,lines:"10"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"6 8"},{name:"PENUP",level:1,count:1,lines:"3"},{name:"RGB",level:3,count:1,lines:"8"}],total:4},{category:"Command structures",expressions:[{name:"FOR",level:1,count:2,lines:"4 9"}],total:2}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,7,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[160],[80,1],[97,16,80,10],[81,16,69,129,19],[80,260,227],[80,0,221],[80,150,243],[81,16,222,221],[80,1],[97,17,80,25],[81,17,69,129,16],[81,17,80,8,26,242],[81,17,4,128,12],[80,260,228],[80,36,230],[81,16,4,128,5],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Multiple bouncing balls",author:"Oxford University",date:"18/04/2016",time:"22:51:19",code:"REM MultiBounce\n\nxpos1%=20\nxvel1%=2\nypos1%=200\nyvel1%=-3\nxpos2%=400\nxvel2%=-4\nypos2%=800\nyvel2%=1\nREPEAT\n  PROCball(20,BLUE,xpos1%,xvel1%,ypos1%,yvel1%)\n  PROCball(30,RED,xpos2%,xvel2%,ypos2%,yvel2%)\nUNTIL 1=0\nEND\n\nDEF PROCball(size%,col%,RETURN xp%,RETURN xv%,RETURN yp%,RETURN yv%)\n  SETXY(xp%,yp%)\n  COLOUR(WHITE)\n  BLOT(size%+1)\n  xp%=xp%+xv%\n  yp%=yp%+yv%\n  SETXY(xp%,yp%)\n  COLOUR(col%)\n  BLOT(size%)\n  UPDATE\n  NOUPDATE\n  IF (xp%<size%) OR (xp%>1000-size%) THEN xv%=-xv%\n  IF (yp%<size%) OR (yp%>1000-size%) THEN yv%=-yv%\nENDPROC",usage:[{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:2,lines:"18 23"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:2,lines:"20 25"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"19 24"}],total:2},{category:"Canvas operations",expressions:[{name:"NOUPDATE",level:1,count:1,lines:"27"},{name:"UPDATE",level:1,count:1,lines:"26"}],total:2},{category:"Command structures",expressions:[{name:"IF",level:1,count:2,lines:"28 29"},{name:"REPEAT",level:2,count:1,lines:"11"},{name:"DEF PROC",level:2,count:1,lines:"17"}],total:4},{category:"Subroutine calls",expressions:[{name:"PROCball",level:0,count:2,lines:"12 13"}],total:2}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,13,115,80,24,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,22],[140,1],[144,1,6],[102,1,6,102,1,5,102,1,4,102,1,3,98,1,2,98,1,1],[83,1,3,83,1,5,224],[80,16777215,221],[82,1,1,80,1,24,243],[83,1,3,83,1,4,24,99,1,3],[83,1,5,83,1,6,24,99,1,5],[83,1,3,83,1,5,224],[82,1,2,221],[82,1,1,243],[162],[163],[83,1,3,82,1,1,66,83,1,3,80,1e3,82,1,1,25,67,10,129,19],[83,1,4,16,99,1,4],[83,1,5,82,1,1,66,83,1,5,80,1e3,82,1,1,25,67,10,129,21],[83,1,6,16,99,1,6],[145,1,141,137],[80,20,97,17],[80,2,97,18],[80,200,97,19],[80,3,16,97,20],[80,400,97,21],[80,4,16,97,22],[80,800,97,23],[80,1,97,24],[80,20,80,255,84,17,84,18,84,19,84,20,136,4],[80,30,80,16711680,84,21,84,22,84,23,84,24,136,4],[80,1,80,0,64,129,30],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Moving ball (using variable)",author:"Oxford University",date:"18/04/2016",time:"22:27:09",code:"REM MovingBall\n\nx%=100\ny%=700\nFOR count%=1 TO 100\n  NOUPDATE\n  COLOUR(WHITE)\n  BLOT(51)\n  x%=x%+8\n  y%=y%-4\n  SETXY(x%,y%)\n  COLOUR(RED)\n  BLOT(50)\n  UPDATE\n  PAUSE(5)\nNEXT\nEND",usage:[{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:1,lines:"11"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:2,lines:"8 13"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"7 12"}],total:2},{category:"Canvas operations",expressions:[{name:"NOUPDATE",level:1,count:1,lines:"6"},{name:"UPDATE",level:1,count:1,lines:"14"}],total:2},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"15"}],total:1},{category:"Command structures",expressions:[{name:"FOR",level:1,count:1,lines:"5"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,8,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,100,97,16],[80,700,97,17],[80,1],[97,18,80,100],[81,18,69,129,19],[163],[80,16777215,221],[80,51,243],[81,16,80,8,24,97,16],[81,17,80,4,25,97,17],[81,16,81,17,224],[80,16711680,221],[80,50,243],[162],[80,5,178],[81,18,4,128,6],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Mathematical functions",author:"University of Oxford",date:"29/09/2016",time:"17:58:13",code:'REM MathFunctions\n\nDECIMALS%=4\nDENOMINATOR%=1000000\nOUTPUT(TRUE,WHITE,TRUE)\nWRITELN("This program selects two random numbers a and b, in the")\nWRITELN("range 100-999, and then outputs various mathematical")\nWRITELN("functions of the fraction a/b. The results are expressed")\nWRITELN("to "+STR$(DECIMALS%)+" decimal places, and a denominator of "+STR$(DENOMINATOR%)+" is")\nWRITELN("used in the calculations to provide precision, even")\nWRITELN("though the Turtle functions strictly operate only on")\nWRITELN("integers and produce integer results.")\nWRITELN("")\nPROCselectAB\nWRITELN("a="+STR$(A%)+"; b="+STR$(B%))\nWRITELN("a/b = "+STR$(A%)+"/"+STR$(B%)+" = "+QSTR$(A%,B%,DECIMALS%))\nWRITELN("")\nPROCshow("square",POWER(A%,B%,2,DENOMINATOR%))\nPROCshow("square root",ROOT(A%,B%,2,DENOMINATOR%))\nPROCshow("cube",POWER(A%,B%,3,DENOMINATOR%))\nPROCshow("cube root",ROOT(A%,B%,3,DENOMINATOR%))\nWRITELN("")\nPROCshow("hypot",HYPOT(A%,B%,DENOMINATOR%))\nPROCshow("calculated hypot",SQR(A%*A%+B%*B%,DENOMINATOR%))\nWRITELN("")\nPROCshow("sin",SIN(A%,B%,DENOMINATOR%))\nPROCshow("cos",COS(A%,B%,DENOMINATOR%))\nPROCshow("tan",TAN(A%,B%,DENOMINATOR%))\nWRITELN("")\nPROCshow("ln",LN(A%,B%,DENOMINATOR%))\nIF DIVMULT(A%,B%,1000)+LN(DENOMINATOR%,1,1000)>LN(MAXINT,1,1000) THEN\n  WRITELN("EXP("+STR$(A%)+"/"+STR$(B%)+") would give numerical overflow, because")\n  WRITELN("the result*"+STR$(DENOMINATOR%)+" would be greater than "+STR$(MAXINT))\nELSE\n  PROCshow("exp",EXP(A%,B%,DENOMINATOR%))\nENDIF\nPROCshow("log10",LOG10(A%,B%,DENOMINATOR%))\nIF DIVMULT(A%,B%,1000)+LOG10(DENOMINATOR%,1,1000)>LOG10(MAXINT,1,1000) THEN\n  WRITELN("ANTILOG("+STR$(A%)+"/"+STR$(B%)+") would give numerical overflow, because")\n  WRITELN("the result*"+STR$(DENOMINATOR%)+" would be greater than "+STR$(MAXINT))\nELSE\n  PROCshow("antilog",ANTILOG(A%,B%,DENOMINATOR%))\nENDIF\nWRITELN("")\nIF A%>B% THEN\n  WRITELN("ACS and ASN are not defined for "+STR$(A%)+"/"+STR$(B%)+" = "+QSTR$(A%,B%,DECIMALS%))\nELSE\n  PROCshow("arccos",ACS(A%,B%,DENOMINATOR%))\n  PROCshow("arcsin",ASN(A%,B%,DENOMINATOR%))\nENDIF\nPROCshow("arctan",ATN(A%,B%,DENOMINATOR%))\nEND\n\nDEF PROCshow(s$,n%)\n  WRITELN(s$+"("+STR$(A%)+"/"+STR$(B%)+") = "+QSTR$(n%,DENOMINATOR%,DECIMALS%))\nENDPROC\n\nDEF PROCselectAB\n  A%=RND(900)+99\n  B%=RND(900)+99\nENDPROC',usage:[{category:"Other Turtle commands",expressions:[{name:"OUTPUT",level:2,count:1,lines:"5"}],total:1},{category:"General arithmetic functions",expressions:[{name:"HYPOT",level:2,count:1,lines:"23"},{name:"RND",level:2,count:2,lines:"59 60"},{name:"SQR",level:2,count:1,lines:"24"},{name:"DIVMULT",level:3,count:2,lines:"31 38"},{name:"MAXINT",level:3,count:4,lines:"31 33 38 40"},{name:"POWER",level:3,count:2,lines:"18 20"},{name:"ROOT",level:3,count:2,lines:"19 21"}],total:14},{category:"Trig / exp / log functions",expressions:[{name:"COS",level:2,count:1,lines:"27"},{name:"EXP",level:2,count:1,lines:"35"},{name:"LN",level:2,count:3,lines:"30 31"},{name:"SIN",level:2,count:1,lines:"26"},{name:"TAN",level:2,count:1,lines:"28"},{name:"ACS",level:3,count:1,lines:"48"},{name:"ANTILOG",level:3,count:1,lines:"42"},{name:"ASN",level:3,count:1,lines:"49"},{name:"ATN",level:3,count:1,lines:"51"},{name:"LOG10",level:3,count:3,lines:"37 38"}],total:14},{category:"String operations",expressions:[{name:"WRITELN",level:1,count:21,lines:"6 7 8 9 10 11 12 13 15 16 17 22 25 29 32 33 39 40 44 46 55"}],total:21},{category:"Type conversion routines",expressions:[{name:"STR$",level:1,count:18,lines:"9 15 16 32 33 39 40 46 55"},{name:"QSTR$",level:2,count:3,lines:"16 46 55"}],total:21},{category:"Command structures",expressions:[{name:"IF",level:1,count:3,lines:"31 38 45"},{name:"ELSE",level:1,count:3,lines:"34 41 47"},{name:"DEF PROC",level:2,count:2,lines:"54 58"}],total:8},{category:"Subroutine calls",expressions:[{name:"PROCselectAB",level:0,count:1,lines:"14"},{name:"PROCshow",level:0,count:16,lines:"18 19 20 21 23 24 26 27 28 30 35 37 42 48 49 51"}],total:17}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,9,115,80,21,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,13],[140,1],[144,1,2],[98,1,2,98,1,1],[82,1,1,87,40,0,54,81,20,49,54,87,47,0,54,81,21,49,54,87,41,32,61,32,0,54,82,1,2,81,19,81,18,52,54,190,191,147],[145,1,141,137],[140,2],[80,900,19,4,80,99,24,97,20],[80,900,19,4,80,99,24,97,21],[141,137],[80,4,97,18],[80,1e6,97,19],[80,-1,80,16777215,80,-1,166],[87,84,104,105,115,32,112,114,111,103,114,97,109,32,115,101,108,101,99,116,115,32,116,119,111,32,114,97,110,100,111,109,32,110,117,109,98,101,114,115,32,97,32,97,110,100,32,98,44,32,105,110,32,116,104,101,0,190,191],[87,114,97,110,103,101,32,49,48,48,45,57,57,57,44,32,97,110,100,32,116,104,101,110,32,111,117,116,112,117,116,115,32,118,97,114,105,111,117,115,32,109,97,116,104,101,109,97,116,105,99,97,108,0,190,191],[87,102,117,110,99,116,105,111,110,115,32,111,102,32,116,104,101,32,102,114,97,99,116,105,111,110,32,97,47,98,46,32,84,104,101,32,114,101,115,117,108,116,115,32,97,114,101,32,101,120,112,114,101,115,115,101,100,0,190,191],[87,116,111,32,0,81,18,49,54,87,32,100,101,99,105,109,97,108,32,112,108,97,99,101,115,44,32,97,110,100,32,97,32,100,101,110,111,109,105,110,97,116,111,114,32,111,102,32,0,54,81,19,49,54,87,32,105,115,0,54,190,191,147],[87,117,115,101,100,32,105,110,32,116,104,101,32,99,97,108,99,117,108,97,116,105,111,110,115,32,116,111,32,112,114,111,118,105,100,101,32,112,114,101,99,105,115,105,111,110,44,32,101,118,101,110,0,190,191],[87,116,104,111,117,103,104,32,116,104,101,32,84,117,114,116,108,101,32,102,117,110,99,116,105,111,110,115,32,115,116,114,105,99,116,108,121,32,111,112,101,114,97,116,101,32,111,110,108,121,32,111,110,0,190,191],[87,105,110,116,101,103,101,114,115,32,97,110,100,32,112,114,111,100,117,99,101,32,105,110,116,101,103,101,114,32,114,101,115,117,108,116,115,46,0,190,191],[87,0,190,191],[136,9],[87,97,61,0,81,20,49,54,87,59,32,98,61,0,54,81,21,49,54,190,191,147],[87,97,47,98,32,61,32,0,81,20,49,54,87,47,0,54,81,21,49,54,87,32,61,32,0,54,81,20,81,21,81,18,52,54,190,191,147],[87,0,190,191],[87,115,113,117,97,114,101,0,81,20,81,21,80,2,81,19,36,146,136,4],[87,115,113,117,97,114,101,32,114,111,111,116,0,81,20,81,21,80,2,81,19,35,146,136,4],[87,99,117,98,101,0,81,20,81,21,80,3,81,19,36,146,136,4],[87,99,117,98,101,32,114,111,111,116,0,81,20,81,21,80,3,81,19,35,146,136,4],[87,0,190,191],[87,104,121,112,111,116,0,81,20,81,21,81,19,34,146,136,4],[87,99,97,108,99,117,108,97,116,101,100,32,104,121,112,111,116,0,81,20,81,20,26,81,21,81,21,26,24,81,19,33,146,136,4],[87,0,190,191],[87,115,105,110,0,81,20,81,21,81,19,41,146,136,4],[87,99,111,115,0,81,20,81,21,81,19,42,146,136,4],[87,116,97,110,0,81,20,81,21,81,19,43,146,136,4],[87,0,190,191],[87,108,110,0,81,20,81,21,81,19,39,146,136,4],[81,20,81,21,80,1e3,32,81,19,80,1,80,1e3,39,24,255,80,1,80,1e3,39,67,129,45],[87,69,88,80,40,0,81,20,49,54,87,47,0,54,81,21,49,54,87,41,32,119,111,117,108,100,32,103,105,118,101,32,110,117,109,101,114,105,99,97,108,32,111,118,101,114,102,108,111,119,44,32,98,101,99,97,117,115,101,0,54,190,191,147],[87,116,104,101,32,114,101,115,117,108,116,42,0,81,19,49,54,87,32,119,111,117,108,100,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,0,54,255,49,54,190,191,147],[128,46],[87,101,120,112,0,81,20,81,21,81,19,40,146,136,4],[87,108,111,103,49,48,0,81,20,81,21,81,19,37,146,136,4],[81,20,81,21,80,1e3,32,81,19,80,1,80,1e3,37,24,255,80,1,80,1e3,37,67,129,51],[87,65,78,84,73,76,79,71,40,0,81,20,49,54,87,47,0,54,81,21,49,54,87,41,32,119,111,117,108,100,32,103,105,118,101,32,110,117,109,101,114,105,99,97,108,32,111,118,101,114,102,108,111,119,44,32,98,101,99,97,117,115,101,0,54,190,191,147],[87,116,104,101,32,114,101,115,117,108,116,42,0,81,19,49,54,87,32,119,111,117,108,100,32,98,101,32,103,114,101,97,116,101,114,32,116,104,97,110,32,0,54,255,49,54,190,191,147],[128,52],[87,97,110,116,105,108,111,103,0,81,20,81,21,81,19,38,146,136,4],[87,0,190,191],[81,20,81,21,67,129,56],[87,65,67,83,32,97,110,100,32,65,83,78,32,97,114,101,32,110,111,116,32,100,101,102,105,110,101,100,32,102,111,114,32,0,81,20,49,54,87,47,0,54,81,21,49,54,87,32,61,32,0,54,81,20,81,21,81,18,52,54,190,191,147],[128,58],[87,97,114,99,99,111,115,0,81,20,81,21,81,19,45,146,136,4],[87,97,114,99,115,105,110,0,81,20,81,21,81,19,44,146,136,4],[87,97,114,99,116,97,110,0,81,20,81,21,81,19,46,146,136,4],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Launching a rocket into orbit",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Launching a rocket into orbit",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Launching a rocket into orbit",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Mandelbrot set",author:"Oxford University",date:"19/04/2016",time:"13:31:01",code:"REM Mandelbrot\n\nCANVAS(-250,-250,500,500)\nRESOLUTION(500,500)\ni%=0\nx%=0\ny%=0\na%=0\nb%=0\nWHILE TRUE\n  i%=0\n  a%=-251+RND(500)\n  b%=-251+RND(500)\n  x%=a%\n  y%=b%\n  WHILE FNp(a%,b%) AND (i%<20)\n    PROCf(a%,b%,x%,y%)\n    INC(i%)\n  ENDWHILE\n  IF i%=20 THEN\n    COLOUR(BLACK)\n    SETXY(x%,y%)\n    BLOT(3)\n  ELSE\n    SETXY(x%,y%)\n    COLOUR(RGB(i%+1))\n    BLOT(3)\n  ENDIF\nENDWHILE\nEND\n\nDEF FNp(lx%,ly%)\n=HYPOT(lx%,ly%,1)<250\n\nDEF PROCf(RETURN la%,RETURN lb%,lx%,ly%)\n  at%=((la%*la%)-(lb%*lb%))/125\n  bt%=(2*la%*lb%)/125\n  la%=at%+lx%\n  lb%=bt%+ly%\nENDPROC",usage:[{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:2,lines:"22 25"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:2,lines:"23 27"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"21 26"},{name:"RGB",level:3,count:1,lines:"26"}],total:3},{category:"Canvas operations",expressions:[{name:"CANVAS",level:2,count:1,lines:"3"},{name:"RESOLUTION",level:2,count:1,lines:"4"}],total:2},{category:"General arithmetic functions",expressions:[{name:"INC",level:1,count:1,lines:"18"},{name:"HYPOT",level:2,count:1,lines:"33"},{name:"RND",level:2,count:2,lines:"12 13"}],total:4},{category:"Command structures",expressions:[{name:"IF",level:1,count:1,lines:"20"},{name:"ELSE",level:1,count:1,lines:"24"},{name:"WHILE",level:2,count:2,lines:"10 16"},{name:"DEF PROC",level:2,count:1,lines:"35"},{name:"DEF FN",level:3,count:1,lines:"32"}],total:6},{category:"Subroutine calls",expressions:[{name:"FNp",level:0,count:1,lines:"16"},{name:"PROCf",level:0,count:1,lines:"17"}],total:2}],pcode:[[80,13,1,1,80,0,113,80,5,2,113,4,80,12,115,80,25,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,17],[140,1],[144,1,3],[98,1,3,98,1,2],[82,1,2,82,1,3,80,1,34,80,250,66,98,1,1],[89,1,105,3,145,1,141,137],[140,2],[144,2,4],[98,2,4,98,2,3,102,2,2,102,2,1],[83,2,1,83,2,1,26,83,2,2,83,2,2,26,25,80,125,27,97,24],[80,2,83,2,1,26,83,2,2,26,80,125,27,97,25],[81,24,82,2,3,24,99,2,1],[81,25,82,2,4,24,99,2,2],[145,2,141,137],[80,250,16,80,250,16,80,500,80,500,208],[80,500,80,500,209],[80,0,97,19],[80,0,97,20],[80,0,97,21],[80,0,97,22],[80,0,97,23],[80,-1,129,44],[80,0,97,19],[80,251,16,80,500,19,4,24,97,22],[80,251,16,80,500,19,4,24,97,23],[81,22,97,20],[81,23,97,21],[81,22,81,23,136,4],[82,3,1,81,19,80,20,66,9,129,35],[84,22,84,23,81,20,81,21,136,9],[84,19,1,112,4,2,113],[128,30],[81,19,80,20,64,129,40],[80,0,221],[81,20,81,21,224],[80,3,243],[128,43],[81,20,81,21,224],[81,19,80,1,24,222,221],[80,3,243],[128,24],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Knight's tour",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Knight's tour",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Initialising Conway's Game of Life",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Launching a rocket into orbit",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Knight's tour",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Iterated Prisoner's Dilemma",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Interference",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Interference",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Movement under gravity",author:"Oxford University",date:"18/04/2016",time:"22:53:08",code:"REM GravitySteps\n\nPROCsteps(10)\nSETXY(950,75)\nREPEAT\n  PROCthrowball(-2,-22,1,TURTY%+100)\nUNTIL TURTX%<75\nFOR bounce%=1 TO 10\n  PROCthrowball(0,bounce%*2-20,1,TURTY%)\nNEXT\nEND\n\nDEF PROCsteps(s%)\n  LOCAL size%,count%\n  size%=1000/s%\n  SETXY(0,1000)\n  THICKNESS(1)\n  FOR count%=1 TO s%*2\n    IF count% MOD 2=0 THEN MOVEXY(0,-size%) ELSE MOVEXY(size%,0)\n  NEXT\n  MOVEXY(0,s%*size%)\n  MOVEXY(-s%*size%,0)\n  COLOUR(BLUE)\n  POLYGON(s%*2+2)\nENDPROC\n\nDEF PROCthrowball(xvel%,yvel%,gravity%,floor%)\n  REPEAT\n    COLOUR(WHITE)\n    BLOT(25)\n    MOVEXY(xvel%,yvel%)\n    yvel%=yvel%+gravity%\n    IF TURTY%>floor% THEN TURTY%=floor%\n    COLOUR(RED)\n    BLOT(24)\n    UPDATE\n    PAUSE(10)\n    NOUPDATE\n  UNTIL TURTY%=floor%\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"MOVEXY",level:2,count:5,lines:"19 21 22 31"}],total:5},{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:2,lines:"4 16"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:2,lines:"30 35"},{name:"POLYGON",level:2,count:1,lines:"24"}],total:3},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:3,lines:"23 29 34"},{name:"THICKNESS",level:1,count:1,lines:"17"}],total:4},{category:"Canvas operations",expressions:[{name:"NOUPDATE",level:1,count:1,lines:"38"},{name:"UPDATE",level:1,count:1,lines:"36"}],total:2},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"37"}],total:1},{category:"Command structures",expressions:[{name:"IF",level:1,count:2,lines:"19 33"},{name:"ELSE",level:1,count:1,lines:"19"},{name:"FOR",level:1,count:2,lines:"8 18"},{name:"REPEAT",level:2,count:2,lines:"5 28"},{name:"DEF PROC",level:2,count:2,lines:"13 27"}],total:9},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:1,lines:"14"}],total:1},{category:"Subroutine calls",expressions:[{name:"PROCsteps",level:0,count:1,lines:"3"},{name:"PROCthrowball",level:0,count:2,lines:"6 9"}],total:3}],pcode:[[80,12,1,1,80,0,113,80,5,2,113,4,80,6,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,39],[140,1],[144,1,3],[98,1,1],[80,1e3,82,1,1,27,98,1,2],[80,0,80,1e3,224],[80,1,220],[80,1],[98,1,3,82,1,1,80,2,26],[82,1,3,69,129,18],[82,1,3,80,2,29,80,0,64,129,16],[80,0,82,1,2,16,225],[128,17],[82,1,2,80,0,225],[82,1,3,4,128,11],[80,0,82,1,1,82,1,2,26,225],[82,1,1,16,82,1,2,26,80,0,225],[80,255,221],[82,1,1,80,2,26,80,2,24,241],[145,1,141,137],[140,2],[144,2,4],[98,2,4,98,2,3,98,2,2,98,2,1],[80,16777215,221],[80,25,243],[82,2,1,82,2,2,225],[82,2,2,82,2,3,24,98,2,2],[81,14,82,2,4,67,129,32],[82,2,4,97,14],[80,16711680,221],[80,24,243],[162],[80,10,178],[163],[81,14,82,2,4,64,129,26],[145,2,141,137],[80,10,136,4],[80,950,80,75,224],[80,2,16,80,22,16,80,1,81,14,80,100,24,136,23],[81,13,80,75,66,129,41],[80,1],[97,18,80,10],[81,18,69,129,48],[80,0,81,18,80,2,26,80,20,25,80,1,81,14,136,23],[81,18,4,128,44],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Conway's Game of Life",author:"Oxford University",date:"19/04/2016",time:"09:24:49",code:"REM GameOfLife\n\nWIDTH%=32\nHEIGHT%=32\nCANVAS(0,0,WIDTH%,HEIGHT%)\nRESOLUTION(WIDTH%,HEIGHT%)\nFOR i%=0 TO WIDTH%\n  FOR j%=0 TO HEIGHT%\n    IF RND(7)=1 THEN PIXSET(i%,j%,1) ELSE PIXSET(i%,j%,#FFFFFC)\n  NEXT\nNEXT\nWHILE ?KEY<>\\ESCAPE\n  TIMESET(0)\n  NOUPDATE\n  FOR i%=0 TO WIDTH%\n    FOR j%=0 TO HEIGHT%\n      PROC_next(i%,j%)\n    NEXT\n  NEXT\n  UPDATE\n  NOUPDATE\n  FOR i%=0 TO WIDTH%\n    FOR j%=0 TO HEIGHT%\n      IF (PIXCOL(i%,j%) AND 2)>0 THEN PIXSET(i%,j%,PIXCOL(i%,j%) EOR 3)\n    NEXT\n  NEXT\n  UPDATE\nENDWHILE\nEND\n\nDEF PROC_next(x%,y%)\n  LOCAL numneighbours%,i%,j%\n  numneighbours%=0\n  FOR i%=-1 TO 1\n    FOR j%=-1 TO 1\n      numneighbours%=numneighbours%+(PIXCOL((x%+WIDTH%+i%) MOD WIDTH%,(y%+HEIGHT%+j%) MOD HEIGHT%) MOD 2)\n    NEXT\n  NEXT\n  IF (PIXCOL(x%,y%) MOD 2)=0 THEN\n    IF numneighbours%=3 THEN PIXSET(x%,y%,2)\n  ELSE\n    IF (numneighbours%<3) OR (numneighbours%>4) THEN PIXSET(x%,y%,#FFFFFF)\n  ENDIF\nENDPROC",usage:[{category:"Canvas operations",expressions:[{name:"NOUPDATE",level:1,count:2,lines:"14 21"},{name:"UPDATE",level:1,count:2,lines:"20 27"},{name:"CANVAS",level:2,count:1,lines:"5"},{name:"RESOLUTION",level:2,count:1,lines:"6"},{name:"PIXCOL",level:3,count:4,lines:"24 36 39"},{name:"PIXSET",level:3,count:5,lines:"9 24 40 42"}],total:15},{category:"General arithmetic functions",expressions:[{name:"RND",level:2,count:1,lines:"9"}],total:1},{category:"Input and timing routines",expressions:[{name:"TIMESET",level:2,count:1,lines:"13"}],total:1},{category:"Command structures",expressions:[{name:"IF",level:1,count:5,lines:"9 24 39 40 42"},{name:"ELSE",level:1,count:2,lines:"9 41"},{name:"FOR",level:1,count:8,lines:"7 8 15 16 22 23 34 35"},{name:"WHILE",level:2,count:1,lines:"12"},{name:"DEF PROC",level:2,count:1,lines:"31"}],total:17},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:1,lines:"32"}],total:1},{category:"Subroutine calls",expressions:[{name:"PROC_next",level:0,count:1,lines:"17"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,9,115,80,20,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,24],[140,1],[144,1,5],[98,1,2,98,1,1],[80,0,98,1,3],[80,1,16],[98,1,4,80,1],[82,1,4,69,129,17],[80,1,16],[98,1,5,80,1],[82,1,5,69,129,16],[82,1,3,82,1,1,81,17,24,82,1,4,24,81,17,29,82,1,2,81,18,24,82,1,5,24,81,18,29,210,80,2,29,24,98,1,3],[82,1,5,4,128,12],[82,1,4,4,128,9],[82,1,1,82,1,2,210,80,2,29,80,0,64,129,21],[82,1,3,80,3,64,129,20],[82,1,1,82,1,2,80,2,211],[128,23],[82,1,3,80,3,66,82,1,3,80,4,67,10,129,23],[82,1,1,82,1,2,80,16777215,211],[145,1,141,137],[80,32,97,17],[80,32,97,18],[80,0,80,0,81,17,81,18,208],[81,17,81,18,209],[80,0],[97,19,81,17],[81,19,69,129,40],[80,0],[97,20,81,18],[81,20,69,129,39],[80,7,19,4,80,1,64,129,37],[81,19,81,20,80,1,211],[128,38],[81,19,81,20,80,16777212,211],[81,20,4,128,32],[81,19,4,128,29],[80,-9,184,80,27,65,129,66],[80,0,177],[163],[80,0],[97,19,81,17],[81,19,69,129,52],[80,0],[97,20,81,18],[81,20,69,129,51],[81,19,81,20,136,4],[81,20,4,128,47],[81,19,4,128,44],[162],[163],[80,0],[97,19,81,17],[81,19,69,129,64],[80,0],[97,20,81,18],[81,20,69,129,63],[81,19,81,20,210,80,2,9,80,0,67,129,62],[81,19,81,20,81,19,81,20,210,80,3,11,211],[81,20,4,128,58],[81,19,4,128,55],[162],[128,40],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"FOR (counting) loop",author:"Oxford University",date:"18/04/2016",time:"20:38:12",code:"REM ForLoop\n\nFOR count%=1 TO 200\n  FORWARD(count% DIV 3)\n  RIGHT(5)\n  COLOUR(RED)\n  BLOT(200)\n  COLOUR(BLACK)\n  CIRCLE(200)\nNEXT\nEND",usage:[{category:"Turtle: relative movement",expressions:[{name:"FORWARD",level:1,count:1,lines:"4"},{name:"RIGHT",level:1,count:1,lines:"5"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:1,lines:"7"},{name:"CIRCLE",level:1,count:1,lines:"9"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"6 8"}],total:2},{category:"Command structures",expressions:[{name:"FOR",level:1,count:1,lines:"3"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,1],[97,16,80,200],[81,16,69,129,13],[81,16,80,3,28,227],[80,5,230],[80,16711680,221],[80,200,243],[80,0,221],[80,200,242],[81,16,4,128,4],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Flocking behaviour",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Using Booleans",author:"Oxford University",date:"18/04/2016",time:"22:15:16",code:"REM Flashlights\n\nBLOT(1000)\nTHICKNESS(8)\nREPEAT\n  SETX(RND(8)*111)\n  SETY(RND(8)*111)\n  PROCdrawit(RND(2)=1)\nUNTIL FALSE\nEND\n\nDEF PROCdrawit(blot%)\n  IF blot% THEN\n    RNDCOL(10)\n    BLOT(25)\n  ELSE\n    COLOUR(BLACK)\n    BLOT(30)\n    RNDCOL(10)\n    CIRCLE(25)\n  ENDIF\nENDPROC",usage:[{category:"Turtle: absolute movement",expressions:[{name:"SETX",level:1,count:1,lines:"6"},{name:"SETY",level:1,count:1,lines:"7"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:3,lines:"3 15 18"},{name:"CIRCLE",level:1,count:1,lines:"20"}],total:4},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:1,lines:"17"},{name:"RNDCOL",level:1,count:2,lines:"14 19"},{name:"THICKNESS",level:1,count:1,lines:"4"}],total:4},{category:"General arithmetic functions",expressions:[{name:"RND",level:2,count:3,lines:"6 7 8"}],total:3},{category:"Command structures",expressions:[{name:"IF",level:1,count:1,lines:"13"},{name:"ELSE",level:1,count:1,lines:"16"},{name:"REPEAT",level:2,count:1,lines:"5"},{name:"DEF PROC",level:2,count:1,lines:"12"}],total:4},{category:"Subroutine calls",expressions:[{name:"PROCdrawit",level:0,count:1,lines:"8"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,5,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,16],[140,1],[144,1,1],[98,1,1],[82,1,1,129,11],[80,10,19,4,222,221],[80,25,243],[128,15],[80,0,221],[80,30,243],[80,10,19,4,222,221],[80,25,242],[145,1,141,137],[80,1e3,243],[80,8,220],[80,8,19,4,80,111,26,217],[80,8,19,4,80,111,26,218],[80,2,19,4,80,1,64,136,4],[80,0,129,18],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Five turtles moving to the mouse",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Simple drawing with pauses",author:"Oxford University",date:"16/04/2016",time:"15:56:50",code:"REM DrawPause\n\nCOLOUR(GREEN)\nBLOT(100)\nPAUSE(1000)\nCOLOUR(RED)\nFORWARD(450)\nPAUSE(1000)\nRIGHT(90)\nTHICKNESS(9)\nCOLOUR(BLUE)\nPAUSE(1000)\nFORWARD(300)\nEND",usage:[{category:"Turtle: relative movement",expressions:[{name:"FORWARD",level:1,count:2,lines:"7 13"},{name:"RIGHT",level:1,count:1,lines:"9"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:1,lines:"4"}],total:1},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:3,lines:"3 6 11"},{name:"THICKNESS",level:1,count:1,lines:"10"}],total:4},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:3,lines:"5 8 12"}],total:3}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,5,115,80,15,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,2263842,221],[80,100,243],[80,1e3,178],[80,16711680,221],[80,450,227],[80,1e3,178],[80,90,230],[80,9,220],[80,255,221],[80,1e3,178],[80,300,227],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Spread of disease",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Spread of disease",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Spread of disease",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Digital clock (using IF and WHILE)",author:"University of Oxford",date:"29/09/2016",time:"16:19:54",code:'REM DigitalClock\n\nBLANK(LIGHTGREEN)\nSETXY(250,390)\nCOLOUR(MAROON)\nTHICKNESS(10)\nBOX(500,210,LIGHTBROWN,TRUE)\nCOLOUR(BLACK)\nHours%=0\nMinutes%=0\nWHILE Hours%<12\n  PROCshowtime\n  PAUSE(600)\n  INC(Minutes%)\n  IF Minutes%=60 THEN\n    INC(Hours%)\n    Minutes%=0\n  ENDIF\nENDWHILE\nPROCshowtime\nEND\n\nDEF PROCshowtime\n  LOCAL hstring$,mstring$\n  SETXY(300,430)\n  BOX(400,130,WHITE,FALSE)\n  IF Hours%<10 THEN\n    hstring$="0"+STR$(Hours%)\n  ELSE\n    hstring$=STR$(Hours%)\n  ENDIF\n  IF Minutes%<10 THEN\n    mstring$="0"+STR$(Minutes%)\n  ELSE\n    mstring$=STR$(Minutes%)\n  ENDIF\n  PRINT(hstring$+":"+mstring$,21,100)\nENDPROC',usage:[{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:2,lines:"4 25"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"BOX",level:2,count:2,lines:"7 26"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"5 8"},{name:"THICKNESS",level:1,count:1,lines:"6"}],total:3},{category:"Canvas operations",expressions:[{name:"BLANK",level:1,count:1,lines:"3"}],total:1},{category:"General arithmetic functions",expressions:[{name:"INC",level:1,count:2,lines:"14 16"}],total:2},{category:"String operations",expressions:[{name:"PRINT",level:1,count:1,lines:"37"}],total:1},{category:"Type conversion routines",expressions:[{name:"STR$",level:1,count:4,lines:"28 30 33 35"}],total:4},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"13"}],total:1},{category:"Command structures",expressions:[{name:"IF",level:1,count:3,lines:"15 27 32"},{name:"ELSE",level:1,count:2,lines:"29 34"},{name:"WHILE",level:2,count:1,lines:"11"},{name:"DEF PROC",level:2,count:1,lines:"23"}],total:7},{category:"Variable scope modifiers",expressions:[{name:"LOCAL",level:2,count:1,lines:"24"}],total:1},{category:"Subroutine calls",expressions:[{name:"PROCshowtime",level:0,count:2,lines:"12 20"}],total:2}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,7,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,18],[140,1],[144,1,2],[80,300,80,430,224],[80,400,80,130,80,16777215,80,0,246],[81,17,80,10,66,129,11],[87,48,0,81,17,49,54,98,1,1,146],[128,12],[81,17,49,98,1,1,146],[81,18,80,10,66,129,15],[87,48,0,81,18,49,54,98,1,2,146],[128,16],[81,18,49,98,1,2,146],[82,1,1,87,58,0,54,82,1,2,54,80,21,80,100,189],[145,1,141,137],[80,10025880,248],[80,250,80,390,224],[80,8388608,221],[80,10,220],[80,500,80,210,80,11567184,80,-1,246],[80,0,221],[80,0,97,17],[80,0,97,18],[81,17,80,12,66,129,34],[136,4],[80,600,178],[84,18,1,112,4,2,113],[81,18,80,60,64,129,33],[84,17,1,112,4,2,113],[80,0,97,18],[128,26],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Diffusion",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Cycling colours (using MOD)",author:"Oxford University",date:"19/04/2016",time:"10:28:32",code:"REM CycleColours\n\nBLANK(BLACK)\ncolinc%=RND(5)-1\ncolcode%=RND(20)\nCOLOUR(RGB(colcode%))\nlength%=0\nTHICKNESS(16)\nREPEAT\n  colcode%=(colcode%+colinc%) MOD 20+1\n  COLOUR(RGB(colcode%))\n  length%=length%+1\n  FORWARD(length%)\n  RIGHT(30)\nUNTIL length%>250\nEND",usage:[{category:"Turtle: relative movement",expressions:[{name:"FORWARD",level:1,count:1,lines:"13"},{name:"RIGHT",level:1,count:1,lines:"14"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"6 11"},{name:"THICKNESS",level:1,count:1,lines:"8"},{name:"RGB",level:3,count:2,lines:"6 11"}],total:5},{category:"Canvas operations",expressions:[{name:"BLANK",level:1,count:1,lines:"3"}],total:1},{category:"General arithmetic functions",expressions:[{name:"RND",level:2,count:2,lines:"4 5"}],total:2},{category:"Command structures",expressions:[{name:"REPEAT",level:2,count:1,lines:"9"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,8,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,0,248],[80,5,19,4,80,1,25,97,16],[80,20,19,4,97,17],[81,17,222,221],[80,0,97,18],[80,16,220],[81,17,81,16,24,80,20,29,80,1,24,97,17],[81,17,222,221],[81,18,80,1,24,97,18],[81,18,227],[80,30,230],[81,18,80,250,67,129,9],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Spiral of colours",author:"Oxford University",date:"18/04/2016",time:"21:48:56",code:"REM ColourSpiral\n\nBLANK(BLACK)\nFORWARD(15)\nTHICKNESS(27)\nlength%=20\nREPEAT\n  RNDCOL(40)\n  PROClineturn\n  length%=length%+10\nUNTIL length%>500\nEND\n\nDEF PROClineturn\n  FORWARD(length%)\n  RIGHT(60)\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"FORWARD",level:1,count:2,lines:"4 15"},{name:"RIGHT",level:1,count:1,lines:"16"}],total:3},{category:"Other Turtle commands",expressions:[{name:"RNDCOL",level:1,count:1,lines:"8"},{name:"THICKNESS",level:1,count:1,lines:"5"}],total:2},{category:"Canvas operations",expressions:[{name:"BLANK",level:1,count:1,lines:"3"}],total:1},{category:"Command structures",expressions:[{name:"REPEAT",level:2,count:1,lines:"7"},{name:"DEF PROC",level:2,count:1,lines:"14"}],total:2},{category:"Subroutine calls",expressions:[{name:"PROClineturn",level:0,count:1,lines:"9"}],total:1}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,6,115,80,17,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,8],[140,1],[81,17,227],[80,60,230],[141,137],[80,0,248],[80,15,227],[80,27,220],[80,20,97,17],[80,40,19,4,222,221],[136,4],[81,17,80,10,24,97,17],[81,17,80,500,67,129,12],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Analogue clock (using REPEAT)",author:"Oxford University",date:"18/04/2016",time:"22:03:10",code:"REM Clock\n\nTHICKNESS(10)\nCIRCLE(400)\nHours%=0\nMinutes%=0\nREPEAT\n  REPEAT\n    PROCshowhands\n    PAUSE(600)\n    INC(Minutes%)\n  UNTIL Minutes%=60\n  INC(Hours%)\n  Minutes%=0\nUNTIL Hours%=12\nPROCshowhands\nEND\n\nDEF PROCshowhands\n  COLOUR(WHITE)\n  BLOT(360)\n  COLOUR(RED)\n  DIRECTION(Hours%*30)\n  THICKNESS(10)\n  FORWARD(250)\n  BACK(250)\n  DIRECTION(Minutes%*6)\n  THICKNESS(6)\n  FORWARD(350)\n  BACK(350)\nENDPROC",usage:[{category:"Turtle: relative movement",expressions:[{name:"BACK",level:1,count:2,lines:"26 30"},{name:"FORWARD",level:1,count:2,lines:"25 29"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"DIRECTION",level:1,count:2,lines:"23 27"}],total:2},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:1,lines:"21"},{name:"CIRCLE",level:1,count:1,lines:"4"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"20 22"},{name:"THICKNESS",level:1,count:3,lines:"3 24 28"}],total:5},{category:"General arithmetic functions",expressions:[{name:"INC",level:1,count:2,lines:"11 13"}],total:2},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"10"}],total:1},{category:"Command structures",expressions:[{name:"REPEAT",level:2,count:2,lines:"7 8"},{name:"DEF PROC",level:2,count:1,lines:"19"}],total:3},{category:"Subroutine calls",expressions:[{name:"PROCshowhands",level:0,count:2,lines:"9 16"}],total:2}],pcode:[[80,11,1,1,80,0,113,80,5,2,113,4,80,7,115,80,18,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[128,17],[140,1],[80,16777215,221],[80,360,243],[80,16711680,221],[81,17,80,30,26,219],[80,10,220],[80,250,227],[80,250,228],[81,18,80,6,26,219],[80,6,220],[80,350,227],[80,350,228],[141,137],[80,10,220],[80,400,242],[80,0,97,17],[80,0,97,18],[136,4],[80,600,178],[84,18,1,112,4,2,113],[81,18,80,60,64,129,21],[84,17,1,112,4,2,113],[80,0,97,18],[81,17,80,12,64,129,21],[136,4],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Circling circles",author:"Oxford University",date:"18/04/2016",time:"21:39:48",code:"REM Circles\n\nTHICKNESS(6)\nPENUP\nBLANK(BLACK)\nCOLOUR(ORANGE)\nFOR count%=1 TO 36\n  FORWARD(200)\n  CIRCLE(200)\n  BACK(200)\n  RIGHT(10)\n  PAUSE(25)\nNEXT\nEND",usage:[{category:"Turtle: relative movement",expressions:[{name:"BACK",level:1,count:1,lines:"10"},{name:"FORWARD",level:1,count:1,lines:"8"},{name:"RIGHT",level:1,count:1,lines:"11"}],total:3},{category:"Turtle: drawing shapes",expressions:[{name:"CIRCLE",level:1,count:1,lines:"9"}],total:1},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:1,lines:"6"},{name:"PENUP",level:1,count:1,lines:"4"},{name:"THICKNESS",level:1,count:1,lines:"3"}],total:3},{category:"Canvas operations",expressions:[{name:"BLANK",level:1,count:1,lines:"5"}],total:1},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"12"}],total:1},{category:"Command structures",expressions:[{name:"FOR",level:1,count:1,lines:"7"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,6,220],[160],[80,0,248],[80,16755200,221],[80,1],[97,16,80,36],[81,16,69,129,16],[80,200,227],[80,200,242],[80,200,228],[80,10,230],[80,25,178],[81,16,4,128,8],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Cheetahs and gazelles",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Brownian motion",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Bouncing ball (using variables)",author:"Oxford University",date:"18/04/2016",time:"22:31:01",code:"REM BouncingBall\n\nx%=100\ny%=700\nxvel%=8\nyvel%=-4\nWHILE 0<1\n  NOUPDATE\n  COLOUR(WHITE)\n  BLOT(51)\n  x%=x%+xvel%\n  y%=y%+yvel%\n  SETXY(x%,y%)\n  COLOUR(RED)\n  BLOT(50)\n  UPDATE\n  PAUSE(5)\n  IF (x%<50) OR (x%>949) THEN\n    xvel%=-xvel%\n  ENDIF\n  IF (y%<50) OR (y%>949) THEN\n    yvel%=-yvel%\n  ENDIF\nENDWHILE\nEND",usage:[{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:1,lines:"13"}],total:1},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:2,lines:"10 15"}],total:2},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:2,lines:"9 14"}],total:2},{category:"Canvas operations",expressions:[{name:"NOUPDATE",level:1,count:1,lines:"8"},{name:"UPDATE",level:1,count:1,lines:"16"}],total:2},{category:"Input and timing routines",expressions:[{name:"PAUSE",level:1,count:1,lines:"17"}],total:1},{category:"Command structures",expressions:[{name:"IF",level:1,count:2,lines:"18 21"},{name:"WHILE",level:2,count:1,lines:"7"}],total:3}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,9,115,80,19,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,100,97,16],[80,700,97,17],[80,8,97,18],[80,4,16,97,19],[80,0,80,1,66,129,23],[163],[80,16777215,221],[80,51,243],[81,16,81,18,24,97,16],[81,17,81,19,24,97,17],[81,16,81,17,224],[80,16711680,221],[80,50,243],[162],[80,5,178],[81,16,80,50,66,81,16,80,949,67,10,129,20],[81,18,16,97,18],[81,17,80,50,66,81,17,80,949,67,10,129,22],[81,19,16,97,19],[128,7],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Barnsley IFS",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Barnsley IFS",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"3D colour effects",author:"Oxford University",date:"18/04/2016",time:"22:19:42",code:"REM Balls3D\n\nSETXY(250,250)\nCOLOUR(#00FFFF)\nFOR count%=240 TO 1 STEP -1\n  BLOT(count%)\n  TURTC%=TURTC%+#10000\nNEXT\nRIGHT(60)\nSETXY(750,250)\nCOLOUR(#D2691E)\nFOR count%=40 TO 1 STEP -1\n  BLOT(count%*6)\n  FORWARD(3)\n  TURTC%=TURTC%+#10102\nNEXT\nSETXY(250,750)\nCOLOUR(#D2691E)\nFOR count%=40 TO 1 STEP -1\n  BLOT(count%*6)\n  FORWARD(3)\n  TURTC%=TURTC%+#10102\nNEXT\nSETXY(750,750)\nCOLOUR(#FFA500)\nFOR count%=80 TO 1 STEP -1\n  BLOT(count%*3)\n  FORWARD(2)\n  TURTC%=TURTC%+#101\nNEXT\nEND",usage:[{category:"Turtle: relative movement",expressions:[{name:"FORWARD",level:1,count:3,lines:"14 21 28"},{name:"RIGHT",level:1,count:1,lines:"9"}],total:4},{category:"Turtle: absolute movement",expressions:[{name:"SETXY",level:1,count:4,lines:"3 10 17 24"}],total:4},{category:"Turtle: drawing shapes",expressions:[{name:"BLOT",level:1,count:4,lines:"6 13 20 27"}],total:4},{category:"Other Turtle commands",expressions:[{name:"COLOUR",level:1,count:4,lines:"4 11 18 25"}],total:4},{category:"Command structures",expressions:[{name:"FOR",level:1,count:4,lines:"5 12 19 26"}],total:4}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[80,250,80,250,224],[80,65535,221],[80,240],[97,16,80,1],[81,16,68,129,11],[81,16,243],[81,15,80,65536,24,97,15],[81,16,5,128,6],[80,60,230],[80,750,80,250,224],[80,13789470,221],[80,40],[97,16,80,1],[81,16,68,129,21],[81,16,80,6,26,243],[80,3,227],[81,15,80,65794,24,97,15],[81,16,5,128,15],[80,250,80,750,224],[80,13789470,221],[80,40],[97,16,80,1],[81,16,68,129,30],[81,16,80,6,26,243],[80,3,227],[81,15,80,65794,24,97,15],[81,16,5,128,24],[80,750,80,750,224],[80,16753920,221],[80,80],[97,16,80,1],[81,16,68,129,39],[81,16,80,3,26,243],[80,2,227],[81,15,80,257,24,97,15],[81,16,5,128,33],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Cellular automata",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Firing a canon (automatic)",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Asking for typed input",author:"University of Oxford",date:"29/09/2016",time:"16:54:45",code:'REM AskInput\n\nWRITELN("What is your name?")\ns$=GETLINE$\nWRITELN("")\nWRITELN("Hello, "+s$+",")\nWRITELN("How are you?")\nEND',usage:[{category:"String operations",expressions:[{name:"WRITELN",level:1,count:4,lines:"3 5 6 7"}],total:4},{category:"Input and timing routines",expressions:[{name:"GETLINE$",level:1,count:1,lines:"4"}],total:1}],pcode:[[80,10,1,1,80,0,113,80,5,2,113,4,80,6,115,80,16,104],[216,80,2,220,80,32,186,80,1,113,146,80,0,1,80,1e3,1,1,1,209,208],[87,87,104,97,116,32,105,115,32,121,111,117,114,32,110,97,109,101,63,0,190,191],[188,97,16,146],[87,0,190,191],[87,72,101,108,108,111,44,32,0,81,16,54,87,44,0,54,190,191],[87,72,111,119,32,97,114,101,32,121,111,117,63,0,190,191],[130]]}},function(e,n){e.exports={format:1,language:"BASIC",version:11,name:"Firing a canon (manual)",author:"Oxford University",date:"01/01/2016",time:"00:00:00",code:"REM this program is not available in Turtle BASIC",usage:[],pcode:[[130]]}},function(e,n,t){"use strict";t.r(n);var a=(e,n={})=>{const t=document.createElement(e);return Object.keys(n).forEach(e=>{switch(e){case"classes":n.classes.forEach(e=>t.classList.add(e));break;case"content":"string"==typeof n.content?t.innerHTML=n.content:n.content.forEach(e=>t.appendChild(e));break;case"on":n.on.forEach(e=>t.addEventListener(e.type,e.callback));break;default:t.setAttribute(e,n[e])}}),t};t(241);const o=e=>{Array.prototype.slice.call(e.parentElement.children).forEach(e=>e.classList.remove("active")),e.classList.add("active")},s=e=>{o(e.currentTarget),o(document.getElementById(e.currentTarget.getAttribute("data-target")))},l=e=>a("a",{classes:e.active?["tsx-tab","active"]:["tsx-tab"],content:e.label,"data-target":e.label.replace(/ /g,""),on:[{type:"click",callback:s}]}),r=e=>a("div",{classes:e.active?["tsx-tab-pane","active"]:["tsx-tab-pane"],content:e.content,id:e.label.replace(/ /g,"")});var i=(e,n)=>a("div",{classes:["tsx-tabs",e],content:[(e=>a("nav",{classes:["tsx-tab-list"],content:e.map(l)}))(n),(e=>a("div",{classes:["tsx-tab-panes"],content:e.map(r)}))(n)]});const c=["BASIC","Pascal","Python"],u=[11,12];var d=e=>{console.log(e)},p=t(223),m=t.n(p),g=t(222),h=t.n(g),y=t(221),v=t.n(y),x=t(220),f=t.n(x),b=t(219),w=t.n(b),T=t(218),E=t.n(T),k=t(217),O=t.n(k),R=t(216),C=t.n(R),S=t(215),P=t.n(S),I=t(214),N=t.n(I),A=t(213),B=t.n(A),L=t(212),D=t.n(L),U=t(211),F=t.n(U),M=t(210),G=t.n(M),H=t(209),q=t.n(H),Y=t(208),W=t.n(Y),X=t(207),V=t.n(X),z=t(206),K=t.n(z),$=t(205),j=t.n($),Q=t(204),Z=t.n(Q),_=t(203),J=t.n(_),ee=t(202),ne=t.n(ee),te=t(201),ae=t.n(te),oe=t(200),se=t.n(oe),le=t(199),re=t.n(le),ie=t(198),ce=t.n(ie),ue=t(197),de=t.n(ue),pe=t(196),me=t.n(pe),ge=t(195),he=t.n(ge),ye=t(194),ve=t.n(ye),xe=t(193),fe=t.n(xe),be=t(192),we=t.n(be),Te=t(191),Ee=t.n(Te),ke=t(190),Oe=t.n(ke),Re=t(189),Ce=t.n(Re),Se=t(188),Pe=t.n(Se),Ie=t(187),Ne=t.n(Ie),Ae=t(186),Be=t.n(Ae),Le=t(185),De=t.n(Le),Ue=t(184),Fe=t.n(Ue),Me=t(183),Ge=t.n(Me),He=t(182),qe=t.n(He),Ye=t(181),We=t.n(Ye),Xe=t(180),Ve=t.n(Xe),ze=t(179),Ke=t.n(ze),$e=t(178),je=t.n($e),Qe=t(177),Ze=t.n(Qe),_e=t(176),Je=t.n(_e),en=t(175),nn=t.n(en),tn=t(174),an=t.n(tn),on=t(173),sn=t.n(on),ln=t(172),rn=t.n(ln),cn=t(171),un=t.n(cn),dn=t(170),pn=t.n(dn),mn=t(169),gn=t.n(mn),hn=t(168),yn=t.n(hn),vn=t(167),xn=t.n(vn),fn=t(166),bn=t.n(fn),wn=t(165),Tn=t.n(wn),En=t(164),kn=t.n(En),On=t(163),Rn=t.n(On),Cn=t(162),Sn=t.n(Cn),Pn=t(161),In=t.n(Pn),Nn=t(160),An=t.n(Nn),Bn=t(159),Ln=t.n(Bn),Dn=t(158),Un=t.n(Dn),Fn=t(157),Mn=t.n(Fn),Gn=t(156),Hn=t.n(Gn),qn=t(155),Yn=t.n(qn),Wn=t(154),Xn=t.n(Wn),Vn=t(153),zn=t.n(Vn),Kn=t(152),$n=t.n(Kn),jn=t(151),Qn=t.n(jn),Zn=t(150),_n=t.n(Zn),Jn={AimCannon:m.a,AskInput:h.a,AutoCannon:v.a,Automata:f.a,Balls3D:w.a,BarnsleyColour:E.a,BarnsleyIFS:O.a,BouncingBall:C.a,BrownianMotion:P.a,Cheetahs:N.a,Circles:B.a,Clock:D.a,ColourSpiral:F.a,CycleColours:G.a,Diffusion:q.a,DigitalClock:W.a,Disease:V.a,DragonColour:K.a,DragonIFS:j.a,DrawPause:Z.a,FiveTurtles:J.a,Flashlights:ne.a,Flocking:ae.a,ForLoop:se.a,GameOfLife:re.a,GravitySteps:ce.a,IFSBackground:de.a,Interference:me.a,IteratedPD:he.a,KnightsTour:ve.a,Launch:fe.a,LifeStart:we.a,Logistic:Ee.a,LogisticSpider:Oe.a,Mandelbrot:Ce.a,MandelbrotMini:Pe.a,MandelbrotMiniSpectrum:Ne.a,MandelbrotSpectrum:Be.a,MathFunctions:De.a,MovingBall:Fe.a,MultiBounce:Ge.a,NestedLoops:qe.a,Nim:We.a,NoughtsAndCrosses:Ve.a,OlympicRings1:Ke.a,OlympicRings2:je.a,PaintApp:Ze.a,ParameterProc:Je.a,PolygonRings:nn.a,Polygons:an.a,Quine:sn.a,RefParams:rn.a,Schelling:un.a,SexRatio:pn.a,Shoot:gn.a,Sierpinski:yn.a,SierpinskiColour:xn.a,SierpinskiDots:bn.a,SierpinskiIFS:Tn.a,SimpleDraw:kn.a,SimpleProc:Rn.a,Snake:Sn.a,SolarSystem:In.a,Stars:An.a,StringFunctions:Ln.a,ThePlough:Un.a,TreeIFS:Mn.a,Triangles:Hn.a,TrigGraphs:Yn.a,TurtleBounce:Xn.a,TurtleMove:zn.a,TwoSlits:$n.a,WaveSuperposer:Qn.a,YouAreHere:_n.a},et=t(149),nt=t.n(et),tt=t(148),at=t.n(tt),ot=t(147),st=t.n(ot),lt=t(146),rt=t.n(lt),it=t(145),ct=t.n(it),ut=t(144),dt=t.n(ut),pt=t(143),mt=t.n(pt),gt=t(142),ht=t.n(gt),yt=t(141),vt=t.n(yt),xt=t(140),ft=t.n(xt),bt=t(139),wt=t.n(bt),Tt=t(138),Et=t.n(Tt),kt=t(137),Ot=t.n(kt),Rt=t(136),Ct=t.n(Rt),St=t(135),Pt=t.n(St),It=t(134),Nt=t.n(It),At=t(133),Bt=t.n(At),Lt=t(132),Dt=t.n(Lt),Ut=t(131),Ft=t.n(Ut),Mt=t(130),Gt=t.n(Mt),Ht=t(129),qt=t.n(Ht),Yt=t(128),Wt=t.n(Yt),Xt=t(127),Vt=t.n(Xt),zt=t(126),Kt=t.n(zt),$t=t(125),jt=t.n($t),Qt=t(124),Zt=t.n(Qt),_t=t(123),Jt=t.n(_t),ea=t(122),na=t.n(ea),ta=t(121),aa=t.n(ta),oa=t(120),sa=t.n(oa),la=t(119),ra=t.n(la),ia=t(118),ca=t.n(ia),ua=t(117),da=t.n(ua),pa=t(116),ma=t.n(pa),ga=t(115),ha=t.n(ga),ya=t(114),va=t.n(ya),xa=t(113),fa=t.n(xa),ba=t(112),wa=t.n(ba),Ta=t(111),Ea=t.n(Ta),ka=t(110),Oa=t.n(ka),Ra=t(109),Ca=t.n(Ra),Sa=t(108),Pa=t.n(Sa),Ia=t(107),Na=t.n(Ia),Aa=t(106),Ba=t.n(Aa),La=t(105),Da=t.n(La),Ua=t(104),Fa=t.n(Ua),Ma=t(103),Ga=t.n(Ma),Ha=t(102),qa=t.n(Ha),Ya=t(101),Wa=t.n(Ya),Xa=t(100),Va=t.n(Xa),za=t(99),Ka=t.n(za),$a=t(98),ja=t.n($a),Qa=t(97),Za=t.n(Qa),_a=t(96),Ja=t.n(_a),eo=t(95),no=t.n(eo),to=t(94),ao=t.n(to),oo=t(93),so=t.n(oo),lo=t(92),ro=t.n(lo),io=t(91),co=t.n(io),uo=t(90),po=t.n(uo),mo=t(89),go=t.n(mo),ho=t(88),yo=t.n(ho),vo=t(87),xo=t.n(vo),fo=t(86),bo=t.n(fo),wo=t(85),To=t.n(wo),Eo=t(84),ko=t.n(Eo),Oo=t(83),Ro=t.n(Oo),Co=t(82),So=t.n(Co),Po=t(81),Io=t.n(Po),No=t(80),Ao=t.n(No),Bo=t(79),Lo=t.n(Bo),Do=t(78),Uo=t.n(Do),Fo=t(77),Mo=t.n(Fo),Go=t(76),Ho=t.n(Go),qo={AimCannon:nt.a,AskInput:at.a,AutoCannon:st.a,Automata:rt.a,Balls3D:ct.a,BarnsleyColour:dt.a,BarnsleyIFS:mt.a,BouncingBall:ht.a,BrownianMotion:vt.a,Cheetahs:ft.a,Circles:wt.a,Clock:Et.a,ColourSpiral:Ot.a,CycleColours:Ct.a,Diffusion:Pt.a,DigitalClock:Nt.a,Disease:Bt.a,DragonColour:Dt.a,DragonIFS:Ft.a,DrawPause:Gt.a,FiveTurtles:qt.a,Flashlights:Wt.a,Flocking:Vt.a,ForLoop:Kt.a,GameOfLife:jt.a,GravitySteps:Zt.a,IFSBackground:Jt.a,Interference:na.a,IteratedPD:aa.a,KnightsTour:sa.a,Launch:ra.a,LifeStart:ca.a,Logistic:da.a,LogisticSpider:ma.a,Mandelbrot:ha.a,MandelbrotMini:va.a,MandelbrotMiniSpectrum:fa.a,MandelbrotSpectrum:wa.a,MathFunctions:Ea.a,MovingBall:Oa.a,MultiBounce:Ca.a,NestedLoops:Pa.a,Nim:Na.a,NoughtsAndCrosses:Ba.a,OlympicRings1:Da.a,OlympicRings2:Fa.a,PaintApp:Ga.a,ParameterProc:qa.a,PolygonRings:Wa.a,Polygons:Va.a,Quine:Ka.a,RefParams:ja.a,Schelling:Za.a,SexRatio:Ja.a,Shoot:no.a,Sierpinski:ao.a,SierpinskiColour:so.a,SierpinskiDots:ro.a,SierpinskiIFS:co.a,SimpleDraw:po.a,SimpleProc:go.a,Snake:yo.a,SolarSystem:xo.a,Stars:bo.a,StringFunctions:To.a,ThePlough:ko.a,TreeIFS:Ro.a,Triangles:So.a,TrigGraphs:Io.a,TurtleBounce:Ao.a,TurtleMove:Lo.a,TwoSlits:Uo.a,WaveSuperposer:Mo.a,YouAreHere:Ho.a},Yo=t(75),Wo=t.n(Yo),Xo=t(74),Vo=t.n(Xo),zo=t(73),Ko=t.n(zo),$o=t(72),jo=t.n($o),Qo=t(71),Zo=t.n(Qo),_o=t(70),Jo=t.n(_o),es=t(69),ns=t.n(es),ts=t(68),as=t.n(ts),os=t(67),ss=t.n(os),ls=t(66),rs=t.n(ls),is=t(65),cs=t.n(is),us=t(64),ds=t.n(us),ps=t(63),ms=t.n(ps),gs=t(62),hs=t.n(gs),ys=t(61),vs=t.n(ys),xs=t(60),fs=t.n(xs),bs=t(59),ws=t.n(bs),Ts=t(58),Es=t.n(Ts),ks=t(57),Os=t.n(ks),Rs=t(56),Cs=t.n(Rs),Ss=t(55),Ps=t.n(Ss),Is=t(54),Ns=t.n(Is),As=t(53),Bs=t.n(As),Ls=t(52),Ds=t.n(Ls),Us=t(51),Fs=t.n(Us),Ms=t(50),Gs=t.n(Ms),Hs=t(49),qs=t.n(Hs),Ys=t(48),Ws=t.n(Ys),Xs=t(47),Vs=t.n(Xs),zs=t(46),Ks=t.n(zs),$s=t(45),js=t.n($s),Qs=t(44),Zs=t.n(Qs),_s=t(43),Js=t.n(_s),el=t(42),nl=t.n(el),tl=t(41),al=t.n(tl),ol=t(40),sl=t.n(ol),ll=t(39),rl=t.n(ll),il=t(38),cl=t.n(il),ul=t(37),dl=t.n(ul),pl=t(36),ml=t.n(pl),gl=t(35),hl=t.n(gl),yl=t(34),vl=t.n(yl),xl=t(33),fl=t.n(xl),bl=t(32),wl=t.n(bl),Tl=t(31),El=t.n(Tl),kl=t(30),Ol=t.n(kl),Rl=t(29),Cl=t.n(Rl),Sl=t(28),Pl=t.n(Sl),Il=t(27),Nl=t.n(Il),Al=t(26),Bl=t.n(Al),Ll=t(25),Dl=t.n(Ll),Ul=t(24),Fl=t.n(Ul),Ml=t(23),Gl=t.n(Ml),Hl=t(22),ql=t.n(Hl),Yl=t(21),Wl=t.n(Yl),Xl=t(20),Vl=t.n(Xl),zl=t(19),Kl=t.n(zl),$l=t(18),jl=t.n($l),Ql=t(17),Zl=t.n(Ql),_l=t(16),Jl=t.n(_l),er=t(15),nr=t.n(er),tr=t(14),ar=t.n(tr),or=t(13),sr=t.n(or),lr=t(12),rr=t.n(lr),ir=t(11),cr=t.n(ir),ur=t(10),dr=t.n(ur),pr=t(9),mr=t.n(pr),gr=t(8),hr=t.n(gr),yr=t(7),vr=t.n(yr),xr=t(6),fr=t.n(xr),br=t(5),wr=t.n(br),Tr=t(4),Er=t.n(Tr),kr=t(3),Or=t.n(kr),Rr=t(2),Cr=t.n(Rr);const Sr={BASIC:Jn,Pascal:qo,Python:{AimCannon:Wo.a,AskInput:Vo.a,AutoCannon:Ko.a,Automata:jo.a,Balls3D:Zo.a,BarnsleyColour:Jo.a,BarnsleyIFS:ns.a,BouncingBall:as.a,BrownianMotion:ss.a,Cheetahs:rs.a,Circles:cs.a,Clock:ds.a,ColourSpiral:ms.a,CycleColours:hs.a,Diffusion:vs.a,DigitalClock:fs.a,Disease:ws.a,DragonColour:Es.a,DragonIFS:Os.a,DrawPause:Cs.a,FiveTurtles:Ps.a,Flashlights:Ns.a,Flocking:Bs.a,ForLoop:Ds.a,GameOfLife:Fs.a,GravitySteps:Gs.a,IFSBackground:qs.a,Interference:Ws.a,IteratedPD:Vs.a,KnightsTour:Ks.a,Launch:js.a,LifeStart:Zs.a,Logistic:Js.a,LogisticSpider:nl.a,Mandelbrot:al.a,MandelbrotMini:sl.a,MandelbrotMiniSpectrum:rl.a,MandelbrotSpectrum:cl.a,MathFunctions:dl.a,MovingBall:ml.a,MultiBounce:hl.a,NestedLoops:vl.a,Nim:fl.a,NoughtsAndCrosses:wl.a,OlympicRings1:El.a,OlympicRings2:Ol.a,PaintApp:Cl.a,ParameterProc:Pl.a,PolygonRings:Nl.a,Polygons:Bl.a,Quine:Dl.a,RefParams:Fl.a,Schelling:Gl.a,SexRatio:ql.a,Shoot:Wl.a,Sierpinski:Vl.a,SierpinskiColour:Kl.a,SierpinskiDots:jl.a,SierpinskiIFS:Zl.a,SimpleDraw:Jl.a,SimpleProc:nr.a,Snake:ar.a,SolarSystem:sr.a,Stars:rr.a,StringFunctions:cr.a,ThePlough:dr.a,TreeIFS:mr.a,Triangles:hr.a,TrigGraphs:vr.a,TurtleBounce:fr.a,TurtleMove:wr.a,TwoSlits:Er.a,WaveSuperposer:Or.a,YouAreHere:Cr.a}},Pr=e=>Object.prototype.toString.call(e).slice(8,-1),Ir=(e,n)=>{localStorage.setItem(e,JSON.stringify(n))},Nr=e=>JSON.parse(localStorage.getItem(e)),Ar={get:()=>Nr("language"),set:e=>"String"===Pr(e)?c.indexOf(e)>-1?(Ir("language",e),!0):(d(`'${e}' is not a valid language`),!1):(d(`language must be a string; ${Pr(e)} received`),!1)},Br={get:()=>Nr("version"),set:e=>u.indexOf(e)>-1?(Ir("version",e),!0):(d(`${e} is not a valid version value`),!1)},Lr={get:()=>Nr(`name-${Ar.get()}`),set:e=>"String"===Pr(e)?(Ir(`name-${Ar.get()}`,e),!0):(d(`file name must be a string; ${Pr(e)} received`),!1)},Dr={get:()=>Nr(`compiled-${Ar.get()}`),set:e=>"Boolean"===Pr(e)?(Ir(`compiled-${Ar.get()}`,e),!0):(d(`compiled must be a boolean; ${Pr(e)} received`),!1),toggle:()=>(Ir(`compiled-${Ar.get()}`,!Dr.get()),!0)},Ur={get:()=>Nr(`code-${Ar.get()}`),set:e=>"String"===Pr(e)?(Ir(`code-${Ar.get()}`,e),!0):(d(`program code must be a string; ${Pr(e)} received`),!1)},Fr={get:()=>Nr(`usage-${Ar.get()}`),set:e=>"Array"===Pr(e)?(Ir(`usage-${Ar.get()}`,JSON.stringify(e)),!0):(d(`program usage must be an array; ${Pr(e)} received`),!1)},Mr={get:()=>Nr(`pcode-${Ar.get()}`),set:e=>"Array"===Pr(e)?(Ir(`pcode-${Ar.get()}`,e),!0):(d(`program pcode must be an array; ${Pr(e)} received`),!1)},Gr={get:()=>({name:Lr.get(),compiled:Dr.get(),code:Ur.get(),usage:Fr.get(),pcode:Mr.get()}),set:(e,n)=>{const t=e.split("."),a=t.pop(),o=t.join(".");switch(a){case"tgb":return Ar.set("BASIC")&&Lr.set(o)&&Ur.set(n);case"tgp":return Ar.set("Pascal")&&Lr.set(o)&&Ur.set(n);case"tgy":return Ar.set("Python")&&Lr.set(o)&&Ur.set(n);case"tgx":try{const e=JSON.parse(n);return Ar.set(e.language)&&Lr.set(e.name)&&Dr.set(!0)&&Ur.set(e.code)&&Fr.set(e.usage)&&Mr.set(e.pcode)}catch(e){return d("file content must be valid JSON"),!1}default:return d("incorrect file type"),!1}}},Hr={set:e=>(c.forEach(n=>{const t=Sr[n][e];Ir(`name-${n}`,t.name),Ir(`code-${n}`,t.code),Ir(`usage-${n}`,t.usage),Ir(`pcode-${n}`,t.pcode),Ir(`compiled-${n}`,!0)}),!0)},qr={get:()=>Nr("assembler"),toggle:()=>(Ir("assembler",!qr.get()),!0)},Yr={get:()=>Nr("decimal"),toggle:()=>(Ir("decimal",!Yr.get()),!0)},Wr={get:()=>Nr("show-canvas"),toggle:()=>(Ir("show-canvas",!Wr.get()),!0)},Xr={get:()=>Nr("show-output"),toggle:()=>(Ir("show-output",!Xr.get()),!0)},Vr={get:()=>Nr("show-memory"),toggle:()=>(Ir("show-memory",!Vr.get()),!0)},zr={get:()=>Nr("draw-count-max"),set:e=>(Ir("draw-count-max",e),!0)},Kr={get:()=>Nr("code-count-max"),set:e=>(Ir("code-count-max",e),!0)},$r={get:()=>Nr("small-size"),set:e=>(Ir("small-size",e),!0)},jr={get:()=>Nr("stack-size"),set:e=>(Ir("stack-size",e),!0)},Qr={get:()=>({showCanvas:Wr.get(),showOutput:Xr.get(),showMemory:Vr.get(),drawCountMax:zr.get(),codeCountMax:Kr.get(),smallSize:$r.get(),stackSize:jr.get()}),reset:()=>zr.set(4)&&Kr.set(1e5)&&$r.set(60)&&jr.set(2e4)},Zr={get:()=>Nr("group"),set:e=>(Ir("group",e),!0)},_r={get:()=>Nr("simple"),toggle:()=>(Ir("simple",!_r.get()),!0)},Jr={get:()=>Nr("intermediate"),toggle:()=>(Ir("intermediate",!Jr.get()),!0)},ei={get:()=>Nr("advanced"),toggle:()=>(Ir("advanced",!ei.get()),!0)};Ir("language",Nr("language")||"Pascal"),Ir("version",Nr("version")||11),c.forEach(e=>{Ir(`name-${e}`,Nr(`name-${e}`)||""),Ir(`compiled-${e}`,Nr(`compiled-${e}`)||!1),Ir(`code-${e}`,Nr(`code-${e}`)||""),Ir(`usage-${e}`,Nr(`usage-${e}`)||[]),Ir(`pcode-${e}`,Nr(`pcode-${e}`)||[])}),Ir("assembler",Nr("assembler")||!0),Ir("decimal",Nr("decimal")||!0),Ir("show-canvas",Nr("show-canvas")||!0),Ir("show-output",Nr("show-output")||!1),Ir("show-memory",Nr("show-memory")||!0),Ir("draw-count-max",Nr("draw-count-max")||4),Ir("code-count-max",Nr("code-count-max")||1e5),Ir("small-size",Nr("small-size")||60),Ir("stack-size",Nr("stack-size")||2e4),Ir("group",Nr("group")||0),Ir("simple",Nr("simple")||!0),Ir("intermediate",Nr("intermediate")||!1),Ir("advanced",Nr("advanced")||!1);var ni={language:Ar,version:Br,name:Lr,code:Ur,compiled:Dr,usage:Fr,pcode:Mr,file:Gr,example:Hr,assembler:qr,decimal:Yr,showCanvas:Wr,showOutput:Xr,showMemory:Vr,drawCountMax:zr,codeCountMax:Kr,smallSize:$r,stackSize:jr,machineOptions:Qr,group:Zr,simple:_r,intermediate:Jr,advanced:ei};const ti={},ai=(e,n)=>{ti[e]&&ti[e].forEach(e=>e(n)),"language-changed"===e&&ai("file-changed",ni.file.get()),"file-changed"===e&&(ai("name-changed",ni.name.get()),ai("code-changed",ni.code.get()),ai("usage-changed",ni.usage.get()),ai("pcode-changed",ni.pcode.get()))};var oi={on:(e,n)=>{ti[e]?ti[e].push(n):ti[e]=[n]},send:(e,n)=>{switch(e){case"set-language":ni.language.set(n)&&ai("language-changed",ni.language.get());break;case"set-example":ni.example.set(n)&&ai("file-changed",ni.file.get());break;case"set-file":ni.file.set(n.filename,n.content)&&ai("language-changed",ni.language.get());break;case"set-name":ni.name.set(n)&&ai("name-changed",ni.name.get());break;case"set-code":ni.code.set(n)&&ai("code-changed",ni.code.get());break;case"toggle-assembler":ni.assembler.toggle()&&ai("assembler-changed",ni.assembler.get());break;case"toggle-decimal":ni.decimal.toggle()&&ai("decimal-changed",ni.decimal.get());break;case"toggle-show-canvas":ni.showCanvas.toggle()&&ai("show-canvas-changed",ni.showCanvas.get());break;case"toggle-show-output":ni.showOutput.toggle()&&ai("show-output-changed",ni.showOutput.get());break;case"toggle-show-memory":ni.showMemory.toggle()&&ai("show-memory-changed",ni.showMemory.get());break;case"set-draw-count-max":ni.drawCountMax.set(n)&&ai("draw-count-max-changed",ni.drawCountMax.get());break;case"set-code-count-max":ni.codeCountMax.set(n)&&ai("code-count-max-changed",ni.codeCountMax.get());break;case"set-small-size":ni.smallSize.set(n)&&ai("small-size-changed",ni.smallSize.get());break;case"set-stack-size":ni.stackSize.set(n)&&ai("stack-size-changed",ni.stackSize.get());break;case"reset-machine-options":ni.machineOptions.reset()&&(ai("draw-count-max-changed",ni.drawCountMax.get()),ai("code-count-max-changed",ni.codeCountMax.get()),ai("small-size-changed",ni.smallSize.get()),ai("stack-size-changed",ni.stackSize.get()));break;case"set-group":ni.group.set(n)&&ai("group-changed",ni.group.get());break;case"toggle-simple":ni.simple.toggle()&&ai("simple-changed",ni.simple.get());break;case"toggle-intermediate":ni.intermediate.toggle()&&ai("intermediate-changed",ni.intermediate.get());break;case"toggle-advanced":ni.advanced.toggle()&&ai("advanced-changed",ni.advanced.get());break;case"compile-code":break;case"machine-run":ai("machine-11-run",{pcode:ni.pcode.get(),options:ni.machineOptions.get()});break;case"machine-halt":ai("machine-11-halt");break;case"machine-play-pause":ai("machine-11-play-pause");break;default:ai(e,n)}}};t(238);const si=a("input",{type:"text",placeholder:"filename",value:ni.name.get(),on:[{type:"input",callback:e=>{oi.send("set-name",e.currentTarget.value)}}]}),li=a("select",{content:c.map(e=>a("option",{content:e,value:e})),value:ni.language.get(),on:[{type:"change",callback:e=>{oi.send("set-language",e.currentTarget.value)}}]}),ri=a("select",{content:u.map(e=>a("option",{content:`v.${e}`,value:e})),value:ni.version.get(),on:[{type:"change",callback:e=>{oi.send("set-version",e.currentTarget.value)}}]});oi.on("name-changed",e=>{si.value=e}),oi.on("language-changed",e=>{li.value=e}),oi.on("version-changed",e=>{ri.value=e});var ii=(e,n)=>a("div",{classes:["tsx-controls"],content:[...(e=>e?[si]:[])(e),...(e=>e?[li,ri]:[])(n)]});const ci=a("input",{type:"file",on:[{type:"change",callback:e=>{const n=e.currentTarget.files[0],t=new FileReader;t.onload=(()=>{oi.send("set-file",{filename:n.name,content:t.result})}),t.readAsText(n)}}]}),ui=a("div",{classes:["tsx-file-box"],content:[ci]});var di=a("div",{content:[ui]});const pi=e=>{if(e.length){const n=!("\n"!==e[0])&&{type:"linebreak",content:"\n"}||(e=>{const n=e.match(/^( +)/);return!!n&&{type:"spaces",content:n[0]}})(e)||(e=>{return!!e.match(/^REM\b/)&&{type:"comment",content:e.split("\n")[0]}})(e)||(e=>{const n="'"===e[0],t='"'===e[0],a=e.match(/[^\\](')/),o=e.match(/[^\\](")/);return n&&a?{type:"string",content:e.slice(0,a.index+2)}:n?{type:"unterminated-string",content:e.split("\n")[0]}:t&&o?{type:"string",content:e.slice(0,o.index+2)}:!!t&&{type:"unterminated-string",content:e.split("\n")[0]}})(e)||(e=>{const n=e.match(/^(\+|-|\*|\/|DIV\b|MOD\b|<>|<=|>=|=|<|>|NOT\b|AND\b|OR\b|EOR\b)/);return!!n&&{type:"operator",content:n[0]}})(e)||(e=>{const n=e.match(/^(\(|\)|,)/);return!!n&&{type:"punctuation",content:n[0]}})(e)||(e=>{const n=e.match(/^(\d+|#[A-Fa-f0-9]+)\b/);return!!n&&{type:"integer",content:n[0]}})(e)||(e=>{const n=e.match(/^(DEF|DIM|ELSE|END|ENDIF|ENDPROC|ENDWHILE|FOR|IF|LOCAL|NEXT|PRIVATE|REPEAT|RETURN|STEP|THEN|TO|UNTIL|WHILE)\b/);return!!n&&{type:"keyword",content:n[0]}})(e)||(e=>{const n=e.match(/^(ABS\b|ACS\b|ANGLES\b|ANTILOG\b|ASC\b|ASN\b|ATN\b|BACK\b|BLANK\b|BLOT\b|BOOLINT\b|BOX\b|CANVAS\b|CHR\$|CIRCLE\b|COLOU?R\b|CONSOLE\b|COS\b|CURSOR\b|DEC\b|DEL\$|DETECT\b|DIRECTION\b|DIVMULT\b|DRAWXY\b|DUMP\b|ELLBLOT\b|ELLIPSE\b|EXP\b|FILL\b|FORGET\b|FORWARD\b|GET\$|GETLINE\$|HEAPRESET|HEX\$|HOME\b|HYPOT\b|INC\b|INPUT\$|KEYBUFFER\b|KEYECHO\b|KEYSTATUS\b|LCASE\$|LEFT\$|LEFT\b|LEN\b|LN\b|LOG10\b|MAX\b|MAXINT\b|MID\$|MIN\b|MIXCOLS\b|MOVEXY\b|NEWTURTLE\b|NOUPDATE\b|OLDTURTLE\b|OUTPUT\b|PAUSE\b|PENDOWN\b|PENUP\b|PI\b|PIXCOL\b|PIXSET\b|POLYGON\b|POLYLINE\b|POWER\b|PRINT\b|QSTR\$|QVAL\b|RECOLOUR\b|REMEMBER\b|RESET\b|RESOLUTION\b|RGB\b|RIGHT\$|RIGHT\b|RND\b|RNDCOL\b|ROOT\b|SETX\b|SETXY\b|SETY\b|SIGN\b|SIN\b|SQR\b|STR\$|TAN\b|THICKNESS\b|TIME\b|TIMESET\b|TRACE\b|TURNXY\b|UPDATE\b|UCASE\$|VAL\b|VALDEF\b|WATCH\b|WRITE\b|WRITELN\b)/);return!!n&&{type:"command",content:n[0]}})(e)||(e=>{const n=e.match(/^(TURT[XYDTC]%)\b/);return!!n&&{type:"turtle",content:n[0]}})(e)||(e=>{const n=e.match(/^(TRUE|FALSE|GREEN|DARKGREEN|LIGHTGREEN|SEAGREEN|GREENGREY|GREENGRAY|RED|DARKRED|LIGHTRED|MAROON|REDGREY|REDGRAY|BLUE|DARKBLUE|LIGHTBLUE|ROYAL|BLUEGREY|YELLOW|OCHRE|CREAM|GOLD|YELLOWGREY|YELLOWGRAY|VIOLET|INDIGO|LILAC|PURPLE|DARKGREY|DARKGRAY|LIME|OLIVE|YELLOWGREEN|EMERALD|MIDGREY|MIDGRAY|ORANGE|ORANGERED|PEACH|SALMON|LIGHTGREY|LIGHTGRAY|SKYBLUE|TEAL|CYAN|TURQUOISE|SILVER|BROWN|DARKBROWN|LIGHTBROWN|COFFEE|WHITE|PINK|MAGENTA|LIGHTPINK|ROSE|BLACK)\b/);return!!n&&{type:"constant",content:n[0]}})(e)||(e=>{const n=e.match(/^([_a-zA-Z]+[$|%])/);return!!n&&{type:"variable",content:n[0]}})(e)||(e=>{const n=e.match(/^((PROC|FN)[_a-zA-Z]+)\b/);return!!n&&{type:"custom",content:n[0]}})(e)||(e=>{const n=e.match(/^(\\.[a-z0-9]*)/i);return!!n&&{type:"keycode",content:n[0]}})(e)||(e=>{const n=e.match(/^(\?[A-Z]+)\b/);return!!n&&{type:"query",content:n[0]}})(e)||(e=>{const n=e.match(/^\d+/),t="#"===e[0];return n?{type:"unterminated-integer",content:e}:t?{type:"bad-hexadecimal",content:e}:{type:"illegal",content:e.split(/\b/)[0]}})(e);return[n].concat(pi(e.slice(n.content.length)))}return[]};var mi=pi;const gi=e=>{if(e.length){const n=(e=>{return!("\n"!==e[0])&&{type:"linebreak",content:"\n"}})(e)||(e=>{const n=e.match(/^( +)/);return!!n&&{type:"spaces",content:n[0]}})(e)||(e=>{const n="{"===e[0],t=e.match(/}/);return n&&t?{type:"comment",content:e.slice(0,t.index+1)}:!!n&&{type:"unterminated-comment",content:e.split("\n")[0]}})(e)||(e=>{const n="'"===e[0],t='"'===e[0],a=e.match(/[^\\](')/),o=e.match(/[^\\](")/);return n&&a?{type:"string",content:e.slice(0,a.index+2)}:n?{type:"unterminated-string",content:e.split("\n")[0]}:t&&o?{type:"string",content:e.slice(0,o.index+2)}:!!t&&{type:"unterminated-string",content:e.split("\n")[0]}})(e)||(e=>{const n=e.match(/^(\+|-|\*|\/|div\b|mod\b|:=|<>|<=|>=|=|<|>|not\b|and\b|or\b|xor\b)/i);return!!n&&{type:"operator",content:n[0]}})(e)||(e=>{const n=e.match(/^(\(|\)|\[|\]|,|:|;|\.)/);return!!n&&{type:"punctuation",content:n[0]}})(e)||(e=>{const n=e.match(/^(\d+|#[A-Fa-f0-9]+)\b/);return!!n&&{type:"integer",content:n[0]}})(e)||(e=>{const n=e.match(/^(array|begin|boolean|char|const|do|downto|else|end|for|function|if|integer|of|procedure|program|repeat|result|string|then|to|until|var|while)\b/i);return!!n&&{type:"keyword",content:n[0]}})(e)||(e=>{const n=e.match(/^(abs|angles|antilog|arccos|arcsin|arctan|back|blank|blot|boolint|box|canvas|chr|circle|colou?r|console|copy|cos|cursor|dec|delete|detect|direction|divmult|drawxy|dump|ellblot|ellipse|exp|fill|forget|forward|heapreset|hexstr|home|hypot|inc|insert|keybuffer|keyecho|keystatus|left|length|ln|log10|lowercase|max|maxint|min|mixcols|movexy|newturtle|noupdate|oldturtle|ord|output|pause|pendown|penup|pi|pixcol|pixset|polygon|polyline|pos|power|print|qstr|qval|randcol|random|read|readln|recolour|remember|reset|resolution|rgb|right|root|setx|setxy|sety|sign|sin|sqrt|str|tan|thickness|time|timeset|trace|turnxy|update|uppercase|val|valdef|watch|write|writeln)\b/i);return!!n&&{type:"command",content:n[0]}})(e)||(e=>{const n=e.match(/^(turt[xydtc])\b/i);return!!n&&{type:"turtle",content:n[0]}})(e)||(e=>{const n=e.match(/^(true|false|green|darkgreen|lightgreen|seagreen|greengrey|greengray|red|darkred|lightred|maroon|redgrey|redgray|blue|darkblue|lightblue|royal|bluegrey|yellow|ochre|cream|gold|yellowgrey|yellowgray|violet|indigo|lilac|purple|darkgrey|darkgray|lime|olive|yellowgreen|emerald|midgrey|midgray|orange|orangered|peach|salmon|lightgrey|lightgray|skyblue|teal|cyan|turquoise|silver|brown|darkbrown|lightbrown|coffee|white|pink|magenta|lightpink|rose|black)\b/i);return!!n&&{type:"constant",content:n[0]}})(e)||(e=>{const n=e.match(/^(\\.[a-z0-9]*)/i);return!!n&&{type:"keycode",content:n[0]}})(e)||(e=>{const n=e.match(/^(\?[a-z]+)\b/i);return!!n&&{type:"query",content:n[0]}})(e)||(e=>{const n=e.match(/^([_a-zA-Z][_a-zA-Z0-9]*)\b/);return!!n&&{type:"identifier",content:n[0]}})(e)||(e=>{const n=e.match(/^\d+/),t="#"===e[0];return n?{type:"unterminated-integer",content:e}:t?{type:"bad-hexadecimal",content:e}:{type:"illegal",content:e.split(/\b/)[0]}})(e);return[n].concat(gi(e.slice(n.content.length)))}return[]};var hi=gi;const yi=e=>{if(e.length){const n=(e=>{return!("\n"!==e[0])&&{type:"linebreak",content:"\n"}})(e)||(e=>{const n=e.match(/^( +)/);return!!n&&{type:"spaces",content:n[0]}})(e)||(e=>{return!!e.match(/^#/)&&{type:"comment",content:e.split("\n")[0]}})(e)||(e=>{const n="'"===e[0],t='"'===e[0],a=e.match(/[^\\](')/),o=e.match(/[^\\](")/);return n&&a?{type:"string",content:e.slice(0,a.index+2)}:n?{type:"unterminated-string",content:e.split("\n")[0]}:t&&o?{type:"string",content:e.slice(0,o.index+2)}:!!t&&{type:"unterminated-string",content:e.split("\n")[0]}})(e)||(e=>{const n=e.match(/^(\+|-|\*|\/|\/\/|%|!=|<=|>=|=|<|>|not\b|and\b|or\b|xor\b)/);return!!n&&{type:"operator",content:n[0]}})(e)||(e=>{const n=e.match(/^(\(|\)|,|:)/);return!!n&&{type:"punctuation",content:n[0]}})(e)||(e=>{const n=e.match(/^(\d+|0x[A-Fa-f0-9]+)\b/);return!!n&&{type:"integer",content:n[0]}})(e)||(e=>{const n=e.match(/^(def|else|for|global|if|in|nonlocal|pass|range|return|while)\b/);return!!n&&{type:"keyword",content:n[0]}})(e)||(e=>{const n=e.match(/^(abs|acos|angles|antilog|asin|atan|back|blank|blot|boolint|box|canvas|chr|circle|colou?r|console|copy|cos|cursor|dec|detect|direction|divmult|drawxy|dump|ellblot|ellipse|exp|fill|find|forget|forward|heapreset|hex|home|hypot|inc|input|insert|int|intdef|keybuffer|keyecho|keystatus|left|len|ln|log10|lower|max|maxint|min|mixcols|movexy|newturtle|noupdate|oldturtle|ord|output|pause|pendown|penup|pi|pixcol|pixset|polygon|polyline|power|print|qstr|qval|randcol|randint|read|readline|recolour|remember|reset|resolution|rgb|right|root|setx|setxy|sety|sign|sin|sqrt|str|tan|thickness|time|timeset|trace|turnxy|update|upper|watch|write|writeline)\b/);return!!n&&{type:"command",content:n[0]}})(e)||(e=>{const n=e.match(/^(turt[xydtc])\b/);return!!n&&{type:"turtle",content:n[0]}})(e)||(e=>{const n=e.match(/^(true|false|green|darkgreen|lightgreen|seagreen|greengrey|greengray|red|darkred|lightred|maroon|redgrey|redgray|blue|darkblue|lightblue|royal|bluegrey|yellow|ochre|cream|gold|yellowgrey|yellowgray|violet|indigo|lilac|purple|darkgrey|darkgray|lime|olive|yellowgreen|emerald|midgrey|midgray|orange|orangered|peach|salmon|lightgrey|lightgray|skyblue|teal|cyan|turquoise|silver|brown|darkbrown|lightbrown|coffee|white|pink|magenta|lightpink|rose|black)\b/);return!!n&&{type:"constant",content:n[0]}})(e)||(e=>{const n=e.match(/^(\\.[a-z0-9]*)/i);return!!n&&{type:"keycode",content:n[0]}})(e)||(e=>{const n=e.match(/^(\?[a-z]+)\b/);return!!n&&{type:"query",content:n[0]}})(e)||(e=>{const n=e.match(/^([_a-zA-Z][_a-zA-Z0-9]*)\b/);return!!n&&{type:"identifier",content:n[0]}})(e)||(e=>{return e.match(/^\d+/)?{type:"unterminated-integer",content:e}:{type:"illegal",content:e.split(/\b/)[0]}})(e);return[n].concat(yi(e.slice(n.content.length)))}return[]};var vi=yi;t(236);const xi={BASIC:mi,Pascal:hi,Python:vi},fi=e=>`<span class="tsx-${e.type}">${e.content}</span>`;var bi=(e,n)=>xi[n](e).map(fi).join("");t(234);const wi=a("ol"),Ti=a("code"),Ei=a("pre",{content:[Ti]}),ki=a("textarea",{wrap:"off",spellcheck:"false",autocapitalize:"off",autocomplete:"off",autocorrect:"off",on:[{type:"keydown",callback:e=>{if(9===e.keyCode){const n=e.currentTarget.selectionStart,t=e.currentTarget.value.slice(0,n),a=e.currentTarget.value.slice(n);e.preventDefault(),e.currentTarget.value=[t,a].join("  "),oi.send("set-code",e.currentTarget.value),e.currentTarget.selectionStart=n+2,e.currentTarget.selectionEnd=n+2}}},{type:"input",callback:e=>{oi.send("set-code",e.currentTarget.value)}},{type:"scroll",callback:()=>{wi.scrollTop=ki.scrollTop,Ei.scrollTop=ki.scrollTop,Ei.scrollTop!==ki.scrollTop&&(ki.scrollTop=Ei.scrollTop),Ei.scrollLeft=ki.scrollLeft}}]}),Oi=(e,n=ni.language.get())=>{const t=e.split("\n").length;for(ki.value=e;t>wi.children.length;)wi.appendChild(a("li"));for(;t<wi.children.length;)wi.removeChild(wi.lastChild);Ti.innerHTML=bi(e,n)};Oi(ni.code.get(),ni.language.get()),oi.on("code-changed",Oi);var Ri=a("div",{classes:["tsx-code"],content:[ki,wi,Ei]});const Ci=a("div"),Si=e=>{Ci.innerHTML=JSON.stringify(e)};Si(ni.usage.get()),oi.on("usage-changed",Si);var Pi=Ci;const Ii=a("div"),Ni=e=>{Ii.innerHTML=JSON.stringify(e)};Ni(ni.pcode.get()),oi.on("pcode-changed",Ni);const Ai={label:"File",active:!1,content:[di]},Bi=[{label:"Code",active:!0,content:[Ri]},{label:"Usage",active:!1,content:[Pi]},{label:"PCode",active:!1,content:[Ii]}];var Li=e=>i("tsx-system-tabs",(e=>e?[Ai,...Bi]:Bi)(e));const Di=e=>e.length<6?Di(`0${e}`):e;var Ui=e=>`#${Di(e.toString(16))}`;const Fi=oi.send.bind(null,"machine-run"),Mi=oi.send.bind(null,"machine-halt"),Gi=oi.send.bind(null,"machine-play-pause"),Hi=a("button",{content:"RUN",classes:["tsx-run-halt-button"],on:[{type:"click",callback:Fi}]}),qi=a("button",{content:"&#10074;&#10074;",classes:["tsx-play-pause-button"]}),Yi=a("dd",{classes:["tsx-turtxy"],content:"500"}),Wi=a("dd",{classes:["tsx-turtxy"],content:"500"}),Xi=a("dd",{classes:["tsx-turtd"],content:"0"}),Vi=a("dd",{classes:["tsx-turttc"],content:"2"}),zi=a("dd",{classes:["tsx-turttc"],style:"background-color:#000;"}),Ki=a("dl",{classes:["tsx-turtle-properties"],content:[a("dt",{content:"X"}),Yi,a("dt",{content:"Y"}),Wi,a("dt",{content:"D"}),Xi,a("dt",{content:"T"}),Vi,a("dt",{content:"C"}),zi]});oi.on("machine-started",()=>{Hi.innerHTML="HALT",Hi.removeEventListener("click",Fi),Hi.addEventListener("click",Mi),qi.innerHTML="&#10074;&#10074;",qi.addEventListener("click",Gi)}),oi.on("machine-stopped",()=>{Hi.innerHTML="RUN",Hi.removeEventListener("click",Mi),Hi.addEventListener("click",Fi),qi.innerHTML="&#10074;&#10074;",qi.removeEventListener("click",Gi)}),oi.on("machine-played",()=>{qi.innerHTML="&#10074;&#10074;"}),oi.on("machine-paused",()=>{qi.innerHTML="&#9658;"}),oi.on("turtle-changed",({property:e,value:n})=>{switch(e){case 1:Yi.innerHTML=n;break;case 2:Wi.innerHTML=n;break;case 3:Xi.innerHTML=n;break;case 4:Vi.innerHTML=n;break;case 5:zi.style.background=Ui(n)}});var $i=a("div",{classes:["tsx-controls"],content:[Hi,qi,Ki]});const ji=(e,n,t)=>({code:e,args:n,str:t});var Qi=[ji(0,0,"NULL"),ji(1,0,"DUPL"),ji(2,0,"SWAP"),ji(3,0,"ROTA"),ji(4,0,"INCR"),ji(5,0,"DECR"),void 0,void 0,ji(8,0,"NOT"),ji(9,0,"AND"),ji(10,0,"OR"),ji(11,0,"XOR"),void 0,void 0,void 0,void 0,ji(16,0,"NEG"),ji(17,0,"ABS"),ji(18,0,"SIGN"),ji(19,0,"RAND"),void 0,void 0,void 0,void 0,ji(24,0,"PLUS"),ji(25,0,"SUBT"),ji(26,0,"MULT"),ji(27,0,"DIVR"),ji(28,0,"DIV"),ji(29,0,"MOD"),void 0,void 0,ji(32,0,"DIVM"),ji(33,0,"SQRT"),ji(34,0,"HYP"),ji(35,0,"ROOT"),ji(36,0,"POWR"),ji(37,0,"LOG"),ji(38,0,"ALOG"),ji(39,0,"LN"),ji(40,0,"EXP"),ji(41,0,"SIN"),ji(42,0,"COS"),ji(43,0,"TAN"),ji(44,0,"ASIN"),ji(45,0,"ACOS"),ji(46,0,"ATAN"),ji(47,0,"PI"),ji(48,0,"CTOS"),ji(49,0,"ITOS"),ji(50,0,"HEXS"),ji(51,0,"SVAL"),ji(52,0,"QTOS"),ji(53,0,"QVAL"),ji(54,0,"SCAT"),ji(55,0,"SLEN"),ji(56,0,"CASE"),ji(57,0,"COPY"),ji(58,0,"DELS"),ji(59,0,"INSS"),ji(60,0,"POSS"),ji(61,0,"REPL"),void 0,void 0,ji(64,0,"EQAL"),ji(65,0,"NOEQ"),ji(66,0,"LESS"),ji(67,0,"MORE"),ji(68,0,"LSEQ"),ji(69,0,"MREQ"),ji(70,0,"MAXI"),ji(71,0,"MINI"),ji(72,0,"SEQL"),ji(73,0,"SNEQ"),ji(74,0,"SLES"),ji(75,0,"SMOR"),ji(76,0,"SLEQ"),ji(77,0,"SMEQ"),ji(78,0,"SMAX"),ji(79,0,"SMIN"),ji(80,1,"LDIN"),ji(81,1,"LDVG"),ji(82,2,"LDVV"),ji(83,2,"LDVR"),ji(84,1,"LDAG"),ji(85,2,"LDAV"),ji(86,2,"LDAR"),ji(87,-1,"LSTR"),ji(88,0,"LDMT"),ji(89,1,"LDMB"),void 0,void 0,void 0,void 0,void 0,void 0,ji(96,2,"ZERO"),ji(97,1,"STVG"),ji(98,2,"STVV"),ji(99,2,"STVR"),void 0,void 0,ji(102,2,"STAR"),void 0,ji(104,0,"STMT"),ji(105,1,"STMB"),void 0,void 0,void 0,void 0,void 0,void 0,ji(112,0,"LPTR"),ji(113,0,"SPTR"),ji(114,0,"CPTR"),ji(115,0,"ZPTR"),void 0,void 0,void 0,void 0,ji(120,0,"TEST"),void 0,void 0,void 0,void 0,void 0,void 0,void 0,ji(128,1,"JUMP"),ji(129,1,"IFNO"),ji(130,0,"HALT"),void 0,void 0,void 0,void 0,void 0,ji(136,1,"SUBR"),ji(137,0,"RETN"),void 0,void 0,ji(140,1,"PSSR"),ji(141,0,"PLSR"),ji(142,0,"PSRJ"),ji(143,0,"PLRJ"),ji(144,2,"MEMC"),ji(145,1,"MEMR"),ji(146,0,"HFIX"),ji(147,0,"HCLR"),ji(148,0,"HRST"),void 0,void 0,void 0,ji(152,-2,"NEWT"),ji(153,-2,"OLDT"),ji(154,-2,"RNDC"),ji(155,-2,"TEXL"),ji(156,-2,"UPPC"),ji(157,-2,"LOWC"),ji(158,-2,"LEFS"),ji(159,-2,"RGTS"),ji(160,0,"PNUP"),ji(161,0,"PNDN"),ji(162,0,"UDAT"),ji(163,0,"NDAT"),ji(164,0,"KECH"),void 0,ji(166,0,"OUTP"),ji(167,0,"CONS"),ji(168,0,"TRAC"),ji(169,0,"MEMW"),ji(170,0,"DUMP"),ji(171,-2,"SVD0"),ji(172,-2,"BOOL"),ji(173,-2,"ILIN"),void 0,void 0,ji(176,0,"TIME"),ji(177,0,"TSET"),ji(178,0,"WAIT"),ji(179,0,"TDET"),void 0,void 0,void 0,void 0,ji(184,0,"INPT"),ji(185,0,"ICLR"),ji(186,0,"BUFR"),ji(187,0,"READ"),ji(188,0,"RDLN"),ji(189,0,"PRNT"),ji(190,0,"TEXT"),ji(191,0,"NEWL"),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,ji(208,0,"CANV"),ji(209,0,"RESO"),ji(210,0,"PIXC"),ji(211,0,"PIXS"),ji(212,0,"ANGL"),ji(213,0,"CURS"),void 0,void 0,ji(216,0,"HOME"),ji(217,0,"SETX"),ji(218,0,"SETY"),ji(219,0,"SETD"),ji(220,0,"THIK"),ji(221,0,"COLR"),ji(222,0,"RGB"),ji(223,0,"MIXC"),ji(224,0,"TOXY"),ji(225,0,"MVXY"),ji(226,0,"DRXY"),ji(227,0,"FWRD"),ji(228,0,"BACK"),ji(229,0,"LEFT"),ji(230,0,"RGHT"),ji(231,0,"TURN"),void 0,void 0,void 0,void 0,ji(236,0,"RMBR"),ji(237,0,"FRGT"),void 0,void 0,ji(240,0,"POLY"),ji(241,0,"PFIL"),ji(242,0,"CIRC"),ji(243,0,"BLOT"),ji(244,0,"ELPS"),ji(245,0,"EBLT"),ji(246,0,"BOX"),void 0,ji(248,0,"BLNK"),void 0,void 0,void 0,ji(252,0,"RCOL"),ji(253,0,"FILL"),void 0,ji(255,0,"MXIN")].filter(e=>void 0!==e).reduce((e,n)=>{const t=e;return t[n.str.toLowerCase()]=n.code,t},{});const Zi=e=>e.length<6?Zi(`0${e}`):e,_i=(e,n,t,a)=>({index:e,names:{basic:n.toUpperCase(),pascal:n,python:n},type:"int",value:t,hex:{basic:`&${Zi(t.toString(16))}`,pascal:`&$${Zi(t.toString(16))}`,python:`0x${Zi(t.toString(16))}`},css:`#${Zi(t.toString(16))}`,dark:a});var Ji=[_i(1,"green",2263842,!0),_i(2,"red",16711680,!0),_i(3,"blue",255,!0),_i(4,"yellow",16776960,!1),_i(5,"violet",9055202,!0),_i(6,"lime",65280,!1),_i(7,"orange",16755200,!1),_i(8,"skyblue",45311,!1),_i(9,"brown",9849600,!0),_i(10,"pink",15602313,!0),_i(11,"darkgreen",25600,!0),_i(12,"darkred",11674146,!0),_i(13,"darkblue",128,!0),_i(14,"ochre",12628016,!0),_i(15,"indigo",4915330,!0),_i(16,"olive",8421376,!0),_i(17,"orangered",16737792,!0),_i(18,"teal",32896,!0),_i(19,"darkbrown",6045747,!0),_i(20,"magenta",16711935,!0),_i(21,"lightgreen",10025880,!1),_i(22,"lightred",13458524,!1),_i(23,"lightblue",10075135,!1),_i(24,"cream",16777147,!1),_i(25,"lilac",11572223,!1),_i(26,"yellowgreen",11193395,!1),_i(27,"peach",16764080,!1),_i(28,"cyan",65535,!1),_i(29,"lightbrown",11567184,!1),_i(30,"lightpink",16758465,!1),_i(31,"seagreen",3978097,!1),_i(32,"maroon",8388608,!0),_i(33,"royal",4286945,!0),_i(34,"gold",16762880,!1),_i(35,"purple",8388736,!0),_i(36,"emerald",51543,!1),_i(37,"salmon",16416882,!1),_i(38,"turquoise",48833,!1),_i(39,"coffee",9596735,!1),_i(40,"rose",16746666,!1),_i(41,"greengrey",7377008,!0),_i(42,"redgrey",11567232,!0),_i(43,"bluegrey",8421536,!0),_i(44,"yellowgrey",9474160,!0),_i(45,"darkgrey",4210752,!0),_i(46,"midgrey",8421504,!0),_i(47,"lightgrey",10526880,!1),_i(48,"silver",12632256,!1),_i(49,"white",16777215,!1),_i(50,"black",0,!0)];const ec=(e,n,t)=>({index:e,name:n,css:t});var nc=[ec(0,"None","none"),ec(1,"Default","default"),ec(2,"Pointer","pointer"),ec(3,"Crosshair","crosshair"),ec(4,"Text","text"),ec(5,"Move","move"),ec(6,"Resize NESW","nesw-resize"),ec(7,"Resize NS","ns-resize"),ec(8,"Resize NWSE","nwse-resize"),ec(9,"Resize EW","ew-resize"),ec(10,"Resize N","n-resize"),ec(11,"Wait","wait"),ec(12,"Progress","progress"),ec(13,"No Drop","no-drop"),ec(14,"Forbidden","not-allowed"),ec(15,"Help","help")];const tc=(e,n,t)=>({index:e,name:n,css:t});var ac=[tc(0,"Arial","Arial, sans-serif"),tc(1,"Arial Black",'"Arial Black", sans-serif'),tc(2,"Comic Sans MS",'"Comic Sans MS", cursive, sans-serif'),tc(3,"Courier New",'"Courier New", Courier, monospace'),tc(4,"Georgia","Georgia, serif"),tc(5,"Impact","Impact, Charcoal, sans-serif"),tc(6,"Lucida Console",'"Lucida Console", monospace'),tc(7,"Lucida Sans Unicode",'"Lucida Sans Unicode", sans-serif'),tc(8,"Palatino Linotype",'"Palatino Linotype", "Book Antiqua", Palatino, serif'),tc(9,"Symbol","Symbol"),tc(10,"Tahoma","Tahoma, Geneva, sans-serif"),tc(11,"Times New Roman",'"Times New Roman", Times, serif'),tc(12,"Trebuchet MS",'"Trebuchet MS", helvetica, sans-serif'),tc(13,"Verdana","Verdana, Geneva, sans-serif"),tc(14,"Webdings","Webdings"),tc(15,"Wingdings","Wingdings")];const oc={main:[],keys:[],query:[],coords:[],mainStack:[],memoryStack:[],returnStack:[],subroutineStack:[],heapGlobal:-1,heapBase:19999,heapTemp:19999,heapPerm:19999,startTime:0,pendown:!0,update:!0,keyecho:!0,readln:""},sc=e=>oc.main[e],lc=(e,n)=>sc(oc.main[e]+n),rc=(e,n)=>{const t=oc.main[0];oc.main[e]=n;const a=e-t;a>0&&a<=5&&oi.send("turtle-changed",{property:a,value:n})},ic=(e,n)=>{n>0&&(rc(e,0),ic(e+1,n-1))},cc=(e,n,t)=>{t>0&&(rc(n,sc(e)),cc(e+1,n+1,t-1))},uc=(e,n="main")=>{oc[`${n}Stack`].push(e),"memory"===n&&(oc.memoryStackMax=Math.max(e,oc.memoryStackMax))},dc=e=>{const n=Array.from(e).map(e=>e.charCodeAt(e));uc(oc.heapTemp+1),n.forEach(e=>{oc.heapTemp+=1,oc.main[oc.heapTemp]=e}),oc.heapTemp+=1,oc.main[oc.heapTemp]=0,oc.heapMax=Math.max(oc.heapTemp,oc.heapMax)},pc=a("table"),mc=a("table"),gc=a("div",{content:[a("button",{content:"Show Current State"}),pc,mc]});var hc={setup:e=>{oc.main=[],oc.keys=[],oc.query=[],oc.coords=[],oc.mainStack=[],oc.memoryStack=[],oc.returnStack=[],oc.subroutineStack=[],oc.heapGlobal=-1,oc.heapBase=e-1,oc.heapTemp=oc.heapBase,oc.heapPerm=oc.heapTemp,oc.main.length=2097152,oc.keys.length=256,oc.query.length=16,oc.main.fill(0),oc.keys.fill(-1),oc.query.fill(-1),oc.startTime=(new Date).getTime(),oc.pendown=!0,oc.update=!0,oc.keyecho=!0,oc.readln=""},getAddress:sc,getPointer:lc,getTurtle:()=>({x:lc(0,1),y:lc(0,2),d:lc(0,3),t:lc(0,4),c:lc(0,5)}),setAddress:rc,setPointer:(e,n,t)=>rc(oc.main[e]+n,t),zero:ic,copy:cc,getQuery:e=>oc.query[e],getKeys:e=>oc.keys[e],setQuery:(e,n)=>{oc.query[e]=n},incrementQuery:(e,n)=>{oc.query[e]+=n},invertQuery:e=>{oc.query[e]=-oc.query[e]},setKey:(e,n)=>{oc.keys[e]=n},invertKey:e=>{oc.keys[e]=-oc.keys[e]},getCoordsLength:()=>oc.coords.length,getCoords:(e,n)=>oc.coords.slice(e,n),remember:()=>{oc.coords.push([lc(0,1),lc(0,2)])},forget:e=>{oc.coords.length-=e},getStackLength:(e="main")=>oc[`${e}Stack`].length,push:uc,pop:(e="main")=>oc[`${e}Stack`].pop(),fixHeapGlobal:()=>{-1===oc.heapGlobal&&(oc.heapGlobal=oc.heapPerm)},fixHeapTop:()=>{oc.heapPerm=oc.heapTemp},clearHeapTop:()=>{oc.heapTemp=oc.heapPerm},resetHeapTop:()=>{oc.heapGlobal>-1&&(oc.heapTemp=oc.heapGlobal,oc.heapPerm=oc.heapGlobal)},makeHeapString:dc,getHeapString:e=>{let n="",t=e;for(;0!==oc.main[t];)n+=String.fromCharCode(oc.main[t]),t+=1;return t>oc.heapPerm&&(oc.heapTemp=t),n},makeKeyBuffer:e=>{const n=oc.heapTemp+4;uc(oc.heapTemp+1),oc.main[oc.heapTemp+1]=n+e,oc.main[oc.heapTemp+2]=n,oc.main[oc.heapTemp+3]=n,oc.main.fill(0,n,n+e),oc.heapTemp=n+e,oc.heapMax=Math.max(oc.heapTemp,oc.heapMax)},addToBuffer:e=>{const n=sc(1);let t=0;n>0&&(t=0,(t=oc.main[n+2]===oc.main[n]?n+3:oc.main[n+2]+1)!==oc.main[n+1]&&(oc.main[oc.main[n+2]]=e,oc.main[n+2]=t))},deleteFromBuffer:()=>{const e=sc(1),n=oc.main[e+1],t=oc.main[e+2];n<t&&(oc.main[t]=0,oc.main[e+2]-=1)},readFromBuffer:e=>{const n=sc(1);let t=!1,a="",o="",s=e;for(;s>0&&!t;)oc.main[n+1]===oc.main[n+2]?t=!0:(o=oc.main[oc.main[n+1]],a+=String.fromCharChode(o),oc.main[n+1]+=1),s-=1;dc(a)},getStartTime:()=>oc.startTime,setStartTime:e=>{oc.startTime=e},getPendown:()=>oc.pendown,getUpdate:()=>oc.update,getKeyecho:()=>oc.keyecho,setPendown:e=>{oc.pendown=!!e},setUpdate:e=>{oc.update=!!e},setKeyecho:e=>{oc.keyecho=!!e},getReadln:()=>oc.readln,addToReadln:e=>{oc.readln+=e},deleteFromReadln:()=>{oc.readln=oc.readln.slice(0,-1)},clearReadln:()=>{oc.readln=""},dump:()=>{const e=oc.main.slice(0,oc.memoryStackMax+1),n=oc.main.slice(oc.heapBase+1,oc.heapMax+1);return{heapBase:oc.heapBase,stack:e,heap:n}},display:gc};t(232);const yc=a("canvas",{classes:["tsx-canvas"],width:500,height:500}),vc=yc.getContext("2d"),xc={startx:0,starty:0,sizex:1e3,sizey:1e3,degrees:360,doubled:!1},fc=e=>{const{left:n}=yc.getBoundingClientRect(),t=(e-n)*xc.sizex/yc.offsetWidth+xc.startx;return Math.round(t)},bc=e=>{const{top:n}=yc.getBoundingClientRect(),t=(e-n)*xc.sizey/yc.offsetHeight+xc.starty;return Math.round(t)},wc=e=>{const n=(e-xc.startx)*yc.width/xc.sizex;return xc.doubled?Math.round(n)+1:Math.round(n)},Tc=e=>{const n=(e-xc.starty)*yc.height/xc.sizey;return xc.doubled?Math.round(n)+1:Math.round(n)},Ec=e=>xc.doubled?2*e:e,kc=e=>Ui(e),Oc=e=>{switch(e.type){case"mousemove":hc.setQuery(7,fc(e.clientX)),hc.setQuery(8,bc(e.clientY));break;case"touchmove":case"touchstart":hc.setQuery(7,fc(e.touches[0].clientX)),hc.setQuery(8,bc(e.touches[0].clientY))}},Rc=e=>{const n=(new Date).getTime();switch(hc.setQuery(4,128),e.shiftKey&&hc.incrementQuery(4,8),e.altKey&&hc.incrementQuery(4,16),e.ctrlKey&&hc.incrementQuery(4,32),n-hc.getQuery(11)<300&&hc.incrementQuery(4,64),hc.setQuery(11,n),e.type){case"mousedown":switch(hc.setQuery(5,fc(e.clientX)),hc.setQuery(6,bc(e.clientY)),e.button){case 0:hc.incrementQuery(4,1),hc.setQuery(1,hc.getQuery(4)),hc.setQuery(2,-1),hc.setQuery(3,-1);break;case 1:hc.incrementQuery(4,4),hc.setQuery(1,-1),hc.setQuery(2,-1),hc.setQuery(3,hc.getQuery(4));break;case 2:hc.incrementQuery(4,2),hc.setQuery(1,-1),hc.setQuery(2,hc.getQuery(4)),hc.setQuery(3,-1)}break;case"touchstart":hc.setQuery(5,fc(e.touches[0].clientX)),hc.setQuery(6,bc(e.touches[0].clientY)),hc.incrementQuery(4,1),hc.setQuery(1,hc.getQuery(4)),hc.setQuery(2,-1),hc.setQuery(3,-1),Oc(e)}},Cc=e=>{switch(hc.invertQuery(4),e.type){case"mouseup":switch(e.button){case 0:hc.invertQuery(1);break;case 1:hc.invertQuery(3);break;case 2:hc.invertQuery(2)}break;case"touchend":hc.invertQuery(1)}},Sc=e=>{e.preventDefault()},Pc=(e,n)=>{0===n?vc.moveTo(wc(e[0]),Tc(e[1])):vc.lineTo(wc(e[0]),Tc(e[1]))},Ic=(e,n,t)=>{vc.beginPath(),n.forEach(Pc),t?(vc.closePath(),vc.fillStyle=kc(e.c),vc.fill()):(vc.lineCap="round",vc.lineWidth=Ec(e.t),vc.strokeStyle=kc(e.c),vc.stroke())},Nc=(e,n,t,a)=>{const o=wc(e.x),s=Tc(e.y),l=wc(n+xc.startx),r=Tc(t+xc.starty);vc.beginPath(),n===t?vc.arc(o,s,l,0,2*Math.PI,!1):(vc.save(),vc.translate(o-l,s-r),vc.scale(l,r),vc.arc(1,1,1,0,2*Math.PI,!1),vc.restore()),a?(vc.fillStyle=kc(e.c),vc.fill()):(vc.lineWidth=Ec(e.t),vc.strokeStyle=kc(e.c),vc.stroke())},Ac=(e,n,t,a,o)=>{const s=vc.getImageData(0,0,yc.width,yc.height),l=[],r=[0,-1,1,0],i=[-1,0,0,1];let c=0,u=4*(n*yc.width+e);const d=65536*s.data[u]+256*s.data[u+1]+s.data[u+2];let p,m,g,h,y,v,x=wc(e),f=Tc(n);for(l.push(x),l.push(f);l.length>0;)for(f=l.pop(),x=l.pop(),c=0;c<4;c+=1)m=f+i[c],h=(p=x+r[c])>0&&p<=yc.width,y=m>0&&m<=yc.height,h&&y&&(u=4*(m*yc.width+p),g=65536*s.data[u],g+=256*s.data[u+1],h=(g+=s.data[u+2])!==t,y=g!==a||!o,h&&y&&(v=g===d||o)&&(u=4*(m*yc.width+p),s.data[u]=(16711680&t)>>16,s.data[u+1]=(65280&t)>>8,s.data[u+2]=255&t,l.push(p),l.push(m)));vc.putImageData(s,0,0)};var Bc={canvas:yc,show:()=>{yc.click()},addEventListeners:()=>{yc.addEventListener("contextmenu",Sc),yc.addEventListener("mousemove",Oc),yc.addEventListener("touchmove",Sc),yc.addEventListener("touchmove",Oc),yc.addEventListener("mousedown",Sc),yc.addEventListener("mousedown",Rc),yc.addEventListener("touchstart",Rc),yc.addEventListener("mouseup",Cc),yc.addEventListener("touchend",Cc)},removeEventListeners:()=>{yc.removeEventListener("contextmenu",Sc),yc.removeEventListener("mousemove",Oc),yc.removeEventListener("touchmove",Sc),yc.removeEventListener("touchmove",Oc),yc.removeEventListener("mousedown",Sc),yc.removeEventListener("mousedown",Rc),yc.removeEventListener("touchstart",Rc),yc.removeEventListener("mouseup",Cc),yc.removeEventListener("touchend",Cc)},getDimensions:()=>({startx:xc.startx,starty:xc.starty,sizex:xc.sizex,sizey:xc.sizey}),getDegrees:()=>xc.degrees,setDimensions:(e,n,t,a)=>{xc.startx=e,xc.starty=n,xc.sizex=t,xc.sizey=a},setDegrees:e=>{xc.degrees=e},setDoubled:e=>{xc.doubled=e},setResolution:(e,n)=>{yc.width=e,yc.height=n},setCursor:e=>{const n=e<0||e>15?1:e;yc.style.cursor=nc[n].css},drawText:(e,n,t,a)=>{vc.textBaseline="top",vc.fillStyle=kc(e.c),vc.font=`${a}pt ${ac[15&t].css}`,(16&t)>0&&(vc.font=`bold ${vc.font}`),(32&t)>0&&(vc.font=`italic ${vc.font}`),vc.fillText(n,wc(e.x),Tc(e.y))},drawLine:(e,n,t)=>{vc.beginPath(),vc.moveTo(wc(e.x),Tc(e.y)),vc.lineTo(wc(e.x+n),Tc(e.y+t)),vc.lineCap="round",vc.lineWidth=Ec(e.t),vc.strokeStyle=kc(e.c),vc.stroke()},drawPolyline:(e,n)=>Ic(e,n,!1),drawPolygon:(e,n)=>Ic(e,n,!0),drawCircle:(e,n)=>Nc(e,n,n,!1),drawBlot:(e,n)=>Nc(e,n,n,!0),drawEllipse:(e,n,t)=>Nc(e,n,t,!1),drawEllblot:(e,n,t)=>Nc(e,n,t,!0),drawBox:(e,n,t,a,o)=>{vc.beginPath(),vc.moveTo(wc(e.x),Tc(e.y)),vc.lineTo(wc(e.x+n),Tc(e.y)),vc.lineTo(wc(e.x+n),Tc(e.y+t)),vc.lineTo(wc(e.x),Tc(e.y+t)),vc.closePath(),vc.fillStyle=kc(a),vc.fill(),o&&(vc.lineCap="round",vc.lineWidth=Ec(e.t),vc.strokeStyle=kc(e.c),vc.stroke())},pixcol:(e,n)=>{const t=vc.getImageData(wc(e),Tc(n),1,1);return 65536*t.data[0]+256*t.data[1]+t.data[2]},pixset:(e,n,t)=>{const a=vc.createImageData(1,1);a.data[0]=t>>16&255,a.data[1]=t>>8&255,a.data[2]=255&t,a.data[3]=255,vc.putImageData(a,wc(e),Tc(n)),xc.doubled&&(vc.putImageData(a,wc(e)-1,Tc(n)),vc.putImageData(a,wc(e),Tc(n)-1),vc.putImageData(a,wc(e)-1,Tc(n)-1))},blank:e=>{vc.fillStyle=kc(e),vc.fillRect(0,0,yc.width,yc.height)},recolour:(e,n,t)=>Ac(e,n,t,0,!1),fill:(e,n,t,a)=>Ac(e,n,t,a,!0)};t(230);const Lc=a("pre",{classes:["tsx-console"]}),Dc=e=>{const n=e.keyCode||e.charCode;8===n&&(e.preventDefault(),hc.deleteFromBuffer(),hc.deleteFromReadln(),hc.getKeyecho()&&(Lc.innerHTML=Lc.innerHTML.slice(0,-1))),n>=37&&n<=40&&e.preventDefault(),hc.setQuery(9,n),hc.setQuery(10,128),e.shiftKey&&hc.incrementQuery(10,8),e.altKey&&hc.incrementQuery(10,16),e.ctrlKey&&hc.incrementQuery(10,32),hc.setKey(n,hc.getQuery(10))},Uc=e=>{const n=e.keyCode||e.charCode;hc.invertQuery(9),hc.invertQuery(10),hc.invertKey(n)},Fc=e=>{const n=e.keyCode||e.charCode;hc.addToBuffer(n),hc.getKeyecho()&&(Lc.innerHTML+=String.fromCharCode(n),Lc.scrollTop=Lc.scrollHeight)};var Mc={console:Lc,addEventListeners:()=>{window.addEventListener("keydown",Dc),window.addEventListener("keyup",Uc),window.addEventListener("keypress",Fc)},removeEventListeners:()=>{window.removeEventListener("keydown",Dc),window.removeEventListener("keyup",Uc),window.removeEventListener("keypress",Fc)},setBackground:e=>{Lc.style.background=Ui(e)},addText:e=>{Lc.innerHTML+=e,Lc.scrollTop=Lc.scrollHeight},clearText:()=>{Lc.innerHTML=""}};const Gc=a("pre");var Hc={output:Gc,setBackground:e=>{Gc.style.background=Ui(e)},addText:e=>{Gc.innerHTML+=e},clearText:()=>{Gc.innerHTML=""}};const qc={running:!1,paused:!1},Yc=()=>{qc.running&&(Bc.removeEventListeners(),Mc.removeEventListeners(),Bc.setCursor(1),qc.running=!1,qc.paused=!1,oi.send("machine-stopped"))},Wc=(e,n)=>{return{id:e,messageId:n,message:{stackOverflow:"Memory stack has overflowed into memory heap. Probable cause is unterminated recursion.",pcodeBadLine:"The program has tried to jump to a line that does not exist. This is either a bug in our compiler, or in your assembled code."}[n]}},Xc=(e,n)=>{let t;return Math.abs(n)>=Math.abs(e)?(t=Math.atan(-e/n),n>0?t+=Math.PI:e<0&&(t+=2,t*=Math.PI),t):(t=Math.atan(n/e),e>0?t+=Math.PI:(t+=3,t*=Math.PI),t/2)},Vc=e=>e?-1:0,zc=(e,n,t,a)=>{const o=(e,n)=>Math.round((e*t+n*a)/(t+a)),s=e=>Math.floor(e/65536),l=e=>Math.floor((65280&e)/256),r=e=>255&e;return 65536*o(s(e),s(n))+256*o(l(e),l(n))+o(r(e),r(n))};let Kc,$c;const jc=(e,n,t,a)=>{if(!qc.running)return;if(qc.paused)return void setTimeout(jc,1,e,n,t,a);const o=(n,t,o,s,l)=>{(l.keyCode||l.charCode)===n&&(hc.pop(),hc.push(Vc(!0)),window.clearTimeout(t),jc(e,o,s,a))},s=(n,t,o)=>{const s=o.keyCode||o.charCode;13===s?(hc.makeHeapString(hc.getReadln()),hc.clearReadln="",jc(e,n,t,a)):8===s?hc.deleteFromReadln():hc.addToReadln(String.fromCharCode(s))};let l=0,r=0,i=n,c=t;for(window.removeEventListener("keypress",Kc),window.removeEventListener("keypress",$c);l<a.drawCountMax&&r<=a.codeCountMax;){let n,t,u,d;switch(e[i][c]){case Qi.dupl:n=hc.pop(),hc.push(n),hc.push(n);break;case Qi.swap:t=hc.pop(),n=hc.pop(),hc.push(t),hc.push(n);break;case Qi.rota:u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.push(t),hc.push(u),hc.push(n);break;case Qi.incr:n=hc.pop(),hc.push(n+1);break;case Qi.decr:n=hc.pop(),hc.push(n-1);break;case Qi.not:n=hc.pop(),hc.push(~n);break;case Qi.and:t=hc.pop(),n=hc.pop(),hc.push(n&t);break;case Qi.or:t=hc.pop(),n=hc.pop(),hc.push(n|t);break;case Qi.xor:t=hc.pop(),n=hc.pop(),hc.push(n^t);break;case Qi.neg:n=hc.pop(),hc.push(-n);break;case Qi.abs:n=hc.pop(),hc.push(Math.abs(n));break;case Qi.sign:n=hc.pop(),hc.push(Math.sign(n));break;case Qi.rand:n=hc.pop(),hc.push(Math.floor(Math.random()*Math.abs(n)));break;case Qi.plus:t=hc.pop(),n=hc.pop(),hc.push(n+t);break;case Qi.subt:t=hc.pop(),n=hc.pop(),hc.push(n-t);break;case Qi.mult:t=hc.pop(),n=hc.pop(),hc.push(n*t);break;case Qi.divr:t=hc.pop(),n=hc.pop(),hc.push(Math.round(n/t));break;case Qi.div:t=hc.pop(),n=hc.pop(),hc.push(Math.floor(n/t));break;case Qi.mod:t=hc.pop(),n=hc.pop(),hc.push(n%t);break;case Qi.divm:u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.push(Math.round(n/t*u));break;case Qi.sqrt:t=hc.pop(),n=hc.pop(),hc.push(Math.round(Math.sqrt(n)*t));break;case Qi.hyp:u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.push(Math.round(Math.sqrt(n*n+t*t)*u));break;case Qi.root:d=hc.pop(),u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.push(Math.round((n/t)**(1/u)*d));break;case Qi.powr:d=hc.pop(),u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.push(Math.round((n/t)**u*d));break;case Qi.log:u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.push(Math.round(Math.log(n/t)/Math.LN10*u));break;case Qi.alog:u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.push(Math.round(10**(n/t)*u));break;case Qi.ln:u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.push(Math.round(Math.log(n/t)*u));break;case Qi.exp:u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.push(Math.round(Math.exp(n/t)*u));break;case Qi.sin:d=hc.pop(),u=hc.pop(),n=(t=hc.pop())/u*(2*Math.PI)/Bc.getDegrees(),hc.push(Math.round(Math.sin(n)*d));break;case Qi.cos:d=hc.pop(),u=hc.pop(),n=(t=hc.pop())/u*(2*Math.PI)/Bc.getDegrees(),hc.push(Math.round(Math.cos(n)*d));break;case Qi.tan:d=hc.pop(),u=hc.pop(),n=(t=hc.pop())/u*(2*Math.PI)/Bc.getDegrees(),hc.push(Math.round(Math.tan(n)*d));break;case Qi.asin:d=hc.pop(),u=hc.pop(),t=hc.pop(),n=Bc.getDegrees()/(2*Math.PI),hc.push(Math.round(Math.asin(t/u)*d*n));break;case Qi.acos:d=hc.pop(),u=hc.pop(),t=hc.pop(),n=Bc.getDegrees()/(2*Math.PI),hc.push(Math.round(Math.acos(t/u)*d*n));break;case Qi.atan:d=hc.pop(),u=hc.pop(),t=hc.pop(),n=Bc.getDegrees()/(2*Math.PI),hc.push(Math.round(Math.atan2(t,u)*d*n));break;case Qi.pi:n=hc.pop(),hc.push(Math.round(Math.PI*n));break;case Qi.ctos:n=hc.pop(),hc.makeHeapString(String.fromCharCode(n));break;case Qi.itos:n=hc.pop(),hc.makeHeapString(n.toString());break;case Qi.hexs:for(t=hc.pop(),n=hc.pop().toString(16).toUpperCase();n.length<t;)n=`0${n}`;hc.makeHeapString(n);break;case Qi.sval:u=hc.pop(),t=hc.pop(),d="#"===(n=hc.getHeapString(t))[0]?Number.isNaN(parseInt(n.slice(1),16))?u:parseInt(n.slice(1),16):Number.isNaN(parseInt(n,10))?u:parseInt(n,10),hc.push(d);break;case Qi.qtos:d=hc.pop(),u=hc.pop(),n=(t=hc.pop())/u,hc.makeHeapString(n.toFixed(d));break;case Qi.qval:u=hc.pop(),t=hc.pop(),n=hc.getHeapString(hc.pop()),d=Number.isNaN(parseFloat(n))?u:parseFloat(n),hc.push(Math.round(d*t));break;case Qi.scat:t=hc.getHeapString(hc.pop()),n=hc.getHeapString(hc.pop()),hc.makeHeapString(n+t);break;case Qi.slen:n=hc.getHeapString(hc.pop()),hc.push(n.length);break;case Qi.case:t=hc.pop(),n=hc.getHeapString(hc.pop()),t>0?hc.makeHeapString(n.toUpperCase()):t<0?hc.makeHeapString(n.toLowerCase()):hc.makeHeapString(n);break;case Qi.copy:u=hc.pop(),t=hc.pop(),n=hc.getHeapString(hc.pop()),hc.makeHeapString(n.substr(t-1,u));break;case Qi.dels:d=hc.pop(),u=hc.pop(),n=(t=hc.getHeapString(hc.pop())).substr(0,u-1)+t.substr(u-1+d),hc.makeHeapString(n);break;case Qi.inss:d=hc.pop(),u=hc.getHeapString(hc.pop()),t=hc.getHeapString(hc.pop()),n=u.substr(0,d-1)+t+u.substr(d-1),hc.makeHeapString(n);break;case Qi.poss:t=hc.getHeapString(hc.pop()),n=hc.getHeapString(hc.pop()),hc.push(t.indexOf(n)+1);break;case Qi.repl:if(d=hc.pop(),u=hc.getHeapString(hc.pop()),t=hc.getHeapString(hc.pop()),n=hc.getHeapString(hc.pop()),d>0){for(;d>0;)n=n.replace(t,u),d-=1;hc.makeHeapString(n)}else hc.makeHeapString(n.replace(new RegExp(t,"g"),u));break;case Qi.eqal:t=hc.pop(),n=hc.pop(),hc.push(Vc(n===t));break;case Qi.noeq:t=hc.pop(),n=hc.pop(),hc.push(Vc(n!==t));break;case Qi.less:t=hc.pop(),n=hc.pop(),hc.push(Vc(n<t));break;case Qi.more:t=hc.pop(),n=hc.pop(),hc.push(Vc(n>t));break;case Qi.lseq:t=hc.pop(),n=hc.pop(),hc.push(Vc(n<=t));break;case Qi.mreq:t=hc.pop(),n=hc.pop(),hc.push(Vc(n>=t));break;case Qi.maxi:t=hc.pop(),n=hc.pop(),hc.push(Math.max(n,t));break;case Qi.mini:t=hc.pop(),n=hc.pop(),hc.push(Math.min(n,t));break;case Qi.seql:t=hc.getHeapString(hc.pop()),n=hc.getHeapString(hc.pop()),hc.push(Vc(n===t));break;case Qi.sneq:t=hc.getHeapString(hc.pop()),n=hc.getHeapString(hc.pop()),hc.push(Vc(n!==t));break;case Qi.sles:t=hc.getHeapString(hc.pop()),n=hc.getHeapString(hc.pop()),hc.push(Vc(n<t));break;case Qi.smor:t=hc.getHeapString(hc.pop()),n=hc.getHeapString(hc.pop()),hc.push(Vc(n>t));break;case Qi.sleq:t=hc.getHeapString(hc.pop()),n=hc.getHeapString(hc.pop()),hc.push(Vc(n<=t));break;case Qi.smeq:t=hc.getHeapString(hc.pop()),n=hc.getHeapString(hc.pop()),hc.push(Vc(n>=t));break;case Qi.smax:t=hc.getHeapString(hc.pop()),(n=hc.getHeapString(hc.pop()))>t?hc.makeHeapString(n):hc.makeHeapString(t);break;case Qi.smin:t=hc.getHeapString(hc.pop()),(n=hc.getHeapString(hc.pop()))<t?hc.makeHeapString(n):hc.makeHeapString(t);break;case Qi.ldin:hc.push(e[i][c+1]),c+=1;break;case Qi.ldvg:hc.push(hc.getAddress(e[i][c+1])),c+=1;break;case Qi.ldvv:n=e[i][c+1],t=e[i][c+2],hc.push(hc.getPointer(n+9,t)),c+=2;break;case Qi.ldvr:n=e[i][c+1],t=e[i][c+2],hc.push(hc.getAddress(hc.getPointer(n+9,t))),c+=2;break;case Qi.ldag:hc.push(e[i][c+1]),c+=1;break;case Qi.ldav:n=e[i][c+1],t=e[i][c+2],hc.push(hc.getAddress(n+9)+t),c+=2;break;case Qi.ldar:n=e[i][c+1],t=e[i][c+2],hc.push(hc.getPointer(n+9,t)),c+=2;break;case Qi.lstr:for(c+=1,n="";0!==e[i][c];)n+=String.fromCharCode(e[i][c]),c+=1;hc.makeHeapString(n);break;case Qi.ldmt:hc.push(hc.getStackLength("memory")-1);break;case Qi.ldmb:n=e[i][c+1],hc.push(hc.getAddress(n+9)),c+=1;break;case Qi.zero:n=e[i][c+1],t=e[i][c+2],hc.setPointer(n+9,t,0),c+=2;break;case Qi.stvg:n=hc.pop(),hc.setAddress(e[i][c+1],n),c+=1;break;case Qi.stvv:n=e[i][c+1],t=e[i][c+2],u=hc.pop(),hc.setPointer(n+9,t,u),c+=2;break;case Qi.stvr:n=e[i][c+1],t=e[i][c+2],u=hc.pop(),hc.setAddress(hc.getPointer(n+9,t),u),c+=2;break;case Qi.star:n=e[i][c+1],t=e[i][c+2],u=hc.pop(),hc.setPointer(n+9,t,u),c+=2;break;case Qi.stmt:n=hc.pop(),hc.push(n,"memory");break;case Qi.stmb:n=e[i][c+1],t=hc.pop(),hc.setAddress(n+9,t),c+=1;break;case Qi.lptr:n=hc.pop(),hc.push(hc.getAddress(n));break;case Qi.sptr:t=hc.pop(),n=hc.pop(),hc.setAddress(t,n);break;case Qi.cptr:u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.copy(n,t,u);break;case Qi.zptr:t=hc.pop(),n=hc.pop(),hc.zero(n,t);break;case Qi.test:break;case Qi.cstr:t=hc.pop(),n=hc.pop(),d=hc.getAddress(t-1),u=hc.getAddress(n),hc.copy(n,t,Math.min(u,d)+1);break;case Qi.jump:i=e[i][c+1]-1,c=-1;break;case Qi.ifno:0===hc.pop()?(i=e[i][c+1]-1,c=-1):c+=1;break;case Qi.halt:return void Yc();case Qi.subr:hc.fixHeapGlobal(),hc.push(i+1,"return"),i=e[i][c+1]-1,c=-1;break;case Qi.retn:i=hc.pop("return"),c=-1;break;case Qi.pssr:hc.push(e[i][c+1],"subroutine"),c+=1;break;case Qi.plsr:hc.pop("subroutine");break;case Qi.psrj:hc.push(i+1);break;case Qi.plrj:hc.pop("return"),i=hc.pop()-1,c=-1;break;case Qi.memc:if(n=e[i][c+1],t=e[i][c+2],(u=hc.pop("memory"))+t>a.stackSize)throw Yc(),Wc("machine01","stackOverflow");hc.push(hc.getAddress(n+9),"memory"),hc.setAddress(n+9,u),hc.push(u+t,"memory"),c+=2;break;case Qi.memr:hc.pop("memory"),n=e[i][c+1],t=hc.pop("memory"),hc.push(hc.getAddress(n+9),"memory"),hc.setAddress(n+9,t),c+=2;break;case Qi.hfix:hc.fixHeapTop();break;case Qi.hclr:hc.clearHeapTop();break;case Qi.hrst:hc.getHeapGlobal()>-1&&hc.resetHeapTop();break;case Qi.pnup:hc.setPendown(!1);break;case Qi.pndn:hc.setPendown(!0);break;case Qi.udat:hc.setUpdate(!0),l=a.drawCountMax;break;case Qi.ndat:hc.setUpdate(!1);break;case Qi.kech:n=-1===hc.pop(),hc.setKeyecho(n);break;case Qi.outp:u=-1===hc.pop(),t=hc.pop(),(n=-1===hc.pop())&&Hc.clearText(),Hc.setBackground(t),u?Hc.show():Mc.show();break;case Qi.cons:t=hc.pop(),(n=-1===hc.pop())&&Mc.clearText(),Mc.setBackground(t);break;case Qi.trac:case Qi.memw:hc.pop();break;case Qi.dump:hc.dump(),a.showMemory;break;case Qi.time:n=(new Date).getTime(),n-=hc.getStartTime(),hc.push(n);break;case Qi.tset:n=(new Date).getTime(),t=hc.pop(),hc.setStartTime(n-t);break;case Qi.wait:return n=hc.pop(),(c+=1)===e[i].length&&(i+=1,c=0),void setTimeout(jc,n,e,i,c,a);case Qi.tdet:return t=hc.pop(),n=hc.pop(),hc.push(0),(c+=1)===e[i].length&&(i+=1,c=0),u=setTimeout(jc,n,e,i,c,a),Kc=o.bind(null,t,u,i,c),void window.addEventListener("keyup",Kc);case Qi.inpt:(n=hc.pop())<0?hc.push(hc.getQuery(-n)):hc.push(hc.getKeys(n));break;case Qi.iclr:(n=hc.pop())<0?hc.setQuery(-n,-1):hc.setKeys(n,-1);break;case Qi.bufr:(n=hc.pop())>0&&hc.makeKeyBuffer(n);break;case Qi.read:n=hc.pop(),hc.readFromBuffer(n);break;case Qi.rdln:return(c+=1)===e[i].length&&(i+=1,c=0),$c=s.bind(null,e,i,c,a),void window.addEventListener("keypress",$c);case Qi.prnt:u=hc.pop(),t=hc.pop(),n=hc.getHeapString(hc.pop()),Bc.drawText(hc.getTurtle(),n,t,u);break;case Qi.text:n=hc.getHeapString(hc.pop()),Mc.addText(n),Hc.addText(n);break;case Qi.newl:Mc.addText("\n"),Hc.addText("\n");break;case Qi.canv:d=hc.pop(),u=hc.pop(),t=hc.pop(),n=hc.pop(),Bc.setDimensions(n,t,u,d),hc.setPointer(0,1,Math.round(n+u/2)),hc.setPointer(0,2,Math.round(t+d/2)),hc.setPointer(0,3,0),hc.remember(),l=a.drawCountMax;break;case Qi.reso:t=hc.pop(),n=hc.pop(),Math.min(n,t)<a.smallSize&&(n*=2,t*=2,Bc.setDoubled(!0)),Bc.setResolution(n,t),Bc.blank(16777215),l=a.drawCountMax;break;case Qi.pixc:t=hc.pop(),n=hc.pop(),hc.push(Bc.pixcol(n,t));break;case Qi.pixs:u=hc.pop(),t=hc.pop(),n=hc.pop(),Bc.pixset(n,t,u),hc.getUpdate()&&(l+=1);break;case Qi.angl:n=hc.pop(),t=Math.round(n+hc.getPointer(0,3)*n/Bc.getDegrees()),hc.setPointer(0,3,t%n),Bc.setDegrees(n);break;case Qi.curs:n=hc.pop(),Bc.setCursor(n);break;case Qi.home:t=(n=Bc.getDimensions()).startx+n.sizex/2,u=n.starty+n.sizey/2,hc.setPointer(0,1,Math.round(t)),hc.setPointer(0,2,Math.round(u)),hc.setPointer(0,3,0),hc.remember();break;case Qi.setx:n=hc.pop(),hc.setPointer(0,1,n),hc.remember();break;case Qi.sety:n=hc.pop(),hc.setPointer(0,2,n),hc.remember();break;case Qi.setd:n=hc.pop(),hc.setPointer(0,3,n%Bc.getDegrees());break;case Qi.thik:n=hc.pop(),hc.setPointer(0,4,n);break;case Qi.colr:n=hc.pop(),hc.setPointer(0,5,n);break;case Qi.rgb:n=hc.pop(),(n%=50)<=0&&(n+=50),n=Ji[n-1].value,hc.push(n);break;case Qi.mixc:d=hc.pop(),u=hc.pop(),t=hc.pop(),n=hc.pop(),hc.push(zc(n,t,u,d));break;case Qi.toxy:t=hc.pop(),n=hc.pop(),hc.setPointer(0,1,n),hc.setPointer(0,2,t),hc.remember();break;case Qi.mvxy:t=hc.pop(),n=hc.pop(),hc.setPointer(0,1,hc.getPointer(0,1)+n),hc.setPointer(0,2,hc.getPointer(0,2)+t),hc.remember();break;case Qi.drxy:t=hc.pop(),n=hc.pop(),hc.getPendown()&&(Bc.drawLine(hc.getTurtle(),n,t),hc.getUpdate()&&(l+=1)),hc.setPointer(0,1,hc.getPointer(0,1)+n),hc.setPointer(0,2,hc.getPointer(0,2)+t),hc.remember();break;case Qi.fwrd:u=hc.pop(),t=hc.getPointer(0,3),t=Math.cos(t*Math.PI/(Bc.getDegrees()/2)),t=-Math.round(t*u),n=hc.getPointer(0,3),n=Math.sin(n*Math.PI/(Bc.getDegrees()/2)),n=Math.round(n*u),hc.getPendown()&&(Bc.drawLine(hc.getTurtle(),n,t),hc.getUpdate()&&(l+=1)),hc.setPointer(0,1,hc.getPointer(0,1)+n),hc.setPointer(0,2,hc.getPointer(0,2)+t),hc.remember();break;case Qi.back:u=hc.pop(),t=hc.getPointer(0,3),t=Math.cos(t*Math.PI/(Bc.getDegrees()/2)),t=Math.round(t*u),n=hc.getPointer(0,3),n=Math.sin(n*Math.PI/(Bc.getDegrees()/2)),n=-Math.round(n*u),hc.getPendown()&&(Bc.drawLine(hc.getTurtle(),n,t),hc.getUpdate()&&(l+=1)),hc.setPointer(0,1,hc.getPointer(0,1)+n),hc.setPointer(0,2,hc.getPointer(0,2)+t),hc.remember();break;case Qi.left:n=hc.pop(),t=hc.getPointer(0,3),hc.setPointer(0,3,(t-n)%Bc.getDegrees());break;case Qi.rght:n=hc.pop(),t=hc.getPointer(0,3),hc.setPointer(0,3,(t+n)%Bc.getDegrees());break;case Qi.turn:t=hc.pop(),n=hc.pop(),u=Xc(n,t),u=Math.round(u*Bc.getDegrees()/Math.PI/2),hc.setPointer(0,3,u%Bc.getDegrees());break;case Qi.rmbr:hc.remember();break;case Qi.frgt:n=hc.pop(),hc.forget(n);break;case Qi.poly:n=(u=hc.pop())>(t=hc.getCoordsLength())?0:t-u,Bc.drawPolyline(hc.getTurtle(),hc.getCoords(n,t)),hc.getUpdate()&&(l+=1);break;case Qi.pfil:n=(u=hc.pop())>(t=hc.getCoordsLength())?0:t-u,Bc.drawPolygon(hc.getTurtle(),hc.getCoords(n,t)),hc.getUpdate()&&(l+=1);break;case Qi.circ:n=hc.pop(),Bc.drawCircle(hc.getTurtle(),n),hc.getUpdate()&&(l+=1);break;case Qi.blot:n=hc.pop(),Bc.drawBlot(hc.getTurtle(),n),hc.getUpdate()&&(l+=1);break;case Qi.elps:t=hc.pop(),n=hc.pop(),Bc.drawEllipse(hc.getTurtle(),n,t),hc.getUpdate()&&(l+=1);break;case Qi.eblt:t=hc.pop(),n=hc.pop(),Bc.drawEllblot(hc.getTurtle(),n,t),hc.getUpdate()&&(l+=1);break;case Qi.box:d=-1===hc.pop(),u=hc.pop(),t=hc.pop(),n=hc.pop(),Bc.drawBox(hc.getTurtle(),n,t,u,d),hc.getUpdate()&&(l+=1);break;case Qi.blnk:n=hc.pop(),Bc.blank(n),hc.getUpdate()&&(l+=1);break;case Qi.rcol:u=hc.pop(),t=hc.pop(),n=hc.pop(),Bc.recolour(n,t,u),hc.getUpdate()&&(l+=1);break;case Qi.fill:d=hc.pop(),u=hc.pop(),t=hc.pop(),n=hc.pop(),Bc.fill(n,t,u,d),hc.getUpdate()&&(l+=1);break;case Qi.mxin:hc.push(2**31-1)}if(r+=1,c+=1,!e[i])throw Yc(),Wc("machine02","pcodeBadLine");c===e[i].length&&(i+=1,c=0)}setTimeout(jc,0,e,i,c,a)};oi.on("machine-11-run",({pcode:e,options:n})=>{qc.running||(n.showCanvas&&Bc.show(),Bc.setDimensions(0,0,1e3,1e3),Bc.setResolution(1e3,1e3),Bc.setDegrees(360),Bc.setDoubled(!1),Bc.addEventListeners(),Mc.clearText(),Mc.setBackground(16777215),Mc.addEventListeners(),Hc.clearText(),Hc.setBackground(16777215),hc.setup(n.stackSize),qc.running=!0,qc.paused=!1,Kc=null,$c=null,oi.send("machine-started"),jc(e,0,0,n))}),oi.on("machine-11-halt",Yc),oi.on("machine-11-play-pause",()=>{qc.paused?(qc.paused=!1,oi.send("machine-played")):(qc.paused=!0,oi.send("machine-paused"))});const Qc={label:"Settings",active:!1,content:[a("div",{content:"settings page"})]},Zc=[{label:"Canvas",active:!0,content:[Bc.canvas,Mc.console]},{label:"Output",active:!1,content:[Hc.output]},{label:"Memory",active:!1,content:[hc.display]}];var _c=e=>i("tsx-system-tabs",(e=>e?[Qc,...Zc]:Zc)(e)),Jc=a("div",{content:"commands"});const eu={BASIC:[a("div",{content:[a("h3",{content:"Programs and Procedures: the Basics"}),a("p",{content:"The simplest BASIC programs take this form:"}),a("pre",{content:"<code>REM myprog  { this is a comment }\n[program commands]\nEND</code>"}),a("p",{content:"The first couple of Turtle example programs (from the Help menu) are like this. But the &lsquo;Olympic rings 2&rsquo; program introduces a global variable: it is called <code>ringsize%</code> and specifies the size of the rings. Such variables are &lsquo;declared&rsquo; by assigning a value, like this:"}),a("pre",{content:"<code>ringsize% = 130\n[other program commands]\nEND</code>"}),a("p",{content:"Complicated programs are usually divided into subroutines, to separate the various tasks and make them easier to understand. BASIC has two types of subroutine, procedures (which are like mini-programs) and functions (which are designed to calculate some value)."}),a("p",{content:"The &lsquo;Simple procedure&rsquo; example program has a procedure to draw a &lsquo;prong&rsquo; – a line ending in a blot – and then return to the starting point. Procedures fit into a BASIC program after the end of the main program, indicated by <code>END</code>. They look like this:"}),a("pre",{content:"<code>DEF PROCmyprocedure(par1%)\n  LOCAL local1%, local2$\n  [procedure commands]\nENDPROC</code>"}),a("p",{content:"All procedure names must begin with &lsquo;PROC&rsquo;, e.g. &lsquo;PROCmyprocedure&rsquo;. A procedure can have its own local variables, declared using <code>LOCAL</code>. A <code>PRIVATE</code> variable is declared the same way, but unlike a <code>LOCAL</code> variable, it retains its value between procedure calls. A procedure can also have parameters (or &lsquo;arguments&rsquo;) that are values sent into the subroutine when it is called from the program, and given a name within the subroutine (e.g. <code>par1%</code> above)."}),a("p",{content:'A function is similar to a procedure, with the addition that it returns a value. Also a function name must begin with &lsquo;<span class="userDefined">FN</span>&rsquo;, for example:'}),a("pre",{content:'<code>DEF FNmyfunction(par1%)\n  [procedure commands]\n  = "output"</code>'}),a("p",{content:"The last statement of a function always begins with &lsquo;=&rsquo; and the &lsquo;output&rsquo; provides the return value for the function."}),a("h4",{content:"Reserved Words, Declarations, Types, and Variables"}),a("p",{content:"The words <code>REM</code>, <code>END</code>, <code>DEF</code>, etc. are all capitalized to emphasise the program structure. BASIC takes notice of capitalization. These three words are also in red here – this is to indicate that they are special &lsquo;reserved&rsquo; words that cannot be used for other purposes (so you can&rsquo;t call a procedure or variable &lsquo;END&rsquo;)."}),a("p",{content:"Variables all end with either a &lsquo;%&rsquo; or a &lsquo;$&rsquo; – Turtle will tell you if you forget! Turtle BASIC allows two types of variables:"}),a("table",{classes:["tsx-help-table"],content:[a("tr",{content:"<td>integer</td><td>whole number (name ends in <code>%</code>)</td>"}),a("tr",{content:"<td>string</td><td>sequence of characters (name ends in <code>$</code>)</td>"})]}),a("p",{content:"Most of your variables are likely to be integer variables, like a transparent box that stores a number. You can look at the box to see which number it contains at any time, and you can change the number by assigning a new value. In the &lsquo;Olympic rings 2&rsquo; example program, <code>ringsize%</code> is declared by assigning the value <code>130</code> using the command:"}),a("pre",{content:"<code>ringsize% = 130</code>"}),a("p",{content:"Five special integer variables are &lsquo;built in&rsquo; from the start, and these are called the Turtle&rsquo;s fields:"}),a("table",{classes:["tsx-help-table"],content:[a("tr",{content:"<td><code>TURTX%</code></td><td>The Turtle&rsquo;s x-coordinate</td>"}),a("tr",{content:"<td><code>TURTY%</code></td><td>The Turtle&rsquo;s y-coordinate</td>"}),a("tr",{content:"<td><code>TURTD%</code></td><td>The Turtle&rsquo;s direction</td>"}),a("tr",{content:"<td><code>TURTT%</code></td><td>The Turtle&rsquo;s pen thickness</td>"}),a("tr",{content:"<td><code>TURTC%</code></td><td>The Turtle&rsquo;s colour setting</td>"})]}),a("p",{content:"These automatically change to keep track of the Turtle&rsquo;s state, and are shown above the Canvas."}),a("p",{content:"For a use of <code>TURTD%</code>, see the &lsquo;Simple procedure&rsquo; example."})]})],Pascal:[a("div",{content:'    <h3>Programs and Procedures: the Basics</h3>\n    <p>The simplest Pascal programs take this form:</p>\n    <pre><span class="keyword">PROGRAM</span> <span class="userDefined">myprog</span>;\n<span class="keyword">BEGIN</span>\n  <span class="meta-comment">&lt;program commands&gt;</span>\n<span class="keyword">END</span>.</pre>\n    <p>The first couple of Turtle example programs (from the Help menu) are like this. But the &lsquo;Olympic rings 2&rsquo; program introduces a global variable: it is called <code class="variable">ringsize</code> and specifies the size of the rings. Such variables are &lsquo;declared&rsquo; at the beginning of the program, like this:</p>\n    <pre><span class="keyword">PROGRAM</span> <span class="userDefined">myprog</span>;\n<span class="keyword">VAR</span> <span class="variable">global1</span>: <span class="type">integer</span>;\n    <span class="variable">global2</span>, <span class="variable">global3</span>: <span class="type">integer</span>;\n<span class="keyword">BEGIN</span>\n  <span class="meta-comment">&lt;program commands&gt;</span>\n<span class="keyword">END</span>.</pre>\n<p>Complicated programs are usually divided into subroutines, to separate the various tasks and make them easier to understand. Pascal has two types of subroutine, procedures (which are like mini-programs) and functions (which are designed to calculate some value). The &lsquo;Simple procedure&rsquo; example program has a procedure to draw a &lsquo;prong&rsquo; – a line ending in a blot – and then return to the starting point. Procedures fit into a Pascal program after the global variables and before the <code class="keyword">BEGIN</code> of the main program; they look like this:</p>\n    <pre>  <span class="keyword">Procedure</span> <span class="userDefined">myprocedure</span>(<span class="variable">par1</span>: <span class="type">integer</span>);\n  <span class="keyword">Var</span> <span class="variable">local1</span>, <span class="variable">local2</span>: <span class="type">integer</span>;\n  <span class="keyword">Begin</span>\n    <span class="meta-comment">&lt;procedure commands&gt;</span>\n  <span class="keyword">End</span>;</pre>\n    <p>A procedure can have its own local variables, declared much like global variables. But it can also have parameters (or &lsquo;arguments&rsquo;) that are values sent into the subroutine when it is called from the program, and given a name within the subroutine (e.g. <code class="variable">par1</code> above).</p>\n    <h4>Reserved Words, Declarations, Types, and Variables</h4>\n    <p>The words <code class="keyword">PROGRAM</code>, <code class="keyword">BEGIN</code> and <code class="keyword">END</code> are often capitalized to emphasise the program structure, but Pascal actually takes no notice of capitalization (so you could write <code class="keyword">program</code>, <code class="keyword">Program</code> or even <code class="keyword">PrOgRaM</code>!). These three words are also in red here – this is to indicate that they are special &lsquo;reserved&rsquo; words that cannot be used for other purposes (so you can&rsquo;t call a procedure or variable &lsquo;begin&rsquo;). As well as variables, a program can use constants to give a convenient name to a particular value. Any constants must be &lsquo;declared&rsquo; even before the variables, like this:</p>\n    <pre><span class="keyword">PROGRAM</span> <span class="userDefined">myprog</span>;\n<span class="keyword">CONST</span> <span class="constant">limit</span> <span class="operator">=</span> <span class="integer">4</span>;\n<span class="keyword">VAR</span> <span class="variable">global1</span>: <span class="type">integer</span>;\n<span class="meta-comment">&lt;and so on&gt;</span></pre>\n    <p>Notice that variable and constant declarations must all end with a semicolon – Turtle will tell you if you forget! Notice also that while constants are given a value when declared (e.g. <code class="constant">limit</code> is given the value <span class="integer">4</span> above), variables are given a <i>type</i>, to indicate the sort of data that they can store. Turtle Pascal allows four main types of variables:</p>\n    <table class="help-table">\n      <tr><td class="type">integer</td><td>whole number</td></tr>\n      <tr><td class="type">boolean</td><td>true or false</td></tr>\n      <tr><td class="type">char</td><td>single character</td></tr>\n      <tr><td class="type">string</td><td>sequence of character(s)</td></tr>\n    </table>\n    <p>Most of your variables are likely to be integer variables, like a transparent box that stores a number. You can look at the box to see which number it contains at any time, and you can change the number by assigning a new value, e.g.</p>\n    <pre><span class="keyword">VAR</span> <span class="variable">ringsize</span>: <span class="type">integer</span>;</pre>\n    <p>is declared in the &lsquo;Olympic rings 2&rsquo; example program, and <code class="variable">ringsize</code> is later assigned the value <span class="integer">130</span> using the command:</p>\n    <pre>  <span class="variable">ringsize</span> <span class="operator">:=</span> <span class="integer">130</span>;</pre>\n    <p>Five special integer variables are &lsquo;built in&rsquo; from the start, and these are called the Turtle&rsquo;s fields:</p>\n    <table class="help-table">\n      <tr><td><code class="variable">turtx</code></td><td>The Turtle’s x-coordinate</td></tr>\n      <tr><td><code class="variable">turty</code></td><td>The Turtle’s y-coordinate</td></tr>\n      <tr><td><code class="variable">turtd</code></td><td>The Turtle’s direction</td></tr>\n      <tr><td><code class="variable">turtt</code></td><td>The Turtle’s pen thickness</td></tr>\n      <tr><td><code class="variable">turtc</code></td><td>The Turtle’s colour setting</td></tr>\n    </table>\n    <p>These automatically change to keep track of the Turtle&rsquo;s state, and are shown above the Canvas.</p>\n    <p>For a use of <code class="variable">turtd</code>, see the &lsquo;Simple procedure&rsquo; example.</p>\n'})],Python:[a("div",{content:'    <h3>Programs and Procedures: the Basics</h3>\n    <p>The simplest Python programs take this form:</p>\n    <pre><span class="comment"># myprog</span>  <span class="meta-comment">{ this is a comment }</span>\n<span class="keyword">def</span> <span class="userDefined">main</span>():\n  <span class="meta-comment">&lt;program commands&gt;</span></pre>\n    <p>The first couple of Turtle example programs (from the Help menu) are like this. But the &lsquo;Olympic rings 2&rsquo; program introduces a variable: it is called <code class="variable">ringsize</code> and specifies the size of the rings. Such variables are &lsquo;declared&rsquo; by assigning a value, like this:</p>\n    <pre><span class="variable">ringsize</span> <span class="operator">=</span> <span class="integer">130</span>\n  <span class="meta-comment">&lt;other program commands&gt;</span></pre>\n    <p>Complicated programs are usually divided into functions, to separate the various tasks and make them easier to understand. The &lsquo;Simple procedure&rsquo; example program has a function to draw a &lsquo;prong&rsquo; – a line ending in a blot – and then return to the starting point. Functions fit into a Python program before the <code><span class="userDefined">main</span>()</code> function and may be nested; they look like this:</p>\n    <pre><span class="keyword">def</span> <span class="userDefined">outsidefunction</span>(<span class="variable">par1</span>):\n  <span class="keyword">global</span> <span class="variable">global1</span>, <span class="variable">global2</span>        <span class="meta-comment">{ optional }</span>\n  <span class="keyword">nonlocal</span> <span class="variable">nonlocal1</span>, <span class="variable">nonlocal2</span>  <span class="meta-comment">{ optional }</span>\n\n  <span class="keyword">def</span> <span class="userDefined">insidefunction</span>():\n    <span class="meta-comment">&lt;insidefunction&rsquo;s commands&gt;</span>\n\n  <span class="meta-comment">&lt;outsidefunction&rsquo;s commands&gt;</span></pre>\n    <p>Nested functions must occur after any <span class="keyword">global</span> or <span class="keyword">nonlocal</span> declarations and before the function&rsquo;s commands. Functions may return a value like this:</p>\n    <pre><span class="keyword">def</span> <span class="userDefined">fname</span>(<span class="variable">par1</span>):\n  <span class="meta-comment">&lt;function commands&gt;</span>\n  <span class="keyword">return</span> <span class="variable">somevalue</span></pre>\n    <p>If there is no return statement then the function behaves like a procedure in Pascal or Basic.</p>\n    <p>A function can also have parameters (or &lsquo;arguments&rsquo;) that are values sent into the subroutine when it is called from the program, and given a name within the subroutine (e.g. <code class="variable">par1</code> above).</p>\n    <h4>Reserved Words, Declarations, Types, and Variables</h4>\n    <p>The words <code class="keyword">def</code>, <code class="keyword">return</code>, <code class="keyword">global</code>, etc. must all be in lower case; Python takes notice of capitalisation! These three words are also in red here – this is to indicate that they are special &lsquo;reserved&rsquo; words that cannot be used for other purposes (so you can&rsquo;t call a procedure or variable &lsquo;return&rsquo;). Variables are of two types, depending on the sort of data that they can store. Turtle Python allows two main types of variables:</p>\n    <table class="help-table">\n      <tr><td class="type">integer</td><td>whole number</td></tr>\n      <tr><td class="type">string</td><td>sequence of character(s)</td></tr>\n    </table>\n    <p>Most of your variables are likely to be integer variables, like a transparent box that stores a number. You can look at the box to see which number it contains at any time, and you can change the number by assigning a new value. In the &lsquo;Olympic rings 2&rsquo; example program, <code class="variable">ringsize</code> is declared by assigning the value <span class="integer">130</span> using the command:</p>\n    <pre><span class="variable">ringsize</span> <span class="operator">=</span> <span class="integer">130</span></pre>\n    <p>Note that sometimes Python cannot automatically determine what type a variable is meant to be. If this occurs an error message will be generated. To solve these cases the type of the variable can be forced into an integer by adding zero, e.g. <code><span class="variable">varname</span> <span class="operator">+</span> <span class="integer">0</span></code>, or forced into a string by adding the null string, e.g. <code><span class="variable">varname</span> <span class="operator">+</span> <span class="string">\'\'</span></code>.</p>\n    <p>Five special global integer variables are &lsquo;built in&rsquo; from the start, and these are called the Turtle&rsquo;s fields:</p>\n    <table class="help-table">\n      <tr><td><code class="variable">turtx</code></td><td>The Turtle&rsquo;s x-coordinate</td></tr>\n      <tr><td><code class="variable">turty</code></td><td>The Turtle&rsquo;s y-coordinate</td></tr>\n      <tr><td><code class="variable">turtd</code></td><td>The Turtle&rsquo;s direction</td></tr>\n      <tr><td><code class="variable">turtt</code></td><td>The Turtle&rsquo;s pen thickness</td></tr>\n      <tr><td><code class="variable">turtc</code></td><td>The Turtle&rsquo;s colour setting</td></tr>\n    </table>\n    <p>These automatically change to keep track of the Turtle&rsquo;s state, and are shown above the Canvas.</p>\n    <p>For a use of <code class="variable">turtd</code>, see the &lsquo;Simple procedure&rsquo; example.</p>\n'})]},nu=a("div"),tu=e=>{nu.innerHTML="",eu[e].forEach(e=>nu.appendChild(e)),Array.from(nu.querySelectorAll("code")).forEach(e=>{e.innerHTML=(e=>e)(e.innerHTML)})};tu(ni.language.get()),oi.on("language-changed",tu);var au=nu;const ou={BASIC:[a("div",{content:'    <h3>Command Structures</h3>\n    <p>Selection and ordering of commands is done by <i>sequencing</i>, <i>conditional selection</i>, and <i>looping</i>.</p>\n    <h4>Sequencing of Commands</h4>\n    <p>Commands to be performed in sequence are usually placed in the appropriate order within the program, e.g.:</p>\n    <pre><span class="function">COLOUR</span>(<span class="constant">GREEN</span>)\n<span class="function">BLOT</span>(<span class="integer">100</span>)\n<span class="function">PAUSE</span>(<span class="integer">1000</span>)\n<span class="function">COLOUR</span>(<span class="constant">RED</span>)\n<span class="function">FORWARD</span>(<span class="integer">450</span>) <span class="meta-comment">(etc.)</span></pre>\n    <p>(From the first example program in the Help menu.)</p>\n    <h4>Conditional Selection of Commands</h4>\n    <p>Suppose you want to draw a blot with a given radius (stored as the integer variable <code class="variable">radius%</code>), but only if that value is less than <span class="integer">500</span>; do it like this:</p>\n    <pre><span class="keyword">IF</span> <span class="variable">radius%</span> <span class="operator">&lt;</span> <span class="integer">500</span> <span class="keyword">THEN</span>\n  <span class="function">BLOT</span>(<span class="variable">radius%</span>)\n<span class="keyword">ENDIF</span></pre>\n    <p>If you want to do something different when the condition is not met (e.g. drawing a blot with half the radius), extend the <code><span class="keyword">IF</span> <span class="meta-comment">&hellip;</span> <span class="keyword">THEN</span></code> structure by adding <code class="keyword">ELSE</code> and then the new command:</p>\n    <pre><span class="keyword">IF</span> <span class="variable">radius%</span> <span class="operator">&lt;</span> <span class="integer">500</span> <span class="keyword">THEN</span>\n  <span class="function">BLOT</span>(<span class="variable">radius%</span>)\n<span class="keyword">ELSE</span>\n  <span class="function">BLOT</span>(<span class="variable">radius%</span> <span class="operator">/</span> <span class="integer">2</span>)\n<span class="keyword">ENDIF</span></pre>\n    <h4>Grouping of Commands</h4>\n    <p>A sequence of commands within an <code><span class="keyword">IF</span> <span class="meta-comment">&hellip;</span> <span class="keyword">THEN</span> <span class="meta-comment">&hellip;</span> <span class="keyword">ELSE</span> <span class="meta-comment">&hellip;</span> <span class="keyword">ENDIF</span></code> structure is always treated as a single command. The <code class="keyword">ELSE</code> and <code class="keyword">ENDIF</code> words bracket off the sequence of commands. (Another possibility is to package them into a procedure.) You can also write these on a single line without the <code class="keyword">ENDIF</code>, like this:</p>\n    <pre><span class="keyword">IF</span> <span class="variable">radius%</span> <span class="operator">&lt;</span> <span class="integer">500</span> <span class="keyword">THEN</span> <span class="function">BLOT</span>(<span class="variable">radius%</span>)</pre>\n    <h4>Spacing, Indenting, Auto-Formatting</h4>\n    <p>Unnecessary &lsquo;white space&rsquo; is ignored by BASIC, so you can use line breaks and indenting to make the structure of your program easy to read. However, each statement must be on its own line, unless separated by a colon &lsquo;:&rsquo;. The Edit menu provides an auto-formatter that will neaten your programs in a standard way. Use it!</p>\n    <h4>Looping Structures</h4>\n    <p>BASIC provides three different structures for looping (or &lsquo;iterating&rsquo;) commands. If you know in advance how many times you want to loop – or you want to &lsquo;loop over&rsquo; a particular range of values (e.g. from <span class="integer">1</span> to <span class="integer">200</span>), then the simplest is a &lsquo;<span class="keyword">FOR</span> loop&rsquo; (or &lsquo;counting loop&rsquo;):</p>\n    <pre><span class="keyword">FOR</span> <span class="variable">count%</span> <span class="operator">=</span> <span class="integer">1</span> <span class="keyword">TO</span> <span class="integer">200</span>\n  <span class="function">FORWARD</span>(<span class="variable">count%</span> <span class="operator">/</span> <span class="integer">3</span>)\n  <span class="function">RIGHT</span>(<span class="integer">5</span>)\n  <span class="meta-comment">&hellip;</span>\n<span class="keyword">NEXT</span></pre>\n    <p>(From the first <span class="keyword">FOR</span> loop example program in the Help menu.)</p>\n    <p>Here, <code class="keyword">NEXT</code> is used to bracket together a number of commands, and indenting is used to show the structure.</p>\n    <p>To count downwards, use <code><span class="keyword">STEP</span> <span class="integer">-1</span></code> at then end (as in the &lsquo;Procedure with parameter&rsquo; example program).</p>\n    <p>In a <span class="keyword">FOR</span> loop, the &lsquo;loop variable&rsquo; (here <code class="variable">count%</code>) is given in turn each of the values in the range (here <span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, &hellip;, <span class="integer">199</span>, <span class="integer">200</span>), and the loop instructions are performed each time. So in the example above, a spiral is drawn as the Turtle moves forward gradually more and more (as <code class="variable">count%</code> increases).</p>\n    <p>If instead of looping a specific number of times, you want to loop through some sequence of commands until some particular condition becomes true, then you can use:</p>\n    <pre><span class="keyword">REPEAT</span>\n  <span class="meta-comment">&lt;command1&gt;</span>\n  <span class="meta-comment">&lt;command2&gt; (etc.)</span>\n<span class="keyword">UNTIL</span> <span class="meta-comment">&lt;condition&gt;</span></pre>\n    <p>The &lsquo;Simple procedure&rsquo; example program does this, looping until the Turtle is pointing directly north (i.e., <code><span class="variable">TURTD%</span> <span class="operator">=</span> <span class="integer">0</span></code>).</p>\n    <p>Alternatively, you can loop through a sequence of commands while some condition is true (so that it stops when the condition becomes false):</p>\n    <pre><span class="keyword">WHILE</span> <span class="meta-comment">&lt;condition&gt;</span>\n  <span class="meta-comment">&lt;sequence of commands&gt;</span>\n<span class="keyword">ENDWHILE</span></pre>\n    <p>Things that can be done with a <span class="keyword">REPEAT</span> loop can equally be done with a <span class="keyword">WHILE</span> loop (and vice-versa), but sometimes one is more natural than the other. Notice also that a <span class="keyword">REPEAT</span> loop always executes the sequence of commands at least once, because it tests the <span class="meta-comment">&lt;condition&gt;</span> at the end of the loop. But a <span class="keyword">WHILE</span> loop tests the <span class="meta-comment">&lt;condition&gt;</span> <i>before</i> executing the sequence of commands, and so will not execute them even once if <span class="meta-comment">&lt;condition&gt;</span> is false to start with. (For examples of the various loops, see the second set of example programs, &lsquo;Further commands and structures&rsquo;.)\n'})],Pascal:[a("div",{content:'    <h3>Command Structures</h3>\n    <p>Selection and ordering of commands is done by <i>sequencing</i>, <i>conditional selection</i>, and <i>looping</i>.</p>\n    <h4>Sequencing of Commands</h4>\n    <p>Commands to be performed in sequence are usually placed in the appropriate order within the program, separated by semicolons, e.g.:</p>\n    <pre><span class="function">colour</span>(<span class="constant">green</span>);\n<span class="function">blot</span>(<span class="integer">100</span>);\n<span class="function">pause</span>(<span class="integer">1000</span>);\n<span class="function">colour</span>(<span class="constant">red</span>);\n<span class="function">forward</span>(<span class="integer">450</span>); <span class="meta-comment">(etc.)</span></pre>\n    <p>(From the first example program in the Help menu.)</p>\n    <h4>Conditional Selection of Commands</h4>\n    <p>Suppose you want to draw a blot with a given radius (stored as the integer variable <code class="variable">radius</code>), but only if that value is less than <span class="integer">500</span>; do it like this:</p>\n    <pre><span class="keyword">if</span> <span class="variable">radius</span> <span class="operator">&lt;</span> <span class="integer">500</span> <span class="keyword">then</span>\n  <span class="function">blot</span>(<span class="variable">radius</span>);</pre>\n    <p>If you want to do something different when the condition is not met (e.g. drawing a blot with half the radius), extend the <code><span class="keyword">if</span> <span class="meta-comment">&hellip;</span> <span class="keyword">then</span></code> structure by adding <code class="keyword">else</code> and then the new command:</p>\n    <pre><span class="keyword">if</span> <span class="variable">radius</span> <span class="operator">&lt;</span> <span class="integer">500</span> <span class="keyword">then</span>\n  <span class="function">blot</span>(<span class="variable">radius</span>)\n<span class="keyword">else</span>\n  <span class="function">blot</span>(<span class="variable">radius</span> <span class="operator">/</span> <span class="integer">2</span>);</pre>\n    <p>Notice that this is a single complex command, so you must not put a semicolon before the <code class="keyword">else</code> (if you do, Turtle will give you a warning).</p>\n    <h4>Grouping of Commands</h4>\n    <p>Sometimes you will want to do a sequence of commands within an <code><span class="keyword">if</span> <span class="meta-comment">&hellip;</span> <span class="keyword">then</span> <span class="meta-comment">&hellip;</span> <span class="keyword">else</span></code> structure, in which case you can bracket them between <code class="keyword">begin</code> and <code class="keyword">end</code>, e.g.</p>\n    <pre><span class="keyword">if</span> <span class="meta-comment">&lt;condition&gt;</span> <span class="keyword">then</span>\n  <span class="keyword">begin</span>\n    <span class="meta-comment">&lt;sequence1&gt;</span>\n  <span class="keyword">end</span>\n<span class="keyword">else</span>\n  <span class="keyword">begin</span>\n    <span class="meta-comment">&lt;sequence2&gt;</span>\n  <span class="keyword">end</span>;</pre>\n    <p>Any such bracketed sequence of commands is always treated as a single command. (Another possibility is to package them into a procedure.)</p>\n    <h4>Spacing, Indenting, Auto-Formatting</h4>\n    <p>Unnecessary &lsquo;white space&rsquo; is ignored by Pascal, so you can use line breaks and indenting to make the structure of your program easy to read. The Edit menu provides an auto-formatter that will neaten your programs in a standard way. Use it!</p>\n    <h4>Looping Structures</h4>\n    <p>Pascal provides three different structures for looping (or &lsquo;iterating&rsquo;) commands. If you know in advance how many times you want to loop – or you want to &lsquo;loop over&rsquo; a particular range of values (e.g. from <span class="integer">1</span> to <span class="integer">200</span>), then the simplest is a &lsquo;<span class="keyword">for</span> loop&rsquo; (or &lsquo;counting loop&rsquo;):</p>\n    <pre><span class="keyword">for</span> <span class="variable">count</span> <span class="operator">:=</span> <span class="integer">1</span> <span class="keyword">to</span> <span class="integer">200</span> <span class="keyword">do</span>\n  <span class="keyword">begin</span>\n    <span class="function">forward</span>(<span class="variable">count</span> <span class="operator">/</span> <span class="integer">3</span>);\n    <span class="function">right</span>(<span class="integer">5</span>);\n    <span class="meta-comment">&hellip;</span>\n  <span class="keyword">end</span>;</pre>\n    <p>(From the first <span class="keyword">for</span> loop example program in the Help menu.)</p>\n    <p>Again <code><span class="keyword">begin</span> <span class="meta-comment">&hellip;</span> <span class="keyword">end</span></code> is used to bracket together a number of commands, and indenting is used to show the structure.</p>\n    <p>In a <span class="keyword">for</span> loop, the &lsquo;loop variable&rsquo; (here <code class="variable">count</code>) is given in turn each of the values in the range (here <span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, &hellip;, <span class="integer">199</span>, <span class="integer">200</span>), and the loop instructions are performed each time. So in the example above, a spiral is drawn as the Turtle moves forward gradually more and more (as <code class="variable">count</code> increases).</p>\n    <p>To count downwards, use <code class="keyword">downto</code> instead of <code class="keyword">to</code> (as in the &lsquo;Procedure with parameter&rsquo; example program.</p>\n    <p>If instead of looping a specific number of times, you want to loop through some sequence of commands until some particular condition becomes true, then you can use:</p>\n    <pre><span class="keyword">repeat</span>\n  <span class="meta-comment">&lt;command1&gt;</span>;\n  <span class="meta-comment">&lt;command2&gt;</span>; <span class="meta-comment">(etc.)</span>\n<span class="keyword">until</span> <span class="meta-comment">&lt;condition&gt;</span></pre>\n    <p>The &lsquo;Simple procedure&rsquo; example program does this, looping until the Turtle is pointing directly north (i.e., <code><span class="variable">turtd</span> <span class="operator">=</span> <span class="integer">0</span></code>) Alternatively, you can loop through a sequence of commands while some condition is true (so that it stops when the condition becomes false):</p>\n    <pre><span class="keyword">while</span> <span class="meta-comment">&lt;condition&gt;</span> <span class="keyword">do</span>\n  <span class="keyword">begin</span>\n    <span class="meta-comment">&lt;sequence of commands&gt;</span>\n  <span class="keyword">end</span>;</pre>\n    <p>Things that can be done with a &lsquo;<span class="keyword">repeat</span> loop&rsquo; can equally be done with a &lsquo;<span class="keyword">while</span> loop&rsquo; (and vice-versa), but sometimes one is more natural than the other. Notice also that a <span class="keyword">repeat</span> loop always executes the sequence of commands at least once, because it tests the <span class="meta-comment">&lt;condition&gt;</span> at the end of the loop. But a <span class="keyword">while</span> loop tests the <span class="meta-comment">&lt;condition&gt;</span> <i>before</i> executing the sequence of commands, and so will not execute them even once if <span class="meta-comment">&lt;condition&gt;</span> is false to start with. (For examples of the various loops, see the second set of example programs, &lsquo;Further commands and structures&rsquo;.)</p>\n'})],Python:[a("div",{content:'    <h3>Command Structures</h3>\n    <p>Selection and ordering of commands is done by <i>sequencing</i>, <i>conditional selection</i>, and <i>looping</i>.</p>\n    <h4>Sequencing of Commands</h4>\n    <p>Commands to be performed in sequence are usually placed in the appropriate order within the program, with the same indent, e.g.:</p>\n    <pre><span class="function">colour</span>(<span class="constant">green</span>)\n<span class="function">blot</span>(<span class="integer">100</span>)\n<span class="function">pause</span>(<span class="integer">1000</span>) <span class="meta-comment">(etc.)</span></pre>\n    <p>(From the first example program in the Help menu.)</p>\n    <h4>Conditional Selection of Commands</h4>\n    <p>Suppose you want to draw a blot with a given radius (stored as the integer variable <code class="variable">radius</code>), but only if that value is less than <span class="integer">500</span>; do it like this:</p>\n    <pre><span class="keyword">if</span> <span class="variable">radius</span> <span class="operator">&lt;</span> <span class="integer">500</span>:\n  <span class="function">blot</span>(<span class="variable">radius</span>)</pre>\n    <p>If you want to do something different when the condition is not met (e.g. drawing a blot with half the radius), extend the <code><span class="keyword">if</span> <span class="meta-comment">&hellip;</span></code> structure by adding <code class="keyword">else</code> and then the new command:</p>\n    <pre><span class="keyword">if</span> <span class="variable">radius</span> <span class="operator">&lt;</span> <span class="integer">500</span>:\n  <span class="function">blot</span>(<span class="variable">radius</span>)\n<span class="keyword">else</span>:\n  <span class="function">blot</span>(<span class="variable">radius</span> <span class="operator">//</span> <span class="integer">2</span>)</pre>\n    <p>Notice that this is a single complex command, so the <code class="keyword">else</code> must have the same indent as <code class="keyword">if</code> and the sub-commands must be further indented (if you do not indent correctly, Turtle will give you a warning).</p>\n    <h4>Grouping of Commands</h4>\n    <p>Sometimes you will want to do a sequence of commands within an <code><span class="keyword">if</span> <span class="meta-comment">&hellip;</span> <span class="keyword">else</span></code> structure, in which case you can group them by indenting them all by the same amount. Any such indented sequence of commands is treated as a single command. (Another possibility is to package them into a function.)</p>\n    <p>Note that indents must be consistent, so the following will generate several errors:</p>\n    <pre><span class="keyword">if</span> <span class="variable">radius</span> <span class="operator">&lt;</span> <span class="integer">500</span>:\n  <span class="function">blot</span>(<span class="variable">radius</span>)\n    <span class="function">blot</span>(<span class="variable">radius</span> <span class="operator">//</span> <span class="integer">3</span>)      <span class="meta-comment">{ too many indents }</span>\n  <span class="keyword">else</span>:            <span class="meta-comment">{ should match the <b>if</b> line }</span>\n  <span class="function">blot</span>(<span class="variable">radius</span> <span class="operator">//</span> <span class="integer">2</span>) <span class="meta-comment">{ needs indent after <b>else</b> }</span></pre>\n    <h4>Auto-Formatting</h4>\n    <p>The Edit menu provides an auto-formatter that will neaten your programs in a standard way. Use it!</p>\n    <h4>Looping Structures</h4>\n    <p>Python provides two different structures for looping (or &lsquo;iterating&rsquo;) commands. If you know in advance how many times you want to loop – or you want to &lsquo;loop over&rsquo; a particular range of values (e.g. from <span class="integer">1</span> to <span class="integer">200</span>), then the simplest is a &lsquo;<span class="keyword">for</span> loop&rsquo; (or &lsquo;counting loop&rsquo;):</p>\n    <pre><span class="keyword">for</span> <span class="variable">count</span> <span class="keyword">in</span> <span class="function">range</span>(<span class="integer">1</span>, <span class="integer">201</span>, <span class="integer">1</span>):\n  <span class="function">forward</span>(<span class="variable">count</span> <span class="operator">//</span> <span class="integer">3</span>)\n  <span class="function">right</span>(<span class="integer">5</span>)\n  <span class="meta-comment">&hellip;</span></pre>\n    <p>(From the first <span class="keyword">for</span> loop example program in the Help menu.)</p>\n    <p>Again indenting is used to group together a number of commands.</p>\n    <p>In a <span class="keyword">for</span> loop, the &lsquo;loop variable&rsquo; (here <code class="variable">count</code>) is given in turn each of the values in the range (here <span class="integer">1</span>, <span class="integer">2</span>, <span class="integer">3</span>, &hellip;, <span class="integer">199</span>, <span class="integer">200</span>), and the loop instructions are performed each time. So in the example above, a spiral is drawn as the Turtle moves forward gradually more and more (as <code class="variable">count</code> increases).</p>\n    <p>The <span class="function">range</span> function specifies the values that the loop variable will take as follows:</p>\n    <pre><span class="function">range</span>(<span class="variable">firstValue</span>, <span class="variable">lastValue</span> <span class="operator">+</span> <span class="integer">1</span>, <span class="variable">increment</span>)</pre>\n    <p>The increment can be either <span class="integer">1</span> or <span class="integer">-1</span>. To count down through a loop, use an increment of <span class="integer">-1</span>.</p>\n    <p>If instead of looping a specific number of times, you want to loop through some sequence of commands while some condition is true (so that it stops when the condition becomes false), then you can use:</p>\n    <pre><span class="keyword">while</span> <span class="meta-comment">&lt;condition&gt;</span>:\n  <span class="meta-comment">&lt;sequence of commands&gt;</span></pre>\n    <p>A <span class="keyword">while</span> loop tests the <span class="meta-comment">&lt;condition&gt;</span> <i>before</i> executing the sequence of commands, and so will not execute them even once if <span class="meta-comment">&lt;condition&gt;</span> is false to start with. (For examples of the various loops, see the second set of example programs, &lsquo;Further commands and structures&rsquo;.)</p>\n'})]},su=a("div"),lu=e=>{su.innerHTML="",ou[e].forEach(e=>su.appendChild(e)),Array.from(su.querySelectorAll("code")).forEach(e=>{e.innerHTML=(e=>e)(e.innerHTML)})};lu(ni.language.get()),oi.on("language-changed",lu);var ru=su;const iu={BASIC:[a("div",{content:'    <h3>Arithmetical Operators</h3>\n    <p>The four main arithemetical operators are represented as:</p>\n    <table class="help-table">\n      <tr><td><code class="operator">+</code></td><td>addition (also used for string concatenation)</td></tr>\n      <tr><td><code class="operator">-</code></td><td>subtraction</td></tr>\n      <tr><td><code class="operator">*</code></td><td>multiplication</td></tr>\n      <tr><td><code class="operator">/</code></td><td>division</td></tr>\n    </table>\n    <p><code class="operator">/</code> is <i>integer</i> division, with the remainder discarded (e.g. <code><span class="integer">14</span> <span class="operator">/</span> <span class="integer">3</span> <span class="operator">=</span> <span class="integer">4</span></code>). Remainders are given by:</p>\n    <table class="help-table">\n      <tr><td><code class="operator">MOD</code></td><td>remainder</td></tr>\n    </table>\n    <p>(e.g. <code><span class="integer">14</span> <span class="operator">MOD</span> <span class="integer">3</span> <span class="operator">=</span> <span class="integer">2</span></code>; <code><span class="integer">67</span> <span class="operator">MOD</span> <span class="integer">10</span> <span class="operator">=</span> <span class="integer">7</span></code>).</p>\n    <h3>Doing Fractional (e.g. Decimal) Arithmetic</h3>\n    <p>The Turtle Machine is designed to handle memory simply and transparently for the learning of computer science, and so has no special type for representing fractional numbers; which is why <code class="operator">/</code> is integer division. But the Turtle System can handle fractional numbers by treating them explicitly as fractions, with both a numerator (above the line) and a denominator (below the line). A denominator of <code class="integer">1000000</code>, for instance, allows decimal arithmetic to 6 decimal places.</p>\n    <p>Thus to get the sine of <code class="integer">34.56</code> degrees to 6 decimal places, you could use <code><span class="variable">n%</span> <span class="operator">=</span> <span class="function">SIN</span>(<span class="integer">3456</span>, <span class="integer">100</span>, <span class="integer">1000000</span>)</code> – this makes <code class="variable">n%</code> equal to the sine of the angle <code><span class="integer">3456</span> <span class="operator">/</span> <span class="integer">100</span></code>, multiplied by <span class="integer">1000000</span> (and rounded). <code><span class="function">WRITELN</span>(<span class="function">QSTR</span>(<span class="variable">n%</span>, <span class="integer">1000000</span>, <span class="integer">6</span>))</code> will then print <code><span class="variable">n%</span> <span class="operator">/</span> <span class="integer">1000000</span></code> to six decimal places, i.e. <code class="integer">0.567269</code>. For more illustrations of this sort of decimal arithmetic, see the example program &lsquo;Mathematical functions&rsquo;.</p>\n    <h3>Boolean Operators</h3>\n    <p>The four main boolean operators are represented in the standard way:</p>\n    <table class="help-table">\n      <tr><td><code class="operator">NOT</code></td><td>negation</td></tr>\n      <tr><td><code class="operator">AND</code></td><td>conjunction</td></tr>\n      <tr><td><code class="operator">OR</code></td><td>disjunction (inclusive)</td></tr>\n      <tr><td><code class="operator">EOR</code></td><td>exclusive disjunction</td></tr>\n    </table>\n    <p>These are used between integers, where zero stands for false and any other number stands for true. <code class="constant">FALSE</code> stands for <span class="integer">0</span> and <code class="constant">TRUE</code> for <span class="integer">-1</span>. The Boolean operators can also be used in a bitwise fashion (i.e. each binary bit in the result is calculated as the result of the relevant boolean operation on the corresponding bits of the inputs, e.g. <code><span class="integer">21</span> <span class="operator">AND</span> <span class="integer">6</span> <span class="operator">=</span> <span class="integer">4</span></code> (binary <code><span class="integer">10101</span> <span class="operator">AND</span> <span class="integer">00110</span> <span class="operator">=</span> <span class="integer">100</span></code>); <code><span class="integer">21</span> <span class="operator">OR</span> <span class="integer">6</span> <span class="operator">=</span> <span class="integer">23</span></code> (<code class="integer">10111</code>); <code><span class="integer">21</span> <span class="operator">EOR</span> <span class="integer">6</span> <span class="operator">=</span> <span class="integer">19</span></code> (<code class="integer">10011</code>).</p>\n    <h3>Comparison Operators</h3>\n    <p>The six comparison operators are applicable to all types (with strings compared alphabetically):</p>\n    <table class="help-table">\n      <tr><td><code class="operator">=</code></td><td>equality</td></tr>\n      <tr><td><code class="operator">&lt;&gt;</code></td><td>inequality</td></tr>\n      <tr><td><code class="operator">&lt;</code></td><td>less than</td></tr>\n      <tr><td><code class="operator">&lt;=</code></td><td>less than or equal</td></tr>\n      <tr><td><code class="operator">&gt;</code></td><td>greater than</td></tr>\n      <tr><td><code class="operator">&gt;=</code></td><td>greater than or equal</td></tr>\n    </table>\n    <h3>Bracketing</h3>\n    <p>Complex expressions require brackets, e.g.</p>\n    <pre><span class="keyword">IF</span> (<span class="variable">n%</span> <span class="operator">&lt;</span> <span class="integer">0</span>) <span class="operator">OR</span> (<span class="variable">n%</span> <span class="operator">&gt;</span> <span class="integer">9</span>) <span class="keyword">THEN</span>\n  <span class="variable">n%</span> <span class="operator">=</span> ((<span class="variable">a%</span> <span class="operator">+</span> <span class="integer">1</span>) <span class="operator">*</span> (<span class="variable">b%</span> <span class="operator">+</span> <span class="integer">3</span>) <span class="operator">+</span> <span class="variable">c%</span>) <span class="operator">MOD</span> <span class="integer">10</span></pre>\n'})],Pascal:[a("div",{content:'    <h3>Arithmetical Operators</h3>\n    <p>The four main arithemetical operators are represented as:</p>\n    <table class="help-table">\n      <tr><td><code class="operator">+</code></td><td>addition (also used for string concatenation)</td></tr>\n      <tr><td><code class="operator">-</code></td><td>subtraction</td></tr>\n      <tr><td><code class="operator">*</code></td><td>multiplication</td></tr>\n      <tr><td><code class="operator">/</code></td><td>division</td></tr>\n    </table>\n    <p><code class="operator">/</code> is <i>integer</i> division, with the remainder discarded (e.g. <code><span class="integer">14</span> <span class="operator">/</span> <span class="integer">3</span> <span class="operator">=</span> <span class="integer">4</span></code>). Remainders are given by:</p>\n    <table class="help-table">\n      <tr><td><code class="operator">mod</code></td><td>remainder</td></tr>\n    </table>\n    <p>(e.g. <code><span class="integer">14</span> <span class="operator">mod</span> <span class="integer">3</span> <span class="operator">=</span> <span class="integer">2</span></code>; <code><span class="integer">67</span> <span class="operator">mod</span> <span class="integer">10</span> <span class="operator">=</span> <span class="integer">7</span></code>).</p>\n    <h3>Doing Fractional (e.g. Decimal) Arithmetic</h3>\n    <p>The Turtle Machine is designed to handle memory simply and transparently for the learning of computer science, and so has no special type for representing fractional numbers; which is why <code class="operator">/</code> is integer division. But the Turtle System can handle fractional numbers by treating them explicitly as fractions, with both a numerator (above the line) and a denominator (below the line). A denominator of <code class="integer">1000000</code>, for instance, allows decimal arithmetic to 6 decimal places.</p>\n    <p>Thus to get the sine of <code class="integer">34.56</code> degrees to six decimal places, you could use <code><span class="variable">n</span> <span class="operator">:=</span> <span class="function">sin</span>(<span class="integer">3456</span>, <span class="integer">100</span>, <span class="integer">1000000)</span></code> – this makes <code class="variable">n</code> equal to the sine of the angle <code><span class="integer">3456</span> <span class="operator">/</span> <span class="integer">100</span></code>, multiplied by <span class="integer">1000000</span> (and rounded). <code><span class="function">writeln</span>(<span class="function">qstr</span>(<span class="variable">n</span>, <span class="integer">1000000</span>, <span class="integer">6</span>))</code> will then print <code><span class="variable">n</span> <span class="operator">/</span> <span class="integer">1000000</span></code> to six decimal places, i.e. <code class="integer">0.567269</code>. For more illustrations of this sort of decimal arithmetic, see the example program &lsquo;Mathematical functions&rsquo;.</p>\n    <h3>Boolean Operators</h3>\n    <p>The four main boolean operators are represented in the standard way:</p>\n    <table class="help-table">\n      <tr><td><code class="operator">not</code></td><td>negation</td></tr>\n      <tr><td><code class="operator">and</code></td><td>conjunction</td></tr>\n      <tr><td><code class="operator">or</code></td><td>disjunction (inclusive)</td></tr>\n      <tr><td><code class="operator">xor</code></td><td>exclusive disjunction</td></tr>\n    </table>\n    <p>These can also be used between integers, in a <i>bitwise</i> fashion (i.e. each binary bit in the result is calculated as the result of the relevant boolean operation on the corresponding bits of the inputs), e.g. <code><span class="integer">21</span> <span class="operator">and</span> <span class="integer">6</span> <span class="operator">=</span> <span class="integer">4</span></code> (binary <code><span class="integer">10101</span> <span class="operator">and</span> <span class="integer">00110</span> <span class="operator">=</span> <span class="integer">100</span></code>); <code><span class="integer">21</span> <span class="operator">or</span> <span class="integer">6</span> <span class="operator">=</span> <span class="integer">23</span></code> (<code class="integer">10111</code>); <code><span class="integer">21</span> <span class="operator">xor</span> <span class="integer">6</span> <span class="operator">=</span> <span class="integer">19</span></code> (<code class="integer">10011</code>).</p>\n    <h3>Comparison Operators</h3>\n    <p>The six comparison operators are applicable to all types (with strings compared alphabetically):</p>\n    <table class="help-table">\n      <tr><td><code class="operator">=</code></td><td>equality</td></tr>\n      <tr><td><code class="operator">&lt;&gt;</code></td><td>inequality</td></tr>\n      <tr><td><code class="operator">&lt;</code></td><td>less than</td></tr>\n      <tr><td><code class="operator">&lt;=</code></td><td>less than or equal</td></tr>\n      <tr><td><code class="operator">&gt;</code></td><td>greater than</td></tr>\n      <tr><td><code class="operator">&gt;=</code></td><td>greater than or equal</td></tr>\n    </table>\n    <h3>Bracketing</h3>\n    <p>Complex expressions require brackets, e.g.</p>\n    <pre><span class="keyword">if</span> (<span class="variable">n</span> <span class="operator">&lt;</span> <span class="integer">0</span>) <span class="operator">or</span> (<span class="variable">n</span> <span class="operator">&gt;</span> <span class="integer">9</span>) <span class="keyword">then</span>\n  <span class="variable">n</span> <span class="operator">:=</span> ((<span class="variable">a</span> <span class="operator">+</span> <span class="integer">1</span>) <span class="operator">*</span> (<span class="variable">b</span> <span class="operator">+</span> <span class="integer">3</span>) <span class="operator">+</span> <span class="variable">c</span>) <span class="operator">mod</span> <span class="integer">10</span></pre>\n'})],Python:[a("div",{content:'    <h3>Arithmetical Operators</h3>\n    <p>The four main arithemetical operators are represented as:</p>\n    <table class="help-table">\n      <tr><td><code class="operator">+</code></td><td>addition (also used for string concatenation)</td></tr>\n      <tr><td><code class="operator">-</code></td><td>subtraction</td></tr>\n      <tr><td><code class="operator">*</code></td><td>multiplication</td></tr>\n      <tr><td><code class="operator">//</code></td><td>division</td></tr>\n    </table>\n    <p><code class="operator">//</code> is <i>integer</i> division, with the remainder discarded (e.g. <code><span class="integer">14</span> <span class="operator">//</span> <span class="integer">3</span> <span class="operator">=</span> <span class="integer">4</span></code>). Remainders are given by:</p>\n    <table class="help-table">\n      <tr><td><code class="operator">mod</code></td><td>remainder</td></tr>\n    </table>\n    <p>(e.g. <code><span class="integer">14</span> <span class="operator">mod</span> <span class="integer">3</span> <span class="operator">==</span> <span class="integer">2</span></code>; <code><span class="integer">67</span> <span class="operator">mod</span> <span class="integer">10</span> <span class="operator">==</span> <span class="integer">7</span></code>).</p>\n    <h3>Doing Fractional (e.g. Decimal) Arithmetic</h3>\n    <p>The Turtle Machine is designed to handle memory simply and transparently for the learning of computer science, and so has no special type for representing fractional numbers; which is why <code class="operator">//</code> is integer division. But the Turtle System can handle fractional numbers by treating them explicitly as fractions, with both a numerator (above the line) and a denominator (below the line). A denominator of <code class="integer">1000000</code>, for instance, allows decimal arithmetic to 6 decimal places.</p>\n    <p>Thus to get the sine of <code class="integer">34.56</code> degrees to six decimal places, you could use <code><span class="variable">n</span> <span class="operator">=</span> <span class="function">sin</span>(<span class="integer">3456</span>, <span class="integer">100</span>, <span class="integer">1000000)</span></code> – this makes <code class="variable">n</code> equal to the sine of the angle <code><span class="integer">3456</span> <span class="operator">/</span> <span class="integer">100</span></code>, multiplied by <span class="integer">1000000</span> (and rounded). <code><span class="function">writeln</span>(<span class="function">qstr</span>(<span class="variable">n</span>, <span class="integer">1000000</span>, <span class="integer">6</span>))</code> will then print <code><span class="variable">n</span> <span class="operator">/</span> <span class="integer">1000000</span></code> to six decimal places, i.e. <code class="integer">0.567269</code>. For more illustrations of this sort of decimal arithmetic, see the example program &lsquo;Mathematical functions&rsquo;.</p>\n    <h3>Boolean Operators</h3>\n    <p>The four main boolean operators are represented in the standard way:</p>\n    <table class="help-table">\n      <tr><td><code class="operator">not</code></td><td>negation</td></tr>\n      <tr><td><code class="operator">and</code></td><td>conjunction</td></tr>\n      <tr><td><code class="operator">or</code></td><td>disjunction (inclusive)</td></tr>\n      <tr><td><code class="operator">xor</code></td><td>exclusive disjunction</td></tr>\n    </table>\n    <p>These can also be used between integers, in a <i>bitwise</i> fashion (i.e. each binary bit in the result is calculated as the result of the relevant boolean operation on the corresponding bits of the inputs), e.g. <code><span class="integer">21</span> <span class="operator">and</span> <span class="integer">6</span> <span class="operator">=</span> <span class="integer">4</span></code> (binary <code><span class="integer">10101</span> <span class="operator">and</span> <span class="integer">00110</span> <span class="operator">=</span> <span class="integer">100</span></code>); <code><span class="integer">21</span> <span class="operator">or</span> <span class="integer">6</span> <span class="operator">=</span> <span class="integer">23</span></code> (<code class="integer">10111</code>); <code><span class="integer">21</span> <span class="operator">xor</span> <span class="integer">6</span> <span class="operator">=</span> <span class="integer">19</span></code> (<code class="integer">10011</code>).</p>\n    <h3>Comparison Operators</h3>\n    <p>The six comparison operators are applicable to all types (with strings compared alphabetically):</p>\n    <table class="help-table">\n      <tr><td><code class="operator">==</code></td><td>equality</td></tr>\n      <tr><td><code class="operator">&lt;&gt;</code></td><td>inequality</td></tr>\n      <tr><td><code class="operator">&lt;</code></td><td>less than</td></tr>\n      <tr><td><code class="operator">&lt;=</code></td><td>less than or equal</td></tr>\n      <tr><td><code class="operator">&gt;</code></td><td>greater than</td></tr>\n      <tr><td><code class="operator">&gt;=</code></td><td>greater than or equal</td></tr>\n    </table>\n    <h3>Bracketing</h3>\n    <p>Complex expressions require brackets, e.g.</p>\n    <pre><span class="keyword">if</span> (<span class="variable">n</span> <span class="operator">&lt;</span> <span class="integer">0</span>) <span class="operator">or</span> (<span class="variable">n</span> <span class="operator">&gt;</span> <span class="integer">9</span>):\n  <span class="variable">n</span> <span class="operator">=</span> ((<span class="variable">a</span> <span class="operator">+</span> <span class="integer">1</span>) <span class="operator">*</span> (<span class="variable">b</span> <span class="operator">+</span> <span class="integer">3</span>) <span class="operator">+</span> <span class="variable">c</span>) <span class="operator">mod</span> <span class="integer">10</span></pre>\n'})]},cu=a("div"),uu=e=>{cu.innerHTML="",iu[e].forEach(e=>cu.appendChild(e)),Array.from(cu.querySelectorAll("code")).forEach(e=>{e.innerHTML=(e=>e)(e.innerHTML)})};uu(ni.language.get()),oi.on("language-changed",uu);var du=cu;const pu={BASIC:[a("div",{content:'    <h3>User Input</h3>\n    <p>The facilities for user input – via keyboard or mouse – are designed to be as straightforward and comprehensible as possible, while operating strictly through simple processes that are consistent with the workings of the <i>Turtle Machine</i>.</p>\n    <h4>Mouse Position Detection</h4>\n    <p>The x- and y-coordinates of the mouse&rsquo;s current position can be found at any time by using the special global variables <code class="variable">?MOUSEX</code> and <code class="variable">?MOUSEY</code> – these do not require the mouse to be clicked.</p>\n    <h4>Mouse Click Detection</h4>\n    <p>When a mouse click is performed, the x- and y-coordinates of the click position are remembered by the variables <code class="variable">?CLICKX</code> and <code class="variable">?CLICKY</code>. However to identify the type of click, use the variable <code class="variable">?CLICK</code>, which is initially set to a value of <span class="integer">-1</span>, but after any click has taken place is set to a numerical value of <span class="integer">128</span> plus additions as follows:</p>\n    <table class="help-table">\n      <tr><td class="integer">1</td><td>if the click was with the left mouse button</td></tr>\n      <tr><td class="integer">2</td><td>if the click was with the right mouse button</td></tr>\n      <tr><td class="integer">4</td><td>if the click was with the middle mouse button</td></tr>\n      <tr><td class="integer">8</td><td>if the <kbd>shift</kbd> key was held down while clicking</td></tr>\n      <tr><td class="integer">16</td><td>if the <kbd>alt</kbd> key was held down while clicking</td></tr>\n      <tr><td class="integer">32</td><td>if the <kbd>ctrl</kbd> key was held down while clicking</td></tr>\n      <tr><td class="integer">64</td><td>if it was a double-click</td></tr>\n    </table>\n    <p>So if <code><span class="variable">n%</span> <span class="operator">=</span> <span class="variable">?CLICK</span></code> makes <code class="variable">n%</code> equal to <span class="integer">137</span> (<span class="integer">128</span> <span class="operator">+</span> <span class="integer">8</span> <span class="operator">+</span> <span class="integer">1</span>), this indicates that a left-click is currently under way, with the <kbd>shift</kbd> key held down. When the click event is finished, the <code class="variable">?CLICK</code> value will become negative. Thus if <code class="variable">?CLICK</code> returns a value of <span class="integer">-137</span>, this indicates that the last click event – now finished – was shift+left; the coordinate position of that click can still be identified – until the next click takes place – as (<code class="variable">?CLICKX</code>, <code class="variable">?CLICKY</code>). On a left-click, the variable <code class="variable">?LMOUSE</code> records the relevant value (as calculated above); likewise <code class="variable">?RMOUSE</code> and <code class="variable">?MMOUSE</code> record any right-click or middle-click. Again, these are all made negative when the click is released, so an empty loop like:</p>\n    <pre>  <span class="keyword">REPEAT</span>\n  <span class="keyword">UNTIL</span> <span class="variable">?LMOUSE</span> <span class="operator">&gt;</span> <span class="integer">0</span>;</pre>\n    <p>waits for a left-click with the mouse. Afterwards, <code class="variable">?CLICKX</code> and <code class="variable">?CLICKY</code> indicate where that click event occurred, and <code class="variable">?CLICK</code> can be queried using the bitwise <code class="operator">AND</code> operator to discover which special keys were pressed (e.g. <code><span class="keyword">IF</span> (<span class="function">ABS</span>(<span class="variable">?CLICK</span>) <span class="keyword">AND</span> <span class="integer">8</span>) <span class="operator">&gt;</span> <span class="integer">0</span></code> will test whether <kbd>shift</kbd> was being held down).</p>\n    <h4>Key Press Detection</h4>\n    <p>Detecting key presses (rather than typing in of characters) uses the variables <code class="variable">?KEY</code> and <code class="variable">?KSHIFT</code>, and the function <code class="function">KEYSTATUS</code>. <code class="variable">?KEY</code> gives the code of the last key to be pressed – these codes can be tested using the special keycode constants <code class="constant">\\ALT</code>, <code class="constant">\\BACKSPACE</code>, <code class="constant">\\CAPSLOCK</code>, <code class="constant">\\CTRL</code>, <code class="constant">\\DELETE</code>, <code class="constant">\\DOWN</code>, <code class="constant">\\END</code>, <code class="constant">\\ESCAPE</code>, <code class="constant">\\HOME</code>, <code class="constant">\\INSERT</code>, <code class="constant">\\LEFT</code>, <code class="constant">\\LWIN</code>, <code class="constant">\\PGDN</code>, <code class="constant">\\PGUP</code>, <code class="constant">\\RETURN</code>, <code class="constant">\\RIGHT</code>, <code class="constant">\\RWIN</code>, <code class="constant">\\SHIFT</code>, <code class="constant">\\SPACE</code>, <code class="constant">\\TAB</code>, and <code class="constant">\\UP</code>, as well as <code class="constant">\\a</code> to <code class="constant">\\z</code>, <code class="constant">\0</code> to <code class="constant">9</code>, <code class="constant">\\#</code>, <code class="constant">\\=</code> etc. Keys on the numeric keypad have codes <code class="constant">\\#0</code>, <code class="constant">\\#1</code> etc., and function keys <code class="constant">\\f1</code>, <code class="constant">\\f2</code> etc. All these stand for numeric values (e.g. <code class="constant">\\RETURN</code> is <span class="integer">13</span>, <code class="constant">\\ESCAPE</code> is <span class="integer">27</span>), but <code><span class="keyword">IF</span> <span class="variable">?KEY</span> <span class="operator">=</span> <span class="constant">\\RETURN</span></code> is easier to understand than <code><span class="keyword">IF</span> <span class="variable">?KEY</span> <span class="operator">=</span> <span class="integer">13</span></code>.</p>\n    <p>Like the mouse-click variables, <code class="variable">?KEY</code> becomes negative after the key is released, so <code><span class="keyword">REPEAT</span> : <span class="keyword">UNTIL</span> <span class="variable">?KEY</span> <span class="operator">=</span> <span class="operator">-</span><span class="constant">\\a</span></code> will wait until the &lsquo;A&rsquo; key has been released. If you want to identify the last key whether it is still pressed or not, use <code class="function">ABS</code> (e.g. <code><span class="keyword">IF</span> <span class="function">ABS</span>(<span class="variable">?KEY</span>) <span class="operator">=</span> <span class="constant">\\a</span> <span class="keyword">THEN</span> <span class="meta-comment">&hellip;</span></code>).</p>\n    <p>Whenever a key is pressed, the variable <code class="variable">?KSHIFT</code> gives its &lsquo;shift-status&rsquo;, calculated in the same way as <code class="variable">?CLICK</code> (i.e. <span class="integer">128</span> plus <span class="integer">8</span> if <kbd>shift</kbd> was down, <span class="integer">16</span> for <kbd>alt</kbd>, <span class="integer">32</span> for <kbd>ctrl</kbd>, and turning negative after the key is released). So to test if <kbd>ctrl</kbd> was down on the last keypress, use <code><span class="keyword">IF</span> (<span class="function">ABS</span>(<span class="variable">?KSHIFT</span>) <span class="operator">AND</span> <span class="integer">32</span>) <span class="operator">&gt;</span> <span class="integer">0</span></code>, with <code class="operator">AND</code> here acting as a bitwise boolean operator.</p>\n    <p>To recover the shift-status for the last press of the <kbd>X</kbd> key (say), use <code><span class="function">KEYSTATUS</span>(<span class="constant">\\x</span>)</code>, which can tell you (a) whether <kbd>shift</kbd> / <kbd>alt</kbd> / <kbd>ctrl</kbd> were down; (b) whether the <kbd>X</kbd> is still pressed (since <code class="function">KEYSTATUS</code> goes negative on release); (c) whether <kbd>X</kbd> has been pressed at all (since all of these input codes are set to <span class="integer">-1</span> initially, and can be reset to <span class="integer">-1</span> using <code><span class="function">RESET</span>(<span class="constant">\\x</span>)</code> etc.).</p>\n    <h4>Keyboard Input</h4>\n    <p>The system provides a <i>keyboard buffer</i> to store typed characters. Initially this is set to store up to 32 characters, but can be extended using e.g. <code><span class="function">KEYBUFFER</span>(<span class="integer">50</span>)</code>. To read from the buffer into a string, use e.g. <code><span class="variable">s$</span> <span class="operator">=</span> <span class="function">READ</span>(<span class="integer">10</span>)</code>, which reads up to 10 characters (depending on how many are in the buffer). <code><span class="function">KEYSTATUS</span>(<span class="constant">\\KEYBUFFER</span>)</code> returns the number of characters it contains, and <code><span class="function">RESET</span>(<span class="constant">\\KEYBUFFER</span>)</code> flushes it.</p>\n    <p><code><span class="variable">s$</span> <span class="operator">=</span> <span class="function">READLN</span></code> reads a line of text, waiting until the <kbd>return</kbd> key is pressed and then making <code class="variable">s$</code> equal to what has been typed into the buffer (discarding the <kbd>return</kbd> character).</p>\n    <p>The function <code class="function">DETECT</code> waits a given time for some input to be received (e.g. a specific key pressed), and returns <code class="constant">TRUE</code> when that input is received, or <code class="constant">FALSE</code> if it is not received in time. Thus <code><span class="keyword">IF</span> <span class="function">DETECT</span>(<span class="constant">\\ESCAPE</span>, <span class="integer">5000</span>) <span class="keyword">THEN</span> <span class="meta-comment">&hellip;</span> <span class="keyword">ELSE</span> <span class="meta-comment">&hellip;</span></code> gives 5 seconds to press the <kbd>escape</kbd> key (meanwhile continuing to collect any typed characters in the keyboard buffer). By default, text that goes into the keyboard buffer is also &lsquo;echoed&rsquo; to the console (below the Canvas), along with text that is output (using <code class="function">WRITE</code> or <code class="function">WRITELN</code>). This behaviour can be turned on and off with <code><span class="function">KEYECHO</span>(<span class="constant">TRUE</span>)</code> and <code><span class="function">KEYECHO</span>(<span class="constant">FALSE</span>)</code>.</p>\n'})],Pascal:[a("div",{content:'    <h3>User Input</h3>\n    <p>The facilities for user input – via keyboard or mouse – are designed to be as straightforward and comprehensible as possible, while operating strictly through simple processes that are consistent with the workings of the <i>Turtle Machine</i>.</p>\n    <h4>Mouse Position Detection</h4>\n    <p>The x- and y-coordinates of the mouse&rsquo;s current position can be found at any time by using the special global variables <code class="variable">?mousex</code> and <code class="variable">?mousey</code> – these do not require the mouse to be clicked.</p>\n    <h4>Mouse Click Detection</h4>\n    <p>When a mouse click is performed, the x- and y-coordinates of the click position are remembered by the variables <code class="variable">?clickx</code> and <code class="variable">?clicky</code>. However to identify the type of click, use the variable <code class="variable">?click</code>, which is initially set to a value of <span class="integer">-1</span>, but after any click has taken place is set to a numerical value of <span class="integer">128</span> plus additions as follows:</p>\n    <table class="help-table">\n      <tr><td class="integer">1</td><td>if the click was with the left mouse button</td></tr>\n      <tr><td class="integer">2</td><td>if the click was with the right mouse button</td></tr>\n      <tr><td class="integer">4</td><td>if the click was with the middle mouse button</td></tr>\n      <tr><td class="integer">8</td><td>if the shift key was held down while clicking</td></tr>\n      <tr><td class="integer">16</td><td>if the alt key was held down while clicking</td></tr>\n      <tr><td class="integer">32</td><td>if the ctrl key was held down while clicking</td></tr>\n      <tr><td class="integer">64</td><td>if it was a double-click</td></tr>\n    </table>\n    <p>So if <code><span class="variable">n</span> <span class="operator">:=</span> <span class="variable">?click</span></code> makes <code class="variable">n</code> equal to <span class="integer">137</span> (<span class="integer">128</span> <span class="operator">+</span> <span class="integer">8</span> <span class="operator">+</span> <span class="integer">1</span>), this indicates that a left-click is currently under way, with the <kbd>shift</kbd> key held down. When the click event is finished, the <code class="variable">?click</code> value will become negative. Thus if <code class="variable">?click</code> returns a value of <span class="integer">-137</span>, this indicates that the last click event – now finished – was shift+left; the coordinate position of that click can still be identified – until the next click takes place – as (<code class="variable">?clickx</code>, <code class="variable">?clicky</code>). On a left-click, the variable <code class="variable">?lmouse</code> records the relevant value (as calculated above); likewise <code class="variable">?rmouse</code> and <code class="variable">?mmouse</code> record any right-click or middle-click. Again, these are all made negative when the click is released, so an empty loop like:</p>\n    <pre>  <span class="keyword">repeat</span>\n  <span class="keyword">until</span> <span class="variable">?lmouse</span> <span class="operator">&gt;</span> <span class="integer">0</span>;</pre>\n    <p>waits for a left-click with the mouse. Afterwards, <code class="variable">?clickx</code> and <code class="variable">?clicky</code> indicate where that click event occurred, and <code class="variable">?click</code> can be queried using the bitwise <code class="operator">and</code> operator to discover which special keys were pressed (e.g. <code><span class="keyword">if</span> (<span class="function">abs</span>(<span class="variable">?click</span>) <span class="operator">and</span> <span class="integer">8</span>) <span class="operator">&gt;</span> <span class="integer">0</span></code> will test whether <kbd>shift</kbd> was being held down).</p>\n    <h4>Key Press Detection</h4>\n    <p>Detecting key presses (rather than typing in of characters) uses the variables <code class="variable">?key</code> and <code class="variable">?kshift</code>, and the function <code class="function">keystatus</code>. <code class="variable">?key</code> gives the code of the last key to be pressed – these codes can be tested using the special keycode constants <code class="constant">\\alt</code>, <code class="constant">\\backspace</code>, <code class="constant">\\capslock</code>, <code class="constant">\\ctrl</code>, <code class="constant">\\delete</code>, <code class="constant">\\down</code>, <code class="constant">\\end</code>, <code class="constant">\\escape</code>, <code class="constant">\\home</code>, <code class="constant">\\insert</code>, <code class="constant">\\left</code>, <code class="constant">\\lwin</code>, <code class="constant">\\pgdn</code>, <code class="constant">\\pgup</code>, <code class="constant">\\return</code>, <code class="constant">\\right</code>, <code class="constant">\\rwin</code>, <code class="constant">\\shift</code>, <code class="constant">\\space</code>, <code class="constant">\\tab</code>, and <code class="constant">\\up</code>, as well as <code class="constant">\\a</code> to <code class="constant">\\z</code>, <code class="constant">\\0</code> to <code class="constant">\\9</code>, <code class="constant">\\#</code>, <code class="constant">\\=</code> etc. Keys on the numeric keypad have codes <code class="constant">\\#0</code>, <code class="constant">\\#1</code> etc., and function keys <code class="constant">\\f1</code>, <code class="constant">\\f2</code> etc. All these stand for numeric values (e.g. <code class="constant">\\return</code> is <span class="integer">13</span>, <code class="constant">\\escape</code> is <span class="integer">27</span>), but <code><span class="keyword">if</span> <span class="variable">?key</span> <span class="operator">=</span> <span class="constant">\return</span></code> is easier to understand than <code><span class="keyword">if</span> <span class="variable">?key</span> <span class="operator">=</span> <span class="integer">13</span></code>.</p>\n    <p>Like the mouse-click functions, <code class="variable">?key</code> becomes negative after the key is released, so <code><span class="keyword">repeat</span> <span class="keyword">until</span> <span class="variable">?key</span> <span class="operator">=</span> <span class="operator">-</span><span class="constant">\\a</span></code> will wait until the <kbd>A</kbd> key has been released. If you want to identify the last key whether it is still pressed or not, use <code class="function">abs</code> (e.g. <code><span class="keyword">if</span> <span class="function">abs</span>(<span class="variable">?key</span>) <span class="operator">=</span> <span class="constant">\\a</span> <span class="keyword">then</span> <span class="meta-comment">&hellip;</span></code>).</p>\n    <p>Whenever a key is pressed, the variable <code class="variable">?kshift</code> gives its &lsquo;shift-status&rsquo;, calculated in the same way as <code class="variable">?click</code> (i.e. <span class="integer">128</span> plus <span class="integer">8</span> if <kbd>shift</kbd> was down, <span class="integer">16</span> for <kbd>alt</kbd>, <span class="integer">32</span> for <kbd>ctrl</kbd>, and turning negative after the key is released). So to test if <kbd>ctrl</kbd> was down on the last keypress, use <code><span class="keyword">if</span> (<span class="function">abs</span>(<span class="variable">?kshift</span>) <span class="operator">and</span> <span class="integer">32</span>) <span class="operator">&gt;</span> <span class="integer">0</span></code>, with <code class="operator">and</code> here acting as a bitwise boolean operator.</p>\n    <p>To recover the shift-status for the last press of the <kbd>X</kbd> key (say), use <code><span class="function">keystatus</span>(<span class="constant">\\x</span>)</code>, which can tell you (a) whether <kbd>shift</kbd> / <kbd>alt</kbd> / <kbd>ctrl</kbd> were down; (b) whether the <kbd>X</kbd> is still pressed (since <code class="function">keystatus</code> goes negative on release); (c) whether <kbd>X</kbd> has been pressed at all (since all of these input codes are set to <span class="integer">-1</span> initially, and can be reset to <span class="integer">-1</span> using <code><span class="function">reset</span>(<span class="constant">\\x</span>)</code> etc.).</p>\n    <h4>Keyboard Input</h4>\n    <p>The system provides a <i>keyboard buffer</i> to store typed characters. Initially this is set to store up to 32 characters, but can be extended using e.g. <code><span class="function">keybuffer</span>(<span class="integer">50</span>)</code>. To read from the buffer into a string, use e.g. <code><span class="variable">s</span> <span class="operator">:=</span> <span class="function">read</span>(<span class="integer">10</span>)</code>, which reads up to 10 characters (depending on how many are in the buffer). <code><span class="function">keystatus</span>(<span class="constant">\\keybuffer</span>)</code> returns the number of characters it contains, and <code><span class="function">reset</span>(<span class="constant">\\keybuffer</span>)</code> flushes it.</p>\n    <p><code><span class="variable">s</span> <span class="operator">:=</span> <span class="function">readln</span></code> reads a line of text, waiting until the <kbd>return</kbd> key is pressed and then making <code class="variable">s</code> equal to what has been typed into the buffer (discarding the <kbd>return</kbd> character).</p>\n    <p>The function <code class="function">detect</code> waits a given time for some input to be received (e.g. a specific key pressed), and returns <code class="constant">true</code> when that input is received, or <code class="constant">false</code> if it is not received in time. Thus <code><span class="keyword">if</span> <span class="function">detect</span>(<span class="constant">\\escape</span>, <span class="integer">5000</span>) <span class="keyword">then</span> <span class="meta-comment">&hellip;</span> <span class="keyword">else</span> <span class="meta-comment">&hellip;</span></code> gives 5 seconds to press the <kbd>escape</kbd> key (meanwhile continuing to collect any typed characters in the keyboard buffer). By default, text that goes into the keyboard buffer is also &lsquo;echoed&rsquo; to the console (below the Canvas), along with text that is output (using <code class="function">write</code> or <code class="function">writeln</code>). This behaviour can be turned on and off with <code><span class="function">keyecho</span>(<span class="constant">true</span>)</code> and <code><span class="function">keyecho</span>(<span class="constant">false</span>)</code>.</p>\n'})],Python:[a("div",{content:'    <h3>User Input</h3>\n    <p>The facilities for user input – via keyboard or mouse – are designed to be as straightforward and comprehensible as possible, while operating strictly through simple processes that are consistent with the workings of the <i>Turtle Machine</i>.</p>\n    <h4>Mouse Position Detection</h4>\n    <p>The x- and y-coordinates of the mouse&rsquo;s current position can be found at any time by using the special global variables <code class="variable">?mousex</code> and <code class="variable">?mousey</code> – these do not require the mouse to be clicked.</p>\n    <h4>Mouse Click Detection</h4>\n    <p>When a mouse click is performed, the x- and y-coordinates of the click position are remembered by the variables <code class="variables">?clickx</code> and <code class="variables">?clicky</code>. However to identify the type of click, use the variable <code class="variable">?click</code>, which is initially set to a value of <span class="integer">-1</span>, but after any click has taken place is set to a numerical value of <span class="integer">128</span> plus additions as follows:</p>\n    <table class="help-table">\n      <tr><td class="integer">1</td><td>if the click was with the left mouse button</td></tr>\n      <tr><td class="integer">2</td><td>if the click was with the right mouse button</td></tr>\n      <tr><td class="integer">4</td><td>if the click was with the middle mouse button</td></tr>\n      <tr><td class="integer">8</td><td>if the shift key was held down while clicking</td></tr>\n      <tr><td class="integer">16</td><td>if the alt key was held down while clicking</td></tr>\n      <tr><td class="integer">32</td><td>if the ctrl key was held down while clicking</td></tr>\n      <tr><td class="integer">64</td><td>if it was a double-click</td></tr>\n    </table>\n    <p>So if <code><span class="variable">n</span> <span class="operator">=</span> <span class="function">?click</span></code> makes <code class="variable">n</code> equal to <span class="integer">137</span> (<span class="integer">128</span> <span class="operator">+</span> <span class="integer">8</span> <span class="operator">+</span> <span class="integer">1</span>), this indicates that a left-click is currently under way, with the <kbd>shift</kbd> key held down. When the click event is finished, the <code class="variable">?click</code> variable will become negative. Thus if <code class="variable">?click</code> returns a value of <span class="integer">-137</span>, this indicates that the last click event – now finished – was shift+left; the coordinate position of that click can still be identified – until the next click takes place – as (<code class="variable">?clickx</code>, <code class="variable">?clicky</code>). On a left-click, the variable <code class="variable">?lmouse</code> records the relevant value (as calculated above); likewise <code class="variable">?rmouse</code> and <code class="variable">?mmouse</code> record any right-click or middle-click. Again, these are all made negative when the click is released, so an empty loop like:</p>\n    <pre>  <span class="keyword">while</span> <span class="operator">not</span>(<span class="variable">?lmouse</span> <span class="operator">&gt;</span> <span class="integer">0</span>):\n    <span class="keyword">pass</span>  <span class="meta-comment">{ this statement does nothing! }</span></pre>\n    <p>waits for a left-click with the mouse. Afterwards, <code class="variable">?clickx</code> and <code class="variable">?clicky</code> indicate where that click event occurred, and <code class="variable">?click</code> can be queried using the bitwise <code class="operator">and</code> operator to discover which special keys were pressed (e.g. <code><span class="keyword">if</span> (<span class="function">abs</span>(<span class="click">?click</span>) <span class="operator">and</span> <span class="integer">8</span>) <span class="operator">&gt;</span> <span class="integer">0</span></code> will test whether <kbd>shift</kbd> was being held down).</p>\n    <h4>Key Press Detection</h4>\n    <p>Detecting key presses (rather than typing in of characters) uses the variables <code class="variable">?key</code> and <code class="variable">?kshift</code>, and the function <code class="function">keystatus</code>. <code class="variable">?key</code> gives the code of the last key to be pressed – these codes can be tested using the special keycode constants <code class="constant">\\alt</code>, <code class="constant">\\backspace</code>, <code class="constant">\\capslock</code>, <code class="constant">\\ctrl</code>, <code class="constant">\\delete</code>, <code class="constant">\\down</code>, <code class="constant">\\end</code>, <code class="constant">\\escape</code>, <code class="constant">\\home</code>, <code class="constant">\\insert</code>, <code class="constant">\\left</code>, <code class="constant">\\lwin</code>, <code class="constant">\\pgdn</code>, <code class="constant">\\pgup</code>, <code class="constant">\return</code>, <code class="constant">\right</code>, <code class="constant">\\rwin</code>, <code class="constant">\\shift</code>, <code class="constant">\\space</code>, <code class="constant">\\tab</code>, and <code class="constant">\\up</code>, as well as <code class="constant">\\a</code> to <code class="constant">\\z</code>, <code class="constant">\\0</code> to <code class="constant">\\9</code>, <code class="constant">\\#</code>, <code class="constant">\\=</code> etc. Keys on the numeric keypad have codes <code class="constant">\\#0</code>, <code class="constant">\\#1</code> etc., and function keys <code class="constant">\\f1</code>, <code class="constant">\\f2</code> etc. All these stand for numeric values (e.g. <code class="constant">\\return</code> is <span class="integer">13</span>, <code class="constant">\\escape</code> is <span class="integer">27</span>), but <code><span class="keyword">if</span> <span class="variable">?key</span> <span class="operator">=</span> <span class="constant">\return</span></code> is easier to understand than <code><span class="keyword">if</span> <span class="variable">?key</span> <span class="operator">=</span> <span class="integer">13</span></code>.</p>\n    <p>Like the mouse-click variables, <code class="variable">?key</code> becomes negative after the key is released, so <code><span class="keyword">while</span> <span class="operator">not</span>(<span class="variable">?key</span> <span class="operator">=</span> <span class="operator">-</span><span class="constant">\\a</span>): <span class="keyword">pass</span></code> will wait until the <kbd>A</kbd> key has been released. If you want to identify the last key, whether it is still pressed or not, use <code class="function">abs</code> (e.g. <code><span class="keyword">if</span> <span class="function">abs</span>(<span class="variable">?key</span>) <span class="operator">=</span> <span class="constant">\\a</span>: <span class="meta-comment">&hellip;</span></code>).</p>\n    <p>Whenever a key is pressed, the variable <code class="variable">?kshift</code> gives its &lsquo;shift-status&rsquo;, calculated in the same way as <code class="variable">?click</code> (i.e. <span class="integer">128</span> plus <span class="integer">8</span> if <kbd>shift</kbd> was down, <span class="integer">16</span> for <kbd>alt</kbd>, <span class="integer">32</span> for <kbd>ctrl</kbd>, and turning negative after the key is released). So to test if <kbd>ctrl</kbd> was down on the last keypress, use <code><span class="keyword">if</span> (<span class="function">abs</span>(<span class="variable">?kshift</span>) <span class="operator">and</span> <span class="integer">32</span>) <span class="operator">&gt;</span> <span class="integer">0</span></code>, with <code class="operator">and</code> here acting as a bitwise boolean operator.</p>\n    <p>To recover the shift-status for the last press of the <kbd>X</kbd> key (say), use <code><span class="function">keystatus</span>(<span class="constant">\\x</span>)</code>, which can tell you (a) whether <kbd>shift</kbd> / <kbd>alt</kbd> / <kbd>ctrl</kbd> were down; (b) whether the <kbd>X</kbd> is still pressed (since <code class="function">keystatus</code> goes negative on release); (c) whether <kbd>X</kbd> has been pressed at all (since all of these input codes are set to <span class="integer">-1</span> initially, and can be reset to <span class="integer">-1</span> using <code><span class="function">reset</span>(<span class="constant">\\x</span>)</code> etc.).</p>\n    <h4>Keyboard Input</h4>\n    <p>The system provides a <i>keyboard buffer</i> to store typed characters. Initially this is set to store up to 32 characters, but can be extended using e.g. <code><span class="function">keybuffer</span>(<span class="integer">50</span>)</code>. To read from the buffer into a string, use e.g. <code><span class="variable">s</span> <span class="operator">=</span> <span class="function">read</span>(<span class="integer">10</span>)</code>, which reads up to 10 characters (depending on how many are in the buffer). <code><span class="function">keystatus</span>(<span class="constant">\\keybuffer</span>)</code> returns the number of characters it contains, and <code><span class="function">reset</span>(<span class="constant">\\keybuffer</span>)</code> flushes it.</p>\n    <p><code><span class="variable">s</span> <span class="operator">=</span> <span class="function">readln</span></code> reads a line of text, waiting until the <kbd>return</kbd> key is pressed and then making <code class="variable">s</code> equal to what has been typed into the buffer (discarding the <kbd>return</kbd> character).</p>\n    <p>The function <code class="function">detect</code> waits a given time for some input to be received (e.g. a specific key pressed), and returns <code class="constant">True</code> when that input is received, or <code class="constant">False</code> if it is not received in time. Thus <code><span class="keyword">if</span> <span class="function">detect</span>(<span class="constant">\\escape</span>, <span class="integer">5000</span>): <span class="meta-comment">&hellip;</span> <span class="keyword">else</span>: <span class="meta-comment">&hellip;</span></code> gives 5 seconds to press the <kbd>escape</kbd> key (meanwhile continuing to collect any typed characters in the keyboard buffer). By default, text that goes into the keyboard buffer is also &lsquo;echoed&rsquo; to the console (below the Canvas), along with text that is output (using <code class="function">write</code> or <code class="function">writeln</code>). This behaviour can be turned on and off with <code><span class="function">keyecho</span>(<span class="constant">True</span>)</code> and <code><span class="function">keyecho</span>(<span class="constant">False</span>)</code>.</p>\n'})]},mu=a("div"),gu=e=>{mu.innerHTML="",pu[e].forEach(e=>mu.appendChild(e)),Array.from(mu.querySelectorAll("code")).forEach(e=>{e.innerHTML=(e=>e)(e.innerHTML)})};gu(ni.language.get()),oi.on("language-changed",gu);var hu=mu,yu=a("div",{content:"constants"});const vu=[a("h3",{content:"The Online Turtle System"}),a("p",{content:"This is an online version of the downloadable <i>Turtle System</i>. The interface is comparatively streamlined, and does not provide the complete functionality of its downloadable counterpart. Advanced features of the <i>Turtle Machine</i> (PCode trace and memory watch) have not been implemented, and the compilers cannot handle arrays. Any program you write using arrays must be compiled in the downloadable system; though if you save it there as an Export/Upload file (TGX), it can still be run here."}),a("p",{content:"At present, online compilers are available only for <i>Turtle BASIC</i> and <i>Turtle Pascal</i>. This means that <i>Turtle Python</i> files can be run (if they have already been compiled), but cannot be edited."}),a("p",{content:"The PROGAM area on the left of the Home page contains features for opening and saving Turtle programs and editing program text, as well as tabs showing the usage and PCode compilation data (available in the downloadable <i>Turtle System</i> when Power User Mode is enabled). The MACHINE area on the right contains a tab for setting various runtime options, and the Canvas, Console, and Textual output for your programs. Under the memory tab you can also inspect the machine’s memory (available in the downloadable <i>Turtle System</i>, together with much fuller information, when Power User Mode is enabled). The various tabs in the Help page duplicate the information available in the downloadable system under the two QuickHelp tabs."}),a("p",{content:"The downloadable <i>Turtle System</i> currently exists in two versions: the stable version 11, and the more powerful but still in development version 12. The underlying virtual machine for these two versions is slightly different (the latter supporting strings as arrays, multi-dimensional arrays, and file handling), and consequently a program compiled in one version will not necessary run as intended (or at all) in the other. In due course version 11 (and its underlying machine) will be phased out, but for the time being the <i>Online Turtle System</i> supports both machines. You can switch between these using the drop-down menu next to the language menu above. Note that the online compilers only compile to the version 12 machine, and consequently that if you edit your program online, it will automatically be converted to the new version."})];var xu=a("div",{content:vu});const fu=[a("h3",{content:"The HTML5 Canvas API"}),a("p",{content:'The <i>Online Turtle System</i> uses the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">HTML5 Canvas API</a> for rendering the <i>Turtle Graphics</i> output of your programs. Because of the inherent nature of this API, it has not been possible to maintain complete consistency in the visual output of your programs between the downloadable and online systems. The following unavoidable differences remain:'}),a("ul",{content:[a("li",{content:'<b>Anti-aliasing</b> The HTML5 Canvas API makes its images appear smoother at the edges using a technique called "anti-aliasing". This means, for example, that when you draw a red blot on the Canvas, the pixels immediately surrounding that blot will be filled in using a semi-transparent red of the same shade. The downloadable <i>Turtle System</i> does not do this, giving your shapes sharper and more visibly "pixelated" edges. The most likely practical effect this difference will make to your programs concerns animations. To give the appearance of a red ball moving against a white background, for example, you need to draw a red blot, pause for a moment, then draw a white blot on top of it (to "blot it out"), immediately drawing another red blot in a slightly different position. To achieve this effect in the <i>Online Turtle System</i>, the white blot needs to be slightly <i>larger</i> than the red blot. If it is not, the semi-transparent red pixels around the edges of your red ball will not be blotted out, and you will see a kind of "vapour trail" as the ball moves across the screen.'}),a("li",{content:'<b>Line drawing</b> A Canvas coordinate corresponds to the top left corner of a square pixel. A horizontal or vertical line from one coordinate to another is thus conceptually centered <i>in between</i> two pixels. If the thickness of the line is even, this causes no difficulty, as the same number of pixels can be filled in on either side. If the thickness of the line is odd, however, it is less obvious what should be done. The downloadable <i>Turtle System</i> fills in an extra pixel either to the right of or below the coordinate line, meaning that horizontal and vertical lines of odd-numbered thickness are centred half a pixel to the right or below their even-numbered counterparts. The HTML5 Canvas API, however, keeps lines of odd-numbered thickness exactly centred, giving the appearance of "half" pixels on either side using anti-aliasing (i.e. an extra pixel is filled in on <i>both</i> sides, but using a semi-transparent colour). At the default (very high) resolution, this will not make any noticeable difference to your programs. At lower resolutions, however, where each pixel is a visible square on the Canvas, the difference can be quite striking. To mitigate this, the <i>Online Turtle System</i> artificially doubles the resolution of the Canvas when it is set to anything below 60 in either dimension (this setting can be changed or turned off entirely in the options tab). The effect of this is to eliminate any lines of odd-numbered thickness, since the actual output thickness will always be multiplied by 2. For an illustration of the problem this is designed to solve, you may like to disable this option, and then run the <i>Snake (classic game)</i> example program.'}),a("li",{content:"<b>Text underlining</b> The HTML5 Canvas API does not support underlined text. Consequently attempts to print underlined text to the Canvas in the <i>Online Turtle System</i> will result in normal text being printed instead."})]})];var bu=a("div",{content:fu});var wu={language:i("tsx-help-tabs",[{label:"Commands",active:!0,content:[Jc]},{label:"Basics",active:!1,content:[au]},{label:"Structures",active:!1,content:[ru]},{label:"Operators",active:!1,content:[du]},{label:"User Input",active:!1,content:[hu]},{label:"Constants",active:!1,content:[yu]}]),system:i("tsx-help-tabs",[{label:"About",active:!0,content:[xu]},{label:"Versions",active:!1,content:[bu]}])};t(228),t(226);document.body.parentElement.classList.add("tsx-browser");const Tu=document.getElementById("tsx");switch(Tu.getAttribute("data-page")){case"about":Tu.classList.add("tsx-system"),Tu.classList.add("tsx-help"),Tu.appendChild(ii(!1,!0)),Tu.appendChild(wu.system);break;case"help":Tu.classList.add("tsx-system"),Tu.classList.add("tsx-help"),Tu.appendChild(ii(!1,!0)),Tu.appendChild(wu.languages);break;default:Tu.classList.add("tsx-system"),Tu.appendChild(i("tsx-top-tabs",[{label:"Program",active:!0,content:[ii(!0,!0),Li(!0)]},{label:"Machine",active:!1,content:[$i,_c(!0)]}]))}},function(e,n,t){(e.exports=t(1)(!1)).push([e.i,".tsx-help {\n  flex-direction: column;\n  padding: 4px; }\n  .tsx-help h3 {\n    border-bottom: 2px solid #282828; }\n  .tsx-help h4 {\n    font-size: 1em;\n    margin-bottom: .75em; }\n  .tsx-help pre {\n    background: #f8f8f8;\n    border: 1px solid #ebebeb;\n    padding: 4px 8px;\n    margin: 0 0 .75em; }\n  .tsx-help table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-bottom: .75em; }\n    .tsx-help table td {\n      border: 1px solid #ebebeb;\n      padding: 4px; }\n\n.tsx-browser .tsx-help {\n  height: auto;\n  max-width: 800px; }\n",""])},function(e,n,t){var a=t(225);"string"==typeof a&&(a=[[e.i,a,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(a,o);a.locals&&(e.exports=a.locals)},function(e,n,t){(e.exports=t(1)(!1)).push([e.i,".tsx-system {\n  box-sizing: border-box;\n  display: flex;\n  background: #282828;\n  font-family: helvetica, arial, sans-serif;\n  font-size: 16px;\n  line-height: 1; }\n  .tsx-system *, .tsx-system *::before, .tsx-system *::after {\n    box-sizing: border-box; }\n  .tsx-system input, .tsx-system select, .tsx-system button {\n    font: inherit;\n    height: 2em;\n    padding: 4px; }\n  .tsx-system input, .tsx-system select {\n    border: 1px solid silver; }\n  .tsx-system button {\n    background: #159d6b;\n    border: 0;\n    padding: 4px 8px;\n    cursor: pointer;\n    color: #fff;\n    text-align: center;\n    transition: background .3s; }\n    .tsx-system button:hover {\n      background: #0f704c; }\n\n.tsx-browser .tsx-system {\n  height: 700px;\n  max-width: 1024px;\n  margin: 0 auto; }\n\n.tsx-electron, .tsx-electron body {\n  margin: 0;\n  height: 100%; }\n\n.tsx-electron .tsx-system {\n  height: 100%; }\n",""])},function(e,n,t){var a=t(227);"string"==typeof a&&(a=[[e.i,a,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(a,o);a.locals&&(e.exports=a.locals)},function(e,n,t){(e.exports=t(1)(!1)).push([e.i,".tsx-console {\n  border: 1px solid silver;\n  margin: 4px 0 0;\n  padding: 4px;\n  font-family: consolas, monospace;\n  flex: 1;\n  overflow: auto; }\n",""])},function(e,n,t){var a=t(229);"string"==typeof a&&(a=[[e.i,a,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(a,o);a.locals&&(e.exports=a.locals)},function(e,n,t){(e.exports=t(1)(!1)).push([e.i,".tsx-canvas {\n  border: 1px solid silver;\n  display: block;\n  width: 502px;\n  height: 502px; }\n",""])},function(e,n,t){var a=t(231);"string"==typeof a&&(a=[[e.i,a,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(a,o);a.locals&&(e.exports=a.locals)},function(e,n,t){(e.exports=t(1)(!1)).push([e.i,".tsx-code {\n  background: #fff;\n  border: 1px solid silver;\n  position: relative;\n  overflow: auto;\n  height: 100%;\n  font-family: consolas, monospace;\n  line-height: 1.5; }\n  .tsx-code textarea, .tsx-code ol, .tsx-code pre {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    padding: 0 .5em 0 3em;\n    margin: 0;\n    overflow: auto;\n    font: inherit; }\n  .tsx-code textarea {\n    background: transparent;\n    border: 0;\n    outline: 0;\n    resize: none;\n    opacity: .4;\n    z-index: 1; }\n  .tsx-code ol, .tsx-code pre {\n    z-index: 2;\n    pointer-events: none; }\n  .tsx-code ol {\n    list-style: none;\n    counter-reset: li; }\n    .tsx-code ol li:before {\n      display: block;\n      color: lightgray;\n      background: #fff;\n      content: counter(li);\n      counter-increment: li;\n      width: 3em;\n      margin-left: -3em;\n      padding-right: .5em;\n      text-align: right; }\n  .tsx-code code {\n    font: inherit; }\n",""])},function(e,n,t){var a=t(233);"string"==typeof a&&(a=[[e.i,a,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(a,o);a.locals&&(e.exports=a.locals)},function(e,n,t){(e.exports=t(1)(!1)).push([e.i,"code .tsx-comment {\n  color: gray; }\n\ncode .tsx-string {\n  color: seagreen; }\n\ncode .tsx-operator {\n  color: steelblue; }\n\ncode .tsx-integer {\n  color: peru; }\n\ncode .tsx-keyword {\n  color: firebrick;\n  font-weight: bold; }\n\ncode .tsx-command, code .tsx-custom {\n  color: purple; }\n\ncode .tsx-turtle, code .tsx-variable {\n  font-weight: bold; }\n\ncode .tsx-constant {\n  color: steelblue; }\n\ncode .tsx-keycode {\n  color: steelblue; }\n\ncode .tsx-query {\n  font-weight: bold; }\n\ncode .tsx-unterminated-comment,\ncode .tsx-unterminated-string,\ncode .tsx-unterminated-integer,\ncode .tsx-bad-hexadecimal,\ncode .tsx-illegal {\n  background: pink; }\n",""])},function(e,n,t){var a=t(235);"string"==typeof a&&(a=[[e.i,a,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(a,o);a.locals&&(e.exports=a.locals)},function(e,n,t){(e.exports=t(1)(!1)).push([e.i,".tsx-controls {\n  display: flex;\n  justify-content: flex-end;\n  align-items: baseline;\n  background: #fff;\n  padding: 4px;\n  margin-bottom: 4px; }\n  .tsx-controls input {\n    flex: 1;\n    text-align: center; }\n  .tsx-controls input:not(:last-child), .tsx-controls select:not(:last-child), .tsx-controls button:not(:last-child) {\n    margin-right: 4px; }\n  .tsx-controls .tsx-run-halt-button {\n    flex-basis: 4em; }\n  .tsx-controls .tsx-play-pause-button {\n    flex-basis: 2em; }\n  .tsx-controls dl {\n    flex: 1;\n    display: flex;\n    justify-content: flex-end;\n    margin: 0; }\n    .tsx-controls dl dd, .tsx-controls dl dt {\n      margin: 0;\n      padding: .5em;\n      text-align: center; }\n    .tsx-controls dl dt {\n      font-weight: bold; }\n    .tsx-controls dl dd {\n      background: #ebebeb; }\n      .tsx-controls dl dd.tsx-turtxy {\n        width: 4em; }\n      .tsx-controls dl dd.tsx-turtd {\n        width: 2.5em; }\n      .tsx-controls dl dd.tsx-turttc {\n        width: 2em; }\n",""])},function(e,n,t){var a=t(237);"string"==typeof a&&(a=[[e.i,a,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(a,o);a.locals&&(e.exports=a.locals)},function(e,n){e.exports=function(e){var n="undefined"!=typeof window&&window.location;if(!n)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var t=n.protocol+"//"+n.host,a=t+n.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,n){var o,s=n.trim().replace(/^"(.*)"$/,function(e,n){return n}).replace(/^'(.*)'$/,function(e,n){return n});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(s)?e:(o=0===s.indexOf("//")?s:0===s.indexOf("/")?t+s:a+s.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(e,n,t){(e.exports=t(1)(!1)).push([e.i,".tsx-tabs {\n  flex: 1;\n  display: flex;\n  flex-direction: column; }\n  .tsx-tabs > .tsx-tab-list {\n    display: flex; }\n    .tsx-tabs > .tsx-tab-list .tsx-tab {\n      display: block;\n      cursor: pointer; }\n      .tsx-tabs > .tsx-tab-list .tsx-tab.active:hover {\n        cursor: default; }\n  .tsx-tabs > .tsx-tab-panes {\n    flex: 1;\n    display: flex;\n    padding: 4px; }\n    .tsx-tabs > .tsx-tab-panes .tsx-tab-pane {\n      display: none;\n      flex: 1;\n      flex-direction: column; }\n      .tsx-tabs > .tsx-tab-panes .tsx-tab-pane.active {\n        display: flex; }\n\n.tsx-system-tabs > .tsx-tab-list .tsx-tab {\n  background: #ebebeb;\n  color: #282828;\n  padding: .625em .75em;\n  margin-right: .2em;\n  transform: translateY(0.125em);\n  transition: transform linear .1s; }\n  .tsx-system-tabs > .tsx-tab-list .tsx-tab:hover, .tsx-system-tabs > .tsx-tab-list .tsx-tab.active {\n    transform: translateY(0); }\n  .tsx-system-tabs > .tsx-tab-list .tsx-tab.active {\n    background: #fff; }\n\n.tsx-system-tabs > .tsx-tab-panes {\n  background: #fff;\n  z-index: 2; }\n\n.tsx-help-tabs {\n  flex-direction: row; }\n  .tsx-help-tabs > .tsx-tab-list {\n    flex-direction: column; }\n    .tsx-help-tabs > .tsx-tab-list .tsx-tab {\n      color: #fff;\n      padding: .75em .5em;\n      min-width: 8em; }\n      .tsx-help-tabs > .tsx-tab-list .tsx-tab:hover {\n        background: #5b5b5b; }\n      .tsx-help-tabs > .tsx-tab-list .tsx-tab.active {\n        color: #282828;\n        background: #fff; }\n  .tsx-help-tabs > .tsx-tab-panes {\n    background: #fff;\n    padding: 8px 16px; }\n    .tsx-help-tabs > .tsx-tab-panes .tsx-tab-pane {\n      margin: 0 auto;\n      max-width: 600px;\n      line-height: 1.5; }\n      .tsx-help-tabs > .tsx-tab-panes .tsx-tab-pane h3 {\n        margin: 0 0 .75em;\n        font-size: 1em; }\n      .tsx-help-tabs > .tsx-tab-panes .tsx-tab-pane p {\n        margin: 0 0 .75em; }\n        .tsx-help-tabs > .tsx-tab-panes .tsx-tab-pane p:last-child {\n          margin-bottom: 0; }\n\n.tsx-top-tabs > .tsx-tab-list .tsx-tab {\n  flex: 1;\n  padding: 1em;\n  background: #5b5b5b;\n  color: #fff; }\n  .tsx-top-tabs > .tsx-tab-list .tsx-tab:hover {\n    background: #424242; }\n  .tsx-top-tabs > .tsx-tab-list .tsx-tab.active {\n    background: #282828; }\n\n.tsx-top-tabs > .tsx-tab-panes {\n  padding: 4px; }\n\n@media (min-width: 1024px) {\n  .tsx-top-tabs > .tsx-tab-list {\n    display: none; }\n  .tsx-top-tabs > .tsx-tab-panes > .tsx-tab-pane {\n    display: flex; }\n    .tsx-top-tabs > .tsx-tab-panes > .tsx-tab-pane:first-child {\n      margin-right: 4px; } }\n\n.tsx-electron .tsx-help-tabs > .tsx-tab-panes {\n  overflow: auto; }\n",""])},function(e,n,t){var a=t(240);"string"==typeof a&&(a=[[e.i,a,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(0)(a,o);a.locals&&(e.exports=a.locals)}]);